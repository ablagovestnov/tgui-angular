(self.webpackChunktguiangular=self.webpackChunktguiangular||[]).push([[4123],{"./projects/tgui/src/lib/components/feedback/circular-progress/circular-progress.component.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAud3JhcHBlciB7CiAgICAgIHN0cm9rZTogdmFyKC0tdGd1aS0tbGlua19jb2xvcik7CiAgICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7CiAgICB9CiAg!./projects/tgui/src/lib/components/feedback/circular-progress/circular-progress.component.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"\n    .wrapper {\n      stroke: var(--tgui--link_color);\n      transform: rotate(-90deg);\n    }\n  ",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/tgui/src/lib/components/feedback/circular-progress/story/circular-progress.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Playground:()=>Playground,ProgressValues:()=>ProgressValues,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>circular_progress_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),circular_progress_component=__webpack_require__("./projects/tgui/src/lib/components/feedback/circular-progress/circular-progress.component.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAud3JhcHBlciB7CiAgICAgIHN0cm9rZTogdmFyKC0tdGd1aS0tbGlua19jb2xvcik7CiAgICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7CiAgICB9CiAg!./projects/tgui/src/lib/components/feedback/circular-progress/circular-progress.component.ts"),circular_progress_component_default=__webpack_require__.n(circular_progress_component),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common_module_CBrzkrmd=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-CBrzkrmd.mjs");let CircularProgressComponent=class CircularProgressComponent{size=(0,core.input)("medium");progress=(0,core.input)(0);circleAttrs=(0,core.computed)((()=>function getCircleAttributes(size){switch(size){case"large":return{size:56,strokeWidth:4,radius:18};case"medium":return{size:36,strokeWidth:3,radius:14};case"small":return{size:28,strokeWidth:3,radius:10};default:return}}(this.size())));circleSize=(0,core.computed)((()=>(this.circleAttrs()?.size||0)/2));circumference=(0,core.computed)((()=>{const radius=this.circleAttrs()?.radius||0;return 2*Math.PI*radius}));dashOffset=(0,core.computed)((()=>this.circumference()*((100-this.progress())/100)));static propDecorators={size:[{type:core.Input,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}],progress:[{type:core.Input,args:[{isSignal:!0,alias:"progress",required:!1,transform:void 0}]}]}};CircularProgressComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"tgui-circular-progress",standalone:!0,imports:[common_module_CBrzkrmd.MD],template:'\n    <svg\n      *ngIf="circleAttrs()"\n      class="wrapper"\n      [attr.width]="circleAttrs()?.size"\n      [attr.height]="circleAttrs()?.size"\n      fill="none"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n\n        <circle\n        [attr.cx]="circleSize()"\n        [attr.cy]="circleSize()"\n        [attr.r]="circleAttrs()?.radius"\n        stroke-opacity=".1"\n        [attr.stroke-width]="circleAttrs()?.strokeWidth"\n        fill="none"\n      />\n      <circle\n        fill="none"\n        [attr.cx]="circleSize()"\n        [attr.cy]="circleSize()"\n        [attr.r]="circleAttrs()?.radius"\n        [attr.stroke-width]="circleAttrs()?.strokeWidth"\n        stroke-linecap="round"\n        [attr.stroke-dasharray]="circumference()"\n        [attr.stroke-dashoffset]="circumference() * ((100 - progress()) / 100)"\n      />\n    </svg>\n  ',encapsulation:core.ViewEncapsulation.Emulated,changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[circular_progress_component_default()]})],CircularProgressComponent);const circular_progress_stories={title:"Feedback/CircularProgress",component:CircularProgressComponent,decorators:[(0,dist.moduleMetadata)({imports:[CircularProgressComponent]})],argTypes:{size:{control:{type:"select"},options:["small","medium","large"],description:"Size of the circular progress component",defaultValue:"medium"},progress:{control:{type:"range",min:0,max:100,step:1},description:"The current progress percentage (0-100)",defaultValue:0}}},Playground={render:args=>({props:args,template:'\n      <div style="display: flex; align-items: center; justify-content: center; padding: 20px;">\n        <tgui-circular-progress \n          [size]="size" \n          [progress]="progress"\n        ></tgui-circular-progress>\n      </div>\n    '}),args:{size:"medium",progress:65}},Sizes={render:args=>({props:args,template:'\n      <div style="display: flex; align-items: center; gap: 20px; padding: 20px;">\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Small</p>\n          <tgui-circular-progress size="small" [progress]="progress"></tgui-circular-progress>\n        </div>\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Medium</p>\n          <tgui-circular-progress size="medium" [progress]="progress"></tgui-circular-progress>\n        </div>\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Large</p>\n          <tgui-circular-progress size="large" [progress]="progress"></tgui-circular-progress>\n        </div>\n      </div>\n    '}),args:{progress:65}},ProgressValues={render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 20px; padding: 20px;">\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="0"></tgui-circular-progress>\n          <span>0%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="25"></tgui-circular-progress>\n          <span>25%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="50"></tgui-circular-progress>\n          <span>50%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="75"></tgui-circular-progress>\n          <span>75%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="100"></tgui-circular-progress>\n          <span>100%</span>\n        </div>\n      </div>\n    '})},__namedExportsOrder=["Playground","Sizes","ProgressValues"];Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; align-items: center; justify-content: center; padding: 20px;">\n        <tgui-circular-progress \n          [size]="size" \n          [progress]="progress"\n        ></tgui-circular-progress>\n      </div>\n    `\n  }),\n  args: {\n    size: \'medium\',\n    progress: 65\n  }\n}',...Playground.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; align-items: center; gap: 20px; padding: 20px;">\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Small</p>\n          <tgui-circular-progress size="small" [progress]="progress"></tgui-circular-progress>\n        </div>\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Medium</p>\n          <tgui-circular-progress size="medium" [progress]="progress"></tgui-circular-progress>\n        </div>\n        <div>\n          <p style="margin-bottom: 10px; text-align: center;">Large</p>\n          <tgui-circular-progress size="large" [progress]="progress"></tgui-circular-progress>\n        </div>\n      </div>\n    `\n  }),\n  args: {\n    progress: 65\n  }\n}',...Sizes.parameters?.docs?.source}}},ProgressValues.parameters={...ProgressValues.parameters,docs:{...ProgressValues.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 20px; padding: 20px;">\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="0"></tgui-circular-progress>\n          <span>0%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="25"></tgui-circular-progress>\n          <span>25%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="50"></tgui-circular-progress>\n          <span>50%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="75"></tgui-circular-progress>\n          <span>75%</span>\n        </div>\n        <div style="display: flex; align-items: center; gap: 10px;">\n          <tgui-circular-progress size="medium" [progress]="100"></tgui-circular-progress>\n          <span>100%</span>\n        </div>\n      </div>\n    `\n  })\n}',...ProgressValues.parameters?.docs?.source}}}}}]);