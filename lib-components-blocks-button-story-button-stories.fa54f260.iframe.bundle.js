"use strict";(self.webpackChunktguiangular=self.webpackChunktguiangular||[]).push([[4734],{"./projects/tgui/src/lib/components/blocks/button/story/button.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,IconSizes:()=>IconSizes,Modes:()=>Modes,RippleEffects:()=>RippleEffects,Sizes:()=>Sizes,States:()=>States,WithDynamicIcon:()=>WithDynamicIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Blocks/Button",component:__webpack_require__("./projects/tgui/src/lib/components/blocks/button/button.component.ts").Q,tags:["autodocs"],decorators:[],argTypes:{size:{options:["s","m","l"],control:{type:"select"},description:"Button size",defaultValue:"m"},mode:{options:["filled","bezeled","plain","gray","outline","white"],control:{type:"select"},description:"Button display variant",defaultValue:"filled"},stretched:{control:"boolean",description:"Stretch button to full width",defaultValue:!1},loading:{control:"boolean",description:"Show loading indicator",defaultValue:!1},disabled:{control:"boolean",description:"Disabled state",defaultValue:!1},interactiveAnimation:{options:["opacity","background"],control:{type:"radio"},description:"Type of interaction animation",defaultValue:"background"},icon:{control:"text",description:"Button icon"}}},Basic={args:{size:"m",mode:"filled",stretched:!1,loading:!1,disabled:!1,interactiveAnimation:"background"},render:args=>({props:args,template:'\n      <tgui-button \n        [size]="size" \n        [mode]="mode" \n        [stretched]="stretched" \n        [loading]="loading" \n        [disabled]="disabled"\n        [interactiveAnimation]="interactiveAnimation"\n      >\n        Action\n      </tgui-button>\n    '})},WithDynamicIcon={args:{size:"s",mode:"filled",icon:"tgui-icon20-copy"},render:args=>({props:args,template:'\n      <div style="display: flex; gap: 16px;">\n        <tgui-button \n          [size]="size" \n          [mode]="mode"\n          [icon]="icon"\n        >\n          Create channel\n        </tgui-button>\n      </div>\n    '})},IconSizes={render:()=>({template:'\n      <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center;">\n        <tgui-button size="s" [icon]="\'tgui-icon20-copy\'">Small</tgui-button>\n        <tgui-button size="m" [icon]="\'tgui-icon24-person-remove\'">Medium</tgui-button>\n        <tgui-button size="l" [icon]="\'tgui-icon28-close\'">Large</tgui-button>\n      </div>\n    '})},Modes={render:()=>({template:'\n      <div style="display: flex; flex-wrap: wrap; gap: 16px;">\n        <tgui-button mode="filled">Filled</tgui-button>\n        <tgui-button mode="bezeled">Bezeled</tgui-button>\n        <tgui-button mode="plain">Plain</tgui-button>\n        <tgui-button mode="gray">Gray</tgui-button>\n        <tgui-button mode="outline">Outline</tgui-button>\n        <tgui-button mode="white">White</tgui-button>\n      </div>\n    '})},Sizes={render:()=>({template:'\n      <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center;">\n        <tgui-button size="s">Small</tgui-button>\n        <tgui-button size="m">Medium</tgui-button>\n        <tgui-button size="l">Large</tgui-button>\n      </div>\n    '})},States={render:()=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 16px;">\n        <div>\n          <tgui-button [loading]="true">Loading</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]="true">Disabled</tgui-button>\n        </div>\n        <div style="width: 100%;">\n          <tgui-button [stretched]="true">Stretched button</tgui-button>\n        </div>\n      </div>\n    '})},RippleEffects={render:()=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 16px;">\n        <div style="margin-bottom: 8px;">\n          <strong>Ripple effect (background)</strong>\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\n        </div>\n        <div style="display: flex; gap: 16px;">\n          <tgui-button interactiveAnimation="background" mode="filled">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation="background" mode="bezeled">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation="background" mode="plain">Background Ripple</tgui-button>\n        </div>\n        \n        <div style="margin: 16px 0 8px 0;">\n          <strong>Without ripple (opacity)</strong>\n        </div>\n        <div style="display: flex; gap: 16px;">\n          <tgui-button interactiveAnimation="opacity" mode="filled">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation="opacity" mode="bezeled">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation="opacity" mode="plain">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    '})},__namedExportsOrder=["Basic","WithDynamicIcon","IconSizes","Modes","Sizes","States","RippleEffects"];Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'{\n  args: {\n    size: \'m\',\n    mode: \'filled\',\n    stretched: false,\n    loading: false,\n    disabled: false,\n    interactiveAnimation: \'background\'\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-button \n        [size]="size" \n        [mode]="mode" \n        [stretched]="stretched" \n        [loading]="loading" \n        [disabled]="disabled"\n        [interactiveAnimation]="interactiveAnimation"\n      >\n        Action\n      </tgui-button>\n    `\n  })\n}',...Basic.parameters?.docs?.source}}},WithDynamicIcon.parameters={...WithDynamicIcon.parameters,docs:{...WithDynamicIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    size: \'s\',\n    mode: \'filled\',\n    icon: \'tgui-icon20-copy\'\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; gap: 16px;">\n        <tgui-button \n          [size]="size" \n          [mode]="mode"\n          [icon]="icon"\n        >\n          Create channel\n        </tgui-button>\n      </div>\n    `\n  })\n}',...WithDynamicIcon.parameters?.docs?.source}}},IconSizes.parameters={...IconSizes.parameters,docs:{...IconSizes.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center;">\n        <tgui-button size="s" [icon]="\'tgui-icon20-copy\'">Small</tgui-button>\n        <tgui-button size="m" [icon]="\'tgui-icon24-person-remove\'">Medium</tgui-button>\n        <tgui-button size="l" [icon]="\'tgui-icon28-close\'">Large</tgui-button>\n      </div>\n    `\n  })\n}',...IconSizes.parameters?.docs?.source}}},Modes.parameters={...Modes.parameters,docs:{...Modes.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-wrap: wrap; gap: 16px;">\n        <tgui-button mode="filled">Filled</tgui-button>\n        <tgui-button mode="bezeled">Bezeled</tgui-button>\n        <tgui-button mode="plain">Plain</tgui-button>\n        <tgui-button mode="gray">Gray</tgui-button>\n        <tgui-button mode="outline">Outline</tgui-button>\n        <tgui-button mode="white">White</tgui-button>\n      </div>\n    `\n  })\n}',...Modes.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center;">\n        <tgui-button size="s">Small</tgui-button>\n        <tgui-button size="m">Medium</tgui-button>\n        <tgui-button size="l">Large</tgui-button>\n      </div>\n    `\n  })\n}',...Sizes.parameters?.docs?.source}}},States.parameters={...States.parameters,docs:{...States.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 16px;">\n        <div>\n          <tgui-button [loading]="true">Loading</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]="true">Disabled</tgui-button>\n        </div>\n        <div style="width: 100%;">\n          <tgui-button [stretched]="true">Stretched button</tgui-button>\n        </div>\n      </div>\n    `\n  })\n}',...States.parameters?.docs?.source}}},RippleEffects.parameters={...RippleEffects.parameters,docs:{...RippleEffects.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 16px;">\n        <div style="margin-bottom: 8px;">\n          <strong>Ripple effect (background)</strong>\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\n        </div>\n        <div style="display: flex; gap: 16px;">\n          <tgui-button interactiveAnimation="background" mode="filled">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation="background" mode="bezeled">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation="background" mode="plain">Background Ripple</tgui-button>\n        </div>\n        \n        <div style="margin: 16px 0 8px 0;">\n          <strong>Without ripple (opacity)</strong>\n        </div>\n        <div style="display: flex; gap: 16px;">\n          <tgui-button interactiveAnimation="opacity" mode="filled">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation="opacity" mode="bezeled">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation="opacity" mode="plain">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    `\n  })\n}',...RippleEffects.parameters?.docs?.source}}}}}]);