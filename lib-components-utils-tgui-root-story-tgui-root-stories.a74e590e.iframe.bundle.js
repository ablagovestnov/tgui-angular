"use strict";(self.webpackChunktguiangular=self.webpackChunktguiangular||[]).push([[4005],{"./projects/tgui/src/lib/components/utils/tgui-root/story/tgui-root.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasePlatform:()=>BasePlatform,DarkTheme:()=>DarkTheme,DarkiOS:()=>DarkiOS,Default:()=>Default,IOSPlatform:()=>IOSPlatform,LightTheme:()=>LightTheme,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_tgui_root_component__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts"),_services__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/tgui/src/lib/services/theme.service.ts"),_services__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/tgui/src/lib/services/platform.service.ts");let DemoControlsComponent=class DemoControlsComponent{themeService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_1__.F);platformService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_2__.f);currentTheme=this.themeService.appearance;currentPlatform=this.platformService.platform;toggleTheme(){const newTheme="light"===this.currentTheme()?"dark":"light";this.themeService.setTheme(newTheme,!1)}togglePlatform(){const newPlatform="ios"===this.currentPlatform()?"base":"ios";this.platformService.setPlatform(newPlatform)}getHostClasses(){return`tgui-theme-${this.currentTheme()}, tgui-platform-${this.currentPlatform()}`}};DemoControlsComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_3__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"tgui-demo-controls",standalone:!0,template:'\n    <div style="padding: 20px; display: flex; gap: 12px; flex-wrap: wrap; align-items: center;">\n      <button \n        (click)="toggleTheme()" \n        style="padding: 8px 16px; border-radius: 8px; border: 1px solid var(--tgui--outline); background: var(--tgui--button_color); color: var(--tgui--button_text_color);">\n        Toggle Theme ({{ currentTheme() }})\n      </button>\n      \n      <button \n        (click)="togglePlatform()" \n        style="padding: 8px 16px; border-radius: 8px; border: 1px solid var(--tgui--outline); background: var(--tgui--button_color); color: var(--tgui--button_text_color);">\n        Toggle Platform ({{ currentPlatform() }})\n      </button>\n      \n      <div style="color: var(--tgui--text_color); font-size: 14px;">\n        Host classes: {{ getHostClasses() }}\n      </div>\n    </div>\n    \n    <div style="padding: 20px; background: var(--tgui--secondary_bg_color); border-radius: 12px; margin: 20px; color: var(--tgui--text_color);">\n      <h3 style="margin: 0 0 12px 0; color: var(--tgui--text_color);">Demo Content</h3>\n      <p style="margin: 0; color: var(--tgui--hint_color);">\n        This content adapts to the current theme and platform. \n        The background, text colors, and other CSS variables change automatically.\n      </p>\n    </div>\n  '})],DemoControlsComponent);const __WEBPACK_DEFAULT_EXPORT__={title:"Utils/TGUIRoot",component:_tgui_root_component__WEBPACK_IMPORTED_MODULE_4__.I,tags:["autodocs"],argTypes:{platform:{options:["base","ios"],control:{type:"select"},description:"Platform type that affects styling"},appearance:{options:["light","dark"],control:{type:"select"},description:"Theme appearance"},followSystemTheme:{control:"boolean",description:"Whether to follow system theme changes"}},parameters:{docs:{description:{component:"\nThe TGUIRoot component is the foundation component for TGUI applications. It:\n\n- Applies theme classes (tgui-theme-light/dark) to enable proper CSS variable cascading\n- Applies platform classes (tgui-platform-ios/base) for platform-specific styling  \n- Provides a portal container for overlays and modals\n- Automatically detects system theme and platform if not specified\n- Uses Angular Signals for reactive updates\n\n**Key improvements in this version:**\n- Host classes are now properly applied based on current theme and platform\n- Converted from @Input() to signal-based inputs for better reactivity\n- Uses computed() for host class calculation\n- Effects handle input changes automatically\n- Added background-color using --tgui--bg_color for proper theming\n        "}}}},Default={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{}},LightTheme={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{appearance:"light"}},DarkTheme={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{appearance:"dark"}},IOSPlatform={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{platform:"ios"}},BasePlatform={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{platform:"base"}},DarkiOS={render:args=>({props:args,template:'\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    ',moduleMetadata:{imports:[DemoControlsComponent]}}),args:{platform:"ios",appearance:"dark"}},__namedExportsOrder=["Default","LightTheme","DarkTheme","IOSPlatform","BasePlatform","DarkiOS"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {}\n}',...Default.parameters?.docs?.source}}},LightTheme.parameters={...LightTheme.parameters,docs:{...LightTheme.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {\n    appearance: \'light\'\n  }\n}',...LightTheme.parameters?.docs?.source}}},DarkTheme.parameters={...DarkTheme.parameters,docs:{...DarkTheme.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {\n    appearance: \'dark\'\n  }\n}',...DarkTheme.parameters?.docs?.source}}},IOSPlatform.parameters={...IOSPlatform.parameters,docs:{...IOSPlatform.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {\n    platform: \'ios\'\n  }\n}',...IOSPlatform.parameters?.docs?.source}}},BasePlatform.parameters={...BasePlatform.parameters,docs:{...BasePlatform.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {\n    platform: \'base\'\n  }\n}',...BasePlatform.parameters?.docs?.source}}},DarkiOS.parameters={...DarkiOS.parameters,docs:{...DarkiOS.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: args,\n    template: `\n      <tgui-root [platform]="platform" [appearance]="appearance" [followSystemTheme]="followSystemTheme">\n        <tgui-demo-controls></tgui-demo-controls>\n      </tgui-root>\n    `,\n    moduleMetadata: {\n      imports: [DemoControlsComponent]\n    }\n  }),\n  args: {\n    platform: \'ios\',\n    appearance: \'dark\'\n  }\n}',...DarkiOS.parameters?.docs?.source}}}}}]);