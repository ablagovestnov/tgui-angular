{
    "pipes": [],
    "interfaces": [
        {
            "name": "RippleDemoProps",
            "id": "interface-RippleDemoProps-d6ae6a912bd6a11d8c468b3ff0fc391aeaae91ccdbcc54c459a493535310a61ef79622b1e094aa99a74af7b7e94626831d3b5aa913f42355c6a9260ef9ffa6b3",
            "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { moduleMetadata, type Meta, type StoryObj } from '@storybook/angular';\nimport { RippleComponent } from '../ripple.component';\nimport { CommonModule } from '@angular/common';\nimport { RippleWave } from '@services/ripple.service';\n\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories\nconst meta: Meta<RippleComponent> = {\n  title: 'TGUI/Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<RippleComponent>;\n\ninterface RippleDemoProps {\n  waves: RippleWave[];\n  addRipple: (event: MouseEvent) => void;\n}\n\n// Демонстрационный компонент с симуляцией ripple-эффекта\nexport const Preview: Story = {\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Нажмите для демонстрации';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple компонент создает эффект волны при нажатии на интерактивный элемент.\n           Этот эффект автоматически используется в компоненте Button при значении interactiveAnimation=\"background\".</p>\n        <p>Ripple эффект отображается только на не-iOS платформах, так как не соответствует дизайн-гайдлайнам iOS.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n};\n\n// Описание использования\nexport const Usage: Story = {\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>Как использовать Ripple</h3>\n        <p>Ripple компонент обычно не используется напрямую в коде разработчика, \n        а интегрирован в кнопки и другие интерактивные элементы.</p>\n        \n        <h4>Пример использования в компоненте Button:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  С эффектом ripple\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>Компонент Ripple автоматически отображается только на не-iOS платформах и\n        когда для кнопки установлен параметр interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}; \n",
            "properties": [
                {
                    "name": "addRipple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "waves",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RippleWave[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RippleWave",
            "id": "interface-RippleWave-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224",
            "file": "projects/tgui/src/lib/core/services/ripple.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\nexport interface RippleWave {\n  x: number;\n  y: number;\n  date: number;\n  pointerId: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RippleService {\n  private RIPPLE_DELAY = 70;\n  private WAVE_LIVE = 225;\n\n  /**\n   * Map to track pointer delay timers by pointerId\n   */\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\n  \n  /**\n   * Add a new ripple wave effect at the specified coordinates\n   */\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\n    const dateNow = Date.now();\n    // Filter out expired waves\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\n\n    // Add the new wave\n    const newWaves = [\n      ...filteredWaves,\n      {\n        x,\n        y,\n        date: dateNow,\n        pointerId,\n      }\n    ];\n\n    // Clean up the timer for this pointerId\n    this.pointerDelayTimers.delete(pointerId);\n    \n    return newWaves;\n  }\n\n  /**\n   * Handle pointer down event\n   * @param event Pointer event\n   * @param wavesSignal Signal для управления волнами\n   */\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Set a timeout to create the ripple effect after a short delay\n    this.pointerDelayTimers.set(\n      event.pointerId,\n      setTimeout(() => {\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\n        wavesSignal.set(newWaves);\n        \n        // Clear the waves after they've completed their animation\n        setTimeout(() => {\n          wavesSignal.set([]);\n        }, this.WAVE_LIVE);\n      }, this.RIPPLE_DELAY)\n    );\n  }\n\n  /**\n   * Handle pointer cancel/up event\n   */\n  handlePointerCancel(pointerId: number): void {\n    const timer = this.pointerDelayTimers.get(pointerId);\n    if (timer) {\n      clearTimeout(timer);\n      this.pointerDelayTimers.delete(pointerId);\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pointerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ThemeParams",
            "id": "interface-ThemeParams-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/core/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "accent_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "button_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "button_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destructive_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "header_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hint_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "link_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "secondary_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "section_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "section_header_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subtitle_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WebApp",
            "id": "interface-WebApp-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/core/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "colorScheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "themeParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeParams",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "offEvent",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEvent",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "Window",
            "id": "interface-Window-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/core/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "Telegram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "PlatformService",
            "id": "injectable-PlatformService-da35e3f5d70773bebd38cfc6f0d2ff2568f4571fb10142b336d812ca0fbf66328ad848099bd4ccf896c4231162bded0a2e3640101a6ca1b19659ce440ebb8ca5",
            "file": "projects/tgui/src/lib/core/services/platform.service.ts",
            "properties": [
                {
                    "name": "_isIOSPlatform",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platform",
                    "defaultValue": "signal<PlatformType>('base')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyPlatformToDOM",
                    "args": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply platform class to DOM\n",
                    "description": "<p>Apply platform class to DOM</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "detectIOSFromUserAgent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the device is iOS based on user agent\n",
                    "description": "<p>Check if the device is iOS based on user agent</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectPlatform",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetect platform based on user agent\n",
                    "description": "<p>Detect platform based on user agent</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isIOS",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if current platform is iOS\nUses DOM class to determine platform, caches result for better performance\n",
                    "description": "<p>Checks if current platform is iOS\nUses DOM class to determine platform, caches result for better performance</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setPlatform",
                    "args": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet platform manually\n",
                    "description": "<p>Set platform manually</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, signal, inject } from '@angular/core';\nimport { TelegramService } from './telegram.service';\n\nexport type PlatformType = 'base' | 'ios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformService {\n  // Signal for platform that components can subscribe to\n  public platform = signal<PlatformType>('base');\n  \n  // Cached value for checking iOS platform\n  private _isIOSPlatform: boolean | null = null;\n\n  private document = inject(DOCUMENT);\n\n  constructor() {\n    this.detectPlatform();\n  }\n\n  /**\n   * Set platform manually\n   */\n  public setPlatform(platform: PlatformType): void {\n    this.platform.set(platform);\n    this.applyPlatformToDOM(platform);\n    // Update cached value\n    this._isIOSPlatform = platform === 'ios';\n  }\n  \n  /**\n   * Checks if current platform is iOS\n   * Uses DOM class to determine platform, caches result for better performance\n   */\n  public isIOS(): boolean {\n    // If value is already cached, return it\n    if (this._isIOSPlatform !== null) {\n      return this._isIOSPlatform;\n    }\n    \n    // Otherwise check for iOS class in DOM\n    if (this.document && this.document.documentElement) {\n      this._isIOSPlatform = this.document.documentElement.classList.contains('tgui-platform-ios');\n      return this._isIOSPlatform;\n    }\n    \n    // If unable to determine, return false\n    return false;\n  }\n\n  /**\n   * Detect platform based on user agent\n   */\n  private detectPlatform(): void {\n    const isIOS = this.detectIOSFromUserAgent();\n    const detectedPlatform: PlatformType = isIOS ? 'ios' : 'base';\n    \n    this.platform.set(detectedPlatform);\n    this.applyPlatformToDOM(detectedPlatform);\n    // Cache result\n    this._isIOSPlatform = isIOS;\n  }\n\n  /**\n   * Apply platform class to DOM\n   */\n  private applyPlatformToDOM(platform: PlatformType): void {\n    // Remove existing platform classes\n    this.document.documentElement.classList.remove('tgui-platform-base', 'tgui-platform-ios');\n    \n    // Add the appropriate platform class\n    this.document.documentElement.classList.add(`tgui-platform-${platform}`);\n  }\n\n  /**\n   * Check if the device is iOS based on user agent\n   */\n  private detectIOSFromUserAgent(): boolean {\n    if (typeof window === 'undefined' || !window.navigator) {\n      return false;\n    }\n\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    \n    return /iphone|ipad|ipod/.test(userAgent) || \n           (userAgent.includes('mac') && 'ontouchend' in document);\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PortalService",
            "id": "injectable-PortalService-8fece340023811fd532f9e283dd9aabe9f4a30f311083c08a175b1ec40a6a4d635359fd25c8032b053ebf36bac4bdee008b8e91cb5aed5ab062a2f9873233108",
            "file": "projects/tgui/src/lib/core/services/portal.service.ts",
            "properties": [
                {
                    "name": "hasPortalContainer",
                    "defaultValue": "computed(() => !!this.portalContainer())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "portalContainer",
                    "defaultValue": "this.portalContainerRef.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "portalContainerRef",
                    "defaultValue": "signal<ElementRef<HTMLElement> | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearPortalContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the portal container reference\nThis should be called when the container is destroyed\n",
                    "description": "<p>Clear the portal container reference\nThis should be called when the container is destroyed</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPortalContainerElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current portal container element\nReturns the native DOM element or null if not set\n",
                    "description": "<p>Get the current portal container element\nReturns the native DOM element or null if not set</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isPortalReady",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if portal container is ready for use\n",
                    "description": "<p>Check if portal container is ready for use</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setPortalContainer",
                    "args": [
                        {
                            "name": "elementRef",
                            "type": "ElementRef<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the portal container reference\nThis is typically called by the TGUIRootComponent\n",
                    "description": "<p>Set the portal container reference\nThis is typically called by the TGUIRootComponent</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "elementRef",
                            "type": "ElementRef<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service for managing portal container references\nProvides functionality for components to render content outside of their DOM hierarchy</p>\n",
            "rawdescription": "\n\nService for managing portal container references\nProvides functionality for components to render content outside of their DOM hierarchy\n",
            "sourceCode": "import { Injectable, ElementRef, signal, computed } from '@angular/core';\n\n/**\n * Service for managing portal container references\n * Provides functionality for components to render content outside of their DOM hierarchy\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PortalService {\n  // Signal to store the portal container reference\n  private readonly portalContainerRef = signal<ElementRef<HTMLElement> | null>(null);\n\n  // Public readonly signal for accessing the portal container\n  public readonly portalContainer = this.portalContainerRef.asReadonly();\n  \n  // Computed signal to check if portal container is available\n  public readonly hasPortalContainer = computed(() => !!this.portalContainer());\n  \n  constructor() {\n    console.log('PortalService initialized');\n  }\n  \n  /**\n   * Set the portal container reference\n   * This is typically called by the TGUIRootComponent\n   */\n  public setPortalContainer(elementRef: ElementRef<HTMLElement>): void {\n    if (!elementRef || !elementRef.nativeElement) {\n      console.error('Invalid portal container provided to PortalService');\n      return;\n    }\n    \n    console.log('Setting portal container:', elementRef.nativeElement);\n    this.portalContainerRef.set(elementRef);\n  }\n  \n  /**\n   * Clear the portal container reference\n   * This should be called when the container is destroyed\n   */\n  public clearPortalContainer(): void {\n    console.log('Clearing portal container reference');\n    this.portalContainerRef.set(null);\n  }\n  \n  /**\n   * Get the current portal container element\n   * Returns the native DOM element or null if not set\n   */\n  public getPortalContainerElement(): HTMLElement | null {\n    const container = this.portalContainer()?.nativeElement || null;\n    if (!container) {\n      console.warn('Portal container not available - make sure tgui-root component is properly set up');\n    }\n    return container;\n  }\n  \n  /**\n   * Check if portal container is ready for use\n   */\n  public isPortalReady(): boolean {\n    const isReady = !!this.getPortalContainerElement();\n    console.log('Portal ready status:', isReady);\n    return isReady;\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RippleService",
            "id": "injectable-RippleService-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224",
            "file": "projects/tgui/src/lib/core/services/ripple.service.ts",
            "properties": [
                {
                    "name": "pointerDelayTimers",
                    "defaultValue": "new Map<number, ReturnType<typeof setTimeout>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Map to track pointer delay timers by pointerId</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nMap to track pointer delay timers by pointerId\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RIPPLE_DELAY",
                    "defaultValue": "70",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "WAVE_LIVE",
                    "defaultValue": "225",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addWave",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentWaves",
                            "type": "RippleWave[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RippleWave[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a new ripple wave effect at the specified coordinates\n",
                    "description": "<p>Add a new ripple wave effect at the specified coordinates</p>\n",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentWaves",
                            "type": "RippleWave[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePointerCancel",
                    "args": [
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel/up event\n",
                    "description": "<p>Handle pointer cancel/up event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePointerDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wavesSignal",
                            "type": "ReturnType<<RippleWave[]>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer down event\n",
                    "description": "<p>Handle pointer down event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1082,
                                "end": 1087,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1076,
                                "end": 1081,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Pointer event</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1114,
                                "end": 1125,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "wavesSignal"
                            },
                            "type": "ReturnType<<RippleWave[]>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1108,
                                "end": 1113,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Signal для управления волнами</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\nexport interface RippleWave {\n  x: number;\n  y: number;\n  date: number;\n  pointerId: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RippleService {\n  private RIPPLE_DELAY = 70;\n  private WAVE_LIVE = 225;\n\n  /**\n   * Map to track pointer delay timers by pointerId\n   */\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\n  \n  /**\n   * Add a new ripple wave effect at the specified coordinates\n   */\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\n    const dateNow = Date.now();\n    // Filter out expired waves\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\n\n    // Add the new wave\n    const newWaves = [\n      ...filteredWaves,\n      {\n        x,\n        y,\n        date: dateNow,\n        pointerId,\n      }\n    ];\n\n    // Clean up the timer for this pointerId\n    this.pointerDelayTimers.delete(pointerId);\n    \n    return newWaves;\n  }\n\n  /**\n   * Handle pointer down event\n   * @param event Pointer event\n   * @param wavesSignal Signal для управления волнами\n   */\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Set a timeout to create the ripple effect after a short delay\n    this.pointerDelayTimers.set(\n      event.pointerId,\n      setTimeout(() => {\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\n        wavesSignal.set(newWaves);\n        \n        // Clear the waves after they've completed their animation\n        setTimeout(() => {\n          wavesSignal.set([]);\n        }, this.WAVE_LIVE);\n      }, this.RIPPLE_DELAY)\n    );\n  }\n\n  /**\n   * Handle pointer cancel/up event\n   */\n  handlePointerCancel(pointerId: number): void {\n    const timer = this.pointerDelayTimers.get(pointerId);\n    if (timer) {\n      clearTimeout(timer);\n      this.pointerDelayTimers.delete(pointerId);\n    }\n  }\n} ",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SystemThemeService",
            "id": "injectable-SystemThemeService-32d725856d384723c67d77cfd5cbdf9409920956d627a9250898400b24c2398d0f44be622b89aa1c1047e647022cc613a771a12e7a4e7ef06c771e55b366c079",
            "file": "projects/tgui/src/lib/core/utils/theme-helper.ts",
            "properties": [
                {
                    "name": "cleanup",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "this.themeSignal.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "themeSignal",
                    "defaultValue": "signal<AppearanceType>(this.getInitialTheme())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "disableSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "enableSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInitialTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "AppearanceType",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupThemeDetection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Angular service для использования системных тем\nИспользует сигналы для отслеживания изменений темы</p>\n",
            "rawdescription": "\n\nAngular service для использования системных тем\nИспользует сигналы для отслеживания изменений темы\n",
            "sourceCode": "import { Injectable, OnDestroy, inject, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { AppearanceType } from '@services/theme.service';\n\n/**\n * Apply the specified theme by adding the appropriate CSS class to the document's root element\n * @param theme The theme to apply ('light' or 'dark')\n */\nexport function applyTheme(theme: AppearanceType): void {\n  // Remove existing theme classes\n  document.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n  \n  // Add the appropriate theme class\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\n  console.log(`Theme applied: ${theme}, classes: ${document.documentElement.className}`);\n}\n\n/**\n * Setup system theme detection using prefers-color-scheme\n * @param callback Optional callback function that will be called when the theme changes\n * @returns A function to cleanup the listeners\n */\nexport function setupSystemThemeDetection(callback?: (theme: AppearanceType) => void): () => void {\n  if (typeof window === 'undefined') return () => {};\n  \n  const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n  \n  // Apply initial theme based on system preference\n  const initialTheme: AppearanceType = isDarkMode.matches ? 'dark' : 'light';\n  applyTheme(initialTheme);\n  callback?.(initialTheme);\n  \n  // Add listener for theme changes\n  const handleThemeChange = (event: MediaQueryListEvent) => {\n    const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n    applyTheme(newTheme);\n    callback?.(newTheme);\n  };\n  \n  isDarkMode.addEventListener('change', handleThemeChange);\n  \n  // Return cleanup function\n  return () => {\n    isDarkMode.removeEventListener('change', handleThemeChange);\n  };\n}\n\n/**\n * Angular service для использования системных тем\n * Использует сигналы для отслеживания изменений темы\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemThemeService implements OnDestroy {\n  // Signal для темы с начальным значением\n  private readonly themeSignal = signal<AppearanceType>(this.getInitialTheme());\n  \n  // Публичный readonly signal для доступа к теме\n  public readonly theme = this.themeSignal.asReadonly();\n  \n  private cleanup: (() => void) | null = null;\n  \n  constructor() {\n    this.setupThemeDetection();\n  }\n  \n  // Устанавливаем тему вручную\n  setTheme(theme: AppearanceType): void {\n    this.themeSignal.set(theme);\n    applyTheme(theme);\n  }\n  \n  // Включаем отслеживание системной темы\n  enableSystemTheme(): void {\n    this.cleanup && this.cleanup();\n    this.setupThemeDetection();\n  }\n  \n  // Отключаем отслеживание системной темы\n  disableSystemTheme(): void {\n    this.cleanup && this.cleanup();\n    this.cleanup = null;\n  }\n  \n  ngOnDestroy(): void {\n    this.cleanup && this.cleanup();\n  }\n  \n  private getInitialTheme(): AppearanceType {\n    if (typeof window === 'undefined') return 'light';\n    \n    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n    return isDarkMode.matches ? 'dark' : 'light';\n  }\n  \n  private setupThemeDetection(): void {\n    if (typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    // Устанавливаем начальную тему\n    const initialTheme: AppearanceType = mediaQuery.matches ? 'dark' : 'light';\n    this.themeSignal.set(initialTheme);\n    applyTheme(initialTheme);\n    \n    // Создаем обработчик события изменения медиа-запроса\n    const handleMediaQueryChange = (event: MediaQueryListEvent) => {\n      const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n      this.themeSignal.set(newTheme);\n      applyTheme(newTheme);\n    };\n    \n    // Добавляем слушатель события\n    mediaQuery.addEventListener('change', handleMediaQueryChange);\n    \n    // Функция очистки\n    this.cleanup = () => {\n      mediaQuery.removeEventListener('change', handleMediaQueryChange);\n    };\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 66
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TelegramService",
            "id": "injectable-TelegramService-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/core/services/telegram.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTelegramData",
                    "args": [],
                    "optional": false,
                    "returnType": "WebApp | undefined",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hexToRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "accessors": {
                "canUseDOM": {
                    "name": "canUseDOM",
                    "getSignature": {
                        "name": "canUseDOM",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 40
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TguiService",
            "id": "injectable-TguiService-96737dce57d4f75d15958abccfda47b625b0512a08b78bb321b63c6d59996c0beb002a99561d750a6dda7397e1a1077eccf2f839ec5d14c2eccbf43cf0127a3b",
            "file": "projects/tgui/src/lib/tgui.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TguiService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-ceb62116acf53b9e0624e341ff5267bd6624f0a2e5a3520fa390ded375d8525d1a1aab80cfbc16cc0330531f6e76d95b75411cb0323923d0631a796df6c75742",
            "file": "projects/tgui/src/lib/core/services/theme.service.ts",
            "properties": [
                {
                    "name": "appearance",
                    "defaultValue": "signal<AppearanceType>('light')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentTheme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppearanceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleThemeChange",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mediaQueryList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaQueryList | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "telegramService",
                    "defaultValue": "inject(TelegramService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "themeChangeListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "useSystemTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyThemeToDOM",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply theme class to DOM\n",
                    "description": "<p>Apply theme class to DOM</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cleanupListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClean up event listeners\n",
                    "description": "<p>Clean up event listeners</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetect and apply system theme\n",
                    "description": "<p>Detect and apply system theme</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "initializeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize the theme detection\n",
                    "description": "<p>Initialize the theme detection</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadGlobalStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad global CSS variables to make them available for all components\n",
                    "description": "<p>Load global CSS variables to make them available for all components</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "followSystem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the theme manually\n",
                    "description": "<p>Change the theme manually</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1119,
                                "end": 1124,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "theme"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1113,
                                "end": 1118,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The theme to set</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1154,
                                "end": 1166,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "followSystem"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1148,
                                "end": 1153,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>If true, will follow system theme changes after setting. Default false.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setupBrowserThemeDetection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetup browser theme detection using prefers-color-scheme\n",
                    "description": "<p>Setup browser theme detection using prefers-color-scheme</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupTheme",
                    "args": [
                        {
                            "name": "appearance",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "followSystem",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetup theme based on inputs and system preferences\n",
                    "description": "<p>Setup theme based on inputs and system preferences</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1808,
                                "end": 1818,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "appearance"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1802,
                                "end": 1807,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Appearance to use</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1849,
                                "end": 1861,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "followSystem"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1843,
                                "end": 1848,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether to follow system theme</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy, signal, inject, Renderer2, RendererFactory2 } from '@angular/core';\nimport { TelegramService } from './telegram.service';\n\nexport type AppearanceType = 'light' | 'dark';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService implements OnDestroy {\n  // Signal for appearance that components can subscribe to\n  public appearance = signal<AppearanceType>('light');\n  private themeChangeListener: (() => void) | null = null;\n  private mediaQueryList: MediaQueryList | null = null;\n  private handleThemeChange: ((event: MediaQueryListEvent) => void) | null = null;\n  private useSystemTheme = false;\n  private currentTheme: AppearanceType = 'light';\n  private renderer: Renderer2;\n\n  private telegramService = inject(TelegramService);\n  private document = inject(DOCUMENT);\n\n  constructor(rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this.initializeTheme();\n  }\n\n  ngOnDestroy(): void {\n    this.cleanupListeners();\n  }\n\n  /**\n   * Change the theme manually\n   * @param theme The theme to set\n   * @param followSystem If true, will follow system theme changes after setting. Default false.\n   */\n  public setTheme(theme: AppearanceType, followSystem = false): void {\n    console.log(`ThemeService.setTheme called: theme=${theme}, followSystem=${followSystem}`);\n    this.cleanupListeners();\n    this.appearance.set(theme);\n    this.applyThemeToDOM(theme);\n    \n    // If instructed to follow system theme, restore the detector\n    if (followSystem) {\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    } else {\n      this.useSystemTheme = false;\n    }\n  }\n\n  /**\n   * Setup theme based on inputs and system preferences\n   * @param appearance Appearance to use\n   * @param followSystem Whether to follow system theme\n   */\n  public setupTheme(appearance?: AppearanceType, followSystem: boolean = false): void {\n    this.cleanupListeners();\n    \n    if (followSystem) {\n      // Follow system theme\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    } else if (appearance) {\n      // Set specific theme\n      this.setTheme(appearance, false);\n    } else {\n      // If nothing specified, try to detect system theme\n      this.detectSystemTheme();\n    }\n  }\n\n  /**\n   * Detect and apply system theme\n   */\n  public detectSystemTheme(): void {\n    if (typeof window === 'undefined') {\n      // Use light theme by default\n      this.setTheme('light', false);\n      return;\n    }\n    \n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.setTheme(prefersDarkMode ? 'dark' : 'light', false);\n  }\n\n  /**\n   * Load global CSS variables to make them available for all components\n   */\n  public loadGlobalStyles(): void {\n    // Check if styles are already loaded\n    if (this.document.getElementById('tgui-variables-css')) {\n      return;\n    }\n    \n    const head = this.document.head;\n    const link = this.document.createElement('link');\n    \n    link.id = 'tgui-variables-css';\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    \n    // Add error handling\n    link.onerror = () => {\n      console.error('Failed to load TGUI variables CSS file. Theme functionality may be limited.');\n    };\n    \n    // In production builds, this will be replaced with the actual path\n    // The actual file is bundled with the library during build\n    link.href = 'assets/tgui/styles/variables.css';\n    \n    head.appendChild(link);\n  }\n\n  /**\n   * Initialize the theme detection\n   */\n  private initializeTheme(): void {\n    // First check Telegram API\n    const telegramData = this.telegramService.getTelegramData();\n    \n    if (telegramData) {\n      // Use Telegram theme\n      this.appearance.set(telegramData.colorScheme);\n      this.applyThemeToDOM(telegramData.colorScheme);\n      \n      // Set up listener for theme changes\n      this.themeChangeListener = () => {\n        const newTelegramData = this.telegramService.getTelegramData();\n        if (newTelegramData) {\n          this.appearance.set(newTelegramData.colorScheme);\n          this.applyThemeToDOM(newTelegramData.colorScheme);\n        }\n      };\n      \n      telegramData.onEvent('themeChanged', this.themeChangeListener);\n    } else {\n      // Use browser preference\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    }\n  }\n\n  /**\n   * Setup browser theme detection using prefers-color-scheme\n   */\n  private setupBrowserThemeDetection(): void {\n    if (typeof window === 'undefined') return;\n    \n    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n    this.mediaQueryList = isDarkMode;\n    \n    // Apply theme based on system preference only if following system theme\n    if (this.useSystemTheme) {\n      const theme: AppearanceType = isDarkMode.matches ? 'dark' : 'light';\n      this.appearance.set(theme);\n      this.applyThemeToDOM(theme);\n    }\n    \n    // Add listener for theme changes and store reference to the handler\n    this.handleThemeChange = (event: MediaQueryListEvent) => {\n      if (this.useSystemTheme) {\n        const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n        this.appearance.set(newTheme);\n        this.applyThemeToDOM(newTheme);\n      }\n    };\n    \n    isDarkMode.addEventListener('change', this.handleThemeChange);\n    \n    // Store reference for cleanup\n    this.mediaQueryList = isDarkMode;\n  }\n\n  /**\n   * Apply theme class to DOM\n   */\n  private applyThemeToDOM(theme: AppearanceType): void {\n    if (theme === this.currentTheme) return;\n    \n    // Remove existing theme classes\n    console.log(`Applying theme to DOM: ${theme}`);\n    this.renderer.removeClass(this.document.documentElement, `tgui-theme-${this.currentTheme}`);\n    \n    // Add the appropriate theme class\n    this.renderer.addClass(this.document.documentElement, `tgui-theme-${theme}`);\n    \n    // Update current theme\n    this.currentTheme = theme;\n    \n    console.log(`Current DOM classes after theme change: ${this.document.documentElement.className}`);\n  }\n\n  /**\n   * Clean up event listeners\n   */\n  private cleanupListeners(): void {\n    // Clean up Telegram listeners\n    const telegramData = this.telegramService.getTelegramData();\n    if (telegramData && this.themeChangeListener) {\n      telegramData.offEvent('themeChanged', this.themeChangeListener);\n      this.themeChangeListener = null;\n    }\n    \n    // Clean up media query listeners using stored reference\n    if (this.mediaQueryList && this.handleThemeChange) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n      this.mediaQueryList = null;\n      this.handleThemeChange = null;\n    }\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "PortalOutletDirective",
            "id": "directive-PortalOutletDirective-d36e49469da6ea55cc4971fb6c0104df06549fad2fa5a4b3dd18437538688d03dc2e678a42d1f6059b09b70f1dec2aaf747ca0dbde577c115be117d10aa04813",
            "file": "projects/tgui/src/lib/core/directives/portal-outlet.directive.ts",
            "type": "directive",
            "description": "<p>Directive that renders content into a portal container\nUse it to project content outside of its normal DOM hierarchy</p>\n",
            "rawdescription": "\n\nDirective that renders content into a portal container\nUse it to project content outside of its normal DOM hierarchy\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef, OnInit, OnDestroy, ElementRef, EmbeddedViewRef, inject, effect } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { PortalService } from '@services/portal.service';\n\n/**\n * Directive that renders content into a portal container\n * Use it to project content outside of its normal DOM hierarchy\n */\n@Directive({\n  selector: '[tguiPortalOutlet]',\n  standalone: true\n})\nexport class PortalOutletDirective implements OnInit, OnDestroy {\n  @Input() tguiPortalOutlet: TemplateRef<any> | null = null;\n  \n  private destroy$ = new Subject<void>();\n  \n  private viewContainerRef = inject(ViewContainerRef);\n  private portalService = inject(PortalService);\n  \n  constructor() {\n    effect(() => {\n      const container = this.portalService.portalContainer();\n      \n      // Skip rendering if we're not initialized yet\n      if (!this.tguiPortalOutlet) return;\n      \n      // Clear existing content\n      this.viewContainerRef.clear();\n      \n      // Only render if we have both a container and a template\n      if (container && this.tguiPortalOutlet) {\n        const embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.tguiPortalOutlet) as EmbeddedViewRef<any>;\n        \n        // Move the generated content to the portal container\n        const viewRootNodes = embeddedViewRef.rootNodes || [];\n        viewRootNodes.forEach((node: Node) => {\n          container.nativeElement.appendChild(node);\n        });\n      }\n    });\n  }\n  \n  ngOnInit(): void {\n    // Initialization is now handled in the effect\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n} ",
            "selector": "[tguiPortalOutlet]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tguiPortalOutlet",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            }
        },
        {
            "name": "TGUIThemeDirective",
            "id": "directive-TGUIThemeDirective-2f3a8db879075f534b302cdb0231acb783f926d5e1983fbbab2dc9faee182cd3e015120f283935497354e9296057d74394cdd220b322ddde45d36530cc9648d2",
            "file": "projects/tgui/src/lib/core/directives/tgui-theme.directive.ts",
            "type": "directive",
            "description": "<p>Directive that automatically loads the TGUI styles\nThis should be applied once on a root element (typically body or app-root)</p>\n",
            "rawdescription": "\n\nDirective that automatically loads the TGUI styles\nThis should be applied once on a root element (typically body or app-root)\n",
            "sourceCode": "import { Directive, ElementRef, OnInit, Renderer2, inject } from '@angular/core';\n\n/**\n * Directive that automatically loads the TGUI styles\n * This should be applied once on a root element (typically body or app-root)\n */\n@Directive({\n  selector: '[tguiTheme]',\n  standalone: true,\n})\nexport class TGUIThemeDirective implements OnInit {\n  // CSS file path - this will be loaded from assets in the actual build\n  private stylesPath = 'assets/tgui/styles/variables.css';\n  \n  private el = inject(ElementRef);\n  private renderer = inject(Renderer2);\n\n  ngOnInit(): void {\n    this.loadStyles();\n  }\n\n  private loadStyles(): void {\n    const head = document.head;\n    const link = document.createElement('link');\n    \n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.href = this.stylesPath;\n    \n    head.appendChild(link);\n  }\n} ",
            "selector": "[tguiTheme]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stylesPath",
                    "defaultValue": "'assets/tgui/styles/variables.css'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ]
        }
    ],
    "components": [
        {
            "name": "AvatarAcronymComponent",
            "id": "component-AvatarAcronymComponent-f87cf073094b7302f703050e62e066d5cbcd32d833383d3e24fdd0307b2ee7adbc9e8575cc2cc4d298d9c54fc148380ca2fdc29754fe8d31fa83d308db8ab596",
            "file": "projects/tgui/src/lib/core/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-acronym",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  "
            ],
            "template": "<ng-container [ngSwitch]=\"getTypographyComponent()\">\n  <tgui-caption\n    *ngSwitchCase=\"'caption'\"\n    [level]=\"getCaptionLevel()\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-caption>\n\n  <tgui-headline\n    *ngSwitchCase=\"'headline'\"\n    weight=\"2\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-headline>\n\n  <tgui-title\n    *ngSwitchCase=\"'title'\"\n    level=\"3\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-title>\n\n  <tgui-large-title\n    *ngSwitchCase=\"'large-title'\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-large-title>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "initials",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nТекст, из которого будут сформированы инициалы\n",
                    "description": "<p>Текст, из которого будут сформированы инициалы</p>\n",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазмер аватара, который определяет размер отображаемых инициалов\n",
                    "description": "<p>Размер аватара, который определяет размер отображаемых инициалов</p>\n",
                    "line": 69,
                    "type": "AvatarSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "formatInitials",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nФорматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\n",
                    "description": "<p>Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)</p>\n"
                },
                {
                    "name": "getCaptionLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "\"1\" | \"2\"",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОпределяет уровень Caption в зависимости от размера аватара\n",
                    "description": "<p>Определяет уровень Caption в зависимости от размера аватара</p>\n"
                },
                {
                    "name": "getTypographyComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "\"caption\" | \"headline\" | \"title\" | \"large-title\"",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОпределяет, какой компонент типографики использовать в зависимости от размера аватара\n",
                    "description": "<p>Определяет, какой компонент типографики использовать в зависимости от размера аватара</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "HeadlineComponent",
                    "type": "component"
                },
                {
                    "name": "TitleComponent",
                    "type": "component"
                },
                {
                    "name": "LargeTitleComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент AvatarAcronym отображает инициалы для аватара,\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.</p>\n",
            "rawdescription": "\n\nКомпонент AvatarAcronym отображает инициалы для аватара,\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { HeadlineComponent } from '@typography/headline/headline.component';\nimport { TitleComponent } from '@typography/title/title.component';\nimport { LargeTitleComponent } from '@typography/large-title/large-title.component';\nimport { AvatarSize } from '@components/blocks/avatar/avatar.component';\n\n/**\n * Компонент AvatarAcronym отображает инициалы для аватара,\n * автоматически подбирая соответствующий размер шрифта и компонент типографики.\n */\n@Component({\n  selector: 'tgui-avatar-acronym',\n  standalone: true,\n  imports: [\n    CommonModule, \n    CaptionComponent, \n    HeadlineComponent, \n    TitleComponent, \n    LargeTitleComponent\n  ],\n  template: `\n    <ng-container [ngSwitch]=\"getTypographyComponent()\">\n      <tgui-caption \n        *ngSwitchCase=\"'caption'\" \n        [level]=\"getCaptionLevel()\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-caption>\n      \n      <tgui-headline \n        *ngSwitchCase=\"'headline'\" \n        weight=\"2\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-headline>\n      \n      <tgui-title \n        *ngSwitchCase=\"'title'\" \n        level=\"3\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-title>\n      \n      <tgui-large-title \n        *ngSwitchCase=\"'large-title'\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-large-title>\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarAcronymComponent {\n  /**\n   * Размер аватара, который определяет размер отображаемых инициалов\n   */\n  @Input() size: AvatarSize = 'm';\n  \n  /**\n   * Текст, из которого будут сформированы инициалы\n   */\n  @Input() initials: string = '';\n  \n  /**\n   * Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\n   */\n  formatInitials(): string {\n    if (!this.initials) return '';\n    \n    return this.initials\n      .split(' ')\n      .map(part => part.charAt(0))\n      .slice(0, 2)\n      .join('')\n      .toUpperCase();\n  }\n  \n  /**\n   * Определяет, какой компонент типографики использовать в зависимости от размера аватара\n   */\n  getTypographyComponent(): 'caption' | 'headline' | 'title' | 'large-title' {\n    if (this.size === 'xxs' || this.size === 'xs' || this.size === 's') {\n      return 'caption';\n    }\n    \n    if (this.size === 'm') {\n      return 'headline';\n    }\n    \n    if (this.size === 'l') {\n      return 'title';\n    }\n    \n    return 'large-title';\n  }\n  \n  /**\n   * Определяет уровень Caption в зависимости от размера аватара\n   */\n  getCaptionLevel(): '1' | '2' {\n    return this.size === 'xs' ? '2' : '1';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AvatarBadgeComponent",
            "id": "component-AvatarBadgeComponent-dedbd2c9d79f059950aabef3e2269ec904441c392255d29da83132f673f90d71a9a8c76e59617c64afc52a7293e8b2031f4754f4904ff06b000a1d036e070791",
            "file": "projects/tgui/src/lib/core/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-badge",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  "
            ],
            "template": "<div class=\"avatar-badge\">\n  <span class=\"badge-content\">{{ count > 99 ? '99+' : count }}</span>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЧисловое значение для отображения в бейдже\n",
                    "description": "<p>Числовое значение для отображения в бейдже</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Компонент AvatarBadge отображает числовой бейдж на аватаре,\nпозволяя показывать количество непрочитанных сообщений, уведомлений и т.д.</p>\n",
            "rawdescription": "\n\nКомпонент AvatarBadge отображает числовой бейдж на аватаре,\nпозволяя показывать количество непрочитанных сообщений, уведомлений и т.д.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Компонент AvatarBadge отображает числовой бейдж на аватаре,\n * позволяя показывать количество непрочитанных сообщений, уведомлений и т.д.\n */\n@Component({\n  selector: 'tgui-avatar-badge',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"avatar-badge\">\n      <span class=\"badge-content\">{{ count > 99 ? '99+' : count }}</span>\n    </div>\n  `,\n  styles: [`\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarBadgeComponent {\n  /**\n   * Числовое значение для отображения в бейдже\n   */\n  @Input() count: number = 0;\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-11e6f05ec956ada56ef9d69787ff1817632d23e29d593453d69c4c8aac7bdbe1008864afab7b0bf578effc3b4ca7667b951375ff444f17f19a10715f02e758e2",
            "file": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  "
            ],
            "template": "<div\n  class=\"avatar-container\"\n  [ngStyle]=\"{ 'background-color': getBackgroundColor() }\"\n>\n  <img\n    *ngIf=\"src\"\n    [src]=\"src\"\n    [alt]=\"alt || 'Avatar'\"\n    class=\"avatar-image\"\n  />\n\n  <tgui-avatar-acronym\n    *ngIf=\"!src && initials\"\n    [size]=\"size\"\n    [initials]=\"initials\"\n  ></tgui-avatar-acronym>\n</div>\n\n<!-- Контент выведен за пределы avatar-container,\n     чтобы не попадать под overflow: hidden -->\n<div class=\"avatar-content\">\n  <div\n    *ngIf=\"online\"\n    class=\"avatar-online-badge\"\n  ></div>\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nАльтернативный текст для изображения\n",
                    "description": "<p>Альтернативный текст для изображения</p>\n",
                    "line": 215,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЦвет фона для аватара с инициалами\n",
                    "description": "<p>Цвет фона для аватара с инициалами</p>\n",
                    "line": 220,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nТекст для инициалов, если изображение отсутствует\n",
                    "description": "<p>Текст для инициалов, если изображение отсутствует</p>\n",
                    "line": 200,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "online",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nИндикатор онлайн-статуса\n",
                    "description": "<p>Индикатор онлайн-статуса</p>\n",
                    "line": 225,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nФорма аватара ('circle', 'rounded', 'square')\n",
                    "description": "<p>Форма аватара (&#39;circle&#39;, &#39;rounded&#39;, &#39;square&#39;)</p>\n",
                    "line": 210,
                    "type": "AvatarShape",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазмер аватара ('xxs', 'xs', 's', 'm', 'l', 'xl')\n",
                    "description": "<p>Размер аватара (&#39;xxs&#39;, &#39;xs&#39;, &#39;s&#39;, &#39;m&#39;, &#39;l&#39;, &#39;xl&#39;)</p>\n",
                    "line": 205,
                    "type": "AvatarSize",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nURL изображения аватара\n",
                    "description": "<p>URL изображения аватара</p>\n",
                    "line": 195,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBackgroundColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nВозвращает цвет фона для аватара с инициалами\n",
                    "description": "<p>Возвращает цвет фона для аватара с инициалами</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.shape-circle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 235,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.shape-rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 236,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.shape-square",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 237,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 232,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 231,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 233,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 229,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xxs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 228,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "AvatarAcronymComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент Avatar отображает аватар с опциональными инициалами или изображением.\nКомпонент поддерживает различные размеры и формы, а также индикатор онлайн-статуса.</p>\n",
            "rawdescription": "\n\nКомпонент Avatar отображает аватар с опциональными инициалами или изображением.\nКомпонент поддерживает различные размеры и формы, а также индикатор онлайн-статуса.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding, \n  OnInit\n} from '@angular/core';\nimport { CommonModule, NgStyle } from '@angular/common';\nimport { AvatarAcronymComponent } from './components/avatar-acronym/avatar-acronym.component';\nimport { AvatarBadgeComponent } from './components/avatar-badge/avatar-badge.component';\n\nexport type AvatarSize = 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl';\nexport type AvatarShape = 'circle' | 'rounded' | 'square';\n\n/**\n * Компонент Avatar отображает аватар с опциональными инициалами или изображением.\n * Компонент поддерживает различные размеры и формы, а также индикатор онлайн-статуса.\n */\n@Component({\n  selector: 'tgui-avatar',\n  standalone: true,\n  imports: [CommonModule, NgStyle, AvatarAcronymComponent],\n  template: `\n    <div \n      class=\"avatar-container\"\n      [ngStyle]=\"{ 'background-color': getBackgroundColor() }\"\n    >\n      <img \n        *ngIf=\"src\" \n        [src]=\"src\" \n        [alt]=\"alt || 'Avatar'\" \n        class=\"avatar-image\"\n      />\n      \n      <tgui-avatar-acronym \n        *ngIf=\"!src && initials\" \n        [size]=\"size\" \n        [initials]=\"initials\"\n      ></tgui-avatar-acronym>\n    </div>\n    \n    <!-- Контент выведен за пределы avatar-container,\n         чтобы не попадать под overflow: hidden -->\n    <div class=\"avatar-content\">\n      <div \n        *ngIf=\"online\" \n        class=\"avatar-online-badge\"\n      ></div>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarComponent {\n  /**\n   * URL изображения аватара\n   */\n  @Input() src?: string;\n  \n  /**\n   * Текст для инициалов, если изображение отсутствует\n   */\n  @Input() initials?: string;\n  \n  /**\n   * Размер аватара ('xxs', 'xs', 's', 'm', 'l', 'xl')\n   */\n  @Input() size: AvatarSize = 'm';\n  \n  /**\n   * Форма аватара ('circle', 'rounded', 'square')\n   */\n  @Input() shape: AvatarShape = 'circle';\n  \n  /**\n   * Альтернативный текст для изображения\n   */\n  @Input() alt?: string;\n  \n  /**\n   * Цвет фона для аватара с инициалами\n   */\n  @Input() color?: string;\n  \n  /**\n   * Индикатор онлайн-статуса\n   */\n  @Input() online = false;\n  \n  // Host bindings для CSS классов\n  @HostBinding('class.size-xxs') get isSizeXXS() { return this.size === 'xxs'; }\n  @HostBinding('class.size-xs') get isSizeXS() { return this.size === 'xs'; }\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  @HostBinding('class.size-xl') get isSizeXL() { return this.size === 'xl'; }\n  \n  @HostBinding('class.shape-circle') get isShapeCircle() { return this.shape === 'circle'; }\n  @HostBinding('class.shape-rounded') get isShapeRounded() { return this.shape === 'rounded'; }\n  @HostBinding('class.shape-square') get isShapeSquare() { return this.shape === 'square'; }\n  \n  /**\n   * Возвращает цвет фона для аватара с инициалами\n   */\n  getBackgroundColor(): string {\n    if (this.src) {\n      return 'transparent';\n    }\n    \n    if (this.color) {\n      return this.color;\n    }\n    \n    // Если нет изображения и не задан цвет явно\n    return 'var(--tgui--secondary_fill)';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isSizeXXS": {
                    "name": "isSizeXXS",
                    "getSignature": {
                        "name": "isSizeXXS",
                        "type": "",
                        "returnType": "",
                        "line": 228
                    }
                },
                "isSizeXS": {
                    "name": "isSizeXS",
                    "getSignature": {
                        "name": "isSizeXS",
                        "type": "",
                        "returnType": "",
                        "line": 229
                    }
                },
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 230
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 231
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 232
                    }
                },
                "isSizeXL": {
                    "name": "isSizeXL",
                    "getSignature": {
                        "name": "isSizeXL",
                        "type": "",
                        "returnType": "",
                        "line": 233
                    }
                },
                "isShapeCircle": {
                    "name": "isShapeCircle",
                    "getSignature": {
                        "name": "isShapeCircle",
                        "type": "",
                        "returnType": "",
                        "line": 235
                    }
                },
                "isShapeRounded": {
                    "name": "isShapeRounded",
                    "getSignature": {
                        "name": "isShapeRounded",
                        "type": "",
                        "returnType": "",
                        "line": 236
                    }
                },
                "isShapeSquare": {
                    "name": "isShapeSquare",
                    "getSignature": {
                        "name": "isShapeSquare",
                        "type": "",
                        "returnType": "",
                        "line": 237
                    }
                }
            }
        },
        {
            "name": "AvatarStackComponent",
            "id": "component-AvatarStackComponent-274c86ef7ef2341095e35400eb72927229dfcdf0326e17abb4456488beab7ddfe61587815d86b842fe64b9a632774472423029b045e1c9ffecb51c8ae4b819b6",
            "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/avatar-stack.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-stack",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  "
            ],
            "template": "<div class=\"avatar-stack-container\" [style.--tgui-avatar-stack-offset.px]=\"_offset\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nСмещение между аватарами в пикселях (по умолчанию -12px).\nОтрицательное значение определяет степень перекрытия аватаров.\nЧем меньше значение (например, -18px), тем сильнее перекрытие между аватарами.\nЧем больше значение (например, -6px), тем меньше перекрытие между аватарами.\n",
                    "description": "<p>Смещение между аватарами в пикселях (по умолчанию -12px).\nОтрицательное значение определяет степень перекрытия аватаров.\nЧем меньше значение (например, -18px), тем сильнее перекрытие между аватарами.\nЧем больше значение (например, -6px), тем меньше перекрытие между аватарами.</p>\n",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_offset",
                    "defaultValue": "-12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "avatars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<AvatarComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Список аватаров внутри стека</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nСписок аватаров внутри стека\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "AvatarComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Компонент AvatarStack отображает контейнер для аватаров в стековом формате.\nПозволяет визуально группировать аватары, часто используется для обозначения\nнескольких пользователей или участников.</p>\n<p>Аватары отображаются с перекрытием, которое регулируется через свойство offset.</p>\n",
            "rawdescription": "\n\nКомпонент AvatarStack отображает контейнер для аватаров в стековом формате.\nПозволяет визуально группировать аватары, часто используется для обозначения\nнескольких пользователей или участников.\n\nАватары отображаются с перекрытием, которое регулируется через свойство offset.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Input,\n  HostBinding,\n  OnInit,\n  inject,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AvatarComponent } from '@components/blocks/avatar/avatar.component';\n\n/**\n * Компонент AvatarStack отображает контейнер для аватаров в стековом формате.\n * Позволяет визуально группировать аватары, часто используется для обозначения\n * нескольких пользователей или участников.\n * \n * Аватары отображаются с перекрытием, которое регулируется через свойство offset.\n */\n@Component({\n  selector: 'tgui-avatar-stack',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"avatar-stack-container\" [style.--tgui-avatar-stack-offset.px]=\"_offset\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  `],\n  host: {\n    'attr.data-refresh-platform': 'true'\n  },\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarStackComponent {\n  /**\n   * Смещение между аватарами в пикселях (по умолчанию -12px).\n   * Отрицательное значение определяет степень перекрытия аватаров.\n   * Чем меньше значение (например, -18px), тем сильнее перекрытие между аватарами.\n   * Чем больше значение (например, -6px), тем меньше перекрытие между аватарами.\n   */\n  @Input() set offset(value: number) {\n    this._offset = value;\n  }\n  get offset(): number {\n    return this._offset;\n  }\n  _offset = -12;\n  \n  /**\n   * Список аватаров внутри стека\n   */\n  @ContentChildren(AvatarComponent) avatars!: QueryList<AvatarComponent>;\n  \n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    .tgui-platform-ios :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "offset": {
                    "name": "offset",
                    "setSignature": {
                        "name": "offset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "rawdescription": "\n\nСмещение между аватарами в пикселях (по умолчанию -12px).\nОтрицательное значение определяет степень перекрытия аватаров.\nЧем меньше значение (например, -18px), тем сильнее перекрытие между аватарами.\nЧем больше значение (например, -6px), тем меньше перекрытие между аватарами.\n",
                        "description": "<p>Смещение между аватарами в пикселях (по умолчанию -12px).\nОтрицательное значение определяет степень перекрытия аватаров.\nЧем меньше значение (например, -18px), тем сильнее перекрытие между аватарами.\nЧем больше значение (например, -6px), тем меньше перекрытие между аватарами.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "offset",
                        "type": "number",
                        "returnType": "number",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-7d735869fb25a82ca3153a3c179ebf27dc0a74016ca3cd7ac23695e8657732c69e3d8529b07cbbedd504120a841325edc95eb2ed04fa000ad3975a6d5aba0cc8",
            "file": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-badge",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isNumber\">\n  <ng-template #contentTemplate>\n    <ng-content></ng-content>\n  </ng-template>\n\n  <tgui-subheadline tag=\"span\" level=\"2\" weight=\"2\" *ngIf=\"large\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n  </tgui-subheadline>\n\n  <tgui-caption weight=\"2\" level=\"1\" *ngIf=\"!large\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n  </tgui-caption>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "large",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nУвеличивает размер бейджа. Применяется только при type='number'.",
                    "description": "<p>Увеличивает размер бейджа. Применяется только при type=&#39;number&#39;.</p>\n",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nЦветовая схема бейджа, влияющая на его фон и цвет текста.",
                    "description": "<p>Цветовая схема бейджа, влияющая на его фон и цвет текста.</p>\n",
                    "line": 108,
                    "type": "BadgeMode",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'number'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nВизуальный стиль бейджа: 'number' отображает содержимое, 'dot' показывает простую точку.",
                    "description": "<p>Визуальный стиль бейджа: &#39;number&#39; отображает содержимое, &#39;dot&#39; показывает простую точку.</p>\n",
                    "line": 105,
                    "type": "BadgeType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-critical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-white",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.type-dot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.type-number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент Badge отображает небольшой числовой или точечный индикатор,\nобычно используемый для уведомлений, статусов или счетчиков.\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\nи может быть обычного или увеличенного размера.</p>\n",
            "rawdescription": "\n\nКомпонент Badge отображает небольшой числовой или точечный индикатор,\nобычно используемый для уведомлений, статусов или счетчиков.\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\nи может быть обычного или увеличенного размера.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { SubheadlineComponent } from '@typography/subheadline/subheadline.component';\n\nexport type BadgeType = 'number' | 'dot';\nexport type BadgeMode = 'primary' | 'critical' | 'secondary' | 'gray' | 'white';\n\n/**\n * Компонент Badge отображает небольшой числовой или точечный индикатор,\n * обычно используемый для уведомлений, статусов или счетчиков.\n * Поддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\n * и может быть обычного или увеличенного размера.\n */\n@Component({\n  selector: 'tgui-badge',\n  standalone: true,\n  imports: [CommonModule, CaptionComponent, SubheadlineComponent],\n  template: `\n    <ng-container *ngIf=\"isNumber\">\n      <ng-template #contentTemplate>\n        <ng-content></ng-content>\n      </ng-template>\n\n      <tgui-subheadline tag=\"span\" level=\"2\" weight=\"2\" *ngIf=\"large\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n      </tgui-subheadline>\n\n      <tgui-caption weight=\"2\" level=\"1\" *ngIf=\"!large\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n      </tgui-caption>\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BadgeComponent {\n  /** Визуальный стиль бейджа: 'number' отображает содержимое, 'dot' показывает простую точку. */\n  @Input() type: BadgeType = 'number';\n\n  /** Цветовая схема бейджа, влияющая на его фон и цвет текста. */\n  @Input() mode: BadgeMode = 'primary';\n\n  /** Увеличивает размер бейджа. Применяется только при type='number'. */\n  @Input() large = false;\n\n  // Host bindings для типа\n  @HostBinding('class.type-number') get isNumber() { return this.type === 'number'; }\n  @HostBinding('class.type-dot') get isDot() { return this.type === 'dot'; }\n\n  // Host bindings для режимов\n  @HostBinding('class.mode-primary') get isPrimary() { return this.mode === 'primary'; }\n  @HostBinding('class.mode-critical') get isCritical() { return this.mode === 'critical'; }\n  @HostBinding('class.mode-secondary') get isSecondary() { return this.mode === 'secondary'; }\n  @HostBinding('class.mode-gray') get isGray() { return this.mode === 'gray'; }\n  @HostBinding('class.mode-white') get isWhite() { return this.mode === 'white'; }\n\n  // Host binding для размера\n  @HostBinding('class.large') get isLarge() { return this.large && this.type === 'number'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isNumber": {
                    "name": "isNumber",
                    "getSignature": {
                        "name": "isNumber",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "isDot": {
                    "name": "isDot",
                    "getSignature": {
                        "name": "isDot",
                        "type": "",
                        "returnType": "",
                        "line": 115
                    }
                },
                "isPrimary": {
                    "name": "isPrimary",
                    "getSignature": {
                        "name": "isPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 118
                    }
                },
                "isCritical": {
                    "name": "isCritical",
                    "getSignature": {
                        "name": "isCritical",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "isSecondary": {
                    "name": "isSecondary",
                    "getSignature": {
                        "name": "isSecondary",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                },
                "isGray": {
                    "name": "isGray",
                    "getSignature": {
                        "name": "isGray",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "isWhite": {
                    "name": "isWhite",
                    "getSignature": {
                        "name": "isWhite",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                },
                "isLarge": {
                    "name": "isLarge",
                    "getSignature": {
                        "name": "isLarge",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-e6bc5f4575206178a702592b3813329daf661e02fc2fa927213952e8d84cd4ea17ce3328ea701d59cc35119e7f5800882c45488a73f4be28815e0fee9747a440",
            "file": "projects/tgui/src/lib/core/components/blocks/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-button",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Оптимизация для мобильных устройств */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Обертка для всего контента кнопки */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Наследовать gap от host элемента */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* Чтобы был над ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Предотвращает появление контекстного меню на iOS при долгом нажатии */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Поднимаем над контентом */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      .tgui-platform-ios :host.size-m {\n        border-radius: 12px;\n      }\n  \n      .tgui-platform-ios :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    "
            ],
            "template": "<tgui-tappable\n  [interactiveAnimation]=\"interactiveAnimation\"\n  [readonly]=\"loading\"\n  [disabled]=\"disabled\"\n  class=\"button-tappable\"\n>\n  <!-- Spinner абсолютно позиционирован поверх контента -->\n  <div *ngIf=\"loading\" class=\"spinner\">\n    <tgui-spinner size=\"s\"></tgui-spinner>\n  </div>\n\n  <!-- Содержимое кнопки во wrapper для корректного позиционирования -->\n  <div class=\"button-content-wrapper\">\n    <ng-content select=\"[tguiButtonBefore]\"></ng-content>\n    <div *ngIf=\"beforeTemplate\" class=\"before\">\n      <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n    </div>\n\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n\n    <ng-content select=\"[tguiButtonAfter]\"></ng-content>\n    <div *ngIf=\"afterTemplate\" class=\"after\">\n      <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n    </div>\n  </div>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЕсли true, кнопка будет отключена\n",
                    "description": "<p>Если true, кнопка будет отключена</p>\n",
                    "line": 303,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nТип интерактивной анимации ('opacity' | 'background')\n",
                    "description": "<p>Тип интерактивной анимации (&#39;opacity&#39; | &#39;background&#39;)</p>\n",
                    "line": 313,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЕсли true, показывает индикатор загрузки вместо содержимого кнопки\n",
                    "description": "<p>Если true, показывает индикатор загрузки вместо содержимого кнопки</p>\n",
                    "line": 298,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nВизуальный стиль кнопки\n",
                    "description": "<p>Визуальный стиль кнопки</p>\n",
                    "line": 288,
                    "type": "\"filled\" | \"bezeled\" | \"plain\" | \"gray\" | \"outline\" | \"white\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазмер кнопки ('s', 'm', 'l')\n",
                    "description": "<p>Размер кнопки (&#39;s&#39;, &#39;m&#39;, &#39;l&#39;)</p>\n",
                    "line": 283,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                },
                {
                    "name": "stretched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЕсли true, кнопка будет растянута по ширине контейнера\n",
                    "description": "<p>Если true, кнопка будет растянута по ширине контейнера</p>\n",
                    "line": 293,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nТип кнопки (для HTML-атрибута type)\n",
                    "description": "<p>Тип кнопки (для HTML-атрибута type)</p>\n",
                    "line": 308,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "afterTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Шаблон для контента после основного текста кнопки</p>\n",
                    "line": 323,
                    "rawdescription": "\n\nШаблон для контента после основного текста кнопки\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'afterContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "beforeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Шаблон для контента перед основным текстом кнопки</p>\n",
                    "line": 318,
                    "rawdescription": "\n\nШаблон для контента перед основным текстом кнопки\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'beforeContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 349,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Флаг, указывающий, является ли текущая платформа iOS</p>\n",
                    "line": 328,
                    "rawdescription": "\n\nФлаг, указывающий, является ли текущая платформа iOS\n"
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 348,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'selectstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformToButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПреобразует хост-элемент в настоящую HTML-кнопку для лучшей доступности и семантики\n",
                    "description": "<p>Преобразует хост-элемент в настоящую HTML-кнопку для лучшей доступности и семантики</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 346,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "attr.type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 345,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 343,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 342,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-bezeled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 335,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-filled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 334,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 337,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-outline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 338,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 336,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-white",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 339,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 332,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 331,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 330,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.stretched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 341,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "selectstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 352
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент Button предоставляет кастомизируемую кнопку с различными стилями и состояниями.\nПоддерживает разные размеры, режимы отображения, состояние загрузки и др.</p>\n",
            "rawdescription": "\n\nКомпонент Button предоставляет кастомизируемую кнопку с различными стилями и состояниями.\nПоддерживает разные размеры, режимы отображения, состояние загрузки и др.\n",
            "type": "component",
            "sourceCode": "import { \n    Component, \n    ViewEncapsulation, \n    ChangeDetectionStrategy, \n    Input, \n    HostBinding, \n    OnInit,\n    ElementRef, \n    ContentChild, \n    TemplateRef,\n    HostListener,\n    inject\n  } from '@angular/core';\n  import { CommonModule } from '@angular/common';\n  import { PlatformService } from '@services/platform.service';\n  import { SpinnerComponent } from '@feedback/spinner/spinner.component';\n  import { TappableComponent } from '@components/service/tappable/tappable.component';\n  \n  /**\n   * Компонент Button предоставляет кастомизируемую кнопку с различными стилями и состояниями.\n   * Поддерживает разные размеры, режимы отображения, состояние загрузки и др.\n   */\n  @Component({\n    selector: 'tgui-button',\n    standalone: true,\n    imports: [CommonModule, SpinnerComponent, TappableComponent],\n    template: `\n      <tgui-tappable \n        [interactiveAnimation]=\"interactiveAnimation\" \n        [readonly]=\"loading\"\n        [disabled]=\"disabled\"\n        class=\"button-tappable\"\n      >\n        <!-- Spinner абсолютно позиционирован поверх контента -->\n        <div *ngIf=\"loading\" class=\"spinner\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n        </div>\n  \n        <!-- Содержимое кнопки во wrapper для корректного позиционирования -->\n        <div class=\"button-content-wrapper\">\n          <ng-content select=\"[tguiButtonBefore]\"></ng-content>\n          <div *ngIf=\"beforeTemplate\" class=\"before\">\n            <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n          </div>\n  \n          <div class=\"content\">\n            <ng-content></ng-content>\n          </div>\n  \n          <ng-content select=\"[tguiButtonAfter]\"></ng-content>\n          <div *ngIf=\"afterTemplate\" class=\"after\">\n            <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n          </div>\n        </div>\n      </tgui-tappable>\n    `,\n    host: {\n      'attr.data-refresh-platform': 'true'\n    },\n    styles: [`\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Оптимизация для мобильных устройств */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Обертка для всего контента кнопки */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Наследовать gap от host элемента */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* Чтобы был над ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Предотвращает появление контекстного меню на iOS при долгом нажатии */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Поднимаем над контентом */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      .tgui-platform-ios :host.size-m {\n        border-radius: 12px;\n      }\n  \n      .tgui-platform-ios :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    `],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })\n  export class ButtonComponent implements OnInit {\n    /**\n     * Размер кнопки ('s', 'm', 'l')\n     */\n    @Input() size: 's' | 'm' | 'l' = 'm';\n  \n    /**\n     * Визуальный стиль кнопки\n     */\n    @Input() mode: 'filled' | 'bezeled' | 'plain' | 'gray' | 'outline' | 'white' = 'filled';\n  \n    /**\n     * Если true, кнопка будет растянута по ширине контейнера\n     */\n    @Input() stretched = false;\n  \n    /**\n     * Если true, показывает индикатор загрузки вместо содержимого кнопки\n     */\n    @Input() loading = false;\n  \n    /**\n     * Если true, кнопка будет отключена\n     */\n    @Input() disabled = false;\n  \n    /**\n     * Тип кнопки (для HTML-атрибута type)\n     */\n    @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  \n    /**\n     * Тип интерактивной анимации ('opacity' | 'background')\n     */\n    @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n    /**\n     * Шаблон для контента перед основным текстом кнопки\n     */\n    @ContentChild('beforeContent') beforeTemplate?: TemplateRef<any>;\n  \n    /**\n     * Шаблон для контента после основного текста кнопки\n     */\n    @ContentChild('afterContent') afterTemplate?: TemplateRef<any>;\n  \n    /**\n     * Флаг, указывающий, является ли текущая платформа iOS\n     */\n    isIOS = false;\n  \n    @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n    @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n    @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  \n    @HostBinding('class.mode-filled') get isModeFilled() { return this.mode === 'filled'; }\n    @HostBinding('class.mode-bezeled') get isModeBezeled() { return this.mode === 'bezeled'; }\n    @HostBinding('class.mode-plain') get isModePlain() { return this.mode === 'plain'; }\n    @HostBinding('class.mode-gray') get isModeGray() { return this.mode === 'gray'; }\n    @HostBinding('class.mode-outline') get isModeOutline() { return this.mode === 'outline'; }\n    @HostBinding('class.mode-white') get isModeWhite() { return this.mode === 'white'; }\n  \n    @HostBinding('class.stretched') get isStretched() { return this.stretched; }\n    @HostBinding('class.loading') get isLoading() { return this.loading; }\n    @HostBinding('class.disabled') get isDisabled() { return this.disabled; }\n  \n    @HostBinding('attr.type') get buttonType() { return this.type; }\n    @HostBinding('attr.disabled') get buttonDisabled() { return this.disabled ? true : null; }\n    \n    private platformService = inject(PlatformService);\n    private elementRef = inject(ElementRef);\n  \n    @HostListener('selectstart', ['$event'])\n    onSelectStart(event: Event): boolean {\n      // Предотвращаем выделение текста\n      event.preventDefault();\n      return false;\n    }\n  \n    ngOnInit(): void {\n      // Получаем текущую платформу из сервиса\n      this.isIOS = this.platformService.isIOS();\n      \n      // Преобразуем компонент в настоящую кнопку для лучшей доступности\n      this.transformToButton();\n    }\n    \n    /**\n     * Преобразует хост-элемент в настоящую HTML-кнопку для лучшей доступности и семантики\n     */\n    private transformToButton(): void {\n      const element = this.elementRef.nativeElement;\n      \n      // Добавляем атрибуты для улучшения доступности\n      if (!element.hasAttribute('role')) {\n        element.setAttribute('role', 'button');\n      }\n      \n      if (!element.hasAttribute('tabindex') && !this.disabled) {\n        element.setAttribute('tabindex', '0');\n      }\n      \n      // Добавляем CSS для предотвращения выделения текста (для старых браузеров)\n      element.style.webkitUserSelect = 'none';\n      element.style.userSelect = 'none';\n      \n      // Добавляем обработчики событий клавиатуры для доступности\n      element.addEventListener('keydown', (event: KeyboardEvent) => {\n        if ((event.key === 'Enter' || event.key === ' ') && !this.disabled) {\n          event.preventDefault();\n          element.click();\n        }\n      });\n      \n      // Дополнительный слушатель для предотвращения выделения текста\n      element.addEventListener('selectstart', (event: Event) => {\n        event.preventDefault();\n        return false;\n      });\n    }\n  } ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Оптимизация для мобильных устройств */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Обертка для всего контента кнопки */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Наследовать gap от host элемента */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* Чтобы был над ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Предотвращает появление контекстного меню на iOS при долгом нажатии */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Поднимаем над контентом */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      .tgui-platform-ios :host.size-m {\n        border-radius: 12px;\n      }\n  \n      .tgui-platform-ios :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 330
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 331
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 332
                    }
                },
                "isModeFilled": {
                    "name": "isModeFilled",
                    "getSignature": {
                        "name": "isModeFilled",
                        "type": "",
                        "returnType": "",
                        "line": 334
                    }
                },
                "isModeBezeled": {
                    "name": "isModeBezeled",
                    "getSignature": {
                        "name": "isModeBezeled",
                        "type": "",
                        "returnType": "",
                        "line": 335
                    }
                },
                "isModePlain": {
                    "name": "isModePlain",
                    "getSignature": {
                        "name": "isModePlain",
                        "type": "",
                        "returnType": "",
                        "line": 336
                    }
                },
                "isModeGray": {
                    "name": "isModeGray",
                    "getSignature": {
                        "name": "isModeGray",
                        "type": "",
                        "returnType": "",
                        "line": 337
                    }
                },
                "isModeOutline": {
                    "name": "isModeOutline",
                    "getSignature": {
                        "name": "isModeOutline",
                        "type": "",
                        "returnType": "",
                        "line": 338
                    }
                },
                "isModeWhite": {
                    "name": "isModeWhite",
                    "getSignature": {
                        "name": "isModeWhite",
                        "type": "",
                        "returnType": "",
                        "line": 339
                    }
                },
                "isStretched": {
                    "name": "isStretched",
                    "getSignature": {
                        "name": "isStretched",
                        "type": "",
                        "returnType": "",
                        "line": 341
                    }
                },
                "isLoading": {
                    "name": "isLoading",
                    "getSignature": {
                        "name": "isLoading",
                        "type": "",
                        "returnType": "",
                        "line": 342
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 343
                    }
                },
                "buttonType": {
                    "name": "buttonType",
                    "getSignature": {
                        "name": "buttonType",
                        "type": "",
                        "returnType": "",
                        "line": 345
                    }
                },
                "buttonDisabled": {
                    "name": "buttonDisabled",
                    "getSignature": {
                        "name": "buttonDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 346
                    }
                }
            }
        },
        {
            "name": "CaptionComponent",
            "id": "component-CaptionComponent-065a13a0c724c1eb8e4d71d1f459b7904fa8c0033e8f491fec8c921fe82df6a5dad49809806ef701b6111c72d665209be4a0e87da37de1799f8086eec16da408",
            "file": "projects/tgui/src/lib/core/components/typography/caption/caption.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-caption",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the caption, influencing its styling and typography size.\n",
                    "description": "<p>The size level of the caption, influencing its styling and typography size.</p>\n",
                    "line": 54,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'span'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Caption component is a text wrapper that applies specific typographic styles,\nbased on the provided <code>level</code> prop. It&#39;s built on top of the Typography component,\nensuring consistent text styling across the application. It primarily serves for text\nthat acts as a small, descriptive label or annotation.</p>\n",
            "rawdescription": "\n\nThe Caption component is a text wrapper that applies specific typographic styles,\nbased on the provided `level` prop. It's built on top of the Typography component,\nensuring consistent text styling across the application. It primarily serves for text\nthat acts as a small, descriptive label or annotation.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Caption component is a text wrapper that applies specific typographic styles,\n * based on the provided `level` prop. It's built on top of the Typography component,\n * ensuring consistent text styling across the application. It primarily serves for text\n * that acts as a small, descriptive label or annotation.\n */\n@Component({\n  selector: 'tgui-caption',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CaptionComponent extends TypographyComponent {\n  /**\n   * The size level of the caption, influencing its styling and typography size.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Host bindings for CSS classes\n  @Input() override tag = 'span';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "CardCellComponent",
            "id": "component-CardCellComponent-b9a353427b6ea1e80307e76c81397e05f20bd144c81304f823d09fc34814bb022c8dbe7de2748110d04c43161c9ff99a92ffbc5a1aedfb64000ae53472b1f192",
            "file": "projects/tgui/src/lib/core/components/blocks/card/components/card-cell/card-cell.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "tguiCardCell",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card-cell",
            "styleUrls": [
                "./card-cell.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-cell.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional header text for the cell\n",
                    "description": "<p>Optional header text for the cell</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isImage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the cell contains image content\n",
                    "description": "<p>Whether the cell contains image content</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional subtitle text for the cell\n",
                    "description": "<p>Optional subtitle text for the cell</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply appropriate class based on the cell type",
                    "description": "<p>Apply appropriate class based on the cell type</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>CardCell component that represents a content section within a Card.</p>\n",
            "rawdescription": "\n\nCardCell component that represents a content section within a Card.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * CardCell component that represents a content section within a Card.\n */\n@Component({\n  selector: 'tgui-card-cell',\n  templateUrl: './card-cell.component.html',\n  styleUrls: ['./card-cell.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [CommonModule],\n  exportAs: 'tguiCardCell'\n})\nexport class CardCellComponent {\n  /**\n   * Whether the cell contains image content\n   */\n  @Input() isImage = false;\n\n  /**\n   * Optional header text for the cell\n   */\n  @Input() header?: string;\n\n  /**\n   * Optional subtitle text for the cell\n   */\n  @Input() subtitle?: string;\n\n  /** Apply appropriate class based on the cell type */\n  @HostBinding('class') get className(): string {\n    const baseClass = 'tgui-card-cell';\n    return this.isImage ? `${baseClass} ${baseClass}--image` : baseClass;\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tgui-card-cell {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.tgui-card-cell__content {\n  padding: 16px 20px 20px;\n  gap: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.tgui-card-cell--image .tgui-card-cell__content {\n  padding: 0;\n  height: 100%;\n}\n\n.tgui-card__wrapper .tgui-card-cell--image:first-child .tgui-card-cell__content {\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\n  overflow: hidden;\n}\n\n.tgui-card-cell__text {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 8px;\n}\n\n.tgui-card-cell__header {\n  margin: 0;\n  font-family: var(--tgui--font_family, 'SF Pro', sans-serif);\n  font-weight: var(--tgui--font_weight--accent2, 590);\n  font-size: 17px;\n  line-height: 22px;\n  letter-spacing: -0.4px;\n  color: var(--tgui--plain_foreground, #000000);\n}\n\n.tgui-card--ambient .tgui-card-cell__header {\n  color: #FFFFFF;\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\n}\n\n.tgui-card-cell__subtitle {\n  margin: 0;\n  font-family: var(--tgui--font_family, 'SF Pro', sans-serif);\n  font-weight: 400;\n  font-size: 15px;\n  line-height: 20px;\n  letter-spacing: -0.23px;\n  color: var(--tgui--secondary_hint_color, #707579);\n}\n\n.tgui-card--ambient .tgui-card-cell__subtitle {\n  color: rgba(255, 255, 255, 0.75);\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\n}\n\n.tgui-card-cell--image {\n  background: #F4F4F7;\n  height: 200px;\n  flex-grow: 1;\n  align-self: stretch;\n  padding: 0;\n}\n\n.tgui-card__wrapper .tgui-card-cell--image:first-child {\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\n  overflow: hidden;\n} ",
                    "styleUrl": "./card-cell.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "className": {
                    "name": "className",
                    "getSignature": {
                        "name": "className",
                        "type": "string",
                        "returnType": "string",
                        "line": 33,
                        "rawdescription": "\nApply appropriate class based on the cell type",
                        "description": "<p>Apply appropriate class based on the cell type</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"tgui-card-cell__content\">\n  <div *ngIf=\"header || subtitle\" class=\"tgui-card-cell__text\">\n    <h3 *ngIf=\"header\" class=\"tgui-card-cell__header\">{{ header }}</h3>\n    <p *ngIf=\"subtitle\" class=\"tgui-card-cell__subtitle\">{{ subtitle }}</p>\n  </div>\n  <ng-content></ng-content>\n</div> "
        },
        {
            "name": "CardChipComponent",
            "id": "component-CardChipComponent-e8d9d8d3bd5c8f69504a79f736d9b96d8bbb14e3f6e0cb1bc19b4bea7acce0e9fb7c549de07be7de269862c7b3c34e96dd2053811edcd421eec369490b2dfb8b",
            "file": "projects/tgui/src/lib/core/components/blocks/card/components/card-chip/card-chip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "tguiCardChip",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card-chip",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  "
            ],
            "template": "<div class=\"tgui-card-chip__container\">\n  <tgui-chip [mode]=\"mode\" [before]=\"before\" [after]=\"after\" [className]=\"chipClassName\">\n    <ng-content></ng-content>\n  </tgui-chip>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "after",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent to be placed after the main text",
                    "description": "<p>Content to be placed after the main text</p>\n",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "before",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent to be placed before the main text",
                    "description": "<p>Content to be placed before the main text</p>\n",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "chipClassName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom class name for the chip component",
                    "description": "<p>Custom class name for the chip component</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'elevated'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the visual style of the chip, inherits from the ChipComponent",
                    "description": "<p>Defines the visual style of the chip, inherits from the ChipComponent</p>\n",
                    "line": 33,
                    "type": "\"elevated\" | \"mono\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "defaultValue": "'tgui-card-chip'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Apply base class</p>\n",
                    "line": 45,
                    "rawdescription": "\nApply base class",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'tgui-card-chip'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply base class",
                    "description": "<p>Apply base class</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ChipComponent",
                    "type": "component"
                }
            ],
            "description": "<p>CardChip component that displays a small actionable or informational element on the Card\nLeverages the ChipComponent with fixed positioning for use within cards</p>\n",
            "rawdescription": "\n\nCardChip component that displays a small actionable or informational element on the Card\nLeverages the ChipComponent with fixed positioning for use within cards\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipComponent } from '@components/form/chip/chip.component';\n\n/**\n * CardChip component that displays a small actionable or informational element on the Card\n * Leverages the ChipComponent with fixed positioning for use within cards\n */\n@Component({\n  selector: 'tgui-card-chip',\n  template: `\n    <div class=\"tgui-card-chip__container\">\n      <tgui-chip [mode]=\"mode\" [before]=\"before\" [after]=\"after\" [className]=\"chipClassName\">\n        <ng-content></ng-content>\n      </tgui-chip>\n    </div>\n  `,\n  styles: [`\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  `],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [CommonModule, ChipComponent],\n  exportAs: 'tguiCardChip'\n})\nexport class CardChipComponent {\n  /** Defines the visual style of the chip, inherits from the ChipComponent */\n  @Input() mode: 'elevated' | 'mono' | 'outline' = 'elevated';\n  \n  /** Content to be placed before the main text */\n  @Input() before: any;\n  \n  /** Content to be placed after the main text */\n  @Input() after: any;\n  \n  /** Custom class name for the chip component */\n  @Input() chipClassName: string = '';\n  \n  /** Apply base class */\n  @HostBinding('class') className = 'tgui-card-chip';\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-78385ad99069695387921351e4fac45d1712aaadd7d0c5942ea715b0c8760bc1287670602eaa2702c8aeae37d73465379250cda5b6aa7fd96472e5b4228fcf57",
            "file": "projects/tgui/src/lib/core/components/blocks/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "tguiCard",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the border radius of the card. Default is 24px.\n",
                    "description": "<p>Defines the border radius of the card. Default is 24px.</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nURL of the image to display at the top of the card\n",
                    "description": "<p>URL of the image to display at the top of the card</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageAlt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAlt text for the image\n",
                    "description": "<p>Alt text for the image</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageHeight",
                    "defaultValue": "'200px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeight of the image block\n",
                    "description": "<p>Height of the image block</p>\n",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the visual style of the card, influencing background, shadow, and border.\n",
                    "description": "<p>Defines the visual style of the card, influencing background, shadow, and border.</p>\n",
                    "line": 28,
                    "type": "CardType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_borderRadius",
                    "defaultValue": "'24px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardCells",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CardCellComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Get all child cells</p>\n",
                    "line": 68,
                    "rawdescription": "\nGet all child cells",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CardCellComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "customStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Custom style for card wrapper</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nCustom style for card wrapper\n"
                },
                {
                    "name": "imageStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Styles for the image block</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nStyles for the image block\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCustomStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates custom style object when properties change\n",
                    "description": "<p>Updates custom style object when properties change</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateImageStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates styles for the image block\n",
                    "description": "<p>Updates styles for the image block</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply appropriate class based on the type",
                    "description": "<p>Apply appropriate class based on the type</p>\n",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Serves as a container for card-styled UI elements, providing context for its child components.\nIt supports different visual styles and can encapsulate various content types.</p>\n",
            "rawdescription": "\n\nServes as a container for card-styled UI elements, providing context for its child components.\nIt supports different visual styles and can encapsulate various content types.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding, ViewEncapsulation, ElementRef, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CardCellComponent } from './components/card-cell/card-cell.component';\nimport { CardChipComponent } from './components/card-chip/card-chip.component';\n\n/**\n * Card types that define the visual style of the card\n */\nexport type CardType = 'plain' | 'ambient';\n\n/**\n * Serves as a container for card-styled UI elements, providing context for its child components.\n * It supports different visual styles and can encapsulate various content types.\n */\n@Component({\n  selector: 'tgui-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [CommonModule],\n  exportAs: 'tguiCard'\n})\nexport class CardComponent implements AfterContentInit {\n  /**\n   * Defines the visual style of the card, influencing background, shadow, and border.\n   */\n  @Input() type: CardType = 'plain';\n\n  /**\n   * Defines the border radius of the card. Default is 24px.\n   */\n  @Input() set borderRadius(value: string) {\n    this._borderRadius = value;\n    this.updateCustomStyle();\n  }\n  \n  get borderRadius(): string {\n    return this._borderRadius;\n  }\n\n  /**\n   * URL of the image to display at the top of the card\n   */\n  @Input() image?: string;\n\n  /**\n   * Alt text for the image\n   */\n  @Input() imageAlt = '';\n\n  /**\n   * Height of the image block\n   */\n  @Input() imageHeight = '200px';\n\n  /** \n   * Custom style for card wrapper \n   */\n  customStyle: { [key: string]: string } = {};\n\n  /**\n   * Styles for the image block\n   */\n  imageStyle: { [key: string]: string } = {};\n\n  /** Get all child cells */\n  @ContentChildren(CardCellComponent) cardCells!: QueryList<CardCellComponent>;\n\n  private _borderRadius = '24px';\n\n  constructor(private elementRef: ElementRef) {\n    this.updateCustomStyle();\n  }\n\n  ngAfterContentInit() {\n    // Update styles for the image\n    this.updateImageStyle();\n  }\n\n  /** Apply appropriate class based on the type */\n  @HostBinding('class') get className(): string {\n    return `tgui-card tgui-card--${this.type}`;\n  }\n  \n  /**\n   * Updates custom style object when properties change\n   */\n  private updateCustomStyle(): void {\n    this.customStyle = {\n      'border-radius': this._borderRadius\n    };\n    \n    // Update CSS variable for use in child components\n    this.elementRef.nativeElement.style.setProperty('--tgui-card-border-radius', this._borderRadius);\n    \n    // Also update styles for the image if it's set\n    this.updateImageStyle();\n  }\n\n  /**\n   * Updates styles for the image block\n   */\n  private updateImageStyle(): void {\n    if (this.image) {\n      this.imageStyle = {\n        'height': this.imageHeight,\n        'background-image': `url(${this.image})`,\n        'background-size': 'cover',\n        'background-position': 'center',\n        'border-top-left-radius': this._borderRadius,\n        'border-top-right-radius': this._borderRadius,\n        'overflow': 'hidden'\n      };\n    }\n  }\n\n  /**\n   * Checks if the card has an image\n   */\n  get hasImage(): boolean {\n    return !!this.image;\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tgui-card {\n  display: block;\n  --tgui-card-border-radius: 24px;\n  border-radius: var(--tgui-card-border-radius);\n}\n\n.tgui-card__wrapper {\n  position: relative;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0;\n  isolation: isolate;\n  background: #FFFFFF;\n  /* Card Shadow */\n  box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.02), 0px 32px 64px rgba(0, 0, 0, 0.04);\n  border-radius: var(--tgui-card-border-radius);\n  width: 100%;\n  overflow: hidden;\n}\n\n.tgui-card__image {\n  width: 100%;\n  background-color: #F4F4F7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tgui-card--plain .tgui-card__wrapper {\n  background: #FFFFFF;\n}\n\n.tgui-card--ambient .tgui-card__wrapper {\n  background: linear-gradient(0deg, #212121, #212121), rgba(0, 0, 0, 0.8);\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n} ",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "borderRadius": {
                    "name": "borderRadius",
                    "setSignature": {
                        "name": "borderRadius",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "rawdescription": "\n\nDefines the border radius of the card. Default is 24px.\n",
                        "description": "<p>Defines the border radius of the card. Default is 24px.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "borderRadius",
                        "type": "string",
                        "returnType": "string",
                        "line": 38
                    }
                },
                "className": {
                    "name": "className",
                    "getSignature": {
                        "name": "className",
                        "type": "string",
                        "returnType": "string",
                        "line": 82,
                        "rawdescription": "\nApply appropriate class based on the type",
                        "description": "<p>Apply appropriate class based on the type</p>\n"
                    }
                },
                "hasImage": {
                    "name": "hasImage",
                    "getSignature": {
                        "name": "hasImage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 121,
                        "rawdescription": "\n\nChecks if the card has an image\n",
                        "description": "<p>Checks if the card has an image</p>\n"
                    }
                }
            },
            "templateData": "<article class=\"tgui-card__wrapper\" [ngStyle]=\"customStyle\">\n  <!-- Image, if provided -->\n  <div *ngIf=\"hasImage\" class=\"tgui-card__image\" [ngStyle]=\"imageStyle\">\n    <img *ngIf=\"false\" [src]=\"image\" [alt]=\"imageAlt\"> <!-- Hidden for accessibility -->\n  </div>\n  \n  <!-- Card content -->\n  <ng-content></ng-content>\n</article> "
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-934051ee1843f30d1e9c60eabdaa324ccf6a861729ea3d08ddb54b5dd6c0a0fd6582c805cc7ed923af46a69ca0a10dac350ab572f792a55e871a674501e467e9",
            "file": "projects/tgui/src/lib/core/components/form/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-chip",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  "
            ],
            "template": "<tgui-tappable\n  interactiveAnimation=\"background\"\n  [class]=\"'tgui-chip tgui-chip--' + mode\"\n  [ngClass]=\"className\">\n  <div *ngIf=\"before\" class=\"tgui-chip__before\">\n    <ng-container *ngTemplateOutlet=\"before\"></ng-container>\n  </div>\n  <tgui-subheadline\n    class=\"tgui-chip__text\"\n    tag=\"span\"\n    [level]=\"platformService.isIOS() ? '2' : '1'\"\n    weight=\"2\">\n    <ng-content></ng-content>\n  </tgui-subheadline>\n  <div *ngIf=\"after\" class=\"tgui-chip__after\">\n    <ng-container *ngTemplateOutlet=\"after\"></ng-container>\n  </div>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "after",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent or component to be placed after the main text, such as an icon indicating an action.",
                    "description": "<p>Content or component to be placed after the main text, such as an icon indicating an action.</p>\n",
                    "line": 96,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "before",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent or component to be placed before the main text, typically an icon or avatar.",
                    "description": "<p>Content or component to be placed before the main text, typically an icon or avatar.</p>\n",
                    "line": 93,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom class name",
                    "description": "<p>Custom class name</p>\n",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'elevated'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the visual style of the chip, affecting its background, border, and shadow.",
                    "description": "<p>Defines the visual style of the chip, affecting its background, border, and shadow.</p>\n",
                    "line": 90,
                    "type": "\"elevated\" | \"mono\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Renders a compact element representing an input, attribute, or action.\nChips can include icons, text, or both, and are used to trigger actions,\ninput information, or represent a complex piece of information in a compact form.</p>\n",
            "rawdescription": "\n\nRenders a compact element representing an input, attribute, or action.\nChips can include icons, text, or both, and are used to trigger actions,\ninput information, or represent a complex piece of information in a compact form.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlatformService } from '@services/platform.service';\nimport { TappableComponent } from '@components/service/tappable';\nimport { SubheadlineComponent } from '@components/typography/subheadline/subheadline.component';\n\n/**\n * Renders a compact element representing an input, attribute, or action. \n * Chips can include icons, text, or both, and are used to trigger actions, \n * input information, or represent a complex piece of information in a compact form.\n */\n@Component({\n  selector: 'tgui-chip',\n  standalone: true,\n  imports: [CommonModule, TappableComponent, SubheadlineComponent],\n  template: `\n    <tgui-tappable \n      interactiveAnimation=\"background\"\n      [class]=\"'tgui-chip tgui-chip--' + mode\" \n      [ngClass]=\"className\">\n      <div *ngIf=\"before\" class=\"tgui-chip__before\">\n        <ng-container *ngTemplateOutlet=\"before\"></ng-container>\n      </div>\n      <tgui-subheadline \n        class=\"tgui-chip__text\"\n        tag=\"span\"\n        [level]=\"platformService.isIOS() ? '2' : '1'\"\n        weight=\"2\">\n        <ng-content></ng-content>\n      </tgui-subheadline>\n      <div *ngIf=\"after\" class=\"tgui-chip__after\">\n        <ng-container *ngTemplateOutlet=\"after\"></ng-container>\n      </div>\n    </tgui-tappable>\n  `,\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChipComponent {\n  /** Defines the visual style of the chip, affecting its background, border, and shadow. */\n  @Input() mode: 'elevated' | 'mono' | 'outline' = 'elevated';\n  \n  /** Content or component to be placed before the main text, typically an icon or avatar. */\n  @Input() before: any;\n  \n  /** Content or component to be placed after the main text, such as an icon indicating an action. */\n  @Input() after: any;\n  \n  /** Custom class name */\n  @Input() className: string = '';\n  \n  protected platformService = inject(PlatformService);\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  \n",
            "extends": []
        },
        {
            "name": "DividerComponent",
            "id": "component-DividerComponent-9dd1c8dba4ad71b25ecc1ae639741248264a85151c08bd5809a9dd562701ea1e71fbad36179df3f54ab6cac3dd6291a57e9010f62238ecbffe90cb7d2b450d92",
            "file": "projects/tgui/src/lib/core/components/misc/divider/divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-divider",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  "
            ],
            "template": "<hr class=\"tgui-divider\">",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Represents a horizontal line used to separate content within a layout or component.\nThe component allows customization through custom CSS classes.</p>\n",
            "rawdescription": "\n\nRepresents a horizontal line used to separate content within a layout or component.\nThe component allows customization through custom CSS classes.\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Represents a horizontal line used to separate content within a layout or component.\n * The component allows customization through custom CSS classes.\n */\n@Component({\n  selector: 'tgui-divider',\n  standalone: true,\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: `<hr class=\"tgui-divider\">`,\n  styles: [`\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  `]\n})\nexport class DividerComponent {} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "HeadlineComponent",
            "id": "component-HeadlineComponent-6caf74012bfc295a51b2757442ffe8bc9a02259f01b399664b2d0a216516d393cbdeff89c0e784da037aedc4b7506e18e7089322f8734e6ef5f9687de580239f",
            "file": "projects/tgui/src/lib/core/components/typography/headline/headline.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-headline",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the headline, influencing its styling.\n",
                    "description": "<p>The size level of the headline, influencing its styling.</p>\n",
                    "line": 55,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Headline component serves as a wrapper for text that is intended to be displayed prominently,\ntypically used for section headings or important titles within the application. It leverages the Typography\ncomponent for consistent typographic styling, offering a range of customization options through its props.\nThe component defaults to an <code>&lt;h5&gt;</code> HTML tag, providing semantic meaning and ensuring good SEO practices,\nbut can be customized as needed.</p>\n",
            "rawdescription": "\n\nThe Headline component serves as a wrapper for text that is intended to be displayed prominently,\ntypically used for section headings or important titles within the application. It leverages the Typography\ncomponent for consistent typographic styling, offering a range of customization options through its props.\nThe component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\nbut can be customized as needed.\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Headline component serves as a wrapper for text that is intended to be displayed prominently,\n * typically used for section headings or important titles within the application. It leverages the Typography\n * component for consistent typographic styling, offering a range of customization options through its props.\n * The component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\n * but can be customized as needed.\n */\n@Component({\n  selector: 'tgui-headline',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeadlineComponent extends TypographyComponent {\n  /**\n   * The size level of the headline, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h5 by default\n  @Input() override tag = 'h5';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "IntroductionComponent",
            "id": "component-IntroductionComponent-2c565a0fa380342b7e4435a5223ed2604cfd174a9f7cb65d45db07d201b809a250362facf24bf1a65591183cc881181272abedf4403fcc91bfc9d1644c38bc35",
            "file": "projects/tgui/src/stories/introduction.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-introduction",
            "styleUrls": [],
            "styles": [
                "\n    .introduction {\n      padding: 20px;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    h1 {\n      margin-bottom: 16px;\n    }\n    h2 {\n      margin-top: 24px;\n      margin-bottom: 12px;\n    }\n    ul {\n      padding-left: 20px;\n    }\n    li {\n      margin-bottom: 8px;\n    }\n    code {\n      background-color: rgba(0, 0, 0, 0.05);\n      padding: 2px 4px;\n      border-radius: 3px;\n      font-family: monospace;\n    }\n  "
            ],
            "template": "<div class=\"introduction\">\n  <h1>Welcome to TGUI for Angular</h1>\n  <p>This is the Angular implementation of the Telegram UI components for Web App development.</p>\n\n  <h2>Getting Started</h2>\n  <p>Check out the documentation for individual components or see the \"Getting Started\" guide for\n  installation instructions.</p>\n\n  <h2>Features</h2>\n  <ul>\n    <li>Theme support (light/dark)</li>\n    <li>Platform detection (iOS/base)</li>\n    <li>Telegram Web App integration</li>\n    <li>No wrapper component required</li>\n  </ul>\n\n  <h2>Component Organization</h2>\n  <p>Each component's stories are now co-located with the component itself in a <code>story</code> folder:</p>\n  <ul>\n    <li>Avatar: <code>src/lib/core/components/blocks/avatar/story/</code></li>\n    <li>Button: <code>src/lib/core/components/blocks/button/story/</code></li>\n    <li>Typography: <code>src/lib/core/components/typography/text/story/</code> (and others)</li>\n  </ul>\n  <p>This organization improves discoverability and makes maintenance easier.</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\n\n@Component({\n  selector: 'tgui-introduction',\n  template: `\n    <div class=\"introduction\">\n      <h1>Welcome to TGUI for Angular</h1>\n      <p>This is the Angular implementation of the Telegram UI components for Web App development.</p>\n      \n      <h2>Getting Started</h2>\n      <p>Check out the documentation for individual components or see the \"Getting Started\" guide for \n      installation instructions.</p>\n      \n      <h2>Features</h2>\n      <ul>\n        <li>Theme support (light/dark)</li>\n        <li>Platform detection (iOS/base)</li>\n        <li>Telegram Web App integration</li>\n        <li>No wrapper component required</li>\n      </ul>\n      \n      <h2>Component Organization</h2>\n      <p>Each component's stories are now co-located with the component itself in a <code>story</code> folder:</p>\n      <ul>\n        <li>Avatar: <code>src/lib/core/components/blocks/avatar/story/</code></li>\n        <li>Button: <code>src/lib/core/components/blocks/button/story/</code></li>\n        <li>Typography: <code>src/lib/core/components/typography/text/story/</code> (and others)</li>\n      </ul>\n      <p>This organization improves discoverability and makes maintenance easier.</p>\n    </div>\n  `,\n  styles: [`\n    .introduction {\n      padding: 20px;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    h1 {\n      margin-bottom: 16px;\n    }\n    h2 {\n      margin-top: 24px;\n      margin-bottom: 12px;\n    }\n    ul {\n      padding-left: 20px;\n    }\n    li {\n      margin-bottom: 8px;\n    }\n    code {\n      background-color: rgba(0, 0, 0, 0.05);\n      padding: 2px 4px;\n      border-radius: 3px;\n      font-family: monospace;\n    }\n  `],\n  standalone: true\n})\nexport class IntroductionComponent {}\n\n// More on how to set up stories at: https://storybook.js.org/docs/angular/writing-stories/introduction\nconst meta: Meta<IntroductionComponent> = {\n  title: 'Introduction',\n  component: IntroductionComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [IntroductionComponent]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<IntroductionComponent>;\n\nexport const Default: Story = {}; ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .introduction {\n      padding: 20px;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    h1 {\n      margin-bottom: 16px;\n    }\n    h2 {\n      margin-top: 24px;\n      margin-bottom: 12px;\n    }\n    ul {\n      padding-left: 20px;\n    }\n    li {\n      margin-bottom: 8px;\n    }\n    code {\n      background-color: rgba(0, 0, 0, 0.05);\n      padding: 2px 4px;\n      border-radius: 3px;\n      font-family: monospace;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "LargeTitleComponent",
            "id": "component-LargeTitleComponent-2bcdd81ba6aa1295bb38709626b10362dcd103e71db9c2268c61af353e5915206d0ad5b372974e98a4c56d63e511acbbfbaccad24cc13078cdc4b009d226f299",
            "file": "projects/tgui/src/lib/core/components/typography/large-title/large-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-large-title",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the large title, influencing its styling.\n",
                    "description": "<p>The size level of the large title, influencing its styling.</p>\n",
                    "line": 55,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The LargeTitle component is designed for prominent display text, typically used for major headings\nor titles within an application. It encapsulates the Typography component&#39;s features, offering\nextensive styling and semantic customization options while defaulting to an <code>&lt;h1&gt;</code> HTML element.\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\nmaking it suitable for primary page titles or significant headings.</p>\n",
            "rawdescription": "\n\nThe LargeTitle component is designed for prominent display text, typically used for major headings\nor titles within an application. It encapsulates the Typography component's features, offering\nextensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\nmaking it suitable for primary page titles or significant headings.\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The LargeTitle component is designed for prominent display text, typically used for major headings\n * or titles within an application. It encapsulates the Typography component's features, offering\n * extensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\n * This choice of default component underscores the importance and hierarchy of the text it encapsulates,\n * making it suitable for primary page titles or significant headings.\n */\n@Component({\n  selector: 'tgui-large-title',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LargeTitleComponent extends TypographyComponent {\n  /**\n   * The size level of the large title, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h1 by default\n  @Input() override tag = 'h1';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "RippleComponent",
            "id": "component-RippleComponent-422d8636cc6a8711c938e5f3e9ae8cce6f74c9cb052999a6684d00b8cc8ce07de0ef980e19b9fc0f5ce552fbe77f1c062faad17527bd54d9ce91f09d980c3a46",
            "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/ripple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-ripple",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  "
            ],
            "template": "<span\n  class=\"ripple-wrapper\"\n  aria-hidden=\"true\"\n>\n  <span\n    *ngFor=\"let wave of waves\"\n    class=\"ripple-wave\"\n    [style.top.px]=\"wave.y\"\n    [style.left.px]=\"wave.x\"\n    [attr.data-id]=\"wave.pointerId\"\n  ></span>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "waves",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe collection of active ripple waves\n",
                    "description": "<p>The collection of active ripple waves</p>\n",
                    "line": 82,
                    "type": "RippleWave[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RippleWave } from '@services/ripple.service';\n\n@Component({\n  selector: 'tgui-ripple',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <span \n      class=\"ripple-wrapper\" \n      aria-hidden=\"true\"\n    >\n      <span \n        *ngFor=\"let wave of waves\" \n        class=\"ripple-wave\"\n        [style.top.px]=\"wave.y\"\n        [style.left.px]=\"wave.x\"\n        [attr.data-id]=\"wave.pointerId\"\n      ></span>\n    </span>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RippleComponent {\n  /**\n   * The collection of active ripple waves\n   */\n  @Input() waves: RippleWave[] = [];\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  \n",
            "extends": []
        },
        {
            "name": "RootPortalComponent",
            "id": "component-RootPortalComponent-7a4ca8c81deb2487c595e003527c5177bf0287718147627babcabc1114695453277e330319e27f5bf8b7cf41c08de5c2a1225fe006de35f3705a118cbbc8d173",
            "file": "projects/tgui/src/lib/core/components/service/portal/root-portal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-root-portal",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  "
            ],
            "template": "<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component for rendering content in the portal container\nSimilar to RootRenderer in React version</p>\n",
            "rawdescription": "\n\nComponent for rendering content in the portal container\nSimilar to RootRenderer in React version\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, ViewChild, ViewContainerRef, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ViewEncapsulation, effect, inject, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { PortalService } from '@services/portal.service';\n\n/**\n * Component for rendering content in the portal container\n * Similar to RootRenderer in React version\n */\n@Component({\n  selector: 'tgui-root-portal',\n  template: `\n    <ng-template #contentTemplate>\n      <ng-content></ng-content>\n    </ng-template>\n  `,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [`\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n})\nexport class RootPortalComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('contentTemplate', {static: true}) contentTemplate!: TemplateRef<any>;\n  \n  private destroy$ = new Subject<void>();\n  private viewRef: any = null;\n  private templateReady = false;\n  \n  private portalService = inject(PortalService);\n  private viewContainerRef = inject(ViewContainerRef);\n  private cdr = inject(ChangeDetectorRef);\n  \n  constructor() {\n    // Use effect to react to portal container changes\n    effect(() => {\n      const container = this.portalService.portalContainer();\n      console.log('Portal container changed:', container?.nativeElement);\n      \n      if (!this.templateReady || !this.contentTemplate) {\n        console.log('Template not ready yet, waiting...');\n        return;\n      }\n      \n      console.log('Template is ready, proceeding with portal rendering');\n      \n      // Clear previous view if it exists\n      if (this.viewRef) {\n        try {\n          this.viewContainerRef.remove(\n            this.viewContainerRef.indexOf(this.viewRef)\n          );\n        } catch (e) {\n          console.error('Error removing portal view:', e);\n        }\n        this.viewRef = null;\n      }\n      \n      if (container && container.nativeElement) {\n        console.log('Creating and inserting view into portal container');\n        \n        try {\n          // Create and insert view\n          this.viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate);\n          this.cdr.detectChanges();\n          \n          // Move nodes to portal container\n          this.viewRef.rootNodes.forEach((node: Node) => {\n            // Apply font-family to top-level nodes if they're HTML elements\n            if (node instanceof HTMLElement) {\n              node.style.fontFamily = 'var(--tgui--font-family)';\n            }\n            container.nativeElement.appendChild(node);\n          });\n          \n          console.log('Portal content successfully rendered');\n        } catch (e) {\n          console.error('Error creating portal view:', e);\n        }\n      } else {\n        console.warn('No portal container available');\n      }\n    });\n  }\n  \n  ngAfterViewInit(): void {\n    console.log('ngAfterViewInit triggered, marking template as ready');\n    \n    // Force immediate check to ensure template detection\n    this.cdr.detectChanges();\n    \n    // Mark template as ready to use in the effect\n    this.templateReady = true;\n    \n    // Force the effect to run again now that template is ready\n    setTimeout(() => {\n      console.log('Forcing container check');\n      const container = this.portalService.portalContainer();\n      // Even if container is the same object, this change\n      // will trigger the effect to run again\n      if (container) {\n        this.portalService.clearPortalContainer();\n        setTimeout(() => {\n          this.portalService.setPortalContainer(container);\n        }, 0);\n      }\n    }, 0);\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    // Clean up view\n    if (this.viewRef) {\n      try {\n        this.viewContainerRef.remove(\n          this.viewContainerRef.indexOf(this.viewRef)\n        );\n      } catch (e) {\n        console.error('Error cleaning up portal view:', e);\n      }\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SectionComponent",
            "id": "component-SectionComponent-20d085c91f400cac897a86029269bda872e3827cc5b946692fd592fc7cf6847fa14ecc711caa0e59b9b7d19608743e01757a7baee47c53f3df7d12cb8f2b04bd",
            "file": "projects/tgui/src/lib/core/components/blocks/section/section.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    :host-context(.tgui-platform-base) .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  "
            ],
            "template": "<section class=\"tgui-section\" [ngClass]=\"sectionClasses\">\n  <div class=\"tgui-section-body-with-header\">\n    <!-- Header with wrapper -->\n    <ng-container *ngIf=\"headerContent || headerTemplate\">\n      <tgui-section-header *ngIf=\"headerContent && isPrimitiveContent(headerContent)\">\n        {{headerContent}}\n      </tgui-section-header>\n      <ng-container *ngIf=\"headerTemplate\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- Custom header content projection -->\n    <ng-content select=\"tgui-section-header\"></ng-content>\n\n    <!-- Body content -->\n    <div class=\"tgui-section-body\">\n      <ng-container *ngFor=\"let content of contentProjections; let last = last; let i = index\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        <tgui-divider *ngIf=\"!last\" class=\"tgui-section-divider\"></tgui-divider>\n      </ng-container>\n\n      <!-- Default content projection -->\n      <ng-content></ng-content>\n    </div>\n  </div>\n\n  <!-- Footer with wrapper -->\n  <ng-container *ngIf=\"footerContent || footerTemplate\">\n    <tgui-section-footer *ngIf=\"footerContent && isPrimitiveContent(footerContent)\">\n      {{footerContent}}\n    </tgui-section-footer>\n    <ng-container *ngIf=\"footerTemplate\">\n      <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n\n  <!-- Custom footer content projection -->\n  <ng-content select=\"tgui-section-footer\"></ng-content>\n</section>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nКонтент для футера секции. Если передана строка, автоматически используется SectionFooter.\nДля центрированного футера используйте <tgui-section-footer centered>...</tgui-section-footer>.\n",
                    "description": "<p>Контент для футера секции. Если передана строка, автоматически используется SectionFooter.\nДля центрированного футера используйте <tgui-section-footer centered>...</tgui-section-footer>.</p>\n",
                    "line": 129,
                    "type": "string | number | TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nКонтент для заголовка секции. Если передана строка, автоматически используется SectionHeader.\nДля большего контроля или большого заголовка используйте <tgui-section-header large>...</tgui-section-header>.\n",
                    "description": "<p>Контент для заголовка секции. Если передана строка, автоматически используется SectionHeader.\nДля большего контроля или большого заголовка используйте <tgui-section-header large>...</tgui-section-header>.</p>\n",
                    "line": 123,
                    "type": "string | number | TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateRef<any>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "contentProjections",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "footerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 133,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'footerContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'headerContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isPrimitive",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПроверяет, является ли значение примитивом (строка или число)\n",
                    "description": "<p>Проверяет, является ли значение примитивом (строка или число)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPrimitiveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПроверяет, является ли контент примитивом\n",
                    "description": "<p>Проверяет, является ли контент примитивом</p>\n",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "DividerComponent",
                    "type": "component"
                },
                {
                    "name": "SectionHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "SectionFooterComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент Section организовывает содержимое в отдельные секции с опциональными\nзаголовками и футерами. Автоматически оборачивает строки и числа в соответствующие\nкомпоненты SectionHeader и SectionFooter, а также вставляет разделители между\nдочерними элементами.</p>\n",
            "rawdescription": "\n\nКомпонент Section организовывает содержимое в отдельные секции с опциональными\nзаголовками и футерами. Автоматически оборачивает строки и числа в соответствующие\nкомпоненты SectionHeader и SectionFooter, а также вставляет разделители между\nдочерними элементами.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  ContentChild,\n  TemplateRef,\n  ViewChild,\n  ElementRef,\n  inject,\n  AfterContentInit,\n  ContentChildren,\n  QueryList\n} from '@angular/core';\nimport { CommonModule, NgClass, NgTemplateOutlet } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\nimport { DividerComponent } from '@misc/divider/divider.component';\nimport { SectionHeaderComponent } from './components/section-header/section-header.component';\nimport { SectionFooterComponent } from './components/section-footer/section-footer.component';\n\n/**\n * Компонент Section организовывает содержимое в отдельные секции с опциональными\n * заголовками и футерами. Автоматически оборачивает строки и числа в соответствующие\n * компоненты SectionHeader и SectionFooter, а также вставляет разделители между\n * дочерними элементами.\n */\n@Component({\n  selector: 'tgui-section',\n  standalone: true,\n  imports: [CommonModule, NgClass, NgTemplateOutlet, DividerComponent, SectionHeaderComponent, SectionFooterComponent],\n  template: `\n    <section class=\"tgui-section\" [ngClass]=\"sectionClasses\">\n      <div class=\"tgui-section-body-with-header\">\n        <!-- Header with wrapper -->\n        <ng-container *ngIf=\"headerContent || headerTemplate\">\n          <tgui-section-header *ngIf=\"headerContent && isPrimitiveContent(headerContent)\">\n            {{headerContent}}\n          </tgui-section-header>\n          <ng-container *ngIf=\"headerTemplate\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n\n        <!-- Custom header content projection -->\n        <ng-content select=\"tgui-section-header\"></ng-content>\n\n        <!-- Body content -->\n        <div class=\"tgui-section-body\">\n          <ng-container *ngFor=\"let content of contentProjections; let last = last; let i = index\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n            <tgui-divider *ngIf=\"!last\" class=\"tgui-section-divider\"></tgui-divider>\n          </ng-container>\n          \n          <!-- Default content projection -->\n          <ng-content></ng-content>\n        </div>\n      </div>\n\n      <!-- Footer with wrapper -->\n      <ng-container *ngIf=\"footerContent || footerTemplate\">\n        <tgui-section-footer *ngIf=\"footerContent && isPrimitiveContent(footerContent)\">\n          {{footerContent}}\n        </tgui-section-footer>\n        <ng-container *ngIf=\"footerTemplate\">\n          <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </ng-container>\n      </ng-container>\n\n      <!-- Custom footer content projection -->\n      <ng-content select=\"tgui-section-footer\"></ng-content>\n    </section>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    :host-context(.tgui-platform-base) .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'attr.data-refresh-platform': 'true'\n  }\n})\nexport class SectionComponent implements AfterContentInit {\n  /**\n   * Контент для заголовка секции. Если передана строка, автоматически используется SectionHeader.\n   * Для большего контроля или большого заголовка используйте <tgui-section-header large>...</tgui-section-header>.\n   */\n  @Input() header?: string | number | TemplateRef<any>;\n\n  /**\n   * Контент для футера секции. Если передана строка, автоматически используется SectionFooter.\n   * Для центрированного футера используйте <tgui-section-footer centered>...</tgui-section-footer>.\n   */\n  @Input() footer?: string | number | TemplateRef<any>;\n\n  // Шаблоны из проекции содержимого\n  @ContentChild('headerContent') headerTemplate?: TemplateRef<any>;\n  @ContentChild('footerContent') footerTemplate?: TemplateRef<any>;\n\n  // Для хранения контента между элементами\n  @ContentChildren(TemplateRef) contentNodes!: QueryList<TemplateRef<any>>;\n  contentProjections: TemplateRef<any>[] = [];\n\n  private platformService = inject(PlatformService);\n\n  get isPlatformIOS(): boolean {\n    return this.platformService.isIOS();\n  }\n\n  get sectionClasses(): Record<string, boolean> {\n    return {\n      'tgui-section--ios': this.isPlatformIOS,\n      'tgui-section--base': !this.isPlatformIOS\n    };\n  }\n\n  // Получаем контент для header и footer\n  get headerContent(): string | number | null {\n    return this.isPrimitive(this.header) ? this.header as string | number : null;\n  }\n\n  get footerContent(): string | number | null {\n    return this.isPrimitive(this.footer) ? this.footer as string | number : null;\n  }\n\n  ngAfterContentInit(): void {\n    // Получаем все проекции шаблонов между разделителями\n    if (this.contentNodes) {\n      this.contentProjections = this.contentNodes.toArray();\n    }\n  }\n\n  /**\n   * Проверяет, является ли значение примитивом (строка или число)\n   */\n  isPrimitive(value: any): boolean {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  /**\n   * Проверяет, является ли контент примитивом\n   */\n  isPrimitiveContent(content: any): boolean {\n    return this.isPrimitive(content);\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    :host-context(.tgui-platform-base) .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  \n",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "isPlatformIOS": {
                    "name": "isPlatformIOS",
                    "getSignature": {
                        "name": "isPlatformIOS",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 141
                    }
                },
                "sectionClasses": {
                    "name": "sectionClasses",
                    "getSignature": {
                        "name": "sectionClasses",
                        "type": "",
                        "returnType": "Record<string, boolean>",
                        "line": 145
                    }
                },
                "headerContent": {
                    "name": "headerContent",
                    "getSignature": {
                        "name": "headerContent",
                        "type": "",
                        "returnType": "string | number | null",
                        "line": 153
                    }
                },
                "footerContent": {
                    "name": "footerContent",
                    "getSignature": {
                        "name": "footerContent",
                        "type": "",
                        "returnType": "string | number | null",
                        "line": 157
                    }
                }
            }
        },
        {
            "name": "SectionFooterComponent",
            "id": "component-SectionFooterComponent-79790963000beda6339f24337657df8b550e586014ba45549d13b51b5bbcb6791d2310327c7cd396cab0cb023eeb727ef0c35b9e519fa5b8ad706f8f2e2287b7",
            "file": "projects/tgui/src/lib/core/components/blocks/section/components/section-footer/section-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section-footer",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--ios {\n      padding: 8px 16px 0;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    .tgui-section-footer--ios.tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n\n    .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  "
            ],
            "template": "<footer class=\"tgui-section-footer\" [ngClass]=\"footerClasses\">\n  <ng-container *ngIf=\"isPlatformIOS; else baseFooter\">\n    <tgui-caption class=\"tgui-section-footer-text\">\n      <ng-content></ng-content>\n    </tgui-caption>\n  </ng-container>\n  <ng-template #baseFooter>\n    <tgui-subheadline level=\"2\" class=\"tgui-section-footer-text\">\n      <ng-content></ng-content>\n    </tgui-subheadline>\n  </ng-template>\n</footer>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "centered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nЦентрирование текста, добавление дополнительных отступов",
                    "description": "<p>Центрирование текста, добавление дополнительных отступов</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент SectionFooter представляет футер для компонента Section.\nПоддерживает режим centered для центрированного текста.</p>\n",
            "rawdescription": "\n\nКомпонент SectionFooter представляет футер для компонента Section.\nПоддерживает режим centered для центрированного текста.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  inject\n} from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { SubheadlineComponent } from '@typography/subheadline/subheadline.component';\n\n/**\n * Компонент SectionFooter представляет футер для компонента Section.\n * Поддерживает режим centered для центрированного текста.\n */\n@Component({\n  selector: 'tgui-section-footer',\n  standalone: true,\n  imports: [CommonModule, NgClass, CaptionComponent, SubheadlineComponent],\n  template: `\n    <footer class=\"tgui-section-footer\" [ngClass]=\"footerClasses\">\n      <ng-container *ngIf=\"isPlatformIOS; else baseFooter\">\n        <tgui-caption class=\"tgui-section-footer-text\">\n          <ng-content></ng-content>\n        </tgui-caption>\n      </ng-container>\n      <ng-template #baseFooter>\n        <tgui-subheadline level=\"2\" class=\"tgui-section-footer-text\">\n          <ng-content></ng-content>\n        </tgui-subheadline>\n      </ng-template>\n    </footer>\n  `,\n  styles: [`\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--ios {\n      padding: 8px 16px 0;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    .tgui-section-footer--ios.tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n\n    .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SectionFooterComponent {\n  /** Центрирование текста, добавление дополнительных отступов */\n  @Input() centered = false;\n\n  private platformService = inject(PlatformService);\n\n  get isPlatformIOS(): boolean {\n    return this.platformService.isIOS();\n  }\n\n  get footerClasses(): Record<string, boolean> {\n    return {\n      'tgui-section-footer--ios': this.isPlatformIOS,\n      'tgui-section-footer--centered': this.centered\n    };\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--ios {\n      padding: 8px 16px 0;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    .tgui-section-footer--ios.tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n\n    .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isPlatformIOS": {
                    "name": "isPlatformIOS",
                    "getSignature": {
                        "name": "isPlatformIOS",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 67
                    }
                },
                "footerClasses": {
                    "name": "footerClasses",
                    "getSignature": {
                        "name": "footerClasses",
                        "type": "",
                        "returnType": "Record<string, boolean>",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "SectionHeaderComponent",
            "id": "component-SectionHeaderComponent-db09c2c9b4b1fa2c2cdde44b617f20a58dea2e3e317a9ae083d04898181e3949304b15dbf7ef893fa670762c29736a032b04289c12e38a402408a466513c6b6a",
            "file": "projects/tgui/src/lib/core/components/blocks/section/components/section-header/section-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section-header",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-section-header--ios {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  "
            ],
            "template": "<header class=\"tgui-section-header\" [ngClass]=\"headerClasses\">\n  <ng-container *ngIf=\"large; else defaultHeader\">\n    <tgui-large-title>\n      <ng-content></ng-content>\n    </tgui-large-title>\n  </ng-container>\n  <ng-template #defaultHeader>\n    <tgui-headline>\n      <ng-content></ng-content>\n    </tgui-headline>\n  </ng-template>\n</header>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "large",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nУвеличенный заголовок, изменяет размер шрифта, отступы и цвет",
                    "description": "<p>Увеличенный заголовок, изменяет размер шрифта, отступы и цвет</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "HeadlineComponent",
                    "type": "component"
                },
                {
                    "name": "LargeTitleComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент SectionHeader представляет заголовок для компонента Section.\nПоддерживает режим large для увеличенного заголовка.</p>\n",
            "rawdescription": "\n\nКомпонент SectionHeader представляет заголовок для компонента Section.\nПоддерживает режим large для увеличенного заголовка.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  inject\n} from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\nimport { HeadlineComponent } from '@typography/headline/headline.component';\nimport { LargeTitleComponent } from '@typography/large-title/large-title.component';\n\n/**\n * Компонент SectionHeader представляет заголовок для компонента Section.\n * Поддерживает режим large для увеличенного заголовка.\n */\n@Component({\n  selector: 'tgui-section-header',\n  standalone: true,\n  imports: [CommonModule, NgClass, HeadlineComponent, LargeTitleComponent],\n  template: `\n    <header class=\"tgui-section-header\" [ngClass]=\"headerClasses\">\n      <ng-container *ngIf=\"large; else defaultHeader\">\n        <tgui-large-title>\n          <ng-content></ng-content>\n        </tgui-large-title>\n      </ng-container>\n      <ng-template #defaultHeader>\n        <tgui-headline>\n          <ng-content></ng-content>\n        </tgui-headline>\n      </ng-template>\n    </header>\n  `,\n  styles: [`\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-section-header--ios {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SectionHeaderComponent {\n  /** Увеличенный заголовок, изменяет размер шрифта, отступы и цвет */\n  @Input() large = false;\n\n  private platformService = inject(PlatformService);\n\n  get isPlatformIOS(): boolean {\n    return this.platformService.isIOS();\n  }\n\n  get headerClasses(): Record<string, boolean> {\n    return {\n      'tgui-section-header--ios': this.isPlatformIOS,\n      'tgui-section-header--large': this.large\n    };\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-section-header--ios {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isPlatformIOS": {
                    "name": "isPlatformIOS",
                    "getSignature": {
                        "name": "isPlatformIOS",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66
                    }
                },
                "headerClasses": {
                    "name": "headerClasses",
                    "getSignature": {
                        "name": "headerClasses",
                        "type": "",
                        "returnType": "Record<string, boolean>",
                        "line": 70
                    }
                }
            }
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-c14943a9a2a4ce140b46793fe6880880faf6627242b06d579582ae0b7c6fc3cfeec2f3ec9d3cec2bdeb0746e6830312b8a13ce2daaa82192f72843575b6e009e",
            "file": "projects/tgui/src/lib/core/components/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-spinner",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isIOS; else baseSpinner\">\n  <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n    <path\n      d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n</ng-container>\n<ng-template #baseSpinner>\n  <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n    <circle\n      class=\"spinner-path\"\n      cx=\"25\"\n      cy=\"25\"\n      r=\"20\"\n      fill=\"none\"\n      stroke-width=\"4\"\n    />\n  </svg>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазмер индикатора загрузки ('s' - малый, 'm' - средний, 'l' - большой)\n",
                    "description": "<p>Размер индикатора загрузки (&#39;s&#39; - малый, &#39;m&#39; - средний, &#39;l&#39; - большой)</p>\n",
                    "line": 100,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Флаг, указывающий, является ли текущая платформа iOS</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nФлаг, указывающий, является ли текущая платформа iOS\n"
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Компонент Spinner отображает индикатор загрузки.\nАвтоматически выбирает соответствующий стиль индикатора в зависимости от платформы.</p>\n",
            "rawdescription": "\n\nКомпонент Spinner отображает индикатор загрузки.\nАвтоматически выбирает соответствующий стиль индикатора в зависимости от платформы.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\n\n/**\n * Компонент Spinner отображает индикатор загрузки.\n * Автоматически выбирает соответствующий стиль индикатора в зависимости от платформы.\n */\n@Component({\n  selector: 'tgui-spinner',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <ng-container *ngIf=\"isIOS; else baseSpinner\">\n      <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n        <path \n          d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ng-container>\n    <ng-template #baseSpinner>\n      <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n        <circle\n          class=\"spinner-path\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          stroke-width=\"4\"\n        />\n      </svg>\n    </ng-template>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpinnerComponent implements OnInit {\n  /**\n   * Размер индикатора загрузки ('s' - малый, 'm' - средний, 'l' - большой)\n   */\n  @Input() size: 's' | 'm' | 'l' = 'm';\n  \n  /**\n   * Флаг, указывающий, является ли текущая платформа iOS\n   */\n  isIOS = false;\n\n  private platformService = inject(PlatformService);\n\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  @HostBinding('attr.role') role = 'status';\n\n  ngOnInit(): void {\n    // Получаем текущую платформу из сервиса\n    this.isIOS = this.platformService.isIOS();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 111
                    }
                }
            }
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-81b415483a4d45def1425ffbd82e628d6c3008552d4837dbf71eb2ae30cdbecad89d5fc3f121397c1893a3061e995c4573af6261b18376f6f529d7cef4a32214-1",
            "file": "projects/tgui/src/lib/core/components/feedback/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-spinner",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isIOS; else baseSpinner\">\n  <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n    <path\n      d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n</ng-container>\n<ng-template #baseSpinner>\n  <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n    <circle\n      class=\"spinner-path\"\n      cx=\"25\"\n      cy=\"25\"\n      r=\"20\"\n      fill=\"none\"\n      stroke-width=\"4\"\n    />\n  </svg>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the loading indicator ('s' - small, 'm' - medium, 'l' - large)\n",
                    "description": "<p>Size of the loading indicator (&#39;s&#39; - small, &#39;m&#39; - medium, &#39;l&#39; - large)</p>\n",
                    "line": 100,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag indicating whether the current platform is iOS</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nFlag indicating whether the current platform is iOS\n"
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Spinner component displays a loading indicator.\nAutomatically selects the appropriate indicator style based on the platform.</p>\n",
            "rawdescription": "\n\nSpinner component displays a loading indicator.\nAutomatically selects the appropriate indicator style based on the platform.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\n\n/**\n * Spinner component displays a loading indicator.\n * Automatically selects the appropriate indicator style based on the platform.\n */\n@Component({\n  selector: 'tgui-spinner',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <ng-container *ngIf=\"isIOS; else baseSpinner\">\n      <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n        <path \n          d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ng-container>\n    <ng-template #baseSpinner>\n      <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n        <circle\n          class=\"spinner-path\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          stroke-width=\"4\"\n        />\n      </svg>\n    </ng-template>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpinnerComponent implements OnInit {\n  /**\n   * Size of the loading indicator ('s' - small, 'm' - medium, 'l' - large)\n   */\n  @Input() size: 's' | 'm' | 'l' = 'm';\n  \n  /**\n   * Flag indicating whether the current platform is iOS\n   */\n  isIOS = false;\n\n  private platformService = inject(PlatformService);\n\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  @HostBinding('attr.role') role = 'status';\n\n  ngOnInit(): void {\n    // Get current platform from service\n    this.isIOS = this.platformService.isIOS();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 111
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SpinnerComponent-1"
        },
        {
            "name": "SubheadlineComponent",
            "id": "component-SubheadlineComponent-7d5553bc2966228a1c1b4f707a6444a5661359f8c83700153bcf91147843dd5722405acb736789c7f039fcfdc32c006f72d623d2de9877ee9025415309754866",
            "file": "projects/tgui/src/lib/core/components/typography/subheadline/subheadline.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-subheadline",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the size of the subheadline, with `1` being the default and '2' providing a smaller option.\n",
                    "description": "<p>Determines the size of the subheadline, with <code>1</code> being the default and &#39;2&#39; providing a smaller option.</p>\n",
                    "line": 54,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h6'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Subheadline component is designed to render text that serves as a secondary heading\nor subheading within content. It leverages the Typography component for consistent text styling,\noffering additional control over the text&#39;s size through the <code>level</code> prop. By default, it renders\nas an <code>&lt;h6&gt;</code> element but can be customized with the <code>tag</code> property.</p>\n",
            "rawdescription": "\n\nThe Subheadline component is designed to render text that serves as a secondary heading\nor subheading within content. It leverages the Typography component for consistent text styling,\noffering additional control over the text's size through the `level` prop. By default, it renders\nas an `<h6>` element but can be customized with the `tag` property.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Subheadline component is designed to render text that serves as a secondary heading\n * or subheading within content. It leverages the Typography component for consistent text styling,\n * offering additional control over the text's size through the `level` prop. By default, it renders\n * as an `<h6>` element but can be customized with the `tag` property.\n */\n@Component({\n  selector: 'tgui-subheadline',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SubheadlineComponent extends TypographyComponent {\n  /**\n   * Determines the size of the subheadline, with `1` being the default and '2' providing a smaller option.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h6 by default\n  @Input() override tag = 'h6';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "TappableComponent",
            "id": "component-TappableComponent-eb5709175842360ff2d785d74f3e2d1b56181fff26aafe25b47e96e4b2ab760f0b603ca52267e6092fd841f0ac1b08a457c6325fdf112ab975f7ad889a7486d8",
            "file": "projects/tgui/src/lib/core/components/service/tappable/tappable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-tappable",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      width: 100%;\n      height: 100%;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  "
            ],
            "template": "<tgui-ripple *ngIf=\"hasRippleEffect\" [waves]=\"rippleWaves()\"></tgui-ripple>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisable the component",
                    "description": "<p>Disable the component</p>\n",
                    "line": 73,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAnimation type for interactive elements",
                    "description": "<p>Animation type for interactive elements</p>\n",
                    "line": 58,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisable interactions",
                    "description": "<p>Disable interactions</p>\n",
                    "line": 61,
                    "type": "boolean | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag to determine current platform</p>\n",
                    "line": 88,
                    "rawdescription": "\nFlag to determine current platform",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rippleService",
                    "defaultValue": "inject(RippleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rippleWaves",
                    "defaultValue": "signal<RippleWave[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Ripple waves for the ripple effect</p>\n",
                    "line": 85,
                    "rawdescription": "\nRipple waves for the ripple effect"
                }
            ],
            "methodsClass": [
                {
                    "name": "isReadOnly",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the component is read-only\n",
                    "description": "<p>Check if the component is read-only</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPointerCancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel event\n",
                    "description": "<p>Handle pointer cancel event</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointercancel', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerup', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170,
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPointerDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer down event\n",
                    "description": "<p>Handle pointer down event</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerdown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply class for disabled state\n",
                    "description": "<p>Apply class for disabled state</p>\n",
                    "line": 116,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply class for readonly state\n",
                    "description": "<p>Apply class for readonly state</p>\n",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.tappable--opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply CSS class for opacity animation\n",
                    "description": "<p>Apply CSS class for opacity animation</p>\n",
                    "line": 125,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "pointercancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel event\n",
                    "description": "<p>Handle pointer cancel event</p>\n",
                    "line": 160
                },
                {
                    "name": "pointerdown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer down event\n",
                    "description": "<p>Handle pointer down event</p>\n",
                    "line": 146
                },
                {
                    "name": "pointerleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel event\n",
                    "description": "<p>Handle pointer cancel event</p>\n",
                    "line": 160
                },
                {
                    "name": "pointerup",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel event\n",
                    "description": "<p>Handle pointer cancel event</p>\n",
                    "line": 160
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RippleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ElementRef, HostBinding, HostListener, OnInit, OnDestroy, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, signal, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlatformService } from '@services/platform.service';\nimport { RippleService, RippleWave } from '@services/ripple.service';\nimport { RippleComponent } from './components/ripple/ripple.component';\n\n@Component({\n  selector: 'tgui-tappable',\n  standalone: true,\n  imports: [CommonModule, RippleComponent],\n  template: `\n      <tgui-ripple *ngIf=\"hasRippleEffect\" [waves]=\"rippleWaves()\"></tgui-ripple>\n      <ng-content></ng-content>\n  `,\n  styles: [`\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      width: 100%;\n      height: 100%;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TappableComponent implements OnInit, OnDestroy {\n  /** Animation type for interactive elements */\n  @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n  /** Disable interactions */\n  @Input() set readonly(value: boolean | string) {\n    this._readonly = value;\n  }\n  get readonly(): boolean | string {\n    return this._readonly;\n  }\n  @HostBinding('attr.readonly') get readonlyAttr() {\n    return this._readonly ? '' : null;\n  }\n  private _readonly: boolean | string = false;\n  \n  /** Disable the component */\n  @Input() set disabled(value: boolean | string) {\n    this._disabled = value;\n  }\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  @HostBinding('attr.disabled') get disabledAttr() {\n    return this._disabled ? '' : null;\n  }\n  private _disabled: boolean | string = false;\n  \n  /** Ripple waves for the ripple effect */\n  rippleWaves = signal<RippleWave[]>([]);\n  \n  /** Flag to determine current platform */\n  private isIOS = false;\n  \n  /**\n   * Whether to show ripple effect\n   */\n  get hasRippleEffect(): boolean {\n    const isDisabled = this.isReadOnly();\n    \n    // Show ripple only for base (non-iOS) platform,\n    // with 'background' animation type and not in disabled/readonly state\n    return !this.isIOS && \n           this.interactiveAnimation === 'background' && \n           !isDisabled;\n  }\n\n  /**\n   * Apply class for readonly state\n   */\n  @HostBinding('class.readonly')\n  get isReadonlyClass(): boolean {\n    return this._readonly === true || \n           (typeof this._readonly === 'string' && this._readonly !== 'false');\n  }\n\n  /**\n   * Apply class for disabled state\n   */\n  @HostBinding('class.disabled')\n  get isDisabledClass(): boolean {\n    return this._disabled === true || \n           (typeof this._disabled === 'string' && this._disabled !== 'false');\n  }\n\n  /**\n   * Apply CSS class for opacity animation\n   */\n  @HostBinding('class.tappable--opacity')\n  get isOpacityAnimation(): boolean {\n    return this.interactiveAnimation === 'opacity';\n  }\n\n  private rippleService = inject(RippleService);\n  private platformService = inject(PlatformService);\n  private elementRef = inject(ElementRef);\n\n  ngOnInit(): void {\n    // Get current platform from service\n    this.isIOS = this.platformService.isIOS();\n  }\n\n  ngOnDestroy(): void {\n    // No need to unsubscribe since we're using signals\n  }\n\n  /**\n   * Handle pointer down event\n   */\n  @HostListener('pointerdown', ['$event'])\n  onPointerDown(event: PointerEvent): void {\n    \n    // Check readonly only for ripple effect, but always process the event\n    if (!this.isReadOnly() && this.hasRippleEffect) {\n      this.rippleService.handlePointerDown(event, this.rippleWaves);\n    }\n  }\n\n  /**\n   * Handle pointer cancel event\n   */\n  @HostListener('pointercancel', ['$event'])\n  @HostListener('pointerup', ['$event'])\n  @HostListener('pointerleave', ['$event'])\n  onPointerCancel(event: PointerEvent): void {\n    if (this.hasRippleEffect) {\n      this.rippleService.handlePointerCancel(event.pointerId);\n    }\n  }\n\n  /**\n   * Check if the component is read-only\n   */\n  private isReadOnly(): boolean {\n    const isReadonlyValue = this._readonly === true || \n                          (typeof this._readonly === 'string' && this._readonly !== 'false');\n    const isDisabledValue = this._disabled === true || \n                          (typeof this._disabled === 'string' && this._disabled !== 'false');\n    \n    return isReadonlyValue || isDisabledValue;\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      width: 100%;\n      height: 100%;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "rawdescription": "\nDisable interactions",
                        "description": "<p>Disable interactions</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "readonly",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 64
                    }
                },
                "readonlyAttr": {
                    "name": "readonlyAttr",
                    "getSignature": {
                        "name": "readonlyAttr",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "rawdescription": "\nDisable the component",
                        "description": "<p>Disable the component</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 76
                    }
                },
                "disabledAttr": {
                    "name": "disabledAttr",
                    "getSignature": {
                        "name": "disabledAttr",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "hasRippleEffect": {
                    "name": "hasRippleEffect",
                    "getSignature": {
                        "name": "hasRippleEffect",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 93,
                        "rawdescription": "\n\nWhether to show ripple effect\n",
                        "description": "<p>Whether to show ripple effect</p>\n"
                    }
                },
                "isReadonlyClass": {
                    "name": "isReadonlyClass",
                    "getSignature": {
                        "name": "isReadonlyClass",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 107,
                        "rawdescription": "\n\nApply class for readonly state\n",
                        "description": "<p>Apply class for readonly state</p>\n"
                    }
                },
                "isDisabledClass": {
                    "name": "isDisabledClass",
                    "getSignature": {
                        "name": "isDisabledClass",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 116,
                        "rawdescription": "\n\nApply class for disabled state\n",
                        "description": "<p>Apply class for disabled state</p>\n"
                    }
                },
                "isOpacityAnimation": {
                    "name": "isOpacityAnimation",
                    "getSignature": {
                        "name": "isOpacityAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 125,
                        "rawdescription": "\n\nApply CSS class for opacity animation\n",
                        "description": "<p>Apply CSS class for opacity animation</p>\n"
                    }
                }
            }
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-197c02538d4a83a30913d1ec3d8903cee7693c53deae75221323cfe54a3431852469a009ac1c683c4f6bd622fdc33381bb46a17857eb174bd119ebda9dad0ea7",
            "file": "projects/tgui/src/lib/core/components/typography/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-text",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the text, influencing its styling.\n",
                    "description": "<p>The size level of the text, influencing its styling.</p>\n",
                    "line": 56,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional custom tag to render the component as. Default is determined by the component implementation.\n",
                    "description": "<p>Optional custom tag to render the component as. Default is determined by the component implementation.</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Text component is designed for general-purpose text rendering,\noffering a wide range of typographic options. It extends the Typography\ncomponent, inheriting its flexibility and styling capabilities.\nThis component is ideal for paragraphs, labels, or any textual content, providing\nconsistent styling across the application.</p>\n",
            "rawdescription": "\n\nText component is designed for general-purpose text rendering,\noffering a wide range of typographic options. It extends the Typography\ncomponent, inheriting its flexibility and styling capabilities.\nThis component is ideal for paragraphs, labels, or any textual content, providing\nconsistent styling across the application.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * Text component is designed for general-purpose text rendering,\n * offering a wide range of typographic options. It extends the Typography\n * component, inheriting its flexibility and styling capabilities.\n * This component is ideal for paragraphs, labels, or any textual content, providing\n * consistent styling across the application.\n */\n@Component({\n  selector: 'tgui-text',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TextComponent extends TypographyComponent {\n  /**\n   * The size level of the text, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override plain property to keep consistency\n  @Input() override plain = true;\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            }
        },
        {
            "name": "TguiComponent",
            "id": "component-TguiComponent-5d93c27606ced4386a02b244cb0f962bd99c1d81441ada6c01e9bc7daec554be41f31357bb827f2a51790fa457ddcf7c73e04d0b31859aff75fea9387e054789",
            "file": "projects/tgui/src/lib/tgui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tgui",
            "styleUrls": [],
            "styles": [],
            "template": "<tgui-root>\n  <ng-content></ng-content>\n</tgui-root>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": true,
            "deprecationMessage": "Use TGUIRootComponent instead",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TGUIRootComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TGUIRootComponent } from './core/components/service/tgui-root/tgui-root.component';\n\n/**\n * @deprecated Use TGUIRootComponent instead\n */\n@Component({\n  selector: 'lib-tgui',\n  standalone: true,\n  imports: [TGUIRootComponent],\n  template: `\n    <tgui-root>\n      <ng-content></ng-content>\n    </tgui-root>\n  `,\n})\nexport class TguiComponent {\n  // This component is just a wrapper for backward compatibility\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TGUIRootComponent",
            "id": "component-TGUIRootComponent-1410c2eea7de7ed2ff2d3531e7bb17911b70729db62d9bf3e1599a80610f0bd7a4a58d3b78851a790e3dffcbb7d28829977524222d3dbe58619616b1843f5486",
            "file": "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-root",
            "styleUrls": [
                "./tgui-root.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApplication appearance, determined automatically if nothing passed",
                    "description": "<p>Application appearance, determined automatically if nothing passed</p>\n",
                    "line": 28,
                    "type": "AppearanceType",
                    "decorators": []
                },
                {
                    "name": "followSystemTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to follow system theme changes when appearance is set manually",
                    "description": "<p>Whether to follow system theme changes when appearance is set manually</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApplication platform, determined automatically if nothing passed",
                    "description": "<p>Application platform, determined automatically if nothing passed</p>\n",
                    "line": 25,
                    "type": "PlatformType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "inject(TGUI_CONFIG, { optional: true }) as { \n    platform?: PlatformType;\n    appearance?: AppearanceType;\n    followSystemTheme?: boolean;\n  } | null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalContainerEl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupPortalContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Root component for the TGUI library\nProvides theming, platform detection, and portal container functionality\nShould be used at the root of your application</p>\n",
            "rawdescription": "\n\nRoot component for the TGUI library\nProvides theming, platform detection, and portal container functionality\nShould be used at the root of your application\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, inject, InjectionToken, OnChanges, SimpleChanges, Renderer2, AfterViewInit } from '@angular/core';\nimport { ThemeService, AppearanceType } from '@services/theme.service';\nimport { PlatformService, PlatformType } from '@services/platform.service';\nimport { PortalService } from '@services/portal.service';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Root component for the TGUI library\n * Provides theming, platform detection, and portal container functionality\n * Should be used at the root of your application\n */\n@Component({\n  selector: 'tgui-root',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./tgui-root.component.scss'],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Emulated,\n  host: {\n    'class': 'tgui-root-wrapper'\n  }\n})\nexport class TGUIRootComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n  /** Application platform, determined automatically if nothing passed */\n  @Input() platform?: PlatformType;\n  \n  /** Application appearance, determined automatically if nothing passed */\n  @Input() appearance?: AppearanceType;\n\n  /** Whether to follow system theme changes when appearance is set manually */\n  @Input() followSystemTheme?: boolean = false;\n\n  // Внедрение зависимостей через inject\n  private platformService = inject(PlatformService);\n  private portalService = inject(PortalService);\n  private elementRef = inject(ElementRef<HTMLElement>);\n  private themeService = inject(ThemeService);\n  private renderer = inject(Renderer2);\n  private document = inject(DOCUMENT);\n  private config = inject(TGUI_CONFIG, { optional: true }) as { \n    platform?: PlatformType;\n    appearance?: AppearanceType;\n    followSystemTheme?: boolean;\n  } | null;\n\n  private portalContainerEl: HTMLDivElement | null = null;\n\n  ngOnInit(): void {\n    // Apply configuration from inputs or module config\n    const platformToUse = this.platform || this.config?.platform;\n    const appearanceToUse = this.appearance || this.config?.appearance;\n    const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\n    \n    // Initialize platform\n    if (platformToUse) {\n      this.platformService.setPlatform(platformToUse);\n    }\n    \n    // Load global CSS variables\n    this.themeService.loadGlobalStyles();\n    \n    // Initialize theme\n    this.themeService.setupTheme(appearanceToUse, followSystem);\n    \n    console.log('TGUIRootComponent initialized');\n  }\n  \n  ngAfterViewInit(): void {\n    // Wait for DOM to be ready before setting up portal container\n    setTimeout(() => {\n      this.setupPortalContainer();\n    }, 0);\n  }\n\n  private setupPortalContainer(): void {\n    console.log('Setting up portal container');\n    \n    try {\n      // Create a dedicated div for portal content if it doesn't exist\n      if (!this.portalContainerEl) {\n        this.portalContainerEl = this.document.createElement('div');\n        this.portalContainerEl.className = 'tgui-portal-container';\n        this.renderer.appendChild(this.elementRef.nativeElement, this.portalContainerEl);\n      }\n      \n      // Create an ElementRef wrapping the portal container div\n      const portalElementRef = new ElementRef(this.portalContainerEl);\n      \n      // Register as portal container\n      this.portalService.setPortalContainer(portalElementRef);\n      console.log('Portal container registered successfully');\n    } catch (e) {\n      console.error('Error setting up portal container:', e);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Отслеживаем изменения входных свойств\n    if (changes['appearance'] || changes['followSystemTheme']) {\n      const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\n      this.themeService.setupTheme(this.appearance, followSystem);\n    }\n\n    if (changes['platform'] && !changes['platform'].firstChange) {\n      this.platformService.setPlatform(changes['platform'].currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    // Clean up portal container reference\n    this.portalService.clearPortalContainer();\n    \n    // Remove the portal container element if it exists\n    if (this.portalContainerEl && this.portalContainerEl.parentNode) {\n      this.portalContainerEl.parentNode.removeChild(this.portalContainerEl);\n    }\n    \n    console.log('TGUIRootComponent destroyed');\n  }\n}\n\n// Токен для инъекции конфигурации\nexport const TGUI_CONFIG = new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG');",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  font-family: var(--tgui--font-family, system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif);\n  color: var(--tgui--text_color);\n  -webkit-tap-highlight-color: transparent;\n  -webkit-text-size-adjust: 100%;\n  \n  /* Base font definitions */\n  --tgui--font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif;\n\n  --tgui--font_weight--accent1: 700;\n  --tgui--font_weight--accent2: 600;\n  --tgui--font_weight--accent3: 400;\n\n  --tgui--large_title--font_size: 34px;\n  --tgui--large_title--line_height: 42px;\n\n  --tgui--title1--font_size: 28px;\n  --tgui--title1--line_height: 36px;\n  --tgui--title2--font_size: 24px;\n  --tgui--title2--line_height: 32px;\n  --tgui--title3--font_size: 20px;\n  --tgui--title3--line_height: 24px;\n\n  --tgui--headline--font_size: 19px;\n  --tgui--headline--line_height: 28px;\n\n  --tgui--text--font_size: 17px;\n  --tgui--text--line_height: 26px;\n\n  --tgui--subheadline1--font_size: 16px;\n  --tgui--subheadline1--line_height: 24px;\n  --tgui--subheadline2--font_size: 15px;\n  --tgui--subheadline2--line_height: 22px;\n\n  --tgui--caption1--font_size: 13px;\n  --tgui--caption1--line_height: 20px;\n  --tgui--caption2--font_size: 11px;\n  --tgui--caption2--line_height: 16px;\n\n  --tgui--border--width: 1px;\n  --tgui--base--section--box_shadow: 0 1px 2px 0 rgba(0, 0, 0, .10);\n\n  /** Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #FFFFFF);\n  --tgui--text_color: var(--tg-theme-text-color, #000000);\n  --tgui--hint_color: var(--tg-theme-hint-color, #707579);\n  --tgui--link_color: var(--tg-theme-link-color, #007AFF);\n  --tgui--button_color: var(--tg-theme-button-color, #007AFF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #EFEFF4);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #FFFFFF);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #FFFFFF);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #707579);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #707579);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(0, 0, 0, .15);\n  --tgui--outline: rgba(0, 0, 0, .05);\n  --tgui--surface_primary: rgba(255, 255, 255, .95);\n  --tgui--tertiary_bg_color: #F4F4F7;\n  --tgui--quartenary_bg_color: #F6F6FA;\n  --tgui--segmented_control_active_bg: #FFFFFF;\n  --tgui--card_bg_color: #FFFFFF;\n  --tgui--secondary_hint_color: #A2ACB0;\n  --tgui--secondary_fill: rgba(67, 120, 255, .10);\n  --tgui--green: #31D158;\n  --tgui--destructive_background: #E53935;\n  --tgui--primary_code_highlight: #4378FF;\n  --tgui--secondary_code_highlight: #B00FB4;\n  --tgui--tertiary_code_highlight: #3A9F20;\n  --tgui--plain_background: rgba(0, 0, 0, .04);\n  --tgui--plain_foreground: rgba(0, 0, 0, .8);\n  --tgui--toast_accent_color: #55A6FF;\n  /* End of custom lib tokens */\n\n  /** Non-theme tokens */\n  --tgui--surface_dark: rgba(56, 56, 56, .85);\n  --tooltip_background_dark: rgba(0, 0, 0, .85);\n  --tgui--white: #FFFFFF;\n  --tgui--black: #000000;\n\n  --tgui--z-index--simple: 1;\n  --tgui--z-index--skeleton: 2;\n  --tgui--z-index--overlay: 3;\n}\n\n:host-context(.tgui-platform-ios) {\n  --tgui--large_title--line_height: 41px;\n  --tgui--title1--line_height: 34px;\n  --tgui--title2--line_height: 28px;\n  --tgui--title3--line_height: 25px;\n  --tgui--headline--line_height: 24px;\n  --tgui--text--line_height: 22px;\n  --tgui--subheadline1--line_height: 21px;\n  --tgui--subheadline2--line_height: 20px;\n  --tgui--caption1--line_height: 16px;\n  --tgui--caption2--line_height: 13px;\n}\n\n:host-context(.tgui-theme-dark) {\n  /* Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #212121);\n  --tgui--text_color: var(--tg-theme-text-color, #FFFFFF);\n  --tgui--hint_color: var(--tg-theme-hint-color, #AAAAAA);\n  --tgui--link_color: var(--tg-theme-link-color, #2990FF);\n  --tgui--button_color: var(--tg-theme-button-color, #2990FF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #0F0F0F);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #212121);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #212121);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #AAAAAA);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #AAAAAA);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(255, 255, 255, .05);\n  --tgui--outline: rgba(255, 255, 255, .10);\n  --tgui--surface_primary: rgba(23, 23, 23, .95);\n  --tgui--tertiary_bg_color: #2A2A2A;\n  --tgui--quartenary_bg_color: #2F2F2F;\n  --tgui--segmented_control_active_bg: #2F2F2F;\n  --tgui--card_bg_color: #242424;\n  --tgui--secondary_hint_color: #78797E;\n  --tgui--secondary_fill: rgba(41, 144, 255, .15);\n  --tgui--green: #32E55E;\n  --tgui--destructive_background: rgba(255, 35, 35, .02);\n  --tgui--primary_code_highlight: #2990FF;\n  --tgui--secondary_code_highlight: #E937ED;\n  --tgui--tertiary_code_highlight: #5AE536;\n  --tgui--plain_background: rgba(255, 255, 255, .08);\n  --tgui--plain_foreground: rgba(255, 255, 255, .95);\n  /* End of custom lib tokens */\n}\n\n@media (min-resolution: 2dppx) {\n  :host {\n    --tgui--border--width: .5px;\n  }\n}\n\n@supports (padding-top: constant(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: constant(safe-area-inset-bottom);\n  }\n}\n\n@supports (padding-top: env(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: env(safe-area-inset-bottom);\n  }\n}\n\n@supports (color: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent)) {\n  :host {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent);\n  }\n\n  :host-context(.tgui-theme-dark) {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 15%, transparent);\n  }\n} ",
                    "styleUrl": "./tgui-root.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges",
                "AfterViewInit"
            ]
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-556580fa12c85b02ae857cd93045a902249c8053f76ad1e3bb87ca875efabdfe6f31621bd4941cc27c0607515c3e9677e7554a924537260429a3f956501319de",
            "file": "projects/tgui/src/lib/core/components/typography/title/title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-title",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\n",
                    "description": "<p>Determines the size and semantic tag of the title, with options for <code>h2</code>, <code>h3</code>, or <code>h4</code>.</p>\n",
                    "line": 59,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": []
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional custom tag to render the component as. Default is determined by the component implementation.\n",
                    "description": "<p>Optional custom tag to render the component as. Default is determined by the component implementation.</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "titleLevelTags",
                    "defaultValue": "{\n    '1': 'h2',\n    '2': 'h3',\n    '3': 'h4'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Title component is designed to render text as a page or section heading,\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses <code>h3</code>\nfor its semantic HTML element but can be customized via the <code>level</code> prop or explicitly with the <code>tag</code> property.</p>\n",
            "rawdescription": "\n\nThe Title component is designed to render text as a page or section heading,\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\nfor its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Title component is designed to render text as a page or section heading,\n * providing clear hierarchy and structure within content. It supports three levels of emphasis,\n * allowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\n * for its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\n */\n@Component({\n  selector: 'tgui-title',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TitleComponent extends TypographyComponent {\n  /**\n   * Determines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\n   */\n  @Input() level: '1' | '2' | '3' = '2';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  @HostBinding('class.level-3') get isLevel3() { return this.level === '3'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n  \n  // Set the correct semantic HTML tag based on level\n  private titleLevelTags: Record<string, string> = {\n    '1': 'h2',\n    '2': 'h3',\n    '3': 'h4'\n  };\n  \n  // Override ngOnInit to set the tag based on level\n  override ngOnInit() {\n    // Set the tag based on level if no custom tag is specified\n    if (!this.tag) {\n      this.tag = this.titleLevelTags[this.level];\n    }\n    \n    // Call the parent's ngOnInit\n    super.ngOnInit();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "isLevel3": {
                    "name": "isLevel3",
                    "getSignature": {
                        "name": "isLevel3",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-1cbc0010342131cd53439d0e7c2bc667ef39ea1080f97764892fbdf26840cf021da8e10095ced4935e20b091cc43f5ee2a77ac0f10d1f51c7d18292d83d8edc8",
            "file": "projects/tgui/src/lib/core/components/typography/typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-typography",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain {\n      margin: 0;\n    }\n\n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, transforms the text to uppercase for stylistic emphasis.\n",
                    "description": "<p>If true, transforms the text to uppercase for stylistic emphasis.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen true, removes the default margins around the text, useful for inline styling or custom layouts.\n",
                    "description": "<p>When true, removes the default margins around the text, useful for inline styling or custom layouts.</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional custom tag to render the component as. Default is determined by the component implementation.\n",
                    "description": "<p>Optional custom tag to render the component as. Default is determined by the component implementation.</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the font weight of the text, with options ranging from light to bold.\n",
                    "description": "<p>Controls the font weight of the text, with options ranging from light to bold.</p>\n",
                    "line": 51,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Typography component is a versatile wrapper for text content, offering\ncustomizable styling options such as weight, capitalization, and HTML tag. It&#39;s designed\nto facilitate consistent text styling across your application, with support for customization\nthrough inputs.</p>\n",
            "rawdescription": "\n\nThe Typography component is a versatile wrapper for text content, offering\ncustomizable styling options such as weight, capitalization, and HTML tag. It's designed\nto facilitate consistent text styling across your application, with support for customization\nthrough inputs.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ElementRef, Renderer2, OnInit, ViewEncapsulation, HostBinding, ChangeDetectionStrategy, inject, AfterViewInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The Typography component is a versatile wrapper for text content, offering\n * customizable styling options such as weight, capitalization, and HTML tag. It's designed\n * to facilitate consistent text styling across your application, with support for customization\n * through inputs.\n */\n@Component({\n  selector: 'tgui-typography',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain {\n      margin: 0;\n    }\n\n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TypographyComponent implements OnInit, AfterViewInit {\n  private elementRef = inject(ElementRef);\n  private renderer = inject(Renderer2);\n\n  /**\n   * Controls the font weight of the text, with options ranging from light to bold.\n   */\n  @Input() weight: '1' | '2' | '3' = '3';\n\n  /**\n   * If true, transforms the text to uppercase for stylistic emphasis.\n   */\n  @Input() caps = false;\n\n  /**\n   * When true, removes the default margins around the text, useful for inline styling or custom layouts.\n   */\n  @Input() plain = true;\n\n  /**\n   * Optional custom tag to render the component as. Default is determined by the component implementation.\n   */\n  @Input() tag?: string;\n\n  // Host bindings for CSS classes\n  @HostBinding('class.plain') get isPlain() { return this.plain; }\n  @HostBinding('class.caps') get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') get isWeight3() { return this.weight === '3'; }\n\n  ngOnInit() {\n    // Apply the custom tag if specified\n    if (this.tag) {\n      const parentElement = this.elementRef.nativeElement.parentElement;\n      const newElement = this.renderer.createElement(this.tag);\n      \n      // Transfer attributes\n      for (const attr of this.elementRef.nativeElement.attributes) {\n        this.renderer.setAttribute(newElement, attr.name, attr.value);\n      }\n      \n      // Move children\n      while (this.elementRef.nativeElement.childNodes.length > 0) {\n        this.renderer.appendChild(newElement, this.elementRef.nativeElement.childNodes[0]);\n      }\n      \n      // Replace the element\n      this.renderer.insertBefore(parentElement, newElement, this.elementRef.nativeElement);\n      this.renderer.removeChild(parentElement, this.elementRef.nativeElement);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Handle any additional rendering tasks if needed\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain {\n      margin: 0;\n    }\n\n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "StorybookRootModule",
            "id": "module-StorybookRootModule-3efcbdb5938e12d39a9ea21283dabfe4eb13700b3b03098113705218508c5ef6e53e67ac23cb5fedf0af97c4187a4dd096399131556ca6e22c71cded6084c5d0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/tgui/.storybook/preview.ts",
            "methods": [],
            "sourceCode": "import type { Preview } from '@storybook/angular'\nimport { setCompodocJson } from \"@storybook/addon-docs/angular\";\nimport docJson from \"../documentation.json\";\nimport { componentWrapperDecorator, moduleMetadata } from '@storybook/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Import components and services with full paths to avoid path resolution issues\nimport { TGUIRootComponent } from '../src/lib/core/components/service/tgui-root/tgui-root.component';\nimport { PlatformService } from '../src/lib/core/services/platform.service';\nimport { ThemeService } from '../src/lib/core/services/theme.service';\nimport { PortalService } from '../src/lib/core/services/portal.service';\n\nsetCompodocJson(docJson);\n\n// Create dedicated module for Storybook with all required providers\n@NgModule({\n  imports: [\n    CommonModule,\n    TGUIRootComponent\n  ],\n  providers: [\n    PlatformService,\n    ThemeService,\n    PortalService\n  ],\n  exports: [\n    TGUIRootComponent\n  ]\n})\nclass StorybookRootModule {}\n\n// Global decorator to wrap stories in tgui-root\nconst withTGUIRoot = componentWrapperDecorator(\n  (story) => {\n    return `\n      <tgui-root data-theme data-platform data-follow-system>\n        <div style=\"padding: 1rem;\">\n          ${story}\n        </div>\n      </tgui-root>\n    `;\n  }\n);\n\n// Use the dedicated module for Storybook\nconst withTGUIRootModule = moduleMetadata({\n  imports: [StorybookRootModule]\n});\n\n// Функция для применения темы напрямую к документу\nconst applyTheme = (theme: string) => {\n  // Удаляем существующие классы темы\n  document.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n  // Добавляем класс текущей темы\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\n  \n  // Пытаемся применить тему к iframe\n  try {\n    const iframe = document.getElementById('storybook-preview-iframe') as HTMLIFrameElement;\n    if (iframe && iframe.contentDocument) {\n      iframe.contentDocument.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n      iframe.contentDocument.documentElement.classList.add(`tgui-theme-${theme}`);\n    }\n  } catch (e) {\n    console.error('Ошибка при установке темы для iframe:', e);\n  }\n};\n\nconst preview: Preview = {\n  decorators: [\n    withTGUIRootModule,\n    withTGUIRoot,\n    (Story, context) => {\n      // Получаем текущую тему из контекста\n      const theme = context.globals['theme'] || 'light';\n      console.log('Текущая тема в декораторе:', theme);\n      \n      // Применяем тему\n      applyTheme(theme);\n      \n      return Story();\n    }\n  ],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n    docs: {\n      toc: {\n        contentsSelector: '.sbdocs-content',\n        headingSelector: 'h1, h2, h3',\n      },\n    },\n    // Add class name for the theme to ensure correct CSS application\n    themes: {\n      default: 'light',\n      list: [\n        { name: 'light', class: 'tgui-theme-light', color: '#ffffff' },\n        { name: 'dark', class: 'tgui-theme-dark', color: '#212121' }\n      ]\n    }\n  },\n  globalTypes: {\n    platform: {\n      name: 'Platform',\n      description: 'Platform for components',\n      defaultValue: 'base',\n      toolbar: {\n        icon: 'mobile',\n        items: ['base', 'ios'],\n        title: 'Platform',\n        dynamicTitle: true,\n      },\n    },\n    theme: {\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        title: 'Theme',\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        dynamicTitle: true,\n      },\n    },\n    followSystem: {\n      name: 'Follow System',\n      description: 'Whether to follow system theme changes',\n      defaultValue: 'true',\n      toolbar: {\n        title: 'Follow System',\n        icon: 'sync',\n        items: [\n          { value: 'true', title: 'Follow System: On' },\n          { value: 'false', title: 'Follow System: Off' }\n        ],\n        dynamicTitle: true,\n      },\n    },\n  },\n};\n\nexport default preview;",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PlatformService"
                        },
                        {
                            "name": "PortalService"
                        },
                        {
                            "name": "ThemeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TGUIRootComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TGUIRootComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n            <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n            <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n            <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n            <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (h2)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n          </div>\n        </div>\n        \n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (h3)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 3 (h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Ambient",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'ambient',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Ambient Card\"\n          subtitle=\"This card uses the ambient style with a dark background.\">\n          <div style=\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\">\n            Additional content with lower opacity text\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "applyTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(theme: string) => {\n  // Удаляем существующие классы темы\n  document.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n  // Добавляем класс текущей темы\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\n  \n  // Пытаемся применить тему к iframe\n  try {\n    const iframe = document.getElementById('storybook-preview-iframe') as HTMLIFrameElement;\n    if (iframe && iframe.contentDocument) {\n      iframe.contentDocument.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n      iframe.contentDocument.documentElement.classList.add(`tgui-theme-${theme}`);\n    }\n  } catch (e) {\n    console.error('Ошибка при установке темы для iframe:', e);\n  }\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    weight: '3',\n    caps: false,\n    plain: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [weight]=\"weight\" [caps]=\"caps\" [plain]=\"plain\">\n        This is a basic Typography component\n      </tgui-typography>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'filled',\n    stretched: false,\n    loading: false,\n    disabled: false,\n    interactiveAnimation: 'background'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-button \n        [size]=\"size\" \n        [mode]=\"mode\" \n        [stretched]=\"stretched\" \n        [loading]=\"loading\" \n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n      >\n        Кнопка\n      </tgui-button>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<tgui-spinner [size]=\"size\"></tgui-spinner>`,\n  }),\n}"
            },
            {
                "name": "CaptionInContext",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <h4 style=\"margin-bottom: 8px;\">Chart Title</h4>\n          <div style=\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\"></div>\n          <tgui-caption level=\"2\">Chart data source: Example Dataset, 2023</tgui-caption>\n        </div>\n        \n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <img style=\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\" />\n          <tgui-caption level=\"1\">Photo by Example Photographer © 2023</tgui-caption>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-docs'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n    defaultName: 'Documentation',\n  },\n  staticDirs: [\n    { from: '../src/lib/core/styles', to: '/' },\n  ],\n  webpackFinal: async (config) => {\n    // Add path mappings to match tsconfig.json path aliases\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        '@services': path.resolve(__dirname, '../src/lib/core/services'),\n        '@service': path.resolve(__dirname, '../src/lib/core/components/service'),\n        '@components': path.resolve(__dirname, '../src/lib/core/components'),\n      };\n    }\n    return config;\n  },\n}"
            },
            {
                "name": "CustomBorderRadius",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    borderRadius: '8px'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image with custom border radius\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Custom Border Radius\"\n          subtitle=\"This card uses a custom border radius of 8px instead of the default 24px.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .color-container {\n        display: flex;\n        gap: 24px;\n      }\n      .color-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 16px;\n        border-radius: 8px;\n      }\n      .color-item:nth-child(1) {\n        color: var(--tgui--link_color);\n      }\n      .color-item:nth-child(2) {\n        color: var(--tgui--destructive);\n      }\n      .color-item:nth-child(3) {\n        color: #4CAF50;\n      }\n      .color-item:nth-child(4) {\n        background: #333;\n        color: white;\n      }\n      .color-label {\n        margin-top: 8px;\n        font-size: 14px;\n      }\n    `],\n    template: `\n      <div>\n        <p style=\"margin-bottom: 16px;\">\n          Цвет спиннера наследуется от родительского контейнера через CSS свойство <code>color</code>.\n        </p>\n        \n        <div class=\"color-container\">\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Primary</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Destructive</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Success</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Light</span>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomOffsets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <div>\n          <p>Большой отступ (-6px):</p>\n          <tgui-avatar-stack [offset]=\"-6\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Стандартный отступ (-12px):</p>\n          <tgui-avatar-stack [offset]=\"-12\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Маленький отступ (-18px):</p>\n          <tgui-avatar-stack [offset]=\"-18\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Обычный разделитель</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Кастомный разделитель</div>\n        <tgui-divider style=\"border-color: var(--tgui--button_color); border-width: 2px;\"></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент после разделителя</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomTag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tag: 'h1',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [tag]=\"tag\">\n        This text uses a custom HTML tag (${args.tag})\n      </tgui-typography>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/stories/introduction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    header: 'Section Header',\n    footer: 'Section Footer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\" [footer]=\"footer\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>Basic section content</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент выше разделителя</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент ниже разделителя</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card Title\"\n          subtitle=\"Card description text would go here to provide more information about this card.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            Additional content can be added here\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentShapes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar shape=\"circle\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"rounded\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"square\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"xs\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"s\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"m\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"l\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"xl\" initials=\"JD\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'s'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'l'\"></tgui-avatar>\n        </tgui-avatar-stack>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "FORM_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/form/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ \n  ChipComponent: () => import('./chip').then(m => m.ChipComponent)\n}"
            },
            {
                "name": "InList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Первый элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Второй элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Третий элемент списка</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "LAYOUT_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/layout/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n        <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n        <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n        <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n        <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/stories/introduction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IntroductionComponent>",
                "defaultValue": "{\n  title: 'Introduction',\n  component: IntroductionComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [IntroductionComponent]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SectionComponent>",
                "defaultValue": "{\n  title: 'Components/Blocks/Section',\n  component: SectionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SectionComponent,\n        SectionHeaderComponent,\n        SectionFooterComponent,\n        TextComponent,\n        DividerComponent\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DividerComponent>",
                "defaultValue": "{\n  title: 'Components/Misc/Divider',\n  component: DividerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DividerComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TypographyComponent>",
                "defaultValue": "{\n  title: 'Typography/Base Typography',\n  component: TypographyComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TypographyComponent],\n    }),\n  ],\n  argTypes: {\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TypographyComponent>",
                "defaultValue": "{\n  title: 'Typography/Introduction',\n  component: TypographyComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        TypographyComponent,\n        TextComponent,\n        CaptionComponent,\n        HeadlineComponent,\n        LargeTitleComponent,\n        SubheadlineComponent,\n        TitleComponent\n      ],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AvatarComponent>",
                "defaultValue": "{\n  title: 'TGUI/Content/Avatar',\n  component: AvatarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['xs', 's', 'm', 'l', 'xl'],\n      control: { type: 'select' },\n      description: 'Размер аватара',\n      defaultValue: 'm',\n    },\n    shape: {\n      options: ['circle', 'rounded', 'square'],\n      control: { type: 'select' },\n      description: 'Форма аватара',\n      defaultValue: 'circle',\n    },\n    src: {\n      control: 'text',\n      description: 'URL изображения аватара',\n    },\n    initials: {\n      control: 'text',\n      description: 'Текст для формирования инициалов, если изображение отсутствует',\n    },\n    color: {\n      control: 'color',\n      description: 'Цвет фона для аватара с инициалами',\n    },\n    online: {\n      control: 'boolean',\n      description: 'Индикатор онлайн-статуса',\n      defaultValue: false,\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AvatarStackComponent>",
                "defaultValue": "{\n  title: 'Components/AvatarStack',\n  component: AvatarStackComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [AvatarComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    offset: {\n      control: { type: 'range', min: -24, max: 0, step: 1 },\n      defaultValue: -12,\n      description: 'Смещение между аватарами в пикселях'\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'TGUI/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, ButtonComponent, SpinnerComponent, RippleComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Размер кнопки',\n      defaultValue: 'm',\n    },\n    mode: {\n      options: ['filled', 'bezeled', 'plain', 'gray', 'outline', 'white'],\n      control: { type: 'select' },\n      description: 'Вариант отображения кнопки',\n      defaultValue: 'filled',\n    },\n    stretched: {\n      control: 'boolean',\n      description: 'Растягивать кнопку на всю ширину',\n      defaultValue: false,\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Показывать индикатор загрузки',\n      defaultValue: false,\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Отключенное состояние',\n      defaultValue: false,\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'radio' },\n      description: 'Тип анимации при взаимодействии',\n      defaultValue: 'background',\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardComponent>",
                "defaultValue": "{\n  title: 'UI/Blocks/Card',\n  component: CardComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\n    }),\n  ],\n  argTypes: {\n    type: {\n      options: ['plain', 'ambient'],\n      control: { type: 'radio' },\n      description: 'Defines the visual style of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'plain' },\n      },\n    },\n    borderRadius: {\n      control: { type: 'text' },\n      description: 'Defines the border radius of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '24px' },\n      },\n    },\n    image: {\n      control: { type: 'text' },\n      description: 'URL of the image to display at the top of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'undefined' },\n      },\n    },\n    imageHeight: {\n      control: { type: 'text' },\n      description: 'Height of the image section',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '200px' },\n      },\n    }\n  },\n  args: {\n    type: 'plain',\n    borderRadius: '24px',\n    imageHeight: '200px'\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SpinnerComponent>",
                "defaultValue": "{\n  title: 'TGUI/Feedback/Spinner',\n  component: SpinnerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, SpinnerComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Размер индикатора загрузки',\n      defaultValue: 'm',\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CaptionComponent>",
                "defaultValue": "{\n  title: 'Typography/Caption',\n  component: CaptionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CaptionComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the caption',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeadlineComponent>",
                "defaultValue": "{\n  title: 'Typography/Headline',\n  component: HeadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [HeadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the headline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h5)',\n      defaultValue: 'h5',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextComponent>",
                "defaultValue": "{\n  title: 'Typography/Text',\n  component: TextComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TextComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the text',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LargeTitleComponent>",
                "defaultValue": "{\n  title: 'Typography/LargeTitle',\n  component: LargeTitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [LargeTitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the large title',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h1)',\n      defaultValue: 'h1',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TitleComponent>",
                "defaultValue": "{\n  title: 'Typography/Title',\n  component: TitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Size level of the title, determines size and semantic tag (h2, h3, h4)',\n      defaultValue: '2',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, defaults based on level)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SubheadlineComponent>",
                "defaultValue": "{\n  title: 'Typography/Subheadline',\n  component: SubheadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [SubheadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the subheadline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h6)',\n      defaultValue: 'h6',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RippleComponent>",
                "defaultValue": "{\n  title: 'TGUI/Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n}"
            },
            {
                "name": "MISC_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/misc/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "Modes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px;\">\n        <tgui-button mode=\"filled\">Filled</tgui-button>\n        <tgui-button mode=\"bezeled\">Bezeled</tgui-button>\n        <tgui-button mode=\"plain\">Plain</tgui-button>\n        <tgui-button mode=\"gray\">Gray</tgui-button>\n        <tgui-button mode=\"outline\">Outline</tgui-button>\n        <tgui-button mode=\"white\">White</tgui-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "MultipleItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    header: 'Multiple Items',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>First section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Second section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Third section item</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "NAVIGATION_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/navigation/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "OVERLAYS_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/overlays/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "Paragraph",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px;\">\n        <tgui-text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\n        </tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "PlatformSpecific",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .platform-demo {\n        display: flex;\n        flex-direction: column;\n        gap: 32px;\n      }\n      .platform-container {\n        padding: 24px;\n        border-radius: 8px;\n        background-color: var(--tgui--secondary_fill);\n      }\n      .platform-title {\n        font-size: 16px;\n        font-weight: 500;\n        margin-bottom: 16px;\n      }\n      .platform-spinners {\n        display: flex;\n        gap: 24px;\n      }\n    `],\n    template: `\n      <div class=\"platform-demo\">\n        <div>\n          <p>\n            Компонент Spinner автоматически адаптируется к текущей платформе. \n            На iOS отображается круговой индикатор со сплошной заливкой, на Android/Web - круговой прогресс.\n          </p>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">iOS Spinner (для примера)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"m\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"l\" class=\"platform-ios\"></tgui-spinner>\n          </div>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">Android/Web Spinner (для примера)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\"></tgui-spinner>\n            <tgui-spinner size=\"m\"></tgui-spinner>\n            <tgui-spinner size=\"l\"></tgui-spinner>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  decorators: [\n    withTGUIRootModule,\n    withTGUIRoot,\n    (Story, context) => {\n      // Получаем текущую тему из контекста\n      const theme = context.globals['theme'] || 'light';\n      console.log('Текущая тема в декораторе:', theme);\n      \n      // Применяем тему\n      applyTheme(theme);\n      \n      return Story();\n    }\n  ],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n    docs: {\n      toc: {\n        contentsSelector: '.sbdocs-content',\n        headingSelector: 'h1, h2, h3',\n      },\n    },\n    // Add class name for the theme to ensure correct CSS application\n    themes: {\n      default: 'light',\n      list: [\n        { name: 'light', class: 'tgui-theme-light', color: '#ffffff' },\n        { name: 'dark', class: 'tgui-theme-dark', color: '#212121' }\n      ]\n    }\n  },\n  globalTypes: {\n    platform: {\n      name: 'Platform',\n      description: 'Platform for components',\n      defaultValue: 'base',\n      toolbar: {\n        icon: 'mobile',\n        items: ['base', 'ios'],\n        title: 'Platform',\n        dynamicTitle: true,\n      },\n    },\n    theme: {\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        title: 'Theme',\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        dynamicTitle: true,\n      },\n    },\n    followSystem: {\n      name: 'Follow System',\n      description: 'Whether to follow system theme changes',\n      defaultValue: 'true',\n      toolbar: {\n        title: 'Follow System',\n        icon: 'sync',\n        items: [\n          { value: 'true', title: 'Follow System: On' },\n          { value: 'false', title: 'Follow System: Off' }\n        ],\n        dynamicTitle: true,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Нажмите для демонстрации';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple компонент создает эффект волны при нажатии на интерактивный элемент.\n           Этот эффект автоматически используется в компоненте Button при значении interactiveAnimation=\"background\".</p>\n        <p>Ripple эффект отображается только на не-iOS платформах, так как не соответствует дизайн-гайдлайнам iOS.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n}"
            },
            {
                "name": "RippleEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"margin-bottom: 8px;\">\n          <strong>Ripple effect (background)</strong>\n          <p>Кликните на кнопку, чтобы увидеть эффект ripple (работает на не-iOS платформах)</p>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"background\" mode=\"filled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"bezeled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"plain\">Background Ripple</tgui-button>\n        </div>\n        \n        <div style=\"margin: 16px 0 8px 0;\">\n          <strong>Без ripple (opacity)</strong>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"filled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"bezeled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"plain\">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-button size=\"s\">Small</tgui-button>\n        <tgui-button size=\"m\">Medium</tgui-button>\n        <tgui-button size=\"l\">Large</tgui-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .spinner-container {\n        display: flex;\n        gap: 24px;\n        align-items: center;\n      }\n      .spinner-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n      .spinner-label {\n        font-size: 14px;\n        margin-top: 8px;\n      }\n    `],\n    template: `\n      <div class=\"spinner-container\">\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n          <span class=\"spinner-label\">Small (s)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"m\"></tgui-spinner>\n          <span class=\"spinner-label\">Medium (m)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"l\"></tgui-spinner>\n          <span class=\"spinner-label\">Large (l)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div>\n          <tgui-button [loading]=\"true\">Загрузка</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]=\"true\">Отключена</tgui-button>\n        </div>\n        <div style=\"width: 100%;\">\n          <tgui-button [stretched]=\"true\">Растянутая кнопка</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "TGUI_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG')"
            },
            {
                "name": "Title1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Title2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Title3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '3',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "TypographyOverview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h2 style=\"margin-bottom: 16px;\">Система типографики TGUI</h2>\n          <p style=\"max-width: 800px; margin-bottom: 24px;\">\n            TGUI предоставляет набор компонентов для обеспечения единообразной и гибкой типографики в приложении. \n            Все компоненты типографики наследуются от базового <code>TypographyComponent</code> и имеют общие свойства: \n            <code>weight</code> (для управления жирностью шрифта), <code>caps</code> (для трансформации в верхний регистр) \n            и <code>plain</code> (для управления отступами).\n          </p>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">LargeTitle - для основных заголовков (h1)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\">LargeTitle Level 1 (default)</tgui-large-title>\n            <tgui-large-title level=\"2\">LargeTitle Level 2 (smaller)</tgui-large-title>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Title - для заголовков разных уровней (h2-h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\">Title Level 1 (h2)</tgui-title>\n            <tgui-title level=\"2\">Title Level 2 (h3)</tgui-title>\n            <tgui-title level=\"3\">Title Level 3 (h4)</tgui-title>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Headline - для подзаголовков (h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\">Headline Level 1 (default)</tgui-headline>\n            <tgui-headline level=\"2\">Headline Level 2 (smaller)</tgui-headline>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Subheadline - для дополнительных подзаголовков (h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\">Subheadline Level 1 (default)</tgui-subheadline>\n            <tgui-subheadline level=\"2\">Subheadline Level 2 (smaller)</tgui-subheadline>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Text - для основного текста</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\">Text Level 1 (default) - для основного текста в приложении</tgui-text>\n            <tgui-text level=\"2\">Text Level 2 (smaller) - для менее важного или вспомогательного текста</tgui-text>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Caption - для мелкого текста и подписей</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\">Caption Level 1 (default) - для подписей и вспомогательного текста</tgui-caption>\n            <tgui-caption level=\"2\">Caption Level 2 (smaller) - для самого мелкого текста, сносок или пояснений</tgui-caption>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Типографика с разными весами (weights)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text weight=\"1\">Text с weight=\"1\" (Bold)</tgui-text>\n            <tgui-text weight=\"2\">Text с weight=\"2\" (Medium/Semibold)</tgui-text>\n            <tgui-text weight=\"3\">Text с weight=\"3\" (Regular)</tgui-text>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Другие стилевые опции</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text [caps]=\"true\">Текст в верхнем регистре (caps=true)</tgui-text>\n            <tgui-text [plain]=\"false\">Текст без удаления отступов (plain=false)</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Uppercase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    caps: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [caps]=\"caps\">\n        This text is displayed in uppercase\n      </tgui-typography>\n    `,\n  }),\n}"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>Как использовать Ripple</h3>\n        <p>Ripple компонент обычно не используется напрямую в коде разработчика, \n        а интегрирован в кнопки и другие интерактивные элементы.</p>\n        \n        <h4>Пример использования в компоненте Button:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  С эффектом ripple\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>Компонент Ripple автоматически отображается только на не-iOS платформах и\n        когда для кнопки установлен параметр interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "UserCardExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <div style=\"display: flex; align-items: center; gap: 12px; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\" online=\"true\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">John Doe</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen just now</div>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; align-items: center; gap: 12px; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" initials=\"Anna Smith\" color=\"#8e24aa\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">Anna Smith</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen 2 hours ago</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"3\"></tgui-avatar-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Weights",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n        <tgui-typography weight=\"1\">This text has Bold weight (1)</tgui-typography>\n        <tgui-typography weight=\"2\">This text has Medium weight (2)</tgui-typography>\n        <tgui-typography weight=\"3\">This text has Regular weight (3)</tgui-typography>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithAdvancedChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      beforeIcon: `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M8 3.5V12.5M3.5 8H12.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" />\n        </svg>\n      `\n    },\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip [mode]=\"'mono'\" [before]=\"beforeTemplate\">\n          Featured\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Advanced Chip\"\n          subtitle=\"This card uses a chip with an icon and styling.\">\n        </tgui-card-cell>\n\n        <ng-template #beforeTemplate>\n          <div [innerHTML]=\"beforeIcon\"></div>\n        </ng-template>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\">\n          <tgui-avatar-badge [count]=\"5\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"John Doe\">\n          <tgui-avatar-badge [count]=\"42\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"Overflow\" color=\"#e91e63\">\n          <tgui-avatar-badge [count]=\"999\"></tgui-avatar-badge>\n        </tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithCenteredFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header>Section Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with centered footer</tgui-text>\n          </div>\n          <tgui-section-footer [centered]=\"true\">Centered Footer</tgui-section-footer>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card with Chip\"\n          subtitle=\"This card includes a chip component positioned in the top-right corner.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithCustomColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n    color: '#3949ab',\n  },\n}"
            },
            {
                "name": "WithDirectImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Direct Image Card\"\n          subtitle=\"This card uses the image property directly on the card without a separate cell.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            This approach is more similar to the React implementation.\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithDirectImageAndChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell\n          header=\"Direct Image with Chip\"\n          subtitle=\"This card combines the direct image approach with a chip.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/men/32.jpg',\n    alt: 'User avatar',\n  },\n}"
            },
            {
                "name": "WithInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n  },\n}"
            },
            {
                "name": "WithInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [initials]=\"'AB'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'EF'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "WithLargeHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header [large]=\"true\">Large Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with large header</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithMixedContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "WithOnlineStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/women/44.jpg',\n    online: true,\n  },\n}"
            },
            {
                "name": "withTGUIRoot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "componentWrapperDecorator(\n  (story) => {\n    return `\n      <tgui-root data-theme data-platform data-follow-system>\n        <div style=\"padding: 1rem;\">\n          ${story}\n        </div>\n      </tgui-root>\n    `;\n  }\n)"
            },
            {
                "name": "withTGUIRootModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "moduleMetadata({\n  imports: [StorybookRootModule]\n})"
            }
        ],
        "functions": [
            {
                "name": "applyTheme",
                "file": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\n",
                "args": [
                    {
                        "name": "theme",
                        "type": "AppearanceType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 359,
                            "end": 364,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "theme"
                        },
                        "type": "AppearanceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 353,
                            "end": 358,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\n"
                    }
                ]
            },
            {
                "name": "setupSystemThemeDetection",
                "file": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Setup system theme detection using prefers-color-scheme</p>\n",
                "args": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 856,
                            "end": 864,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "callback"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 850,
                            "end": 855,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Optional callback function that will be called when the theme changes</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 939,
                            "end": 946,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function to cleanup the listeners</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AppearanceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "projects/tgui/src/lib/core/services/theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AvatarShape",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"circle\" | \"rounded\" | \"square\"",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AvatarSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xxs\" | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BadgeMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"critical\" | \"secondary\" | \"gray\" | \"white\"",
                "file": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BadgeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"number\" | \"dot\"",
                "file": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CardType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"plain\" | \"ambient\"",
                "file": "projects/tgui/src/lib/core/components/blocks/card/card.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Card types that define the visual style of the card</p>\n",
                "kind": 192
            },
            {
                "name": "PlatformType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"base\" | \"ios\"",
                "file": "projects/tgui/src/lib/core/services/platform.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IntroductionComponent>",
                "file": "projects/tgui/src/stories/introduction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SectionComponent>",
                "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DividerComponent>",
                "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TypographyComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TypographyComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AvatarComponent>",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AvatarStackComponent>",
                "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardComponent>",
                "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SpinnerComponent>",
                "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CaptionComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeadlineComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LargeTitleComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TitleComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SubheadlineComponent>",
                "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RippleComponent>",
                "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "CaptionInContext",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <h4 style=\"margin-bottom: 8px;\">Chart Title</h4>\n          <div style=\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\"></div>\n          <tgui-caption level=\"2\">Chart data source: Example Dataset, 2023</tgui-caption>\n        </div>\n        \n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <img style=\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\" />\n          <tgui-caption level=\"1\">Photo by Example Photographer © 2023</tgui-caption>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CaptionComponent>",
                    "defaultValue": "{\n  title: 'Typography/Caption',\n  component: CaptionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CaptionComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the caption',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeadlineComponent>",
                    "defaultValue": "{\n  title: 'Typography/Headline',\n  component: HeadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [HeadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the headline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h5)',\n      defaultValue: 'h5',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n            <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n            <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n            <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n            <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n        <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n        <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n        <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n        <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextComponent>",
                    "defaultValue": "{\n  title: 'Typography/Text',\n  component: TextComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TextComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the text',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
                },
                {
                    "name": "Paragraph",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px;\">\n        <tgui-text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\n        </tgui-text>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LargeTitleComponent>",
                    "defaultValue": "{\n  title: 'Typography/LargeTitle',\n  component: LargeTitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [LargeTitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the large title',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h1)',\n      defaultValue: 'h1',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (h2)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n          </div>\n        </div>\n        \n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (h3)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 3 (h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TitleComponent>",
                    "defaultValue": "{\n  title: 'Typography/Title',\n  component: TitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Size level of the title, determines size and semantic tag (h2, h3, h4)',\n      defaultValue: '2',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, defaults based on level)',\n    },\n  },\n}"
                },
                {
                    "name": "Title1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Title2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Title3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '3',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SubheadlineComponent>",
                    "defaultValue": "{\n  title: 'Typography/Subheadline',\n  component: SubheadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [SubheadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the subheadline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h6)',\n      defaultValue: 'h6',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts": [
                {
                    "name": "Ambient",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'ambient',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Ambient Card\"\n          subtitle=\"This card uses the ambient style with a dark background.\">\n          <div style=\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\">\n            Additional content with lower opacity text\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "CustomBorderRadius",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    borderRadius: '8px'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image with custom border radius\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Custom Border Radius\"\n          subtitle=\"This card uses a custom border radius of 8px instead of the default 24px.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card Title\"\n          subtitle=\"Card description text would go here to provide more information about this card.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            Additional content can be added here\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardComponent>",
                    "defaultValue": "{\n  title: 'UI/Blocks/Card',\n  component: CardComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\n    }),\n  ],\n  argTypes: {\n    type: {\n      options: ['plain', 'ambient'],\n      control: { type: 'radio' },\n      description: 'Defines the visual style of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'plain' },\n      },\n    },\n    borderRadius: {\n      control: { type: 'text' },\n      description: 'Defines the border radius of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '24px' },\n      },\n    },\n    image: {\n      control: { type: 'text' },\n      description: 'URL of the image to display at the top of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'undefined' },\n      },\n    },\n    imageHeight: {\n      control: { type: 'text' },\n      description: 'Height of the image section',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '200px' },\n      },\n    }\n  },\n  args: {\n    type: 'plain',\n    borderRadius: '24px',\n    imageHeight: '200px'\n  },\n}"
                },
                {
                    "name": "WithAdvancedChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      beforeIcon: `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M8 3.5V12.5M3.5 8H12.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" />\n        </svg>\n      `\n    },\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip [mode]=\"'mono'\" [before]=\"beforeTemplate\">\n          Featured\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Advanced Chip\"\n          subtitle=\"This card uses a chip with an icon and styling.\">\n        </tgui-card-cell>\n\n        <ng-template #beforeTemplate>\n          <div [innerHTML]=\"beforeIcon\"></div>\n        </ng-template>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card with Chip\"\n          subtitle=\"This card includes a chip component positioned in the top-right corner.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDirectImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Direct Image Card\"\n          subtitle=\"This card uses the image property directly on the card without a separate cell.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            This approach is more similar to the React implementation.\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDirectImageAndChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell\n          header=\"Direct Image with Chip\"\n          subtitle=\"This card combines the direct image approach with a chip.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/.storybook/preview.ts": [
                {
                    "name": "applyTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(theme: string) => {\n  // Удаляем существующие классы темы\n  document.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n  // Добавляем класс текущей темы\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\n  \n  // Пытаемся применить тему к iframe\n  try {\n    const iframe = document.getElementById('storybook-preview-iframe') as HTMLIFrameElement;\n    if (iframe && iframe.contentDocument) {\n      iframe.contentDocument.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n      iframe.contentDocument.documentElement.classList.add(`tgui-theme-${theme}`);\n    }\n  } catch (e) {\n    console.error('Ошибка при установке темы для iframe:', e);\n  }\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  decorators: [\n    withTGUIRootModule,\n    withTGUIRoot,\n    (Story, context) => {\n      // Получаем текущую тему из контекста\n      const theme = context.globals['theme'] || 'light';\n      console.log('Текущая тема в декораторе:', theme);\n      \n      // Применяем тему\n      applyTheme(theme);\n      \n      return Story();\n    }\n  ],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n    docs: {\n      toc: {\n        contentsSelector: '.sbdocs-content',\n        headingSelector: 'h1, h2, h3',\n      },\n    },\n    // Add class name for the theme to ensure correct CSS application\n    themes: {\n      default: 'light',\n      list: [\n        { name: 'light', class: 'tgui-theme-light', color: '#ffffff' },\n        { name: 'dark', class: 'tgui-theme-dark', color: '#212121' }\n      ]\n    }\n  },\n  globalTypes: {\n    platform: {\n      name: 'Platform',\n      description: 'Platform for components',\n      defaultValue: 'base',\n      toolbar: {\n        icon: 'mobile',\n        items: ['base', 'ios'],\n        title: 'Platform',\n        dynamicTitle: true,\n      },\n    },\n    theme: {\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        title: 'Theme',\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        dynamicTitle: true,\n      },\n    },\n    followSystem: {\n      name: 'Follow System',\n      description: 'Whether to follow system theme changes',\n      defaultValue: 'true',\n      toolbar: {\n        title: 'Follow System',\n        icon: 'sync',\n        items: [\n          { value: 'true', title: 'Follow System: On' },\n          { value: 'false', title: 'Follow System: Off' }\n        ],\n        dynamicTitle: true,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "withTGUIRoot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "componentWrapperDecorator(\n  (story) => {\n    return `\n      <tgui-root data-theme data-platform data-follow-system>\n        <div style=\"padding: 1rem;\">\n          ${story}\n        </div>\n      </tgui-root>\n    `;\n  }\n)"
                },
                {
                    "name": "withTGUIRootModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  imports: [StorybookRootModule]\n})"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    weight: '3',\n    caps: false,\n    plain: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [weight]=\"weight\" [caps]=\"caps\" [plain]=\"plain\">\n        This is a basic Typography component\n      </tgui-typography>\n    `,\n  }),\n}"
                },
                {
                    "name": "CustomTag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tag: 'h1',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [tag]=\"tag\">\n        This text uses a custom HTML tag (${args.tag})\n      </tgui-typography>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TypographyComponent>",
                    "defaultValue": "{\n  title: 'Typography/Base Typography',\n  component: TypographyComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TypographyComponent],\n    }),\n  ],\n  argTypes: {\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional)',\n    },\n  },\n}"
                },
                {
                    "name": "Uppercase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    caps: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-typography [caps]=\"caps\">\n        This text is displayed in uppercase\n      </tgui-typography>\n    `,\n  }),\n}"
                },
                {
                    "name": "Weights",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n        <tgui-typography weight=\"1\">This text has Bold weight (1)</tgui-typography>\n        <tgui-typography weight=\"2\">This text has Medium weight (2)</tgui-typography>\n        <tgui-typography weight=\"3\">This text has Regular weight (3)</tgui-typography>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'filled',\n    stretched: false,\n    loading: false,\n    disabled: false,\n    interactiveAnimation: 'background'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-button \n        [size]=\"size\" \n        [mode]=\"mode\" \n        [stretched]=\"stretched\" \n        [loading]=\"loading\" \n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n      >\n        Кнопка\n      </tgui-button>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'TGUI/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, ButtonComponent, SpinnerComponent, RippleComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Размер кнопки',\n      defaultValue: 'm',\n    },\n    mode: {\n      options: ['filled', 'bezeled', 'plain', 'gray', 'outline', 'white'],\n      control: { type: 'select' },\n      description: 'Вариант отображения кнопки',\n      defaultValue: 'filled',\n    },\n    stretched: {\n      control: 'boolean',\n      description: 'Растягивать кнопку на всю ширину',\n      defaultValue: false,\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Показывать индикатор загрузки',\n      defaultValue: false,\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Отключенное состояние',\n      defaultValue: false,\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'radio' },\n      description: 'Тип анимации при взаимодействии',\n      defaultValue: 'background',\n    }\n  },\n}"
                },
                {
                    "name": "Modes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px;\">\n        <tgui-button mode=\"filled\">Filled</tgui-button>\n        <tgui-button mode=\"bezeled\">Bezeled</tgui-button>\n        <tgui-button mode=\"plain\">Plain</tgui-button>\n        <tgui-button mode=\"gray\">Gray</tgui-button>\n        <tgui-button mode=\"outline\">Outline</tgui-button>\n        <tgui-button mode=\"white\">White</tgui-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "RippleEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"margin-bottom: 8px;\">\n          <strong>Ripple effect (background)</strong>\n          <p>Кликните на кнопку, чтобы увидеть эффект ripple (работает на не-iOS платформах)</p>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"background\" mode=\"filled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"bezeled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"plain\">Background Ripple</tgui-button>\n        </div>\n        \n        <div style=\"margin: 16px 0 8px 0;\">\n          <strong>Без ripple (opacity)</strong>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"filled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"bezeled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"plain\">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-button size=\"s\">Small</tgui-button>\n        <tgui-button size=\"m\">Medium</tgui-button>\n        <tgui-button size=\"l\">Large</tgui-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div>\n          <tgui-button [loading]=\"true\">Загрузка</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]=\"true\">Отключена</tgui-button>\n        </div>\n        <div style=\"width: 100%;\">\n          <tgui-button [stretched]=\"true\">Растянутая кнопка</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<tgui-spinner [size]=\"size\"></tgui-spinner>`,\n  }),\n}"
                },
                {
                    "name": "CustomColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .color-container {\n        display: flex;\n        gap: 24px;\n      }\n      .color-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 16px;\n        border-radius: 8px;\n      }\n      .color-item:nth-child(1) {\n        color: var(--tgui--link_color);\n      }\n      .color-item:nth-child(2) {\n        color: var(--tgui--destructive);\n      }\n      .color-item:nth-child(3) {\n        color: #4CAF50;\n      }\n      .color-item:nth-child(4) {\n        background: #333;\n        color: white;\n      }\n      .color-label {\n        margin-top: 8px;\n        font-size: 14px;\n      }\n    `],\n    template: `\n      <div>\n        <p style=\"margin-bottom: 16px;\">\n          Цвет спиннера наследуется от родительского контейнера через CSS свойство <code>color</code>.\n        </p>\n        \n        <div class=\"color-container\">\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Primary</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Destructive</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Success</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Light</span>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SpinnerComponent>",
                    "defaultValue": "{\n  title: 'TGUI/Feedback/Spinner',\n  component: SpinnerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, SpinnerComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Размер индикатора загрузки',\n      defaultValue: 'm',\n    }\n  },\n}"
                },
                {
                    "name": "PlatformSpecific",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .platform-demo {\n        display: flex;\n        flex-direction: column;\n        gap: 32px;\n      }\n      .platform-container {\n        padding: 24px;\n        border-radius: 8px;\n        background-color: var(--tgui--secondary_fill);\n      }\n      .platform-title {\n        font-size: 16px;\n        font-weight: 500;\n        margin-bottom: 16px;\n      }\n      .platform-spinners {\n        display: flex;\n        gap: 24px;\n      }\n    `],\n    template: `\n      <div class=\"platform-demo\">\n        <div>\n          <p>\n            Компонент Spinner автоматически адаптируется к текущей платформе. \n            На iOS отображается круговой индикатор со сплошной заливкой, на Android/Web - круговой прогресс.\n          </p>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">iOS Spinner (для примера)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"m\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"l\" class=\"platform-ios\"></tgui-spinner>\n          </div>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">Android/Web Spinner (для примера)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\"></tgui-spinner>\n            <tgui-spinner size=\"m\"></tgui-spinner>\n            <tgui-spinner size=\"l\"></tgui-spinner>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .spinner-container {\n        display: flex;\n        gap: 24px;\n        align-items: center;\n      }\n      .spinner-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n      .spinner-label {\n        font-size: 14px;\n        margin-top: 8px;\n      }\n    `],\n    template: `\n      <div class=\"spinner-container\">\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n          <span class=\"spinner-label\">Small (s)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"m\"></tgui-spinner>\n          <span class=\"spinner-label\">Medium (m)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"l\"></tgui-spinner>\n          <span class=\"spinner-label\">Large (l)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-docs'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n    defaultName: 'Documentation',\n  },\n  staticDirs: [\n    { from: '../src/lib/core/styles', to: '/' },\n  ],\n  webpackFinal: async (config) => {\n    // Add path mappings to match tsconfig.json path aliases\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        '@services': path.resolve(__dirname, '../src/lib/core/services'),\n        '@service': path.resolve(__dirname, '../src/lib/core/components/service'),\n        '@components': path.resolve(__dirname, '../src/lib/core/components'),\n      };\n    }\n    return config;\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts": [
                {
                    "name": "CustomOffsets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <div>\n          <p>Большой отступ (-6px):</p>\n          <tgui-avatar-stack [offset]=\"-6\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Стандартный отступ (-12px):</p>\n          <tgui-avatar-stack [offset]=\"-12\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Маленький отступ (-18px):</p>\n          <tgui-avatar-stack [offset]=\"-18\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  }\n}"
                },
                {
                    "name": "DifferentSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'s'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'l'\"></tgui-avatar>\n        </tgui-avatar-stack>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AvatarStackComponent>",
                    "defaultValue": "{\n  title: 'Components/AvatarStack',\n  component: AvatarStackComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [AvatarComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    offset: {\n      control: { type: 'range', min: -24, max: 0, step: 1 },\n      defaultValue: -12,\n      description: 'Смещение между аватарами в пикселях'\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [initials]=\"'AB'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'EF'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithMixedContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts": [
                {
                    "name": "CustomStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Обычный разделитель</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Кастомный разделитель</div>\n        <tgui-divider style=\"border-color: var(--tgui--button_color); border-width: 2px;\"></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент после разделителя</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент выше разделителя</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент ниже разделителя</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "InList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Первый элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Второй элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Третий элемент списка</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DividerComponent>",
                    "defaultValue": "{\n  title: 'Components/Misc/Divider',\n  component: DividerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DividerComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n  },\n}"
                }
            ],
            "projects/tgui/src/stories/introduction.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/stories/introduction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/stories/introduction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IntroductionComponent>",
                    "defaultValue": "{\n  title: 'Introduction',\n  component: IntroductionComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [IntroductionComponent]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    header: 'Section Header',\n    footer: 'Section Footer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\" [footer]=\"footer\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>Basic section content</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SectionComponent>",
                    "defaultValue": "{\n  title: 'Components/Blocks/Section',\n  component: SectionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SectionComponent,\n        SectionHeaderComponent,\n        SectionFooterComponent,\n        TextComponent,\n        DividerComponent\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n}"
                },
                {
                    "name": "MultipleItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    header: 'Multiple Items',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>First section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Second section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Third section item</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCenteredFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header>Section Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with centered footer</tgui-text>\n          </div>\n          <tgui-section-footer [centered]=\"true\">Centered Footer</tgui-section-footer>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithLargeHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header [large]=\"true\">Large Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with large header</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts": [
                {
                    "name": "DifferentShapes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar shape=\"circle\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"rounded\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"square\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "DifferentSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"xs\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"s\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"m\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"l\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"xl\" initials=\"JD\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AvatarComponent>",
                    "defaultValue": "{\n  title: 'TGUI/Content/Avatar',\n  component: AvatarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['xs', 's', 'm', 'l', 'xl'],\n      control: { type: 'select' },\n      description: 'Размер аватара',\n      defaultValue: 'm',\n    },\n    shape: {\n      options: ['circle', 'rounded', 'square'],\n      control: { type: 'select' },\n      description: 'Форма аватара',\n      defaultValue: 'circle',\n    },\n    src: {\n      control: 'text',\n      description: 'URL изображения аватара',\n    },\n    initials: {\n      control: 'text',\n      description: 'Текст для формирования инициалов, если изображение отсутствует',\n    },\n    color: {\n      control: 'color',\n      description: 'Цвет фона для аватара с инициалами',\n    },\n    online: {\n      control: 'boolean',\n      description: 'Индикатор онлайн-статуса',\n      defaultValue: false,\n    },\n  },\n}"
                },
                {
                    "name": "UserCardExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <div style=\"display: flex; align-items: center; gap: 12px; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\" online=\"true\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">John Doe</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen just now</div>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; align-items: center; gap: 12px; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" initials=\"Anna Smith\" color=\"#8e24aa\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">Anna Smith</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen 2 hours ago</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"3\"></tgui-avatar-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\">\n          <tgui-avatar-badge [count]=\"5\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"John Doe\">\n          <tgui-avatar-badge [count]=\"42\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"Overflow\" color=\"#e91e63\">\n          <tgui-avatar-badge [count]=\"999\"></tgui-avatar-badge>\n        </tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCustomColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n    color: '#3949ab',\n  },\n}"
                },
                {
                    "name": "WithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/men/32.jpg',\n    alt: 'User avatar',\n  },\n}"
                },
                {
                    "name": "WithInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n  },\n}"
                },
                {
                    "name": "WithOnlineStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/women/44.jpg',\n    online: true,\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/form/public-api.ts": [
                {
                    "name": "FORM_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/form/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ \n  ChipComponent: () => import('./chip').then(m => m.ChipComponent)\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/layout/public-api.ts": [
                {
                    "name": "LAYOUT_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/layout/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TypographyComponent>",
                    "defaultValue": "{\n  title: 'Typography/Introduction',\n  component: TypographyComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        TypographyComponent,\n        TextComponent,\n        CaptionComponent,\n        HeadlineComponent,\n        LargeTitleComponent,\n        SubheadlineComponent,\n        TitleComponent\n      ],\n    }),\n  ],\n}"
                },
                {
                    "name": "TypographyOverview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h2 style=\"margin-bottom: 16px;\">Система типографики TGUI</h2>\n          <p style=\"max-width: 800px; margin-bottom: 24px;\">\n            TGUI предоставляет набор компонентов для обеспечения единообразной и гибкой типографики в приложении. \n            Все компоненты типографики наследуются от базового <code>TypographyComponent</code> и имеют общие свойства: \n            <code>weight</code> (для управления жирностью шрифта), <code>caps</code> (для трансформации в верхний регистр) \n            и <code>plain</code> (для управления отступами).\n          </p>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">LargeTitle - для основных заголовков (h1)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\">LargeTitle Level 1 (default)</tgui-large-title>\n            <tgui-large-title level=\"2\">LargeTitle Level 2 (smaller)</tgui-large-title>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Title - для заголовков разных уровней (h2-h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\">Title Level 1 (h2)</tgui-title>\n            <tgui-title level=\"2\">Title Level 2 (h3)</tgui-title>\n            <tgui-title level=\"3\">Title Level 3 (h4)</tgui-title>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Headline - для подзаголовков (h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\">Headline Level 1 (default)</tgui-headline>\n            <tgui-headline level=\"2\">Headline Level 2 (smaller)</tgui-headline>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Subheadline - для дополнительных подзаголовков (h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\">Subheadline Level 1 (default)</tgui-subheadline>\n            <tgui-subheadline level=\"2\">Subheadline Level 2 (smaller)</tgui-subheadline>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Text - для основного текста</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\">Text Level 1 (default) - для основного текста в приложении</tgui-text>\n            <tgui-text level=\"2\">Text Level 2 (smaller) - для менее важного или вспомогательного текста</tgui-text>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Caption - для мелкого текста и подписей</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\">Caption Level 1 (default) - для подписей и вспомогательного текста</tgui-caption>\n            <tgui-caption level=\"2\">Caption Level 2 (smaller) - для самого мелкого текста, сносок или пояснений</tgui-caption>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Типографика с разными весами (weights)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text weight=\"1\">Text с weight=\"1\" (Bold)</tgui-text>\n            <tgui-text weight=\"2\">Text с weight=\"2\" (Medium/Semibold)</tgui-text>\n            <tgui-text weight=\"3\">Text с weight=\"3\" (Regular)</tgui-text>\n          </div>\n        </div>\n\n        <div style=\"border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px;\">\n          <h3 style=\"margin-bottom: 12px;\">Другие стилевые опции</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text [caps]=\"true\">Текст в верхнем регистре (caps=true)</tgui-text>\n            <tgui-text [plain]=\"false\">Текст без удаления отступов (plain=false)</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RippleComponent>",
                    "defaultValue": "{\n  title: 'TGUI/Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n}"
                },
                {
                    "name": "Preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Нажмите для демонстрации';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple компонент создает эффект волны при нажатии на интерактивный элемент.\n           Этот эффект автоматически используется в компоненте Button при значении interactiveAnimation=\"background\".</p>\n        <p>Ripple эффект отображается только на не-iOS платформах, так как не соответствует дизайн-гайдлайнам iOS.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>Как использовать Ripple</h3>\n        <p>Ripple компонент обычно не используется напрямую в коде разработчика, \n        а интегрирован в кнопки и другие интерактивные элементы.</p>\n        \n        <h4>Пример использования в компоненте Button:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  С эффектом ripple\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>Компонент Ripple автоматически отображается только на не-iOS платформах и\n        когда для кнопки установлен параметр interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/core/components/misc/public-api.ts": [
                {
                    "name": "MISC_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/misc/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "projects/tgui/src/lib/core/components/navigation/public-api.ts": [
                {
                    "name": "NAVIGATION_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/navigation/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "projects/tgui/src/lib/core/components/overlays/public-api.ts": [
                {
                    "name": "OVERLAYS_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/overlays/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts": [
                {
                    "name": "TGUI_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/tgui/src/lib/core/utils/theme-helper.ts": [
                {
                    "name": "applyTheme",
                    "file": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\n",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 359,
                                "end": 364,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "theme"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 353,
                                "end": 358,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\n"
                        }
                    ]
                },
                {
                    "name": "setupSystemThemeDetection",
                    "file": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Setup system theme detection using prefers-color-scheme</p>\n",
                    "args": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 856,
                                "end": 864,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "callback"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 850,
                                "end": 855,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional callback function that will be called when the theme changes</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 939,
                                "end": 946,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function to cleanup the listeners</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/tgui/src/lib/core/services/theme.service.ts": [
                {
                    "name": "AppearanceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "projects/tgui/src/lib/core/services/theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts": [
                {
                    "name": "AvatarShape",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"circle\" | \"rounded\" | \"square\"",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "AvatarSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xxs\" | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts": [
                {
                    "name": "BadgeMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"critical\" | \"secondary\" | \"gray\" | \"white\"",
                    "file": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "BadgeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"number\" | \"dot\"",
                    "file": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/card/card.component.ts": [
                {
                    "name": "CardType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"plain\" | \"ambient\"",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/card.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Card types that define the visual style of the card</p>\n",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/core/services/platform.service.ts": [
                {
                    "name": "PlatformType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"base\" | \"ios\"",
                    "file": "projects/tgui/src/lib/core/services/platform.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/stories/introduction.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IntroductionComponent>",
                    "file": "projects/tgui/src/stories/introduction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SectionComponent>",
                    "file": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DividerComponent>",
                    "file": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TypographyComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TypographyComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AvatarComponent>",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AvatarStackComponent>",
                    "file": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardComponent>",
                    "file": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SpinnerComponent>",
                    "file": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CaptionComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeadlineComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LargeTitleComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TitleComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SubheadlineComponent>",
                    "file": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RippleComponent>",
                    "file": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "projects/tgui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applyTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withTGUIRoot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withTGUIRootModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/avatar-stack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarStackComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomOffsets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMixedContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 50,
                "coverageCount": "9/18",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AvatarShape",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/avatar.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AvatarSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarAcronymComponent",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarBadgeComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentShapes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserCardExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithOnlineStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/avatar/story/avatar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BadgeMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/badge/badge.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BadgeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 38,
                "coverageCount": "12/31",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RippleEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/button/story/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 80,
                "coverageCount": "12/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/card.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CardType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/components/card-cell/card-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardCellComponent",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/components/card-chip/card-chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardChipComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ambient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomBorderRadius",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAdvancedChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDirectImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDirectImageAndChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/card/story/card.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/components/section-footer/section-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionFooterComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/components/section-header/section-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionHeaderComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCenteredFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLargeHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/blocks/section/section.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PlatformSpecific",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/feedback/spinner/story/spinner.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/form/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/form/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FORM_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/layout/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAYOUT_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DividerComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/divider/divider.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/misc/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MISC_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/navigation/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/overlays/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OVERLAYS_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/portal/root-portal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootPortalComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/ripple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RippleComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RippleDemoProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/components/ripple/story/ripple.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tappable/tappable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TappableComponent",
                "coveragePercent": 60,
                "coverageCount": "15/25",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TGUIRootComponent",
                "coveragePercent": 23,
                "coverageCount": "4/17",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/service/tgui-root/tgui-root.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TGUI_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/caption.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CaptionComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CaptionInContext",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/caption/story/caption.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/headline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadlineComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/headline/story/headline.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/large-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LargeTitleComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/large-title/story/large-title.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Uppercase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Weights",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography-base.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypographyOverview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/story/typography.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/subheadline/subheadline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubheadlineComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paragraph",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/story/text.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/story/title.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 31,
                "coverageCount": "6/19",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/components/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 35,
                "coverageCount": "5/14",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/directives/portal-outlet.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PortalOutletDirective",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/directives/tgui-theme.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TGUIThemeDirective",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/platform.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlatformService",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/platform.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PlatformType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/portal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PortalService",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/ripple.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RippleService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/ripple.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RippleWave",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/telegram.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TelegramService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeParams",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WebApp",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 40,
                "coverageCount": "8/20",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/core/services/theme.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AppearanceType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemThemeService",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applyTheme",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/core/utils/theme-helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setupSystemThemeDetection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/tgui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/tgui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TguiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/stories/introduction.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntroductionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/stories/introduction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/stories/introduction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/stories/introduction.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}