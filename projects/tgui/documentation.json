{
    "pipes": [],
    "interfaces": [
        {
            "name": "RippleDemoProps",
            "id": "interface-RippleDemoProps-400de0fe8968fc1b3129a1c1cd55b4d83addd95e0b3fa19e32ff1b23d38e6b18c647fa9edfa7a969834be39ae0c24ab923a711562f3013fb27259f71ce79c312",
            "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { moduleMetadata, type Meta, type StoryObj } from '@storybook/angular';\nimport { RippleComponent } from '../ripple.component';\nimport { CommonModule } from '@angular/common';\nimport { RippleWave } from '@services/ripple.service';\n\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories\nconst meta: Meta<RippleComponent> = {\n  title: 'Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<RippleComponent>;\n\ninterface RippleDemoProps {\n  waves: RippleWave[];\n  addRipple: (event: MouseEvent) => void;\n}\n\n// Demo component with ripple effect simulation\nexport const Preview: Story = {\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Click for demonstration';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\n           This effect is automatically used in the Button component with interactiveAnimation=\"background\" value.</p>\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n};\n\n// Usage description\nexport const Usage: Story = {\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>How to use Ripple</h3>\n        <p>The Ripple component is usually not used directly in developer code, \n        but is integrated into buttons and other interactive elements.</p>\n        \n        <h4>Example of usage in the Button component:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  With ripple effect\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\n        when the button has the parameter interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}; \n",
            "properties": [
                {
                    "name": "addRipple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "waves",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RippleWave[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RippleWave",
            "id": "interface-RippleWave-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224",
            "file": "projects/tgui/src/lib/services/ripple.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\nexport interface RippleWave {\n  x: number;\n  y: number;\n  date: number;\n  pointerId: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RippleService {\n  private RIPPLE_DELAY = 70;\n  private WAVE_LIVE = 225;\n\n  /**\n   * Map to track pointer delay timers by pointerId\n   */\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\n  \n  /**\n   * Add a new ripple wave effect at the specified coordinates\n   */\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\n    const dateNow = Date.now();\n    // Filter out expired waves\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\n\n    // Add the new wave\n    const newWaves = [\n      ...filteredWaves,\n      {\n        x,\n        y,\n        date: dateNow,\n        pointerId,\n      }\n    ];\n\n    // Clean up the timer for this pointerId\n    this.pointerDelayTimers.delete(pointerId);\n    \n    return newWaves;\n  }\n\n  /**\n   * Handle pointer down event\n   * @param event Pointer event\n   * @param wavesSignal Signal для управления волнами\n   */\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Set a timeout to create the ripple effect after a short delay\n    this.pointerDelayTimers.set(\n      event.pointerId,\n      setTimeout(() => {\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\n        wavesSignal.set(newWaves);\n        \n        // Clear the waves after they've completed their animation\n        setTimeout(() => {\n          wavesSignal.set([]);\n        }, this.WAVE_LIVE);\n      }, this.RIPPLE_DELAY)\n    );\n  }\n\n  /**\n   * Handle pointer cancel/up event\n   */\n  handlePointerCancel(pointerId: number): void {\n    const timer = this.pointerDelayTimers.get(pointerId);\n    if (timer) {\n      clearTimeout(timer);\n      this.pointerDelayTimers.delete(pointerId);\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pointerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SnackbarOptions",
            "id": "interface-SnackbarOptions-fdb7f25441ea7cdb72bf47b0613ecd3f11e429fb038dc1dca25ccf11cd6a27c3b1bbc998ebae21f8aa6b979580bc593df2c2a7d8c5c1beeec8d07d23b5d0a30f",
            "file": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject, TemplateRef, createComponent, ApplicationRef, EnvironmentInjector } from '@angular/core';\nimport { SnackbarComponent } from './snackbar.component';\n\nexport interface SnackbarOptions {\n  beforeTemplate?: TemplateRef<any>;\n  afterTemplate?: TemplateRef<any>;\n  description?: string;\n  linkTemplate?: TemplateRef<any>;\n  duration?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n  private appRef = inject(ApplicationRef);\n  private injector = inject(EnvironmentInjector);\n  private activeSnackbars: any[] = [];\n  \n  show(message: string, options: SnackbarOptions = {}): void {\n    // Создаем компонент программно\n    const snackbarRef = createComponent(SnackbarComponent, {\n      environmentInjector: this.injector,\n      projectableNodes: [[document.createTextNode(message)]]\n    });\n    \n    // Настраиваем свойства\n    const instance = snackbarRef.instance;\n    instance.beforeTemplate = options.beforeTemplate;\n    instance.afterTemplate = options.afterTemplate;\n    instance.description = options.description;\n    instance.linkTemplate = options.linkTemplate;\n    instance.duration = options.duration ?? 4000;\n    instance.onClose = () => this.close(snackbarRef);\n    \n    // Добавляем в DOM и в отслеживаемые\n    this.appRef.attachView(snackbarRef.hostView);\n    this.activeSnackbars.push(snackbarRef);\n  }\n  \n  private close(snackbarRef: any): void {\n    const index = this.activeSnackbars.indexOf(snackbarRef);\n    if (index !== -1) {\n      this.activeSnackbars.splice(index, 1);\n      this.appRef.detachView(snackbarRef.hostView);\n      snackbarRef.destroy();\n    }\n  }\n  \n  closeAll(): void {\n    for (const snackbar of this.activeSnackbars) {\n      snackbar.instance.close();\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "afterTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "beforeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "linkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TguiIconProps",
            "id": "interface-TguiIconProps-d88773b19396c2f17a9d0e4364a452ce7a3ac0e67bbafc3f39403a769604b79005e97ed995f180353afbf115a77c82481bb6eb1f2d4411221dfec17a3b00a324",
            "file": "projects/tgui/src/lib/icons/icon.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\n\n/**\n * Base interface for icon components, compatible with React version\n */\nexport interface TguiIconProps {\n  /**\n   * CSS class to apply to the icon\n   */\n  class?: string;\n  \n  /**\n   * Additional styles to apply to the icon\n   */\n  style?: { [key: string]: string };\n  \n  /**\n   * Aria label for accessibility\n   */\n  ariaLabel?: string;\n  \n  /**\n   * Title for the icon\n   */\n  title?: string;\n\n  /**\n   * ID of the element\n   */\n  id?: string;\n\n  /**\n   * Fill color of the icon\n   */\n  fill?: string;\n\n  /**\n   * Stroke color of the icon\n   */\n  stroke?: string;\n\n  /**\n   * Width of the icon (can be CSS units or number)\n   */\n  width?: string | number;\n\n  /**\n   * Height of the icon (can be CSS units or number)\n   */\n  height?: string | number;\n\n  /**\n   * Role attribute for accessibility\n   */\n  role?: string;\n\n  /**\n   * Tab index for keyboard navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * Whether the element should get focus on load\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Click event handler\n   */\n  onClick?: EventEmitter<MouseEvent>;\n\n  /**\n   * Focus event handler\n   */\n  onFocus?: EventEmitter<FocusEvent>;\n\n  /**\n   * Blur event handler\n   */\n  onBlur?: EventEmitter<FocusEvent>;\n\n  /**\n   * Mouse enter event handler\n   */\n  onMouseEnter?: EventEmitter<MouseEvent>;\n\n  /**\n   * Mouse leave event handler\n   */\n  onMouseLeave?: EventEmitter<MouseEvent>;\n\n  /**\n   * Key down event handler\n   */\n  onKeyDown?: EventEmitter<KeyboardEvent>;\n\n  /**\n   * Pointer down event handler\n   */\n  onPointerDown?: EventEmitter<PointerEvent>;\n\n  /**\n   * Pointer up event handler\n   */\n  onPointerUp?: EventEmitter<PointerEvent>;\n} ",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Aria label for accessibility</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nAria label for accessibility\n"
                },
                {
                    "name": "autoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Whether the element should get focus on load</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nWhether the element should get focus on load\n"
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>CSS class to apply to the icon</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nCSS class to apply to the icon\n"
                },
                {
                    "name": "fill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Fill color of the icon</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nFill color of the icon\n"
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Height of the icon (can be CSS units or number)</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nHeight of the icon (can be CSS units or number)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>ID of the element</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nID of the element\n"
                },
                {
                    "name": "onBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<FocusEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Blur event handler</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nBlur event handler\n"
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<MouseEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Click event handler</p>\n",
                    "line": 70,
                    "rawdescription": "\n\nClick event handler\n"
                },
                {
                    "name": "onFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<FocusEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Focus event handler</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nFocus event handler\n"
                },
                {
                    "name": "onKeyDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<KeyboardEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Key down event handler</p>\n",
                    "line": 95,
                    "rawdescription": "\n\nKey down event handler\n"
                },
                {
                    "name": "onMouseEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<MouseEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Mouse enter event handler</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nMouse enter event handler\n"
                },
                {
                    "name": "onMouseLeave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<MouseEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Mouse leave event handler</p>\n",
                    "line": 90,
                    "rawdescription": "\n\nMouse leave event handler\n"
                },
                {
                    "name": "onPointerDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<PointerEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Pointer down event handler</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nPointer down event handler\n"
                },
                {
                    "name": "onPointerUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<PointerEvent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Pointer up event handler</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nPointer up event handler\n"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Role attribute for accessibility</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nRole attribute for accessibility\n"
                },
                {
                    "name": "stroke",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Stroke color of the icon</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nStroke color of the icon\n"
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Additional styles to apply to the icon</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nAdditional styles to apply to the icon\n"
                },
                {
                    "name": "tabIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Tab index for keyboard navigation</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nTab index for keyboard navigation\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Title for the icon</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nTitle for the icon\n"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Width of the icon (can be CSS units or number)</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nWidth of the icon (can be CSS units or number)\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Base interface for icon components, compatible with React version</p>\n",
            "rawdescription": "\n\nBase interface for icon components, compatible with React version\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ThemeParams",
            "id": "interface-ThemeParams-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "accent_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "button_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "button_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destructive_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "header_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hint_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "link_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "secondary_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "section_bg_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "section_header_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subtitle_text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "text_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WebApp",
            "id": "interface-WebApp-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "colorScheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "themeParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeParams",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "offEvent",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEvent",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventHandler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "Window",
            "id": "interface-Window-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/services/telegram.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "properties": [
                {
                    "name": "Telegram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "PlatformService",
            "id": "injectable-PlatformService-da35e3f5d70773bebd38cfc6f0d2ff2568f4571fb10142b336d812ca0fbf66328ad848099bd4ccf896c4231162bded0a2e3640101a6ca1b19659ce440ebb8ca5",
            "file": "projects/tgui/src/lib/services/platform.service.ts",
            "properties": [
                {
                    "name": "_isIOSPlatform",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platform",
                    "defaultValue": "signal<PlatformType>('base')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyPlatformToDOM",
                    "args": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply platform class to DOM\n",
                    "description": "<p>Apply platform class to DOM</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "detectIOSFromUserAgent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the device is iOS based on user agent\n",
                    "description": "<p>Check if the device is iOS based on user agent</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectPlatform",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetect platform based on user agent\n",
                    "description": "<p>Detect platform based on user agent</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isIOS",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if current platform is iOS\nUses DOM class to determine platform, caches result for better performance\n",
                    "description": "<p>Checks if current platform is iOS\nUses DOM class to determine platform, caches result for better performance</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setPlatform",
                    "args": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet platform manually\n",
                    "description": "<p>Set platform manually</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "platform",
                            "type": "PlatformType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, signal, inject } from '@angular/core';\nimport { TelegramService } from './telegram.service';\n\nexport type PlatformType = 'base' | 'ios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformService {\n  // Signal for platform that components can subscribe to\n  public platform = signal<PlatformType>('base');\n  \n  // Cached value for checking iOS platform\n  private _isIOSPlatform: boolean | null = null;\n\n  private document = inject(DOCUMENT);\n\n  constructor() {\n    this.detectPlatform();\n  }\n\n  /**\n   * Set platform manually\n   */\n  public setPlatform(platform: PlatformType): void {\n    this.platform.set(platform);\n    this.applyPlatformToDOM(platform);\n    // Update cached value\n    this._isIOSPlatform = platform === 'ios';\n  }\n  \n  /**\n   * Checks if current platform is iOS\n   * Uses DOM class to determine platform, caches result for better performance\n   */\n  public isIOS(): boolean {\n    // If value is already cached, return it\n    if (this._isIOSPlatform !== null) {\n      return this._isIOSPlatform;\n    }\n    \n    // Otherwise check for iOS class in DOM\n    if (this.document && this.document.documentElement) {\n      this._isIOSPlatform = this.document.documentElement.classList.contains('tgui-platform-ios');\n      return this._isIOSPlatform;\n    }\n    \n    // If unable to determine, return false\n    return false;\n  }\n\n  /**\n   * Detect platform based on user agent\n   */\n  private detectPlatform(): void {\n    const isIOS = this.detectIOSFromUserAgent();\n    const detectedPlatform: PlatformType = isIOS ? 'ios' : 'base';\n    \n    this.platform.set(detectedPlatform);\n    this.applyPlatformToDOM(detectedPlatform);\n    // Cache result\n    this._isIOSPlatform = isIOS;\n  }\n\n  /**\n   * Apply platform class to DOM\n   */\n  private applyPlatformToDOM(platform: PlatformType): void {\n    // Remove existing platform classes\n    this.document.documentElement.classList.remove('tgui-platform-base', 'tgui-platform-ios');\n    \n    // Add the appropriate platform class\n    this.document.documentElement.classList.add(`tgui-platform-${platform}`);\n  }\n\n  /**\n   * Check if the device is iOS based on user agent\n   */\n  private detectIOSFromUserAgent(): boolean {\n    if (typeof window === 'undefined' || !window.navigator) {\n      return false;\n    }\n\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    \n    return /iphone|ipad|ipod/.test(userAgent) || \n           (userAgent.includes('mac') && 'ontouchend' in document);\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PortalService",
            "id": "injectable-PortalService-8fece340023811fd532f9e283dd9aabe9f4a30f311083c08a175b1ec40a6a4d635359fd25c8032b053ebf36bac4bdee008b8e91cb5aed5ab062a2f9873233108",
            "file": "projects/tgui/src/lib/services/portal.service.ts",
            "properties": [
                {
                    "name": "hasPortalContainer",
                    "defaultValue": "computed(() => !!this.portalContainer())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "portalContainer",
                    "defaultValue": "this.portalContainerRef.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "portalContainerRef",
                    "defaultValue": "signal<ElementRef<HTMLElement> | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearPortalContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the portal container reference\nThis should be called when the container is destroyed\n",
                    "description": "<p>Clear the portal container reference\nThis should be called when the container is destroyed</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPortalContainerElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current portal container element\nReturns the native DOM element or null if not set\n",
                    "description": "<p>Get the current portal container element\nReturns the native DOM element or null if not set</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isPortalReady",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if portal container is ready for use\n",
                    "description": "<p>Check if portal container is ready for use</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setPortalContainer",
                    "args": [
                        {
                            "name": "elementRef",
                            "type": "ElementRef<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the portal container reference\nThis is typically called by the TGUIRootComponent\n",
                    "description": "<p>Set the portal container reference\nThis is typically called by the TGUIRootComponent</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "elementRef",
                            "type": "ElementRef<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service for managing portal container references\nProvides functionality for components to render content outside of their DOM hierarchy</p>\n",
            "rawdescription": "\n\nService for managing portal container references\nProvides functionality for components to render content outside of their DOM hierarchy\n",
            "sourceCode": "import { Injectable, ElementRef, signal, computed } from '@angular/core';\n\n/**\n * Service for managing portal container references\n * Provides functionality for components to render content outside of their DOM hierarchy\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PortalService {\n  // Signal to store the portal container reference\n  private readonly portalContainerRef = signal<ElementRef<HTMLElement> | null>(null);\n\n  // Public readonly signal for accessing the portal container\n  public readonly portalContainer = this.portalContainerRef.asReadonly();\n  \n  // Computed signal to check if portal container is available\n  public readonly hasPortalContainer = computed(() => !!this.portalContainer());\n  \n  constructor() {\n    console.log('PortalService initialized');\n  }\n  \n  /**\n   * Set the portal container reference\n   * This is typically called by the TGUIRootComponent\n   */\n  public setPortalContainer(elementRef: ElementRef<HTMLElement>): void {\n    if (!elementRef || !elementRef.nativeElement) {\n      console.error('Invalid portal container provided to PortalService');\n      return;\n    }\n    \n    console.log('Setting portal container:', elementRef.nativeElement);\n    this.portalContainerRef.set(elementRef);\n  }\n  \n  /**\n   * Clear the portal container reference\n   * This should be called when the container is destroyed\n   */\n  public clearPortalContainer(): void {\n    console.log('Clearing portal container reference');\n    this.portalContainerRef.set(null);\n  }\n  \n  /**\n   * Get the current portal container element\n   * Returns the native DOM element or null if not set\n   */\n  public getPortalContainerElement(): HTMLElement | null {\n    const container = this.portalContainer()?.nativeElement || null;\n    if (!container) {\n      console.warn('Portal container not available - make sure tgui-root component is properly set up');\n    }\n    return container;\n  }\n  \n  /**\n   * Check if portal container is ready for use\n   */\n  public isPortalReady(): boolean {\n    const isReady = !!this.getPortalContainerElement();\n    console.log('Portal ready status:', isReady);\n    return isReady;\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RippleService",
            "id": "injectable-RippleService-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224",
            "file": "projects/tgui/src/lib/services/ripple.service.ts",
            "properties": [
                {
                    "name": "pointerDelayTimers",
                    "defaultValue": "new Map<number, ReturnType<typeof setTimeout>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Map to track pointer delay timers by pointerId</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nMap to track pointer delay timers by pointerId\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RIPPLE_DELAY",
                    "defaultValue": "70",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "WAVE_LIVE",
                    "defaultValue": "225",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addWave",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentWaves",
                            "type": "RippleWave[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RippleWave[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a new ripple wave effect at the specified coordinates\n",
                    "description": "<p>Add a new ripple wave effect at the specified coordinates</p>\n",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentWaves",
                            "type": "RippleWave[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePointerCancel",
                    "args": [
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer cancel/up event\n",
                    "description": "<p>Handle pointer cancel/up event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "pointerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePointerDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wavesSignal",
                            "type": "ReturnType<<RippleWave[]>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle pointer down event\n",
                    "description": "<p>Handle pointer down event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1082,
                                "end": 1087,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1076,
                                "end": 1081,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Pointer event</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1114,
                                "end": 1125,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "wavesSignal"
                            },
                            "type": "ReturnType<<RippleWave[]>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1108,
                                "end": 1113,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Signal для управления волнами</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\nexport interface RippleWave {\n  x: number;\n  y: number;\n  date: number;\n  pointerId: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RippleService {\n  private RIPPLE_DELAY = 70;\n  private WAVE_LIVE = 225;\n\n  /**\n   * Map to track pointer delay timers by pointerId\n   */\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\n  \n  /**\n   * Add a new ripple wave effect at the specified coordinates\n   */\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\n    const dateNow = Date.now();\n    // Filter out expired waves\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\n\n    // Add the new wave\n    const newWaves = [\n      ...filteredWaves,\n      {\n        x,\n        y,\n        date: dateNow,\n        pointerId,\n      }\n    ];\n\n    // Clean up the timer for this pointerId\n    this.pointerDelayTimers.delete(pointerId);\n    \n    return newWaves;\n  }\n\n  /**\n   * Handle pointer down event\n   * @param event Pointer event\n   * @param wavesSignal Signal для управления волнами\n   */\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Set a timeout to create the ripple effect after a short delay\n    this.pointerDelayTimers.set(\n      event.pointerId,\n      setTimeout(() => {\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\n        wavesSignal.set(newWaves);\n        \n        // Clear the waves after they've completed their animation\n        setTimeout(() => {\n          wavesSignal.set([]);\n        }, this.WAVE_LIVE);\n      }, this.RIPPLE_DELAY)\n    );\n  }\n\n  /**\n   * Handle pointer cancel/up event\n   */\n  handlePointerCancel(pointerId: number): void {\n    const timer = this.pointerDelayTimers.get(pointerId);\n    if (timer) {\n      clearTimeout(timer);\n      this.pointerDelayTimers.delete(pointerId);\n    }\n  }\n} ",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-fdb7f25441ea7cdb72bf47b0613ecd3f11e429fb038dc1dca25ccf11cd6a27c3b1bbc998ebae21f8aa6b979580bc593df2c2a7d8c5c1beeec8d07d23b5d0a30f",
            "file": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts",
            "properties": [
                {
                    "name": "activeSnackbars",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "appRef",
                    "defaultValue": "inject(ApplicationRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "injector",
                    "defaultValue": "inject(EnvironmentInjector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "snackbarRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "snackbarRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "SnackbarOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "SnackbarOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, TemplateRef, createComponent, ApplicationRef, EnvironmentInjector } from '@angular/core';\nimport { SnackbarComponent } from './snackbar.component';\n\nexport interface SnackbarOptions {\n  beforeTemplate?: TemplateRef<any>;\n  afterTemplate?: TemplateRef<any>;\n  description?: string;\n  linkTemplate?: TemplateRef<any>;\n  duration?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n  private appRef = inject(ApplicationRef);\n  private injector = inject(EnvironmentInjector);\n  private activeSnackbars: any[] = [];\n  \n  show(message: string, options: SnackbarOptions = {}): void {\n    // Создаем компонент программно\n    const snackbarRef = createComponent(SnackbarComponent, {\n      environmentInjector: this.injector,\n      projectableNodes: [[document.createTextNode(message)]]\n    });\n    \n    // Настраиваем свойства\n    const instance = snackbarRef.instance;\n    instance.beforeTemplate = options.beforeTemplate;\n    instance.afterTemplate = options.afterTemplate;\n    instance.description = options.description;\n    instance.linkTemplate = options.linkTemplate;\n    instance.duration = options.duration ?? 4000;\n    instance.onClose = () => this.close(snackbarRef);\n    \n    // Добавляем в DOM и в отслеживаемые\n    this.appRef.attachView(snackbarRef.hostView);\n    this.activeSnackbars.push(snackbarRef);\n  }\n  \n  private close(snackbarRef: any): void {\n    const index = this.activeSnackbars.indexOf(snackbarRef);\n    if (index !== -1) {\n      this.activeSnackbars.splice(index, 1);\n      this.appRef.detachView(snackbarRef.hostView);\n      snackbarRef.destroy();\n    }\n  }\n  \n  closeAll(): void {\n    for (const snackbar of this.activeSnackbars) {\n      snackbar.instance.close();\n    }\n  }\n} ",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SystemThemeService",
            "id": "injectable-SystemThemeService-3c7cb33b939c8744b7383bcb972356a6fcbc48190d1c57ceabb74448fe741d7c1b9060834fd48cba506b6419afab7e942baf1d67781f5d6a042a3bc1b50fbcfc",
            "file": "projects/tgui/src/lib/utils/theme-helper.ts",
            "properties": [
                {
                    "name": "cleanup",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "this.themeSignal.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "themeSignal",
                    "defaultValue": "signal<AppearanceType>(this.getInitialTheme())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "disableSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "enableSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInitialTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "AppearanceType",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupThemeDetection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Angular service для использования системных тем\nИспользует сигналы для отслеживания изменений темы</p>\n",
            "rawdescription": "\n\nAngular service для использования системных тем\nИспользует сигналы для отслеживания изменений темы\n",
            "sourceCode": "import { Injectable, OnDestroy, inject, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { AppearanceType } from '@services/theme.service';\n\n/**\n * Apply the specified theme by adding the appropriate CSS class to the document's root element\n * @param theme The theme to apply ('light' or 'dark')\n */\nexport function applyTheme(theme: AppearanceType): void {\n  // Remove existing theme classes\n  document.documentElement.classList.remove('tgui-theme-light', 'tgui-theme-dark');\n  \n  // Add the appropriate theme class\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\n}\n\n/**\n * Setup system theme detection using prefers-color-scheme\n * @param callback Optional callback function that will be called when the theme changes\n * @returns A function to cleanup the listeners\n */\nexport function setupSystemThemeDetection(callback?: (theme: AppearanceType) => void): () => void {\n  if (typeof window === 'undefined') return () => {};\n  \n  const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n  \n  // Apply initial theme based on system preference\n  const initialTheme: AppearanceType = isDarkMode.matches ? 'dark' : 'light';\n  applyTheme(initialTheme);\n  callback?.(initialTheme);\n  \n  // Add listener for theme changes\n  const handleThemeChange = (event: MediaQueryListEvent) => {\n    const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n    applyTheme(newTheme);\n    callback?.(newTheme);\n  };\n  \n  isDarkMode.addEventListener('change', handleThemeChange);\n  \n  // Return cleanup function\n  return () => {\n    isDarkMode.removeEventListener('change', handleThemeChange);\n  };\n}\n\n/**\n * Angular service для использования системных тем\n * Использует сигналы для отслеживания изменений темы\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemThemeService implements OnDestroy {\n  // Signal для темы с начальным значением\n  private readonly themeSignal = signal<AppearanceType>(this.getInitialTheme());\n  \n  // Публичный readonly signal для доступа к теме\n  public readonly theme = this.themeSignal.asReadonly();\n  \n  private cleanup: (() => void) | null = null;\n  \n  constructor() {\n    this.setupThemeDetection();\n  }\n  \n  // Устанавливаем тему вручную\n  setTheme(theme: AppearanceType): void {\n    this.themeSignal.set(theme);\n    applyTheme(theme);\n  }\n  \n  // Включаем отслеживание системной темы\n  enableSystemTheme(): void {\n    this.cleanup && this.cleanup();\n    this.setupThemeDetection();\n  }\n  \n  // Отключаем отслеживание системной темы\n  disableSystemTheme(): void {\n    this.cleanup && this.cleanup();\n    this.cleanup = null;\n  }\n  \n  ngOnDestroy(): void {\n    this.cleanup && this.cleanup();\n  }\n  \n  private getInitialTheme(): AppearanceType {\n    if (typeof window === 'undefined') return 'light';\n    \n    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n    return isDarkMode.matches ? 'dark' : 'light';\n  }\n  \n  private setupThemeDetection(): void {\n    if (typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    // Устанавливаем начальную тему\n    const initialTheme: AppearanceType = mediaQuery.matches ? 'dark' : 'light';\n    this.themeSignal.set(initialTheme);\n    applyTheme(initialTheme);\n    \n    // Создаем обработчик события изменения медиа-запроса\n    const handleMediaQueryChange = (event: MediaQueryListEvent) => {\n      const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n      this.themeSignal.set(newTheme);\n      applyTheme(newTheme);\n    };\n    \n    // Добавляем слушатель события\n    mediaQuery.addEventListener('change', handleMediaQueryChange);\n    \n    // Функция очистки\n    this.cleanup = () => {\n      mediaQuery.removeEventListener('change', handleMediaQueryChange);\n    };\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 65
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TelegramService",
            "id": "injectable-TelegramService-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b",
            "file": "projects/tgui/src/lib/services/telegram.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTelegramData",
                    "args": [],
                    "optional": false,
                    "returnType": "WebApp | undefined",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hexToRGB",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// Define Telegram WebApp interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n  header_bg_color?: string;\n  accent_text_color?: string;\n  section_bg_color?: string;\n  section_header_text_color?: string;\n  subtitle_text_color?: string;\n  destructive_text_color?: string;\n}\n\ninterface WebApp {\n  colorScheme: 'light' | 'dark';\n  themeParams: ThemeParams;\n  onEvent(eventName: string, eventHandler: () => void): void;\n  offEvent(eventName: string, eventHandler: () => void): void;\n}\n\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: WebApp;\n    };\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelegramService {\n  // Check if DOM is available\n  private get canUseDOM(): boolean {\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  }\n\n  // Get Telegram WebApp data\n  public getTelegramData(): WebApp | undefined {\n    if (!this.canUseDOM) {\n      return undefined;\n    }\n\n    return window.Telegram?.WebApp;\n  }\n\n  // Helper function to convert hex color to RGB\n  public hexToRGB(hex: string): [number, number, number] {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    \n    return [r, g, b];\n  }\n} ",
            "accessors": {
                "canUseDOM": {
                    "name": "canUseDOM",
                    "getSignature": {
                        "name": "canUseDOM",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 40
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TguiService",
            "id": "injectable-TguiService-96737dce57d4f75d15958abccfda47b625b0512a08b78bb321b63c6d59996c0beb002a99561d750a6dda7397e1a1077eccf2f839ec5d14c2eccbf43cf0127a3b",
            "file": "projects/tgui/src/lib/tgui.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TguiService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-9f8dfee41535c78f8fcad1a4d11a01c2ec260291658ca487dd89f491905ec9020ab7f09604a0d23a10e20e63502c919dfefadcac13b10488935d063c0b860a37",
            "file": "projects/tgui/src/lib/services/theme.service.ts",
            "properties": [
                {
                    "name": "appearance",
                    "defaultValue": "signal<AppearanceType>('light')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentTheme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppearanceType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleThemeChange",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mediaQueryList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaQueryList | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "telegramService",
                    "defaultValue": "inject(TelegramService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "themeChangeListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "useSystemTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyThemeToDOM",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply theme class to DOM\n",
                    "description": "<p>Apply theme class to DOM</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cleanupListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClean up event listeners\n",
                    "description": "<p>Clean up event listeners</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectSystemTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetect and apply system theme\n",
                    "description": "<p>Detect and apply system theme</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "initializeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize the theme detection\n",
                    "description": "<p>Initialize the theme detection</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadGlobalStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad global CSS variables to make them available for all components\n",
                    "description": "<p>Load global CSS variables to make them available for all components</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "followSystem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the theme manually\n",
                    "description": "<p>Change the theme manually</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1165,
                                "end": 1170,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "theme"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1159,
                                "end": 1164,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The theme to set</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1200,
                                "end": 1212,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "followSystem"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1194,
                                "end": 1199,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>If true, will follow system theme changes after setting. Default false.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setupBrowserThemeDetection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetup browser theme detection using prefers-color-scheme\n",
                    "description": "<p>Setup browser theme detection using prefers-color-scheme</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupTheme",
                    "args": [
                        {
                            "name": "appearance",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "followSystem",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetup theme based on inputs and system preferences\n",
                    "description": "<p>Setup theme based on inputs and system preferences</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1759,
                                "end": 1769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "appearance"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1753,
                                "end": 1758,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Appearance to use</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1800,
                                "end": 1812,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "followSystem"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1794,
                                "end": 1799,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether to follow system theme</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy, signal, inject, Renderer2, RendererFactory2 } from '@angular/core';\nimport { TelegramService } from './telegram.service';\n\nexport type AppearanceType = 'light' | 'dark';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService implements OnDestroy {\n  // Signal for appearance that components can subscribe to\n  public appearance = signal<AppearanceType>('light');\n  private themeChangeListener: (() => void) | null = null;\n  private mediaQueryList: MediaQueryList | null = null;\n  private handleThemeChange: ((event: MediaQueryListEvent) => void) | null = null;\n  private useSystemTheme = false;\n  private currentTheme: AppearanceType = 'light';\n  private renderer: Renderer2;\n\n  private telegramService = inject(TelegramService);\n  private document = inject(DOCUMENT);\n\n  constructor(rendererFactory: RendererFactory2) {\n    console.log(`themeService: constructor`);\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this.initializeTheme();\n  }\n\n  ngOnDestroy(): void {\n    this.cleanupListeners();\n  }\n\n  /**\n   * Change the theme manually\n   * @param theme The theme to set\n   * @param followSystem If true, will follow system theme changes after setting. Default false.\n   */\n  public setTheme(theme: AppearanceType, followSystem = false): void {\n    this.cleanupListeners();\n    this.appearance.set(theme);\n    this.applyThemeToDOM(theme);\n    \n    // If instructed to follow system theme, restore the detector\n    if (followSystem) {\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    } else {\n      this.useSystemTheme = false;\n    }\n  }\n\n  /**\n   * Setup theme based on inputs and system preferences\n   * @param appearance Appearance to use\n   * @param followSystem Whether to follow system theme\n   */\n  public setupTheme(appearance?: AppearanceType, followSystem: boolean = false): void {\n    console.log(`themeService: setupTheme: appearance=${appearance}, currentTheme=${this.currentTheme}`);\n    this.cleanupListeners();\n    if (followSystem) {\n      // Follow system theme\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    } else if (appearance) {\n      // Set specific theme\n      this.setTheme(appearance, false);\n    } else {\n      // If nothing specified, try to detect system theme\n      this.detectSystemTheme();\n    }\n  }\n\n  /**\n   * Detect and apply system theme\n   */\n  public detectSystemTheme(): void {\n    if (typeof window === 'undefined') {\n      // Use light theme by default\n      this.setTheme('light', false);\n      return;\n    }\n    \n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.setTheme(prefersDarkMode ? 'dark' : 'light', false);\n  }\n\n  /**\n   * Load global CSS variables to make them available for all components\n   */\n  public loadGlobalStyles(): void {\n    // Check if styles are already loaded\n    if (this.document.getElementById('tgui-variables-css')) {\n      return;\n    }\n    \n    const head = this.document.head;\n    const link = this.document.createElement('link');\n    \n    link.id = 'tgui-variables-css';\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    \n    // Add error handling\n    link.onerror = () => {\n      console.error('Failed to load TGUI variables CSS file. Theme functionality may be limited.');\n    };\n    \n    // In production builds, this will be replaced with the actual path\n    // The actual file is bundled with the library during build\n    link.href = 'assets/tgui/styles/variables.css';\n    \n    head.appendChild(link);\n  }\n\n  /**\n   * Initialize the theme detection\n   */\n  private initializeTheme(): void {\n    // First check Telegram API\n    const telegramData = this.telegramService.getTelegramData();\n    \n    if (telegramData) {\n      // Use Telegram theme\n      this.appearance.set(telegramData.colorScheme);\n      this.applyThemeToDOM(telegramData.colorScheme);\n      \n      // Set up listener for theme changes\n      this.themeChangeListener = () => {\n        const newTelegramData = this.telegramService.getTelegramData();\n        if (newTelegramData) {\n          this.appearance.set(newTelegramData.colorScheme);\n          this.applyThemeToDOM(newTelegramData.colorScheme);\n        }\n      };\n      \n      telegramData.onEvent('themeChanged', this.themeChangeListener);\n    } else {\n      // Use browser preference\n      this.useSystemTheme = true;\n      this.setupBrowserThemeDetection();\n    }\n  }\n\n  /**\n   * Setup browser theme detection using prefers-color-scheme\n   */\n  private setupBrowserThemeDetection(): void {\n    if (typeof window === 'undefined') return;\n    \n    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');\n    this.mediaQueryList = isDarkMode;\n    \n    // Apply theme based on system preference only if following system theme\n    if (this.useSystemTheme) {\n      const theme: AppearanceType = isDarkMode.matches ? 'dark' : 'light';\n      this.appearance.set(theme);\n      this.applyThemeToDOM(theme);\n    }\n    \n    // Add listener for theme changes and store reference to the handler\n    this.handleThemeChange = (event: MediaQueryListEvent) => {\n      if (this.useSystemTheme) {\n        const newTheme: AppearanceType = event.matches ? 'dark' : 'light';\n        this.appearance.set(newTheme);\n        this.applyThemeToDOM(newTheme);\n      }\n    };\n    \n    isDarkMode.addEventListener('change', this.handleThemeChange);\n    \n    // Store reference for cleanup\n    this.mediaQueryList = isDarkMode;\n  }\n\n  /**\n   * Apply theme class to DOM\n   */\n  private applyThemeToDOM(theme: AppearanceType): void {\n\n    if (theme === this.currentTheme) {\n      if(theme === 'dark') {\n        this.renderer.removeClass(this.document.documentElement, `tgui-theme-light`);\n      } else {\n        this.renderer.removeClass(this.document.documentElement, `tgui-theme-dark`);\n      }\n      return;\n    };\n    \n    // Remove existing theme classes\n    this.renderer.removeClass(this.document.documentElement, `tgui-theme-${this.currentTheme}`);\n\n    // Add the appropriate theme class\n    this.renderer.addClass(this.document.documentElement, `tgui-theme-${theme}`);\n    \n    // Update current theme\n    this.currentTheme = theme;\n  }\n\n  /**\n   * Clean up event listeners\n   */\n  private cleanupListeners(): void {\n    // Clean up Telegram listeners\n    const telegramData = this.telegramService.getTelegramData();\n    if (telegramData && this.themeChangeListener) {\n      telegramData.offEvent('themeChanged', this.themeChangeListener);\n      this.themeChangeListener = null;\n    }\n    \n    // Clean up media query listeners using stored reference\n    if (this.mediaQueryList && this.handleThemeChange) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n      this.mediaQueryList = null;\n      this.handleThemeChange = null;\n    }\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "PortalOutletDirective",
            "id": "directive-PortalOutletDirective-1b7d5bb8ee72d63c9225c3384efd0da72f8571ae6b04a79fbcb7fd1043fab76a26639211726e3342dd2b9b82fa2be5978a6c4950b33ea5f02f2de02448efe692",
            "file": "projects/tgui/src/lib/directives/portal-outlet.directive.ts",
            "type": "directive",
            "description": "<p>Directive that renders content into a portal container\nUse it to project content outside of its normal DOM hierarchy</p>\n",
            "rawdescription": "\n\nDirective that renders content into a portal container\nUse it to project content outside of its normal DOM hierarchy\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef, OnInit, OnDestroy, ElementRef, EmbeddedViewRef, inject, effect } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport { PortalService } from '../services';\n\n/**\n * Directive that renders content into a portal container\n * Use it to project content outside of its normal DOM hierarchy\n */\n@Directive({\n  selector: '[tguiPortalOutlet]',\n  standalone: true\n})\nexport class PortalOutletDirective implements OnInit, OnDestroy {\n  @Input() tguiPortalOutlet: TemplateRef<any> | null = null;\n  \n  private destroy$ = new Subject<void>();\n  \n  private viewContainerRef = inject(ViewContainerRef);\n  private portalService = inject(PortalService);\n  \n  constructor() {\n    effect(() => {\n      const container = this.portalService.portalContainer();\n      \n      // Skip rendering if we're not initialized yet\n      if (!this.tguiPortalOutlet) return;\n      \n      // Clear existing content\n      this.viewContainerRef.clear();\n      \n      // Only render if we have both a container and a template\n      if (container && this.tguiPortalOutlet) {\n        const embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.tguiPortalOutlet) as EmbeddedViewRef<any>;\n        \n        // Move the generated content to the portal container\n        const viewRootNodes = embeddedViewRef.rootNodes || [];\n        viewRootNodes.forEach((node: Node) => {\n          container.nativeElement.appendChild(node);\n        });\n      }\n    });\n  }\n  \n  ngOnInit(): void {\n    // Initialization is now handled in the effect\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n} ",
            "selector": "[tguiPortalOutlet]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tguiPortalOutlet",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            }
        },
        {
            "name": "TguiSvgPropsDirective",
            "id": "directive-TguiSvgPropsDirective-d51698ce27441b069085f493dd28b7d3176b72d310a9e261ffb94594569d04ef30a6a423d9a2063d92f3cfbed8122af21d102f8d9a4bc3706eca201191b57c8b",
            "file": "projects/tgui/src/lib/icons/directives/svg-props.directive.ts",
            "type": "directive",
            "description": "<p>Директива для автоматической передачи свойств иконки в SVG элемент\nПозволяет использовать подход, аналогичный {...props} в React</p>\n",
            "rawdescription": "\n\nДиректива для автоматической передачи свойств иконки в SVG элемент\nПозволяет использовать подход, аналогичный {...props} в React\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { TguiIconProps } from '../icon.interface';\n\n/**\n * Директива для автоматической передачи свойств иконки в SVG элемент\n * Позволяет использовать подход, аналогичный {...props} в React\n */\n@Directive({\n  selector: '[tguiSvgProps]',\n  standalone: true\n})\nexport class TguiSvgPropsDirective implements OnChanges {\n  @Input('tguiSvgProps') props!: TguiIconProps;\n\n  constructor(private el: ElementRef<SVGElement>) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['props'] && this.props) {\n      this.applyProps();\n    }\n  }\n\n  private applyProps(): void {\n    const el = this.el.nativeElement;\n    const props = this.props;\n\n    // Применяем базовые атрибуты\n    if (props.class) el.setAttribute('class', props.class);\n    if (props.id) el.setAttribute('id', props.id);\n    if (props.fill) el.setAttribute('fill', props.fill);\n    if (props.stroke) el.setAttribute('stroke', props.stroke);\n    if (props.width) el.setAttribute('width', props.width.toString());\n    if (props.height) el.setAttribute('height', props.height.toString());\n    if (props.role) el.setAttribute('role', props.role);\n    if (props.tabIndex !== undefined) el.setAttribute('tabindex', props.tabIndex.toString());\n    if (props.autoFocus) el.setAttribute('autofocus', 'true');\n    if (props.ariaLabel) el.setAttribute('aria-label', props.ariaLabel);\n    if (props.title) el.setAttribute('title', props.title);\n\n    // Применяем стили\n    if (props.style) {\n      const styleStr = Object.entries(props.style)\n        .map(([key, value]) => `${this.kebabCase(key)}: ${value}`)\n        .join('; ');\n      el.setAttribute('style', styleStr);\n    }\n\n    // Добавляем обработчики событий\n    this.setupEventHandlers(el, props);\n  }\n\n  private setupEventHandlers(el: SVGElement, props: TguiIconProps): void {\n    // Очищаем старые обработчики\n    this.removeEventHandlers(el);\n\n    // Добавляем новые\n    if (props.onClick) {\n      el.addEventListener('click', (e) => props.onClick?.emit(e as MouseEvent));\n    }\n    if (props.onFocus) {\n      el.addEventListener('focus', (e) => props.onFocus?.emit(e as FocusEvent));\n    }\n    if (props.onBlur) {\n      el.addEventListener('blur', (e) => props.onBlur?.emit(e as FocusEvent));\n    }\n    if (props.onMouseEnter) {\n      el.addEventListener('mouseenter', (e) => props.onMouseEnter?.emit(e as MouseEvent));\n    }\n    if (props.onMouseLeave) {\n      el.addEventListener('mouseleave', (e) => props.onMouseLeave?.emit(e as MouseEvent));\n    }\n    if (props.onKeyDown) {\n      el.addEventListener('keydown', (e) => props.onKeyDown?.emit(e as KeyboardEvent));\n    }\n    if (props.onPointerDown) {\n      el.addEventListener('pointerdown', (e) => props.onPointerDown?.emit(e as PointerEvent));\n    }\n    if (props.onPointerUp) {\n      el.addEventListener('pointerup', (e) => props.onPointerUp?.emit(e as PointerEvent));\n    }\n  }\n\n  private removeEventHandlers(el: SVGElement): void {\n    // Функция-заглушка для удаления обработчиков\n    // В реальном коде здесь должны быть removeEventListener для каждого типа события\n  }\n\n  private kebabCase(str: string): string {\n    return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();\n  }\n} ",
            "selector": "[tguiSvgProps]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tguiSvgProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "TguiIconProps",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyProps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "kebabCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEventHandlers",
                    "args": [
                        {
                            "name": "el",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupEventHandlers",
                    "args": [
                        {
                            "name": "el",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "TguiIconProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "TguiIconProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<SVGElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TGUIThemeDirective",
            "id": "directive-TGUIThemeDirective-2f3a8db879075f534b302cdb0231acb783f926d5e1983fbbab2dc9faee182cd3e015120f283935497354e9296057d74394cdd220b322ddde45d36530cc9648d2",
            "file": "projects/tgui/src/lib/directives/tgui-theme.directive.ts",
            "type": "directive",
            "description": "<p>Directive that automatically loads the TGUI styles\nThis should be applied once on a root element (typically body or app-root)</p>\n",
            "rawdescription": "\n\nDirective that automatically loads the TGUI styles\nThis should be applied once on a root element (typically body or app-root)\n",
            "sourceCode": "import { Directive, ElementRef, OnInit, Renderer2, inject } from '@angular/core';\n\n/**\n * Directive that automatically loads the TGUI styles\n * This should be applied once on a root element (typically body or app-root)\n */\n@Directive({\n  selector: '[tguiTheme]',\n  standalone: true,\n})\nexport class TGUIThemeDirective implements OnInit {\n  // CSS file path - this will be loaded from assets in the actual build\n  private stylesPath = 'assets/tgui/styles/variables.css';\n  \n  private el = inject(ElementRef);\n  private renderer = inject(Renderer2);\n\n  ngOnInit(): void {\n    this.loadStyles();\n  }\n\n  private loadStyles(): void {\n    const head = document.head;\n    const link = document.createElement('link');\n    \n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.href = this.stylesPath;\n    \n    head.appendChild(link);\n  }\n} ",
            "selector": "[tguiTheme]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stylesPath",
                    "defaultValue": "'assets/tgui/styles/variables.css'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ]
        }
    ],
    "components": [
        {
            "name": "AvatarAcronymComponent",
            "id": "component-AvatarAcronymComponent-0cbe633adc4bb83e70024d02e162bc2f0d4bf5b3bb3a269effb0893ae9ceea3137a531a22645b74ba1d8b8b9f1f0f5492844701a609f734f4d1dcf9efb67cc31",
            "file": "projects/tgui/src/lib/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-acronym",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  "
            ],
            "template": "<ng-container [ngSwitch]=\"getTypographyComponent()\">\n  <tgui-caption\n    *ngSwitchCase=\"'caption'\"\n    [level]=\"getCaptionLevel()\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-caption>\n\n  <tgui-headline\n    *ngSwitchCase=\"'headline'\"\n    weight=\"2\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-headline>\n\n  <tgui-title\n    *ngSwitchCase=\"'title'\"\n    level=\"3\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-title>\n\n  <tgui-large-title\n    *ngSwitchCase=\"'large-title'\"\n    weight=\"1\"\n    [caps]=\"true\"\n  >{{ formatInitials() }}</tgui-large-title>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "initials",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nТекст, из которого будут сформированы инициалы\n",
                    "description": "<p>Текст, из которого будут сформированы инициалы</p>\n",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазмер аватара, который определяет размер отображаемых инициалов\n",
                    "description": "<p>Размер аватара, который определяет размер отображаемых инициалов</p>\n",
                    "line": 68,
                    "type": "AvatarSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "formatInitials",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nФорматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\n",
                    "description": "<p>Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)</p>\n"
                },
                {
                    "name": "getCaptionLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "\"1\" | \"2\"",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОпределяет уровень Caption в зависимости от размера аватара\n",
                    "description": "<p>Определяет уровень Caption в зависимости от размера аватара</p>\n"
                },
                {
                    "name": "getTypographyComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "\"caption\" | \"headline\" | \"title\" | \"large-title\"",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОпределяет, какой компонент типографики использовать в зависимости от размера аватара\n",
                    "description": "<p>Определяет, какой компонент типографики использовать в зависимости от размера аватара</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "HeadlineComponent",
                    "type": "component"
                },
                {
                    "name": "TitleComponent",
                    "type": "component"
                },
                {
                    "name": "LargeTitleComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент AvatarAcronym отображает инициалы для аватара,\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.</p>\n",
            "rawdescription": "\n\nКомпонент AvatarAcronym отображает инициалы для аватара,\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { HeadlineComponent } from '@typography/headline/headline.component';\nimport { TitleComponent } from '@typography/title/title.component';\nimport { LargeTitleComponent } from '@typography/large-title/large-title.component';\nimport { AvatarSize } from '@components/blocks/avatar/avatar.component';\n\n/**\n * Компонент AvatarAcronym отображает инициалы для аватара,\n * автоматически подбирая соответствующий размер шрифта и компонент типографики.\n */\n@Component({\n  selector: 'tgui-avatar-acronym',\n  standalone: true,\n  imports: [\n    CommonModule, \n    CaptionComponent, \n    HeadlineComponent, \n    TitleComponent, \n    LargeTitleComponent\n  ],\n  template: `\n    <ng-container [ngSwitch]=\"getTypographyComponent()\">\n      <tgui-caption \n        *ngSwitchCase=\"'caption'\" \n        [level]=\"getCaptionLevel()\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-caption>\n      \n      <tgui-headline \n        *ngSwitchCase=\"'headline'\" \n        weight=\"2\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-headline>\n      \n      <tgui-title \n        *ngSwitchCase=\"'title'\" \n        level=\"3\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-title>\n      \n      <tgui-large-title \n        *ngSwitchCase=\"'large-title'\" \n        weight=\"1\" \n        [caps]=\"true\"\n      >{{ formatInitials() }}</tgui-large-title>\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarAcronymComponent {\n  /**\n   * Размер аватара, который определяет размер отображаемых инициалов\n   */\n  @Input() size: AvatarSize = 'm';\n  \n  /**\n   * Текст, из которого будут сформированы инициалы\n   */\n  @Input() initials: string = '';\n  \n  /**\n   * Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\n   */\n  formatInitials(): string {\n    if (!this.initials) return '';\n    \n    return this.initials\n      .split(' ')\n      .map(part => part.charAt(0))\n      .slice(0, 2)\n      .join('')\n      .toUpperCase();\n  }\n  \n  /**\n   * Определяет, какой компонент типографики использовать в зависимости от размера аватара\n   */\n  getTypographyComponent(): 'caption' | 'headline' | 'title' | 'large-title' {\n    if (this.size === 'xxs' || this.size === 'xs' || this.size === 's') {\n      return 'caption';\n    }\n    \n    if (this.size === 'm') {\n      return 'headline';\n    }\n    \n    if (this.size === 'l') {\n      return 'title';\n    }\n    \n    return 'large-title';\n  }\n  \n  /**\n   * Определяет уровень Caption в зависимости от размера аватара\n   */\n  getCaptionLevel(): '1' | '2' {\n    return this.size === 'xs' ? '2' : '1';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      color: var(--tgui--link_color);\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AvatarBadgeComponent",
            "id": "component-AvatarBadgeComponent-52bc247c69ee1135189b7a72b8616bb96a5b3cd14b435f73e9301a50c64e4a1a51b57de34e2421d0ca0db51c1bd3a65ba6ca4299a0b61b8d5de68810af92e8aa",
            "file": "projects/tgui/src/lib/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-badge",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  "
            ],
            "template": "<div class=\"avatar-badge\">\n  <span class=\"badge-content\">{{ count > 99 ? '99+' : count }}</span>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNumeric value to display in the badge\n",
                    "description": "<p>Numeric value to display in the badge</p>\n",
                    "line": 72,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The AvatarBadge component displays a numeric badge on the avatar,\nallowing to show the number of unread messages, notifications, etc.</p>\n",
            "rawdescription": "\n\nThe AvatarBadge component displays a numeric badge on the avatar,\nallowing to show the number of unread messages, notifications, etc.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The AvatarBadge component displays a numeric badge on the avatar,\n * allowing to show the number of unread messages, notifications, etc.\n */\n@Component({\n  selector: 'tgui-avatar-badge',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"avatar-badge\">\n      <span class=\"badge-content\">{{ count > 99 ? '99+' : count }}</span>\n    </div>\n  `,\n  styles: [`\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarBadgeComponent {\n  /**\n   * Numeric value to display in the badge\n   */\n  @Input() count: number = 0;\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      pointer-events: none;\n    }\n    \n    .avatar-badge {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 18px;\n      height: 18px;\n      padding: 0 5px;\n      border-radius: 10px;\n      background-color: var(--tgui--destructive_text_color);\n      color: white;\n      font-size: 11px;\n      font-weight: var(--tgui--font_weight--accent1);\n      box-sizing: border-box;\n      transform: translate(50%, -50%);\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n      pointer-events: auto;\n    }\n    \n    .badge-content {\n      display: flex;\n      line-height: 1;\n    }\n    \n    /* Специальные стили для больших и маленьких бейджей */\n    :host-context(.size-xs) .avatar-badge,\n    :host-context(.size-s) .avatar-badge {\n      min-width: 14px;\n      height: 14px;\n      font-size: 10px;\n      padding: 0 4px;\n    }\n    \n    :host-context(.size-l) .avatar-badge,\n    :host-context(.size-xl) .avatar-badge {\n      min-width: 20px;\n      height: 20px;\n      font-size: 12px;\n      padding: 0 6px;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-074e1d05db08da0bc012bb0e8acc119d88c7e0d333e343baaabecd07e91410f3e457121bd85b945c41341edfdf6cc7a3a85b7bbc55bee79771b72f8fb97a2533",
            "file": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  "
            ],
            "template": "<div\n  class=\"avatar-container\"\n  [ngStyle]=\"{ 'background-color': getBackgroundColor() }\"\n>\n  <img\n    *ngIf=\"src\"\n    [src]=\"src\"\n    [alt]=\"alt || 'Avatar'\"\n    class=\"avatar-image\"\n  />\n\n  <tgui-avatar-acronym\n    *ngIf=\"!src && initials\"\n    [size]=\"size\"\n    [initials]=\"initials\"\n  ></tgui-avatar-acronym>\n</div>\n\n<!-- Контент выведен за пределы avatar-container,\n     чтобы не попадать под overflow: hidden -->\n<div class=\"avatar-content\">\n  <div\n    *ngIf=\"online\"\n    class=\"avatar-online-badge\"\n  ></div>\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAlternative text for the image\n",
                    "description": "<p>Alternative text for the image</p>\n",
                    "line": 214,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBackground color for avatar with initials\n",
                    "description": "<p>Background color for avatar with initials</p>\n",
                    "line": 219,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText for initials if image is absent\n",
                    "description": "<p>Text for initials if image is absent</p>\n",
                    "line": 199,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "online",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOnline status indicator\n",
                    "description": "<p>Online status indicator</p>\n",
                    "line": 224,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAvatar shape ('circle', 'rounded', 'square')\n",
                    "description": "<p>Avatar shape (&#39;circle&#39;, &#39;rounded&#39;, &#39;square&#39;)</p>\n",
                    "line": 209,
                    "type": "AvatarShape",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAvatar size ('xxs', 'xs', 's', 'm', 'l', 'xl')\n",
                    "description": "<p>Avatar size (&#39;xxs&#39;, &#39;xs&#39;, &#39;s&#39;, &#39;m&#39;, &#39;l&#39;, &#39;xl&#39;)</p>\n",
                    "line": 204,
                    "type": "AvatarSize",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAvatar image URL\n",
                    "description": "<p>Avatar image URL</p>\n",
                    "line": 194,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBackgroundColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns background color for avatar with initials\n",
                    "description": "<p>Returns background color for avatar with initials</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.shape-circle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 234,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.shape-rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 235,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.shape-square",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 236,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 231,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 229,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 232,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 228,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-xxs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 227,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "AvatarAcronymComponent",
                    "type": "component"
                }
            ],
            "description": "<p>The Avatar component displays an avatar with optional initials or image.\nThe component supports various sizes and shapes, as well as an online status indicator.</p>\n",
            "rawdescription": "\n\nThe Avatar component displays an avatar with optional initials or image.\nThe component supports various sizes and shapes, as well as an online status indicator.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding, \n  OnInit\n} from '@angular/core';\nimport { CommonModule, NgStyle } from '@angular/common';\nimport { AvatarAcronymComponent } from './components/avatar-acronym/avatar-acronym.component';\nimport { AvatarBadgeComponent } from './components/avatar-badge/avatar-badge.component';\n\nexport type AvatarSize = 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl';\nexport type AvatarShape = 'circle' | 'rounded' | 'square';\n\n/**\n * The Avatar component displays an avatar with optional initials or image.\n * The component supports various sizes and shapes, as well as an online status indicator.\n */\n@Component({\n  selector: 'tgui-avatar',\n  standalone: true,\n  imports: [CommonModule, NgStyle, AvatarAcronymComponent],\n  template: `\n    <div \n      class=\"avatar-container\"\n      [ngStyle]=\"{ 'background-color': getBackgroundColor() }\"\n    >\n      <img \n        *ngIf=\"src\" \n        [src]=\"src\" \n        [alt]=\"alt || 'Avatar'\" \n        class=\"avatar-image\"\n      />\n      \n      <tgui-avatar-acronym \n        *ngIf=\"!src && initials\" \n        [size]=\"size\" \n        [initials]=\"initials\"\n      ></tgui-avatar-acronym>\n    </div>\n    \n    <!-- Контент выведен за пределы avatar-container,\n         чтобы не попадать под overflow: hidden -->\n    <div class=\"avatar-content\">\n      <div \n        *ngIf=\"online\" \n        class=\"avatar-online-badge\"\n      ></div>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarComponent {\n  /**\n   * Avatar image URL\n   */\n  @Input() src?: string;\n  \n  /**\n   * Text for initials if image is absent\n   */\n  @Input() initials?: string;\n  \n  /**\n   * Avatar size ('xxs', 'xs', 's', 'm', 'l', 'xl')\n   */\n  @Input() size: AvatarSize = 'm';\n  \n  /**\n   * Avatar shape ('circle', 'rounded', 'square')\n   */\n  @Input() shape: AvatarShape = 'circle';\n  \n  /**\n   * Alternative text for the image\n   */\n  @Input() alt?: string;\n  \n  /**\n   * Background color for avatar with initials\n   */\n  @Input() color?: string;\n  \n  /**\n   * Online status indicator\n   */\n  @Input() online = false;\n  \n  // Host bindings для CSS классов\n  @HostBinding('class.size-xxs') get isSizeXXS() { return this.size === 'xxs'; }\n  @HostBinding('class.size-xs') get isSizeXS() { return this.size === 'xs'; }\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  @HostBinding('class.size-xl') get isSizeXL() { return this.size === 'xl'; }\n  \n  @HostBinding('class.shape-circle') get isShapeCircle() { return this.shape === 'circle'; }\n  @HostBinding('class.shape-rounded') get isShapeRounded() { return this.shape === 'rounded'; }\n  @HostBinding('class.shape-square') get isShapeSquare() { return this.shape === 'square'; }\n  \n  /**\n   * Returns background color for avatar with initials\n   */\n  getBackgroundColor(): string {\n    if (this.src) {\n      return 'transparent';\n    }\n    \n    if (this.color) {\n      return this.color;\n    }\n    \n    // Если нет изображения и не задан цвет явно\n    return 'var(--tgui--secondary_fill)';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      position: relative;\n    }\n    \n    .avatar-container {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      background-color: var(--tgui--secondary_fill);\n      position: relative;\n      border-radius: inherit;\n      z-index: 1;\n    }\n    \n    .avatar-content {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 2;\n    }\n    \n    .avatar-content ::ng-deep > * {\n      pointer-events: auto;\n    }\n    \n    .avatar-image {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    \n    .avatar-online-badge {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 25%;\n      height: 25%;\n      min-width: 8px;\n      min-height: 8px;\n      background-color: var(--tgui--green);\n      border: 2px solid var(--tgui--bg_color);\n      border-radius: 50%;\n      box-sizing: border-box;\n      transform: translate(0, 0);\n      z-index: 3;\n    }\n    \n    /* Size Variants */\n    :host.size-xxs {\n      width: 20px;\n      height: 20px;\n    }\n    \n    :host.size-xs {\n      width: 24px;\n      height: 24px;\n    }\n    \n    :host.size-s {\n      width: 28px;\n      height: 28px;\n    }\n    \n    :host.size-m {\n      width: 40px;\n      height: 40px;\n    }\n    \n    :host.size-l {\n      width: 48px;\n      height: 48px;\n    }\n    \n    :host.size-xl {\n      width: 96px;\n      height: 96px;\n    }\n    \n    /* Shape Variants */\n    :host.shape-circle {\n      border-radius: 50%;\n    }\n    \n    :host.shape-rounded {\n      border-radius: 8px;\n    }\n    \n    :host.shape-square {\n      border-radius: 0;\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\n      border-radius: 10px;\n    }\n    \n    /* Badge size adjustments */\n    :host.size-xxs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-xs .avatar-online-badge {\n      min-width: 6px;\n      min-height: 6px;\n      border-width: 1px;\n    }\n    \n    :host.size-s .avatar-online-badge {\n      min-width: 8px;\n      min-height: 8px;\n      border-width: 1.5px;\n    }\n    \n    :host.size-l .avatar-online-badge {\n      min-width: 10px;\n      min-height: 10px;\n      border-width: 2px;\n    }\n    \n    :host.size-xl .avatar-online-badge {\n      min-width: 16px;\n      min-height: 16px;\n      border-width: 3px;\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isSizeXXS": {
                    "name": "isSizeXXS",
                    "getSignature": {
                        "name": "isSizeXXS",
                        "type": "",
                        "returnType": "",
                        "line": 227
                    }
                },
                "isSizeXS": {
                    "name": "isSizeXS",
                    "getSignature": {
                        "name": "isSizeXS",
                        "type": "",
                        "returnType": "",
                        "line": 228
                    }
                },
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 229
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 230
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 231
                    }
                },
                "isSizeXL": {
                    "name": "isSizeXL",
                    "getSignature": {
                        "name": "isSizeXL",
                        "type": "",
                        "returnType": "",
                        "line": 232
                    }
                },
                "isShapeCircle": {
                    "name": "isShapeCircle",
                    "getSignature": {
                        "name": "isShapeCircle",
                        "type": "",
                        "returnType": "",
                        "line": 234
                    }
                },
                "isShapeRounded": {
                    "name": "isShapeRounded",
                    "getSignature": {
                        "name": "isShapeRounded",
                        "type": "",
                        "returnType": "",
                        "line": 235
                    }
                },
                "isShapeSquare": {
                    "name": "isShapeSquare",
                    "getSignature": {
                        "name": "isShapeSquare",
                        "type": "",
                        "returnType": "",
                        "line": 236
                    }
                }
            }
        },
        {
            "name": "AvatarStackComponent",
            "id": "component-AvatarStackComponent-d11571f6efd1c8ff4418b5260805abd284843a770b5728b41c9b68ecab9e39628c30490ef592a63bbf720e9cc1e6aab89a6c44266c8d18ee269f43da1aa08d92",
            "file": "projects/tgui/src/lib/components/blocks/avatar-stack/avatar-stack.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-avatar-stack",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  "
            ],
            "template": "<div class=\"avatar-stack-container\" [style.--tgui-avatar-stack-offset.px]=\"_offset\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOffset between avatars in pixels (default -12px).\nNegative value determines the degree of overlap between avatars.\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\nThe larger the value (e.g., -6px), the less the overlap between avatars.\n",
                    "description": "<p>Offset between avatars in pixels (default -12px).\nNegative value determines the degree of overlap between avatars.\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\nThe larger the value (e.g., -6px), the less the overlap between avatars.</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_offset",
                    "defaultValue": "-12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "avatars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<AvatarComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of avatars inside the stack</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nList of avatars inside the stack\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "AvatarComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The AvatarStack component displays a container for avatars in a stack format.\nIt allows to visually group avatars, often used to represent\nmultiple users or participants.</p>\n<p>Avatars are displayed with overlap, which is adjusted through the offset property.</p>\n",
            "rawdescription": "\n\nThe AvatarStack component displays a container for avatars in a stack format.\nIt allows to visually group avatars, often used to represent\nmultiple users or participants.\n\nAvatars are displayed with overlap, which is adjusted through the offset property.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Input,\n  HostBinding,\n  OnInit,\n  inject,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AvatarComponent } from '@components/blocks/avatar/avatar.component';\n\n/**\n * The AvatarStack component displays a container for avatars in a stack format.\n * It allows to visually group avatars, often used to represent\n * multiple users or participants.\n * \n * Avatars are displayed with overlap, which is adjusted through the offset property.\n */\n@Component({\n  selector: 'tgui-avatar-stack',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"avatar-stack-container\" [style.--tgui-avatar-stack-offset.px]=\"_offset\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  `],\n  host: {\n    'attr.data-refresh-platform': 'true'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarStackComponent {\n  /**\n   * Offset between avatars in pixels (default -12px).\n   * Negative value determines the degree of overlap between avatars.\n   * The smaller the value (e.g., -18px), the greater the overlap between avatars.\n   * The larger the value (e.g., -6px), the less the overlap between avatars.\n   */\n  @Input() set offset(value: number) {\n    this._offset = value;\n  }\n  get offset(): number {\n    return this._offset;\n  }\n  _offset = -12;\n  \n  /**\n   * List of avatars inside the stack\n   */\n  @ContentChildren(AvatarComponent) avatars!: QueryList<AvatarComponent>;\n  \n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n    }\n    \n    .avatar-stack-container {\n      display: flex;\n      --tgui-avatar-stack-offset: -12px;\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\n      margin-left: var(--tgui-avatar-stack-offset);\n    }\n    \n    .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\n    }\n    \n    /* Platform Specific */\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "offset": {
                    "name": "offset",
                    "setSignature": {
                        "name": "offset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "rawdescription": "\n\nOffset between avatars in pixels (default -12px).\nNegative value determines the degree of overlap between avatars.\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\nThe larger the value (e.g., -6px), the less the overlap between avatars.\n",
                        "description": "<p>Offset between avatars in pixels (default -12px).\nNegative value determines the degree of overlap between avatars.\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\nThe larger the value (e.g., -6px), the less the overlap between avatars.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "offset",
                        "type": "number",
                        "returnType": "number",
                        "line": 72
                    }
                }
            }
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-41a3aea38864e4583f29f59a0915ed167e29ca5cd95b731444cea172fb6d68cffd889f4233345810bc691e13c3767cdebc4bd4461f088b20f4603ce27aeaf003",
            "file": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-badge",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isNumber\">\n  <ng-template #contentTemplate>\n    <ng-content></ng-content>\n  </ng-template>\n\n  <tgui-subheadline tag=\"span\" level=\"2\" weight=\"2\" *ngIf=\"large\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n  </tgui-subheadline>\n\n  <tgui-caption weight=\"2\" level=\"1\" *ngIf=\"!large\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n  </tgui-caption>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "large",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nУвеличивает размер бейджа. Применяется только при type='number'.",
                    "description": "<p>Увеличивает размер бейджа. Применяется только при type=&#39;number&#39;.</p>\n",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nЦветовая схема бейджа, влияющая на его фон и цвет текста.",
                    "description": "<p>Цветовая схема бейджа, влияющая на его фон и цвет текста.</p>\n",
                    "line": 107,
                    "type": "BadgeMode",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'number'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nВизуальный стиль бейджа: 'number' отображает содержимое, 'dot' показывает простую точку.",
                    "description": "<p>Визуальный стиль бейджа: &#39;number&#39; отображает содержимое, &#39;dot&#39; показывает простую точку.</p>\n",
                    "line": 104,
                    "type": "BadgeType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-critical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-white",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.type-dot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.type-number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Компонент Badge отображает небольшой числовой или точечный индикатор,\nобычно используемый для уведомлений, статусов или счетчиков.\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\nи может быть обычного или увеличенного размера.</p>\n",
            "rawdescription": "\n\nКомпонент Badge отображает небольшой числовой или точечный индикатор,\nобычно используемый для уведомлений, статусов или счетчиков.\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\nи может быть обычного или увеличенного размера.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { SubheadlineComponent } from '@typography/subheadline/subheadline.component';\n\nexport type BadgeType = 'number' | 'dot';\nexport type BadgeMode = 'primary' | 'critical' | 'secondary' | 'gray' | 'white';\n\n/**\n * Компонент Badge отображает небольшой числовой или точечный индикатор,\n * обычно используемый для уведомлений, статусов или счетчиков.\n * Поддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\n * и может быть обычного или увеличенного размера.\n */\n@Component({\n  selector: 'tgui-badge',\n  standalone: true,\n  imports: [CommonModule, CaptionComponent, SubheadlineComponent],\n  template: `\n    <ng-container *ngIf=\"isNumber\">\n      <ng-template #contentTemplate>\n        <ng-content></ng-content>\n      </ng-template>\n\n      <tgui-subheadline tag=\"span\" level=\"2\" weight=\"2\" *ngIf=\"large\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n      </tgui-subheadline>\n\n      <tgui-caption weight=\"2\" level=\"1\" *ngIf=\"!large\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n      </tgui-caption>\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BadgeComponent {\n  /** Визуальный стиль бейджа: 'number' отображает содержимое, 'dot' показывает простую точку. */\n  @Input() type: BadgeType = 'number';\n\n  /** Цветовая схема бейджа, влияющая на его фон и цвет текста. */\n  @Input() mode: BadgeMode = 'primary';\n\n  /** Увеличивает размер бейджа. Применяется только при type='number'. */\n  @Input() large = false;\n\n  // Host bindings для типа\n  @HostBinding('class.type-number') get isNumber() { return this.type === 'number'; }\n  @HostBinding('class.type-dot') get isDot() { return this.type === 'dot'; }\n\n  // Host bindings для режимов\n  @HostBinding('class.mode-primary') get isPrimary() { return this.mode === 'primary'; }\n  @HostBinding('class.mode-critical') get isCritical() { return this.mode === 'critical'; }\n  @HostBinding('class.mode-secondary') get isSecondary() { return this.mode === 'secondary'; }\n  @HostBinding('class.mode-gray') get isGray() { return this.mode === 'gray'; }\n  @HostBinding('class.mode-white') get isWhite() { return this.mode === 'white'; }\n\n  // Host binding для размера\n  @HostBinding('class.large') get isLarge() { return this.large && this.type === 'number'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      border-radius: 20px;\n      overflow: hidden;\n    }\n\n    /* Number type styles */\n    :host.type-number {\n      height: 20px;\n      min-width: 20px;\n      margin: 0 6px;\n      padding: 0 5px;\n    }\n\n    /* Large number badge */\n    :host.type-number.large {\n      height: 24px;\n      padding: 0 6px;\n      /* min-width не увеличиваем, оставляем 20px как в React */\n    }\n\n    /* Dot type styles */\n    :host.type-dot {\n      display: inline-block;\n      width: 6px;\n      height: 6px;\n      margin: 7px;\n      border-radius: 50%;\n    }\n\n    /* Цветовые режимы */\n    :host.mode-primary {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--button_color);\n    }\n\n    :host.mode-critical {\n      color: var(--tgui--button_text_color);\n      background: var(--tgui--destructive_text_color);\n    }\n\n    :host.mode-secondary {\n      color: var(--tgui--link_color);\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n\n    :host.mode-white {\n      color: var(--tgui--link_color);\n      background: var(--tgui--white);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isNumber": {
                    "name": "isNumber",
                    "getSignature": {
                        "name": "isNumber",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                },
                "isDot": {
                    "name": "isDot",
                    "getSignature": {
                        "name": "isDot",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "isPrimary": {
                    "name": "isPrimary",
                    "getSignature": {
                        "name": "isPrimary",
                        "type": "",
                        "returnType": "",
                        "line": 117
                    }
                },
                "isCritical": {
                    "name": "isCritical",
                    "getSignature": {
                        "name": "isCritical",
                        "type": "",
                        "returnType": "",
                        "line": 118
                    }
                },
                "isSecondary": {
                    "name": "isSecondary",
                    "getSignature": {
                        "name": "isSecondary",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "isGray": {
                    "name": "isGray",
                    "getSignature": {
                        "name": "isGray",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                },
                "isWhite": {
                    "name": "isWhite",
                    "getSignature": {
                        "name": "isWhite",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "isLarge": {
                    "name": "isLarge",
                    "getSignature": {
                        "name": "isLarge",
                        "type": "",
                        "returnType": "",
                        "line": 124
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a4d04330993ae0facce0faaaf41088c622c0a0fba005f127dc3a524bc3b88985cdd3c5a592a364220530a7d286216c75be08772dc33fd7c6d8817bcabb5e89fc",
            "file": "projects/tgui/src/lib/components/blocks/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-button",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Optimization for mobile devices */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Wrapper for all button content */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Inherit gap from host element */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* To be above ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Raised above content */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      :host-context(.tgui-platform-ios) :host.size-m {\n        border-radius: 12px;\n      }\n  \n      :host-context(.tgui-platform-ios) :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    "
            ],
            "template": "<tgui-tappable\n  [interactiveAnimation]=\"interactiveAnimation\"\n  [readonly]=\"loading\"\n  [disabled]=\"disabled\"\n  class=\"button-tappable\"\n>\n  <!-- Spinner is absolutely positioned over the content -->\n  <div *ngIf=\"loading\" class=\"spinner\">\n    <tgui-spinner size=\"s\"></tgui-spinner>\n  </div>\n\n  <!-- Button content in wrapper for correct positioning -->\n  <div class=\"button-content-wrapper\">\n    <ng-content select=\"[tguiButtonBefore]\"></ng-content>\n    <div *ngIf=\"beforeTemplate\" class=\"before\">\n      <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n    </div>\n\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n\n    <ng-content select=\"[tguiButtonAfter]\"></ng-content>\n    <div *ngIf=\"afterTemplate\" class=\"after\">\n      <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n    </div>\n  </div>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button will be disabled\n",
                    "description": "<p>If true, the button will be disabled</p>\n",
                    "line": 305,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of interactive animation ('opacity' | 'background')\n",
                    "description": "<p>Type of interactive animation (&#39;opacity&#39; | &#39;background&#39;)</p>\n",
                    "line": 315,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, shows a loading indicator instead of button content\n",
                    "description": "<p>If true, shows a loading indicator instead of button content</p>\n",
                    "line": 300,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVisual style of the button\n",
                    "description": "<p>Visual style of the button</p>\n",
                    "line": 290,
                    "type": "\"filled\" | \"bezeled\" | \"plain\" | \"gray\" | \"outline\" | \"white\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton size ('s', 'm', 'l')\n",
                    "description": "<p>Button size (&#39;s&#39;, &#39;m&#39;, &#39;l&#39;)</p>\n",
                    "line": 285,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                },
                {
                    "name": "stretched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, the button will stretch to the width of its container\n",
                    "description": "<p>If true, the button will stretch to the width of its container</p>\n",
                    "line": 295,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton type (for HTML type attribute)\n",
                    "description": "<p>Button type (for HTML type attribute)</p>\n",
                    "line": 310,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "afterTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Template for content after the main button text</p>\n",
                    "line": 325,
                    "rawdescription": "\n\nTemplate for content after the main button text\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'afterContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "beforeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Template for content before the main button text</p>\n",
                    "line": 320,
                    "rawdescription": "\n\nTemplate for content before the main button text\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'beforeContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 346,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 345,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'selectstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformToButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransforms the host element into a real HTML button for better accessibility and semantics\n",
                    "description": "<p>Transforms the host element into a real HTML button for better accessibility and semantics</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 343,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "attr.type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 342,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 340,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 339,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-bezeled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 332,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-filled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 331,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 334,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-outline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 335,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 333,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-white",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 336,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 329,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 328,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 327,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.stretched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 338,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "selectstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 349
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                }
            ],
            "description": "<p>The Button component provides a customizable button with various styles and states.\nSupports different sizes, display modes, loading state, etc.</p>\n",
            "rawdescription": "\n\nThe Button component provides a customizable button with various styles and states.\nSupports different sizes, display modes, loading state, etc.\n",
            "type": "component",
            "sourceCode": "import { \n    Component, \n    ViewEncapsulation, \n    ChangeDetectionStrategy, \n    Input, \n    HostBinding, \n    OnInit,\n    ElementRef, \n    ContentChild, \n    TemplateRef,\n    HostListener,\n    inject\n  } from '@angular/core';\n  import { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from '../../feedback';\nimport { TappableComponent } from '../../utils';\nimport { PlatformService } from '@services/platform.service';\n  // import { PlatformService } from '@services/platform.service';\n  // import { SpinnerComponent } from '@feedback/spinner/spinner.component';\n  // import { TappableComponent } from '@utils/tappable/tappable.component';\n  \n  /**\n   * The Button component provides a customizable button with various styles and states.\n   * Supports different sizes, display modes, loading state, etc.\n   */\n  @Component({\n    selector: 'tgui-button',\n    standalone: true,\n    imports: [CommonModule, SpinnerComponent, TappableComponent],\n    template: `\n      <tgui-tappable \n        [interactiveAnimation]=\"interactiveAnimation\" \n        [readonly]=\"loading\"\n        [disabled]=\"disabled\"\n        class=\"button-tappable\"\n      >\n        <!-- Spinner is absolutely positioned over the content -->\n        <div *ngIf=\"loading\" class=\"spinner\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n        </div>\n  \n        <!-- Button content in wrapper for correct positioning -->\n        <div class=\"button-content-wrapper\">\n          <ng-content select=\"[tguiButtonBefore]\"></ng-content>\n          <div *ngIf=\"beforeTemplate\" class=\"before\">\n            <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n          </div>\n  \n          <div class=\"content\">\n            <ng-content></ng-content>\n          </div>\n  \n          <ng-content select=\"[tguiButtonAfter]\"></ng-content>\n          <div *ngIf=\"afterTemplate\" class=\"after\">\n            <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n          </div>\n        </div>\n      </tgui-tappable>\n    `,\n    host: {\n      'attr.data-refresh-platform': 'true'\n    },\n    styles: [`\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Optimization for mobile devices */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Wrapper for all button content */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Inherit gap from host element */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* To be above ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Raised above content */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      :host-context(.tgui-platform-ios) :host.size-m {\n        border-radius: 12px;\n      }\n  \n      :host-context(.tgui-platform-ios) :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })\n  export class ButtonComponent implements OnInit {\n    /**\n     * Button size ('s', 'm', 'l')\n     */\n    @Input() size: 's' | 'm' | 'l' = 'm';\n  \n    /**\n     * Visual style of the button\n     */\n    @Input() mode: 'filled' | 'bezeled' | 'plain' | 'gray' | 'outline' | 'white' = 'filled';\n  \n    /**\n     * If true, the button will stretch to the width of its container\n     */\n    @Input() stretched = false;\n  \n    /**\n     * If true, shows a loading indicator instead of button content\n     */\n    @Input() loading = false;\n  \n    /**\n     * If true, the button will be disabled\n     */\n    @Input() disabled = false;\n  \n    /**\n     * Button type (for HTML type attribute)\n     */\n    @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  \n    /**\n     * Type of interactive animation ('opacity' | 'background')\n     */\n    @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n    /**\n     * Template for content before the main button text\n     */\n    @ContentChild('beforeContent') beforeTemplate?: TemplateRef<any>;\n  \n    /**\n     * Template for content after the main button text\n     */\n    @ContentChild('afterContent') afterTemplate?: TemplateRef<any>;\n  \n    @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n    @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n    @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  \n    @HostBinding('class.mode-filled') get isModeFilled() { return this.mode === 'filled'; }\n    @HostBinding('class.mode-bezeled') get isModeBezeled() { return this.mode === 'bezeled'; }\n    @HostBinding('class.mode-plain') get isModePlain() { return this.mode === 'plain'; }\n    @HostBinding('class.mode-gray') get isModeGray() { return this.mode === 'gray'; }\n    @HostBinding('class.mode-outline') get isModeOutline() { return this.mode === 'outline'; }\n    @HostBinding('class.mode-white') get isModeWhite() { return this.mode === 'white'; }\n  \n    @HostBinding('class.stretched') get isStretched() { return this.stretched; }\n    @HostBinding('class.loading') get isLoading() { return this.loading; }\n    @HostBinding('class.disabled') get isDisabled() { return this.disabled; }\n  \n    @HostBinding('attr.type') get buttonType() { return this.type; }\n    @HostBinding('attr.disabled') get buttonDisabled() { return this.disabled ? true : null; }\n    \n    private platformService = inject(PlatformService);\n    private elementRef = inject(ElementRef);\n  \n    @HostListener('selectstart', ['$event'])\n    onSelectStart(event: Event): boolean {\n      // Prevent text selection\n      event.preventDefault();\n      return false;\n    }\n  \n    ngOnInit(): void {      \n      // Transform component into a real button for better accessibility\n      this.transformToButton();\n    }\n    \n    /**\n     * Transforms the host element into a real HTML button for better accessibility and semantics\n     */\n    private transformToButton(): void {\n      const element = this.elementRef.nativeElement;\n      \n      // Add attributes to improve accessibility\n      if (!element.hasAttribute('role')) {\n        element.setAttribute('role', 'button');\n      }\n      \n      if (!element.hasAttribute('tabindex') && !this.disabled) {\n        element.setAttribute('tabindex', '0');\n      }\n      \n      // Add CSS to prevent text selection (for older browsers)\n      element.style.webkitUserSelect = 'none';\n      element.style.userSelect = 'none';\n      \n      // Add keyboard event handlers for accessibility\n      element.addEventListener('keydown', (event: KeyboardEvent) => {\n        if ((event.key === 'Enter' || event.key === ' ') && !this.disabled) {\n          event.preventDefault();\n          element.click();\n        }\n      });\n      \n      // Additional listener to prevent text selection\n      element.addEventListener('selectstart', (event: Event) => {\n        event.preventDefault();\n        return false;\n      });\n    }\n  } ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        border-radius: 8px;\n        text-decoration: none;\n        box-sizing: border-box;\n        max-inline-size: 100%;\n        min-inline-size: 80px;\n        position: relative;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        -webkit-tap-highlight-color: transparent;\n        touch-action: manipulation; /* Optimization for mobile devices */\n      }\n  \n      :host.stretched {\n        inline-size: 100%;\n        flex-grow: 1;\n      }\n  \n      :host::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0;\n        transition: opacity .15s ease-out;\n        background: var(--tgui--bg_color);\n        border-radius: inherit;\n        pointer-events: none;\n\n      }\n  \n      .button-tappable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n      }\n  \n      /* Wrapper for all button content */\n      .button-content-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: inherit; /* Inherit gap from host element */\n        position: relative;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        padding: var(--tgui--button--padding, 0);\n        box-sizing: border-box;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .before,\n      .after {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        z-index: 1;\n        user-select: none;\n        -webkit-user-select: none;\n      }\n  \n      .content {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        z-index: var(--tgui--z-index--simple);\n        position: relative; /* To be above ripple */\n        user-select: none;\n        -webkit-user-select: none;\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\n      }\n  \n      .spinner {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: auto;\n        background: inherit;\n        border-radius: inherit;\n        color: var(--tgui--button--spinner-color);\n        z-index: 2; /* Raised above content */\n      }\n  \n      /* Size Variants */\n      :host.size-s {\n        height: 36px;\n        min-width: 34px;\n        gap: 6px;\n        border-radius: 20px;\n        --tgui--button--padding: 8px 12px;\n      }\n  \n      :host.size-m {\n        height: 42px;\n        min-width: 42px;\n        gap: 8px;\n        border-radius: 8px;\n        --tgui--button--padding: 8px 14px;\n      }\n  \n      :host.size-l {\n        height: 50px;\n        gap: 10px;\n        --tgui--button--padding: 10px 20px;\n      }\n  \n      /* Mode Variants */\n      :host.mode-filled {\n        --tgui--button--hovered-opacity: .15;\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\n        color: var(--tgui--button_text_color);\n        background: var(--tgui--button_color);\n      }\n  \n      :host.mode-bezeled {\n        --tgui--button--hovered-opacity: .07;\n        --tgui--button--spinner-color: var(--tgui--link_color);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: var(--tgui--secondary_fill);\n      }\n  \n      :host.mode-plain {\n        --tgui--button--hovered-opacity: .03;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n        color: var(--tgui--link_color);\n        background: transparent;\n      }\n  \n      :host.mode-gray {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\n        color: var(--tgui--plain_foreground);\n        background: var(--tgui--plain_background);\n      }\n  \n      :host.mode-outline {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        color: var(--tgui--plain_foreground);\n        background: inherit;\n        box-shadow: 0 0 0 1px var(--tgui--outline);\n      }\n  \n      :host.mode-white {\n        --tgui--button--hovered-opacity: .5;\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\n        background: var(--tgui--white);\n        color: var(--tgui--black);\n      }\n  \n      /* Platform Specific */\n      :host-context(.tgui-platform-ios) :host.size-m {\n        border-radius: 12px;\n      }\n  \n      :host-context(.tgui-platform-ios) :host::after {\n        content: unset;\n      }\n  \n      /* Loading State */\n      :host.loading .before,\n      :host.loading .after,\n      :host.loading .content {\n        opacity: 0;\n      }\n  \n      /* Disabled State */\n      :host.disabled {\n        opacity: 0.6;\n        cursor: default;\n        pointer-events: none;\n      }\n  \n      /* Hover Effects */\n      @media (hover: hover) and (pointer: fine) {\n        :host:hover::after {\n          opacity: var(--tgui--button--hovered-opacity);\n        }\n      }\n  \n      /* Button Typography Sizing */\n      :host.size-l .content {\n        font-size: var(--tgui--text--font_size);\n        line-height: var(--tgui--text--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n  \n      :host.size-m .content,\n      :host.size-s .content {\n        font-size: var(--tgui--subheadline2--font_size);\n        line-height: var(--tgui--subheadline2--line_height);\n        font-weight: var(--tgui--font_weight--accent2);\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 327
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 328
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 329
                    }
                },
                "isModeFilled": {
                    "name": "isModeFilled",
                    "getSignature": {
                        "name": "isModeFilled",
                        "type": "",
                        "returnType": "",
                        "line": 331
                    }
                },
                "isModeBezeled": {
                    "name": "isModeBezeled",
                    "getSignature": {
                        "name": "isModeBezeled",
                        "type": "",
                        "returnType": "",
                        "line": 332
                    }
                },
                "isModePlain": {
                    "name": "isModePlain",
                    "getSignature": {
                        "name": "isModePlain",
                        "type": "",
                        "returnType": "",
                        "line": 333
                    }
                },
                "isModeGray": {
                    "name": "isModeGray",
                    "getSignature": {
                        "name": "isModeGray",
                        "type": "",
                        "returnType": "",
                        "line": 334
                    }
                },
                "isModeOutline": {
                    "name": "isModeOutline",
                    "getSignature": {
                        "name": "isModeOutline",
                        "type": "",
                        "returnType": "",
                        "line": 335
                    }
                },
                "isModeWhite": {
                    "name": "isModeWhite",
                    "getSignature": {
                        "name": "isModeWhite",
                        "type": "",
                        "returnType": "",
                        "line": 336
                    }
                },
                "isStretched": {
                    "name": "isStretched",
                    "getSignature": {
                        "name": "isStretched",
                        "type": "",
                        "returnType": "",
                        "line": 338
                    }
                },
                "isLoading": {
                    "name": "isLoading",
                    "getSignature": {
                        "name": "isLoading",
                        "type": "",
                        "returnType": "",
                        "line": 339
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 340
                    }
                },
                "buttonType": {
                    "name": "buttonType",
                    "getSignature": {
                        "name": "buttonType",
                        "type": "",
                        "returnType": "",
                        "line": 342
                    }
                },
                "buttonDisabled": {
                    "name": "buttonDisabled",
                    "getSignature": {
                        "name": "buttonDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 343
                    }
                }
            }
        },
        {
            "name": "CaptionComponent",
            "id": "component-CaptionComponent-175a7bfa4f80001098980e831851daaf9d46223ceaee3e08662a4349034147bbd66f8094dfb88178c4cef2f2989ba4911957cb3bb198490050370d3dbf52d797",
            "file": "projects/tgui/src/lib/components/typography/caption/caption.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-caption",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<span><ng-content></ng-content></span>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the caption, influencing its styling and typography size.\n",
                    "description": "<p>The size level of the caption, influencing its styling and typography size.</p>\n",
                    "line": 53,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'span'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Caption component is a text wrapper that applies specific typographic styles,\nbased on the provided <code>level</code> prop. It&#39;s built on top of the Typography component,\nensuring consistent text styling across the application. It primarily serves for text\nthat acts as a small, descriptive label or annotation.</p>\n",
            "rawdescription": "\n\nThe Caption component is a text wrapper that applies specific typographic styles,\nbased on the provided `level` prop. It's built on top of the Typography component,\nensuring consistent text styling across the application. It primarily serves for text\nthat acts as a small, descriptive label or annotation.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Caption component is a text wrapper that applies specific typographic styles,\n * based on the provided `level` prop. It's built on top of the Typography component,\n * ensuring consistent text styling across the application. It primarily serves for text\n * that acts as a small, descriptive label or annotation.\n */\n@Component({\n  selector: 'tgui-caption',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<span><ng-content></ng-content></span>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CaptionComponent extends TypographyComponent {\n  /**\n   * The size level of the caption, influencing its styling and typography size.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Host bindings for CSS classes\n  @Input() override tag = 'span';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--caption1--font_size);\n      line-height: var(--tgui--caption1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--caption2--font_size);\n      line-height: var(--tgui--caption2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                }
            }
        },
        {
            "name": "CardCellComponent",
            "id": "component-CardCellComponent-d4c639b4f48f626e00409dca50107fcf5dc73198eda6639ffa045483c9d5c5e2a0f30a738dc7a2cec0213ee60778ab4378028cbdecd923d4ccdcd42e7d73c77f",
            "file": "projects/tgui/src/lib/components/blocks/card/components/card-cell/card-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "tguiCardCell",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card-cell",
            "styleUrls": [
                "./card-cell.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-cell.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional header text for the cell\n",
                    "description": "<p>Optional header text for the cell</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isImage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the cell contains image content\n",
                    "description": "<p>Whether the cell contains image content</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional subtitle text for the cell\n",
                    "description": "<p>Optional subtitle text for the cell</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply appropriate class based on the cell type",
                    "description": "<p>Apply appropriate class based on the cell type</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>CardCell component that represents a content section within a Card.</p>\n",
            "rawdescription": "\n\nCardCell component that represents a content section within a Card.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * CardCell component that represents a content section within a Card.\n */\n@Component({\n  selector: 'tgui-card-cell',\n  templateUrl: './card-cell.component.html',\n  styleUrls: ['./card-cell.component.css'],\n  standalone: true,\n  imports: [CommonModule],\n  exportAs: 'tguiCardCell'\n})\nexport class CardCellComponent {\n  /**\n   * Whether the cell contains image content\n   */\n  @Input() isImage = false;\n\n  /**\n   * Optional header text for the cell\n   */\n  @Input() header?: string;\n\n  /**\n   * Optional subtitle text for the cell\n   */\n  @Input() subtitle?: string;\n\n  /** Apply appropriate class based on the cell type */\n  @HostBinding('class') get className(): string {\n    const baseClass = 'tgui-card-cell';\n    return this.isImage ? `${baseClass} ${baseClass}--image` : baseClass;\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tgui-card-cell {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.tgui-card-cell__content {\n  padding: 16px 20px 20px;\n  gap: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.tgui-card-cell--image .tgui-card-cell__content {\n  padding: 0;\n  height: 100%;\n}\n\n.tgui-card__wrapper .tgui-card-cell--image:first-child .tgui-card-cell__content {\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\n  overflow: hidden;\n}\n\n.tgui-card-cell__text {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 8px;\n}\n\n.tgui-card-cell__header {\n  margin: 0;\n  font-family: var(--tgui--font_family, 'SF Pro', sans-serif);\n  font-weight: var(--tgui--font_weight--accent2, 590);\n  font-size: 17px;\n  line-height: 22px;\n  letter-spacing: -0.4px;\n  color: var(--tgui--plain_foreground, #000000);\n}\n\n.tgui-card--ambient .tgui-card-cell__header {\n  color: #FFFFFF;\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\n}\n\n.tgui-card-cell__subtitle {\n  margin: 0;\n  font-family: var(--tgui--font_family, 'SF Pro', sans-serif);\n  font-weight: 400;\n  font-size: 15px;\n  line-height: 20px;\n  letter-spacing: -0.23px;\n  color: var(--tgui--secondary_hint_color, #707579);\n}\n\n.tgui-card--ambient .tgui-card-cell__subtitle {\n  color: rgba(255, 255, 255, 0.75);\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\n}\n\n.tgui-card-cell--image {\n  background: #F4F4F7;\n  height: 200px;\n  flex-grow: 1;\n  align-self: stretch;\n  padding: 0;\n}\n\n.tgui-card__wrapper .tgui-card-cell--image:first-child {\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\n  overflow: hidden;\n} ",
                    "styleUrl": "./card-cell.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "className": {
                    "name": "className",
                    "getSignature": {
                        "name": "className",
                        "type": "string",
                        "returnType": "string",
                        "line": 32,
                        "rawdescription": "\nApply appropriate class based on the cell type",
                        "description": "<p>Apply appropriate class based on the cell type</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"tgui-card-cell__content\">\n  <div *ngIf=\"header || subtitle\" class=\"tgui-card-cell__text\">\n    <h3 *ngIf=\"header\" class=\"tgui-card-cell__header\">{{ header }}</h3>\n    <p *ngIf=\"subtitle\" class=\"tgui-card-cell__subtitle\">{{ subtitle }}</p>\n  </div>\n  <ng-content></ng-content>\n</div> "
        },
        {
            "name": "CardChipComponent",
            "id": "component-CardChipComponent-b234c2354cbda36b4cd06139777a9eb1c8b9c8a2017b298ef51191e7780c4abc03d075f50511074b0aac19285b07175d47be952d1f259ef675f5dabe7cd7c396",
            "file": "projects/tgui/src/lib/components/blocks/card/components/card-chip/card-chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "tguiCardChip",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card-chip",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  "
            ],
            "template": "<div class=\"tgui-card-chip__container\">\n  <tgui-chip [mode]=\"mode\" [before]=\"before\" [after]=\"after\" [className]=\"chipClassName\">\n    <ng-content></ng-content>\n  </tgui-chip>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "after",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent to be placed after the main text",
                    "description": "<p>Content to be placed after the main text</p>\n",
                    "line": 38,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "before",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent to be placed before the main text",
                    "description": "<p>Content to be placed before the main text</p>\n",
                    "line": 35,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "chipClassName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom class name for the chip component",
                    "description": "<p>Custom class name for the chip component</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'elevated'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the visual style of the chip, inherits from the ChipComponent",
                    "description": "<p>Defines the visual style of the chip, inherits from the ChipComponent</p>\n",
                    "line": 32,
                    "type": "\"elevated\" | \"mono\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "defaultValue": "'tgui-card-chip'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Apply base class</p>\n",
                    "line": 44,
                    "rawdescription": "\nApply base class",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'tgui-card-chip'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply base class",
                    "description": "<p>Apply base class</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ChipComponent",
                    "type": "component"
                }
            ],
            "description": "<p>CardChip component that displays a small actionable or informational element on the Card\nLeverages the ChipComponent with fixed positioning for use within cards</p>\n",
            "rawdescription": "\n\nCardChip component that displays a small actionable or informational element on the Card\nLeverages the ChipComponent with fixed positioning for use within cards\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipComponent } from '@components/form/chip/chip.component';\n\n/**\n * CardChip component that displays a small actionable or informational element on the Card\n * Leverages the ChipComponent with fixed positioning for use within cards\n */\n@Component({\n  selector: 'tgui-card-chip',\n  template: `\n    <div class=\"tgui-card-chip__container\">\n      <tgui-chip [mode]=\"mode\" [before]=\"before\" [after]=\"after\" [className]=\"chipClassName\">\n        <ng-content></ng-content>\n      </tgui-chip>\n    </div>\n  `,\n  styles: [`\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  `],\n  standalone: true,\n  imports: [CommonModule, ChipComponent],\n  exportAs: 'tguiCardChip'\n})\nexport class CardChipComponent {\n  /** Defines the visual style of the chip, inherits from the ChipComponent */\n  @Input() mode: 'elevated' | 'mono' | 'outline' = 'elevated';\n  \n  /** Content to be placed before the main text */\n  @Input() before: any;\n  \n  /** Content to be placed after the main text */\n  @Input() after: any;\n  \n  /** Custom class name for the chip component */\n  @Input() chipClassName: string = '';\n  \n  /** Apply base class */\n  @HostBinding('class') className = 'tgui-card-chip';\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-card-chip__container {\n      position: absolute;\n      right: 16px;\n      top: 16px;\n      z-index: 1;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-9d7643191cc6f7b19a84f0746a2351818fcea1b01ea4d3f43bf012dd4c1d8c0a779af81aff1cf7a776871b44084960f1f06bdccc38c4696aca5c4af22e63e271",
            "file": "projects/tgui/src/lib/components/blocks/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "tguiCard",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the border radius of the card. Default is 24px.\n",
                    "description": "<p>Defines the border radius of the card. Default is 24px.</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nURL of the image to display at the top of the card\n",
                    "description": "<p>URL of the image to display at the top of the card</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageAlt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAlt text for the image\n",
                    "description": "<p>Alt text for the image</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageHeight",
                    "defaultValue": "'200px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeight of the image block\n",
                    "description": "<p>Height of the image block</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the visual style of the card, influencing background, shadow, and border.\n",
                    "description": "<p>Defines the visual style of the card, influencing background, shadow, and border.</p>\n",
                    "line": 27,
                    "type": "CardType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_borderRadius",
                    "defaultValue": "'24px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardCells",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CardCellComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Get all child cells</p>\n",
                    "line": 67,
                    "rawdescription": "\nGet all child cells",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CardCellComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "customStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Custom style for card wrapper</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nCustom style for card wrapper\n"
                },
                {
                    "name": "imageStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Styles for the image block</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nStyles for the image block\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCustomStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates custom style object when properties change\n",
                    "description": "<p>Updates custom style object when properties change</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateImageStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates styles for the image block\n",
                    "description": "<p>Updates styles for the image block</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApply appropriate class based on the type",
                    "description": "<p>Apply appropriate class based on the type</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Serves as a container for card-styled UI elements, providing context for its child components.\nIt supports different visual styles and can encapsulate various content types.</p>\n",
            "rawdescription": "\n\nServes as a container for card-styled UI elements, providing context for its child components.\nIt supports different visual styles and can encapsulate various content types.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding, ViewEncapsulation, ElementRef, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CardCellComponent } from './components/card-cell/card-cell.component';\nimport { CardChipComponent } from './components/card-chip/card-chip.component';\n\n/**\n * Card types that define the visual style of the card\n */\nexport type CardType = 'plain' | 'ambient';\n\n/**\n * Serves as a container for card-styled UI elements, providing context for its child components.\n * It supports different visual styles and can encapsulate various content types.\n */\n@Component({\n  selector: 'tgui-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n  standalone: true,\n  imports: [CommonModule],\n  exportAs: 'tguiCard'\n})\nexport class CardComponent implements AfterContentInit {\n  /**\n   * Defines the visual style of the card, influencing background, shadow, and border.\n   */\n  @Input() type: CardType = 'plain';\n\n  /**\n   * Defines the border radius of the card. Default is 24px.\n   */\n  @Input() set borderRadius(value: string) {\n    this._borderRadius = value;\n    this.updateCustomStyle();\n  }\n  \n  get borderRadius(): string {\n    return this._borderRadius;\n  }\n\n  /**\n   * URL of the image to display at the top of the card\n   */\n  @Input() image?: string;\n\n  /**\n   * Alt text for the image\n   */\n  @Input() imageAlt = '';\n\n  /**\n   * Height of the image block\n   */\n  @Input() imageHeight = '200px';\n\n  /** \n   * Custom style for card wrapper \n   */\n  customStyle: { [key: string]: string } = {};\n\n  /**\n   * Styles for the image block\n   */\n  imageStyle: { [key: string]: string } = {};\n\n  /** Get all child cells */\n  @ContentChildren(CardCellComponent) cardCells!: QueryList<CardCellComponent>;\n\n  private _borderRadius = '24px';\n\n  constructor(private elementRef: ElementRef) {\n    this.updateCustomStyle();\n  }\n\n  ngAfterContentInit() {\n    // Update styles for the image\n    this.updateImageStyle();\n  }\n\n  /** Apply appropriate class based on the type */\n  @HostBinding('class') get className(): string {\n    return `tgui-card tgui-card--${this.type}`;\n  }\n  \n  /**\n   * Updates custom style object when properties change\n   */\n  private updateCustomStyle(): void {\n    this.customStyle = {\n      'border-radius': this._borderRadius\n    };\n    \n    // Update CSS variable for use in child components\n    this.elementRef.nativeElement.style.setProperty('--tgui-card-border-radius', this._borderRadius);\n    \n    // Also update styles for the image if it's set\n    this.updateImageStyle();\n  }\n\n  /**\n   * Updates styles for the image block\n   */\n  private updateImageStyle(): void {\n    if (this.image) {\n      this.imageStyle = {\n        'height': this.imageHeight,\n        'background-image': `url(${this.image})`,\n        'background-size': 'cover',\n        'background-position': 'center',\n        'border-top-left-radius': this._borderRadius,\n        'border-top-right-radius': this._borderRadius,\n        'overflow': 'hidden'\n      };\n    }\n  }\n\n  /**\n   * Checks if the card has an image\n   */\n  get hasImage(): boolean {\n    return !!this.image;\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tgui-card {\n  display: block;\n  --tgui-card-border-radius: 24px;\n  border-radius: var(--tgui-card-border-radius);\n}\n\n.tgui-card__wrapper {\n  position: relative;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0;\n  isolation: isolate;\n  background: #FFFFFF;\n  /* Card Shadow */\n  box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.02), 0px 32px 64px rgba(0, 0, 0, 0.04);\n  border-radius: var(--tgui-card-border-radius);\n  width: 100%;\n  overflow: hidden;\n}\n\n.tgui-card__image {\n  width: 100%;\n  background-color: #F4F4F7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tgui-card--plain .tgui-card__wrapper {\n  background: #FFFFFF;\n}\n\n.tgui-card--ambient .tgui-card__wrapper {\n  background: linear-gradient(0deg, #212121, #212121), rgba(0, 0, 0, 0.8);\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n} ",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "borderRadius": {
                    "name": "borderRadius",
                    "setSignature": {
                        "name": "borderRadius",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "rawdescription": "\n\nDefines the border radius of the card. Default is 24px.\n",
                        "description": "<p>Defines the border radius of the card. Default is 24px.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "borderRadius",
                        "type": "string",
                        "returnType": "string",
                        "line": 37
                    }
                },
                "className": {
                    "name": "className",
                    "getSignature": {
                        "name": "className",
                        "type": "string",
                        "returnType": "string",
                        "line": 81,
                        "rawdescription": "\nApply appropriate class based on the type",
                        "description": "<p>Apply appropriate class based on the type</p>\n"
                    }
                },
                "hasImage": {
                    "name": "hasImage",
                    "getSignature": {
                        "name": "hasImage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 120,
                        "rawdescription": "\n\nChecks if the card has an image\n",
                        "description": "<p>Checks if the card has an image</p>\n"
                    }
                }
            },
            "templateData": "<article class=\"tgui-card__wrapper\" [ngStyle]=\"customStyle\">\n  <!-- Image, if provided -->\n  <div *ngIf=\"hasImage\" class=\"tgui-card__image\" [ngStyle]=\"imageStyle\">\n    <img *ngIf=\"false\" [src]=\"image\" [alt]=\"imageAlt\"> <!-- Hidden for accessibility -->\n  </div>\n  \n  <!-- Card content -->\n  <ng-content></ng-content>\n</article> "
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-26d6c9c5665f7c5886f668658d2dfda9da316fbb59b7af28cff8f599d3031b20120852cfd301b7021a23534aff4ff25173a2d0f5b4eb517cd04fd28ceb48f61c",
            "file": "projects/tgui/src/lib/components/form/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-chip",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  "
            ],
            "template": "<tgui-tappable\n  interactiveAnimation=\"background\"\n  [class]=\"'tgui-chip tgui-chip--' + mode\"\n  [ngClass]=\"className\">\n  <div *ngIf=\"before\" class=\"tgui-chip__before\">\n    <ng-container *ngTemplateOutlet=\"before\"></ng-container>\n  </div>\n  <tgui-subheadline\n    class=\"tgui-chip__text\"\n    tag=\"span\"\n    [level]=\"platformService.isIOS() ? '2' : '1'\"\n    weight=\"2\">\n    <ng-content></ng-content>\n  </tgui-subheadline>\n  <div *ngIf=\"after\" class=\"tgui-chip__after\">\n    <ng-container *ngTemplateOutlet=\"after\"></ng-container>\n  </div>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "after",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent or component to be placed after the main text, such as an icon indicating an action.",
                    "description": "<p>Content or component to be placed after the main text, such as an icon indicating an action.</p>\n",
                    "line": 95,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "before",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nContent or component to be placed before the main text, typically an icon or avatar.",
                    "description": "<p>Content or component to be placed before the main text, typically an icon or avatar.</p>\n",
                    "line": 92,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom class name",
                    "description": "<p>Custom class name</p>\n",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'elevated'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the visual style of the chip, affecting its background, border, and shadow.",
                    "description": "<p>Defines the visual style of the chip, affecting its background, border, and shadow.</p>\n",
                    "line": 89,
                    "type": "\"elevated\" | \"mono\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Renders a compact element representing an input, attribute, or action.\nChips can include icons, text, or both, and are used to trigger actions,\ninput information, or represent a complex piece of information in a compact form.</p>\n",
            "rawdescription": "\n\nRenders a compact element representing an input, attribute, or action.\nChips can include icons, text, or both, and are used to trigger actions,\ninput information, or represent a complex piece of information in a compact form.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlatformService } from '@services/platform.service';\nimport { TappableComponent } from '@components/utils/tappable';\nimport { SubheadlineComponent } from '@components/typography/subheadline/subheadline.component';\n\n/**\n * Renders a compact element representing an input, attribute, or action. \n * Chips can include icons, text, or both, and are used to trigger actions, \n * input information, or represent a complex piece of information in a compact form.\n */\n@Component({\n  selector: 'tgui-chip',\n  standalone: true,\n  imports: [CommonModule, TappableComponent, SubheadlineComponent],\n  template: `\n    <tgui-tappable \n      interactiveAnimation=\"background\"\n      [class]=\"'tgui-chip tgui-chip--' + mode\" \n      [ngClass]=\"className\">\n      <div *ngIf=\"before\" class=\"tgui-chip__before\">\n        <ng-container *ngTemplateOutlet=\"before\"></ng-container>\n      </div>\n      <tgui-subheadline \n        class=\"tgui-chip__text\"\n        tag=\"span\"\n        [level]=\"platformService.isIOS() ? '2' : '1'\"\n        weight=\"2\">\n        <ng-content></ng-content>\n      </tgui-subheadline>\n      <div *ngIf=\"after\" class=\"tgui-chip__after\">\n        <ng-container *ngTemplateOutlet=\"after\"></ng-container>\n      </div>\n    </tgui-tappable>\n  `,\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChipComponent {\n  /** Defines the visual style of the chip, affecting its background, border, and shadow. */\n  @Input() mode: 'elevated' | 'mono' | 'outline' = 'elevated';\n  \n  /** Content or component to be placed before the main text, typically an icon or avatar. */\n  @Input() before: any;\n  \n  /** Content or component to be placed after the main text, such as an icon indicating an action. */\n  @Input() after: any;\n  \n  /** Custom class name */\n  @Input() className: string = '';\n  \n  protected platformService = inject(PlatformService);\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n\n    .tgui-chip {\n      user-select: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      box-sizing: border-box;\n      padding: 8px 12px;\n      border-radius: 12px;\n    }\n\n    .tgui-chip--elevated {\n      background: var(--tgui--surface_primary);\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\n    }\n\n    .tgui-chip--mono {\n      background: var(--tgui--plain_background);\n    }\n\n    .tgui-chip--outline {\n      border-radius: 12px;\n      box-shadow: 0 0 0 1px var(--tgui--outline);\n    }\n\n    .tgui-chip__text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1 0;\n      color: var(--tgui--plain_foreground);\n    }\n\n    .tgui-chip__before {\n      margin-right: 2px;\n    }\n\n    .tgui-chip__after {\n      display: flex;\n      align-items: center;\n      margin-top: 1.5px;\n      color: var(--tgui--secondary_hint_color);\n    }\n  \n",
            "extends": []
        },
        {
            "name": "DemoSnackbarComponent",
            "id": "component-DemoSnackbarComponent-39b0b4adfc4cc91cf35767fd8dab8e3f874ad5dd8a6af03e69fddb0908881ef8839f4be6d8c25aeb653c442ff4a2dba647367d523c602331d301c4c4ca270764",
            "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "demo-snackbar",
            "styleUrls": [],
            "styles": [],
            "template": "<tgui-button (click)=\"showDeleteSnackbar()\">Показать уведомление</tgui-button>\n\n<tgui-snackbar\n  *ngIf=\"isDeleteSnackbarShown\"\n  [description]=\"description\"\n  [duration]=\"duration\"\n  [onClose]=\"closeDeleteSnackbar\">\n  {{ mainMessage }}\n  <ng-template #before>\n    <div style=\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\">\n      <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill=\"currentColor\" d=\"M18.59,14l6.7-6.7c0.39-0.39,0.39-1.02,0-1.42l-2.17-2.17c-0.39-0.39-1.02-0.39-1.42,0L14,10.41l-6.7-6.7  c-0.39-0.39-1.02-0.39-1.42,0L3.71,5.88c-0.39,0.39-0.39,1.02,0,1.42L10.41,14l-6.7,6.7c-0.39,0.39-0.39,1.02,0,1.42l2.17,2.17  c0.39,0.39,1.02,0.39,1.42,0l6.7-6.7l6.7,6.7c0.39,0.39,1.02,0.39,1.42,0l2.17-2.17c0.39-0.39,0.39-1.02,0-1.42L18.59,14z\"/>\n      </svg>\n    </div>\n  </ng-template>\n  <ng-template #after>\n    <tgui-snackbar-button (click)=\"showUndoSnackbar()\">\n      Отменить\n    </tgui-snackbar-button>\n  </ng-template>\n</tgui-snackbar>\n\n<tgui-snackbar\n  *ngIf=\"isUndoSnackbarShown\"\n  [description]=\"'Сообщение возвращено в список'\"\n  [duration]=\"duration\"\n  [onClose]=\"closeUndoSnackbar\">\n  Сообщение восстановлено\n  <ng-template #before>\n    <div style=\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\">\n      <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill=\"currentColor\" d=\"M14,2C7.37,2,2,7.37,2,14s5.37,12,12,12s12-5.37,12-12S20.63,2,14,2z M10.5,16.87l-4.13-4.13l1.4-1.4l2.73,2.73 l7.23-7.23l1.4,1.4L10.5,16.87z\"/>\n      </svg>\n    </div>\n  </ng-template>\n  <ng-template #link>\n    <a href=\"https://telegram.org\" target=\"_blank\" style=\"color: inherit; text-decoration: underline;\">Открыть</a>\n  </ng-template>\n</tgui-snackbar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeDeleteSnackbar",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "closeUndoSnackbar",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "description",
                    "defaultValue": "'Восстановите сообщение в течение 4 секунд'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "duration",
                    "defaultValue": "40000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "isDeleteSnackbarShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isUndoSnackbarShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "mainMessage",
                    "defaultValue": "'Сообщение удалено'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "showDeleteSnackbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showUndoSnackbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SnackbarComponent",
                    "type": "component"
                },
                {
                    "name": "SnackbarButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RootComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SnackbarComponent } from '../snackbar.component';\nimport { SnackbarButtonComponent } from '../components/snackbar-button/snackbar-button.component';\nimport { RootPortalComponent } from '../../../utils/portal/root-portal.component';\nimport { TappableComponent } from '../../../utils/tappable/tappable.component';\nimport { RootComponent } from '../../../utils/tgui-root/tgui-root.component';\nimport { ButtonComponent } from '../../../blocks/button/button.component';\nimport { PlatformService } from '../../../../services';\n\n// Компонент для интерактивной демонстрации\n@Component({\n  selector: 'demo-snackbar',\n  standalone: true,\n  imports: [CommonModule, SnackbarComponent, SnackbarButtonComponent, ButtonComponent, RootComponent],\n  template: `\n        <tgui-button (click)=\"showDeleteSnackbar()\">Показать уведомление</tgui-button>\n        \n        <tgui-snackbar \n          *ngIf=\"isDeleteSnackbarShown\"\n          [description]=\"description\"\n          [duration]=\"duration\" \n          [onClose]=\"closeDeleteSnackbar\">\n          {{ mainMessage }}\n          <ng-template #before>\n            <div style=\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\">\n              <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill=\"currentColor\" d=\"M18.59,14l6.7-6.7c0.39-0.39,0.39-1.02,0-1.42l-2.17-2.17c-0.39-0.39-1.02-0.39-1.42,0L14,10.41l-6.7-6.7  c-0.39-0.39-1.02-0.39-1.42,0L3.71,5.88c-0.39,0.39-0.39,1.02,0,1.42L10.41,14l-6.7,6.7c-0.39,0.39-0.39,1.02,0,1.42l2.17,2.17  c0.39,0.39,1.02,0.39,1.42,0l6.7-6.7l6.7,6.7c0.39,0.39,1.02,0.39,1.42,0l2.17-2.17c0.39-0.39,0.39-1.02,0-1.42L18.59,14z\"/>\n              </svg>\n            </div>\n          </ng-template>\n          <ng-template #after>\n            <tgui-snackbar-button (click)=\"showUndoSnackbar()\">\n              Отменить\n            </tgui-snackbar-button>\n          </ng-template>\n        </tgui-snackbar>\n        \n        <tgui-snackbar \n          *ngIf=\"isUndoSnackbarShown\"\n          [description]=\"'Сообщение возвращено в список'\"\n          [duration]=\"duration\" \n          [onClose]=\"closeUndoSnackbar\">\n          Сообщение восстановлено\n          <ng-template #before>\n            <div style=\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\">\n              <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill=\"currentColor\" d=\"M14,2C7.37,2,2,7.37,2,14s5.37,12,12,12s12-5.37,12-12S20.63,2,14,2z M10.5,16.87l-4.13-4.13l1.4-1.4l2.73,2.73 l7.23-7.23l1.4,1.4L10.5,16.87z\"/>\n              </svg>\n            </div>\n          </ng-template>\n          <ng-template #link>\n            <a href=\"https://telegram.org\" target=\"_blank\" style=\"color: inherit; text-decoration: underline;\">Открыть</a>\n          </ng-template>\n        </tgui-snackbar>\n  `\n})\nclass DemoSnackbarComponent {\n  isDeleteSnackbarShown = false;\n  isUndoSnackbarShown = false;\n  \n  mainMessage = 'Сообщение удалено';\n  description = 'Восстановите сообщение в течение 4 секунд';\n  duration = 40000;\n  \n  showDeleteSnackbar() {\n    this.isDeleteSnackbarShown = true;\n  }\n  \n  closeDeleteSnackbar = () => {\n    this.isDeleteSnackbarShown = false;\n  }\n  \n  showUndoSnackbar() {\n    this.isDeleteSnackbarShown = false;\n    this.isUndoSnackbarShown = true;\n  }\n  \n  closeUndoSnackbar = () => {\n    this.isUndoSnackbarShown = false;\n  }\n}\n\nconst meta: Meta<SnackbarComponent> = {\n  title: 'Feedback/Snackbar',\n  component: SnackbarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        SnackbarComponent,\n        SnackbarButtonComponent,\n        RootPortalComponent,\n        TappableComponent,\n        RootComponent,\n        ButtonComponent,\n        DemoSnackbarComponent\n      ],\n      providers: [PlatformService]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen'\n  },\n  argTypes: {\n    description: {\n      control: 'text',\n      description: 'Additional text description shown below the main message'\n    },\n    duration: {\n      control: {\n        type: 'number',\n        min: 1000,\n        max: 10000,\n        step: 1000\n      },\n      description: 'Duration in milliseconds before the snackbar is automatically closed'\n    },\n    beforeTemplate: { control: false },\n    afterTemplate: { control: false },\n    linkTemplate: { control: false },\n    onClose: { control: false }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<SnackbarComponent>;\n\nexport const Playground: Story = {\n  parameters: {\n    controls: { hideNoControlsWarning: true }\n  },\n  render: () => ({\n    template: `<demo-snackbar></demo-snackbar>`\n  })\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "DividerComponent",
            "id": "component-DividerComponent-c40014d9d2ffce3309b2a27d5daf2e44481f15daeadf5eb2171df50b95c7b0ece05d190e94b317d04dba159fd6193a2971385bff8490fc11136542eac6cd2fb3",
            "file": "projects/tgui/src/lib/components/misc/divider/divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-divider",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  "
            ],
            "template": "<hr class=\"tgui-divider\">",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Represents a horizontal line used to separate content within a layout or component.\nThe component allows customization through custom CSS classes.</p>\n",
            "rawdescription": "\n\nRepresents a horizontal line used to separate content within a layout or component.\nThe component allows customization through custom CSS classes.\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ViewEncapsulation, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Represents a horizontal line used to separate content within a layout or component.\n * The component allows customization through custom CSS classes.\n */\n@Component({\n  selector: 'tgui-divider',\n  standalone: true,\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<hr class=\"tgui-divider\">`,\n  styles: [`\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  `]\n})\nexport class DividerComponent {} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-divider {\n      margin: 0;\n      border-top: none;\n      border-width: var(--tgui--border--width, 1px);\n      border-color: var(--tgui--outline);\n      width: 100%;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "HeadlineComponent",
            "id": "component-HeadlineComponent-2b00b431869a06dad51a68baf8d8dd32cd4499291e073136554c9cbcd20a30e2619205778faecc68d2f1c38702fdbe3f544f6713c064b9974f4b33beaac59d9c",
            "file": "projects/tgui/src/lib/components/typography/headline/headline.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-headline",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the headline, influencing its styling.\n",
                    "description": "<p>The size level of the headline, influencing its styling.</p>\n",
                    "line": 54,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Headline component serves as a wrapper for text that is intended to be displayed prominently,\ntypically used for section headings or important titles within the application. It leverages the Typography\ncomponent for consistent typographic styling, offering a range of customization options through its props.\nThe component defaults to an <code>&lt;h5&gt;</code> HTML tag, providing semantic meaning and ensuring good SEO practices,\nbut can be customized as needed.</p>\n",
            "rawdescription": "\n\nThe Headline component serves as a wrapper for text that is intended to be displayed prominently,\ntypically used for section headings or important titles within the application. It leverages the Typography\ncomponent for consistent typographic styling, offering a range of customization options through its props.\nThe component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\nbut can be customized as needed.\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Headline component serves as a wrapper for text that is intended to be displayed prominently,\n * typically used for section headings or important titles within the application. It leverages the Typography\n * component for consistent typographic styling, offering a range of customization options through its props.\n * The component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\n * but can be customized as needed.\n */\n@Component({\n  selector: 'tgui-headline',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeadlineComponent extends TypographyComponent {\n  /**\n   * The size level of the headline, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h5 by default\n  @Input() override tag = 'h5';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--headline--font_size);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\n      line-height: var(--tgui--headline--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-b0b9399ec39c5839bad2229bbb321956240e5ff8c2a068fb1a6e640b6ca46853b8fa0e8fef2dcea36928fd1a3a977b8ca0210797909d435ee405762731ee06dc",
            "file": "projects/tgui/src/lib/components/blocks/icon-button/icon-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon-button",
            "styleUrls": [
                "./icon-button.component.css"
            ],
            "styles": [],
            "template": "<tgui-tappable\n  [interactiveAnimation]=\"interactiveAnimation\"\n  [readonly]=\"disabled\"\n  [disabled]=\"disabled\"\n  class=\"icon-button-tappable\"\n>\n  <ng-content></ng-content>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisables the button",
                    "description": "<p>Disables the button</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nType of interactive animation",
                    "description": "<p>Type of interactive animation</p>\n",
                    "line": 45,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'bezeled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the button's visual style, affecting its color and background.",
                    "description": "<p>Defines the button&#39;s visual style, affecting its color and background.</p>\n",
                    "line": 39,
                    "type": "\"bezeled\" | \"plain\" | \"gray\" | \"outline\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSpecifies the button size, affecting icon scaling. Recommended icon sizes are 20px for 's', 24px for 'm', and 28px for 'l'.",
                    "description": "<p>Specifies the button size, affecting icon scaling. Recommended icon sizes are 20px for &#39;s&#39;, 24px for &#39;m&#39;, and 28px for &#39;l&#39;.</p>\n",
                    "line": 36,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nType of button",
                    "description": "<p>Type of button</p>\n",
                    "line": 48,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "attr.type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-bezeled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-outline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Renders an icon button with customizable size and mode. It utilizes the <code>Tappable</code> component for enhanced\ntouch interaction, allowing it to serve various UI actions efficiently.</p>\n",
            "rawdescription": "\n\nRenders an icon button with customizable size and mode. It utilizes the `Tappable` component for enhanced\ntouch interaction, allowing it to serve various UI actions efficiently.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  ElementRef,\n  inject\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TappableComponent } from '../../utils';\n\n/**\n * Renders an icon button with customizable size and mode. It utilizes the `Tappable` component for enhanced\n * touch interaction, allowing it to serve various UI actions efficiently.\n */\n@Component({\n  selector: 'tgui-icon-button',\n  standalone: true,\n  imports: [CommonModule, TappableComponent],\n  template: `\n    <tgui-tappable \n      [interactiveAnimation]=\"interactiveAnimation\" \n      [readonly]=\"disabled\"\n      [disabled]=\"disabled\"\n      class=\"icon-button-tappable\"\n    >\n      <ng-content></ng-content>\n    </tgui-tappable>\n  `,\n  styleUrls: ['./icon-button.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IconButtonComponent {\n  /** Specifies the button size, affecting icon scaling. Recommended icon sizes are 20px for 's', 24px for 'm', and 28px for 'l'. */\n  @Input() size: 's' | 'm' | 'l' = 'm';\n  \n  /** Defines the button's visual style, affecting its color and background. */\n  @Input() mode: 'bezeled' | 'plain' | 'gray' | 'outline' = 'bezeled';\n  \n  /** Disables the button */\n  @Input() disabled = false;\n  \n  /** Type of interactive animation */\n  @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n  /** Type of button */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  \n  private elementRef = inject(ElementRef);\n  \n  // Host bindings for size classes\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  \n  // Host bindings for mode classes\n  @HostBinding('class.mode-bezeled') get isModeBezeled() { return this.mode === 'bezeled'; }\n  @HostBinding('class.mode-plain') get isModePlain() { return this.mode === 'plain'; }\n  @HostBinding('class.mode-gray') get isModeGray() { return this.mode === 'gray'; }\n  @HostBinding('class.mode-outline') get isModeOutline() { return this.mode === 'outline'; }\n  \n  // Host bindings for state classes\n  @HostBinding('class.disabled') get isDisabled() { return this.disabled; }\n  \n  // Host bindings for attributes\n  @HostBinding('attr.type') get buttonType() { return this.type; }\n  @HostBinding('attr.disabled') get buttonDisabled() { return this.disabled ? true : null; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  text-decoration: none;\n  box-sizing: border-box;\n  position: relative;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  touch-action: manipulation;\n}\n\n.icon-button-tappable {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  border-radius: inherit;\n}\n\n/* Size Variants */\n:host.size-s {\n  height: 36px;\n  width: 36px;\n  border-radius: 18px;\n}\n\n:host.size-m {\n  height: 42px;\n  width: 42px;\n  border-radius: 21px;\n}\n\n:host.size-l {\n  height: 50px;\n  width: 50px;\n  border-radius: 25px;\n}\n\n/* Mode Variants */\n:host.mode-bezeled {\n  --tgui--button--hovered-opacity: .07;\n  --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n  color: var(--tgui--link_color);\n  background: var(--tgui--secondary_fill);\n}\n\n:host.mode-plain {\n  --tgui--button--hovered-opacity: .15;\n  --tgui--ripple-color: rgba(0, 0, 0, 0.15);\n  color: inherit;\n  background: transparent;\n}\n\n:host.mode-gray {\n  --tgui--button--hovered-opacity: .07;\n  --tgui--ripple-color: rgba(0, 0, 0, 0.15);\n  color: var(--tgui--secondary_text_color);\n  background: var(--tgui--secondary_fill);\n}\n\n:host.mode-outline {\n  --tgui--button--hovered-opacity: .07;\n  --tgui--ripple-color: rgba(0, 120, 255, 0.5);\n  color: var(--tgui--link_color);\n  background: transparent;\n  box-shadow: inset 0 0 0 1px var(--tgui--divider_color);\n}\n\n:host.disabled {\n  cursor: default;\n  opacity: .35;\n  pointer-events: none;\n} ",
                    "styleUrl": "./icon-button.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "isModeBezeled": {
                    "name": "isModeBezeled",
                    "getSignature": {
                        "name": "isModeBezeled",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                },
                "isModePlain": {
                    "name": "isModePlain",
                    "getSignature": {
                        "name": "isModePlain",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "isModeGray": {
                    "name": "isModeGray",
                    "getSignature": {
                        "name": "isModeGray",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isModeOutline": {
                    "name": "isModeOutline",
                    "getSignature": {
                        "name": "isModeOutline",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "buttonType": {
                    "name": "buttonType",
                    "getSignature": {
                        "name": "buttonType",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "buttonDisabled": {
                    "name": "buttonDisabled",
                    "getSignature": {
                        "name": "buttonDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "IconsShowcaseComponent",
            "id": "component-IconsShowcaseComponent-39e1e24e86029adcdc52da68117057be5181578fa087926f796c391c1d96a8d4e61c60af4056ad5ea68c152d0edc604cab34b16abb369cc62773785f1cee37e6",
            "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icons-showcase",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      /* Temporary define variable for demo purposes */\n      --tgui-link_color: #2196f3;\n    }\n  "
            ],
            "template": "<div style=\"display: flex; color: var(--tgui-link_color); flex-direction: column; gap: 24px; padding: 16px;\">\n  <!-- 12x12 Icons -->\n  <div>\n    <h2>12×12 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon12-quote></tgui-icon12-quote>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Quote</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 16x16 Icons -->\n  <div>\n    <h2>16×16 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon16-cancel></tgui-icon16-cancel>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Cancel</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon16-chevron></tgui-icon16-chevron>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Chevron</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 20x20 Icons -->\n  <div>\n    <h2>20×20 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-chevron-down></tgui-icon20-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">ChevronDown</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-copy></tgui-icon20-copy>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Copy</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\n        <span style=\"margin-top: 8px; font-size: 12px;\">QuestionMark</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-select></tgui-icon20-select>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Select</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-select-ios></tgui-icon20-select-ios>\n        <span style=\"margin-top: 8px; font-size: 12px;\">SelectIos</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 24x24 Icons -->\n  <div>\n    <h2>24×24 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-cancel></tgui-icon24-cancel>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Cancel</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-channel></tgui-icon24-channel>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Channel</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-chat></tgui-icon24-chat>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Chat</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-chevron-down></tgui-icon24-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">ChevronDown</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-chevron-left></tgui-icon24-chevron-left>\n        <span style=\"margin-top: 8px; font-size: 12px;\">ChevronLeft</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-chevron-right></tgui-icon24-chevron-right>\n        <span style=\"margin-top: 8px; font-size: 12px;\">ChevronRight</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-close></tgui-icon24-close>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Close</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-notifications></tgui-icon24-notifications>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Notifications</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-person-remove></tgui-icon24-person-remove>\n        <span style=\"margin-top: 8px; font-size: 12px;\">PersonRemove</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-qr></tgui-icon24-qr>\n        <span style=\"margin-top: 8px; font-size: 12px;\">QR</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon24-sun-low></tgui-icon24-sun-low>\n        <span style=\"margin-top: 8px; font-size: 12px;\">SunLow</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 28x28 Icons -->\n  <div>\n    <h2>28×28 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-add-circle></tgui-icon28-add-circle>\n        <span style=\"margin-top: 8px; font-size: 12px;\">AddCircle</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-archive></tgui-icon28-archive>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Archive</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-attach></tgui-icon28-attach>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Attach</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-chat></tgui-icon28-chat>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Chat</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-close></tgui-icon28-close>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Close</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-close-ambient></tgui-icon28-close-ambient>\n        <span style=\"margin-top: 8px; font-size: 12px;\">CloseAmbient</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-devices></tgui-icon28-devices>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Devices</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-edit></tgui-icon28-edit>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Edit</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-heart></tgui-icon28-heart>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Heart</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon28-stats></tgui-icon28-stats>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Stats</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 32x32 Icons -->\n  <div>\n    <h2>32×32 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\n        <span style=\"margin-top: 8px; font-size: 12px;\">ProfileColoredSquare</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 36x36 Icons -->\n  <div>\n    <h2>36×36 Icons</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon36-backspace></tgui-icon36-backspace>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Backspace</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Custom Colors -->\n  <div>\n    <h2>Custom Colors</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-chevron-down style=\"color: #ff5722;\"></tgui-icon20-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Orange</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-copy style=\"color: #4caf50;\"></tgui-icon20-copy>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Green</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-question-mark style=\"color: #9c27b0;\"></tgui-icon20-question-mark>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Purple</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon16-cancel style=\"color: #f44336;\"></tgui-icon16-cancel>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Red</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\n        <span style=\"margin-top: 8px; font-size: 12px;\">Original colors</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Different Sizes -->\n  <div>\n    <h2>Different Sizes</h2>\n    <div style=\"display: flex; gap: 16px; flex-wrap: wrap; align-items: center;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-chevron-down [props]=\"{ width: 16, height: 16 }\"></tgui-icon20-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">16px</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-chevron-down [props]=\"{ width: 24, height: 24 }\"></tgui-icon20-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">24px</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon20-chevron-down [props]=\"{ width: 32, height: 32 }\"></tgui-icon20-chevron-down>\n        <span style=\"margin-top: 8px; font-size: 12px;\">32px</span>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n        <tgui-icon36-backspace [props]=\"{ width: 48, height: 48 }\"></tgui-icon36-backspace>\n        <span style=\"margin-top: 8px; font-size: 12px;\">48px</span>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TguiIcon12Quote"
                },
                {
                    "name": "TguiIcon16Cancel"
                },
                {
                    "name": "TguiIcon16Chevron"
                },
                {
                    "name": "TguiIcon20ChevronDown"
                },
                {
                    "name": "TguiIcon20Copy"
                },
                {
                    "name": "TguiIcon20QuestionMark"
                },
                {
                    "name": "TguiIcon20Select"
                },
                {
                    "name": "TguiIcon20SelectIos"
                },
                {
                    "name": "TguiIcon24Cancel"
                },
                {
                    "name": "TguiIcon24Channel"
                },
                {
                    "name": "TguiIcon24Chat"
                },
                {
                    "name": "TguiIcon24ChevronDown"
                },
                {
                    "name": "TguiIcon24ChevronLeft"
                },
                {
                    "name": "TguiIcon24ChevronRight"
                },
                {
                    "name": "TguiIcon24Close"
                },
                {
                    "name": "TguiIcon24Notifications"
                },
                {
                    "name": "TguiIcon24PersonRemove"
                },
                {
                    "name": "TguiIcon24QR"
                },
                {
                    "name": "TguiIcon24SunLow"
                },
                {
                    "name": "TguiIcon28AddCircle"
                },
                {
                    "name": "TguiIcon28Archive"
                },
                {
                    "name": "TguiIcon28Attach"
                },
                {
                    "name": "TguiIcon28Chat"
                },
                {
                    "name": "TguiIcon28Close"
                },
                {
                    "name": "TguiIcon28CloseAmbient"
                },
                {
                    "name": "TguiIcon28Devices"
                },
                {
                    "name": "TguiIcon28Edit"
                },
                {
                    "name": "TguiIcon28Heart"
                },
                {
                    "name": "TguiIcon28Stats"
                },
                {
                    "name": "TguiIcon32ProfileColoredSquare"
                },
                {
                    "name": "TguiIcon36Backspace"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Meta, StoryObj } from '@storybook/angular';\nimport { Component } from '@angular/core';\n\n// 12x12 icons\nimport { TguiIcon12Quote } from '../icon12/tgui-icon12-quote';\n\n// 16x16 icons\nimport { TguiIcon16Cancel } from '../icon16/tgui-icon16-cancel';\nimport { TguiIcon16Chevron } from '../icon16/tgui-icon16-chevron';\n\n// 20x20 icons\nimport { TguiIcon20ChevronDown } from '../icon20/tgui-icon20-chevron-down';\nimport { TguiIcon20Copy } from '../icon20/tgui-icon20-copy';\nimport { TguiIcon20QuestionMark } from '../icon20/tgui-icon20-question-mark';\nimport { TguiIcon20Select } from '../icon20/tgui-icon20-select';\nimport { TguiIcon20SelectIos } from '../icon20/tgui-icon20-select-ios';\n\n// 24x24 icons\nimport { TguiIcon24Cancel } from '../icon24/tgui-icon24-cancel';\nimport { TguiIcon24Channel } from '../icon24/tgui-icon24-channel';\nimport { TguiIcon24Chat } from '../icon24/tgui-icon24-chat';\nimport { TguiIcon24ChevronDown } from '../icon24/tgui-icon24-chevron-down';\nimport { TguiIcon24ChevronLeft } from '../icon24/tgui-icon24-chevron-left';\nimport { TguiIcon24ChevronRight } from '../icon24/tgui-icon24-chevron-right';\nimport { TguiIcon24Close } from '../icon24/tgui-icon24-close';\nimport { TguiIcon24Notifications } from '../icon24/tgui-icon24-notifications';\nimport { TguiIcon24PersonRemove } from '../icon24/tgui-icon24-person-remove';\nimport { TguiIcon24QR } from '../icon24/tgui-icon24-qr';\nimport { TguiIcon24SunLow } from '../icon24/tgui-icon24-sun-low';\n\n// 28x28 icons\nimport { TguiIcon28AddCircle } from '../icon28/tgui-icon28-add-circle';\nimport { TguiIcon28Archive } from '../icon28/tgui-icon28-archive';\nimport { TguiIcon28Attach } from '../icon28/tgui-icon28-attach';\nimport { TguiIcon28Chat } from '../icon28/tgui-icon28-chat';\nimport { TguiIcon28Close } from '../icon28/tgui-icon28-close';\nimport { TguiIcon28CloseAmbient } from '../icon28/tgui-icon28-close-ambient';\nimport { TguiIcon28Devices } from '../icon28/tgui-icon28-devices';\nimport { TguiIcon28Edit } from '../icon28/tgui-icon28-edit';\nimport { TguiIcon28Heart } from '../icon28/tgui-icon28-heart';\nimport { TguiIcon28Stats } from '../icon28/tgui-icon28-stats';\n\n// 32x32 icons\nimport { TguiIcon32ProfileColoredSquare } from '../icon32/tgui-icon32-profile-colored-square';\n\n// 36x36 icons\nimport { TguiIcon36Backspace } from '../icon36/tgui-icon36-backspace';\n\n@Component({\n  selector: 'tgui-icons-showcase',\n  standalone: true,\n  imports: [\n    // 12x12 icons\n    TguiIcon12Quote,\n    \n    // 16x16 icons\n    TguiIcon16Cancel,\n    TguiIcon16Chevron,\n    \n    // 20x20 icons\n    TguiIcon20ChevronDown, \n    TguiIcon20Copy, \n    TguiIcon20QuestionMark, \n    TguiIcon20Select, \n    TguiIcon20SelectIos,\n    \n    // 24x24 icons\n    TguiIcon24Cancel,\n    TguiIcon24Channel,\n    TguiIcon24Chat,\n    TguiIcon24ChevronDown,\n    TguiIcon24ChevronLeft,\n    TguiIcon24ChevronRight,\n    TguiIcon24Close,\n    TguiIcon24Notifications,\n    TguiIcon24PersonRemove,\n    TguiIcon24QR,\n    TguiIcon24SunLow,\n    \n    // 28x28 icons\n    TguiIcon28AddCircle,\n    TguiIcon28Archive,\n    TguiIcon28Attach,\n    TguiIcon28Chat,\n    TguiIcon28Close,\n    TguiIcon28CloseAmbient,\n    TguiIcon28Devices,\n    TguiIcon28Edit,\n    TguiIcon28Heart,\n    TguiIcon28Stats,\n    \n    // 32x32 icons\n    TguiIcon32ProfileColoredSquare,\n    \n    // 36x36 icons\n    TguiIcon36Backspace\n  ],\n  template: `\n    <div style=\"display: flex; color: var(--tgui-link_color); flex-direction: column; gap: 24px; padding: 16px;\">\n      <!-- 12x12 Icons -->\n      <div>\n        <h2>12×12 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon12-quote></tgui-icon12-quote>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Quote</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- 16x16 Icons -->\n      <div>\n        <h2>16×16 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon16-cancel></tgui-icon16-cancel>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Cancel</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon16-chevron></tgui-icon16-chevron>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Chevron</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- 20x20 Icons -->\n      <div>\n        <h2>20×20 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-chevron-down></tgui-icon20-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">ChevronDown</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-copy></tgui-icon20-copy>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Copy</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-question-mark></tgui-icon20-question-mark>\n            <span style=\"margin-top: 8px; font-size: 12px;\">QuestionMark</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-select></tgui-icon20-select>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Select</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-select-ios></tgui-icon20-select-ios>\n            <span style=\"margin-top: 8px; font-size: 12px;\">SelectIos</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 24x24 Icons -->\n      <div>\n        <h2>24×24 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-cancel></tgui-icon24-cancel>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Cancel</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-channel></tgui-icon24-channel>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Channel</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-chat></tgui-icon24-chat>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Chat</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-chevron-down></tgui-icon24-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">ChevronDown</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-chevron-left></tgui-icon24-chevron-left>\n            <span style=\"margin-top: 8px; font-size: 12px;\">ChevronLeft</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-chevron-right></tgui-icon24-chevron-right>\n            <span style=\"margin-top: 8px; font-size: 12px;\">ChevronRight</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-close></tgui-icon24-close>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Close</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-notifications></tgui-icon24-notifications>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Notifications</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-person-remove></tgui-icon24-person-remove>\n            <span style=\"margin-top: 8px; font-size: 12px;\">PersonRemove</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-qr></tgui-icon24-qr>\n            <span style=\"margin-top: 8px; font-size: 12px;\">QR</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon24-sun-low></tgui-icon24-sun-low>\n            <span style=\"margin-top: 8px; font-size: 12px;\">SunLow</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 28x28 Icons -->\n      <div>\n        <h2>28×28 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-add-circle></tgui-icon28-add-circle>\n            <span style=\"margin-top: 8px; font-size: 12px;\">AddCircle</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-archive></tgui-icon28-archive>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Archive</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-attach></tgui-icon28-attach>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Attach</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-chat></tgui-icon28-chat>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Chat</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-close></tgui-icon28-close>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Close</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-close-ambient></tgui-icon28-close-ambient>\n            <span style=\"margin-top: 8px; font-size: 12px;\">CloseAmbient</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-devices></tgui-icon28-devices>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Devices</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-edit></tgui-icon28-edit>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Edit</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-heart></tgui-icon28-heart>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Heart</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon28-stats></tgui-icon28-stats>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Stats</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 32x32 Icons -->\n      <div>\n        <h2>32×32 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\n            <span style=\"margin-top: 8px; font-size: 12px;\">ProfileColoredSquare</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 36x36 Icons -->\n      <div>\n        <h2>36×36 Icons</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon36-backspace></tgui-icon36-backspace>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Backspace</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Custom Colors -->\n      <div>\n        <h2>Custom Colors</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-chevron-down style=\"color: #ff5722;\"></tgui-icon20-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Orange</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-copy style=\"color: #4caf50;\"></tgui-icon20-copy>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Green</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-question-mark style=\"color: #9c27b0;\"></tgui-icon20-question-mark>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Purple</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon16-cancel style=\"color: #f44336;\"></tgui-icon16-cancel>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Red</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\n            <span style=\"margin-top: 8px; font-size: 12px;\">Original colors</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Different Sizes -->\n      <div>\n        <h2>Different Sizes</h2>\n        <div style=\"display: flex; gap: 16px; flex-wrap: wrap; align-items: center;\">\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-chevron-down [props]=\"{ width: 16, height: 16 }\"></tgui-icon20-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">16px</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-chevron-down [props]=\"{ width: 24, height: 24 }\"></tgui-icon20-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">24px</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon20-chevron-down [props]=\"{ width: 32, height: 32 }\"></tgui-icon20-chevron-down>\n            <span style=\"margin-top: 8px; font-size: 12px;\">32px</span>\n          </div>\n          <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n            <tgui-icon36-backspace [props]=\"{ width: 48, height: 48 }\"></tgui-icon36-backspace>\n            <span style=\"margin-top: 8px; font-size: 12px;\">48px</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host {\n      /* Temporary define variable for demo purposes */\n      --tgui-link_color: #2196f3;\n    }\n  `]\n})\nclass IconsShowcaseComponent {}\n\nconst meta: Meta<IconsShowcaseComponent> = {\n  title: 'Icons/Overview',\n  component: IconsShowcaseComponent,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<IconsShowcaseComponent>;\n\nexport const Overview: Story = {\n  args: {},\n}; ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      /* Temporary define variable for demo purposes */\n      --tgui-link_color: #2196f3;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "InlineButtonsComponent",
            "id": "component-InlineButtonsComponent-e522ab8e243efe7c570bc7098912fee1ed24cf665775640801131463008688fe67710b4658af55852da7629c0d9512bd6aa8a48439863d4c57f01e7a6dcd0798",
            "file": "projects/tgui/src/lib/components/blocks/inline-buttons/inline-buttons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-inline-buttons",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n        gap: 12px;\n      }\n\n      :host-context(.tgui-platform-ios) {\n        gap: 8px;\n      }\n    "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mode",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDictates the styling mode for the inline buttons, affecting color and background.",
                    "description": "<p>Dictates the styling mode for the inline buttons, affecting color and background.</p>\n",
                    "line": 40,
                    "type": "\"bezeled\" | \"plain\" | \"gray\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.mode-bezeled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p><code>InlineButtons</code> acts as a container for <code>InlineButtonsItem</code> components.\nThis component provides a unified context for styling and interaction,\nleveraging the <code>mode</code> to apply consistent styling across all child components.\nIt ensures visual consistency across different platforms and supports custom styling modes.</p>\n",
            "rawdescription": "\n\n`InlineButtons` acts as a container for `InlineButtonsItem` components.\nThis component provides a unified context for styling and interaction,\nleveraging the `mode` to apply consistent styling across all child components.\nIt ensures visual consistency across different platforms and supports custom styling modes.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ChangeDetectionStrategy, \n  Input,\n  HostBinding,\n  inject\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * `InlineButtons` acts as a container for `InlineButtonsItem` components.\n * This component provides a unified context for styling and interaction,\n * leveraging the `mode` to apply consistent styling across all child components.\n * It ensures visual consistency across different platforms and supports custom styling modes.\n */\n@Component({\n  selector: 'tgui-inline-buttons',\n  standalone: true,\n  imports: [CommonModule],\n  template: `<ng-content></ng-content>`,\n  styles: [\n    `\n      :host {\n        display: flex;\n        gap: 12px;\n      }\n\n      :host-context(.tgui-platform-ios) {\n        gap: 8px;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'attr.data-refresh-platform': 'true'\n  }\n})\nexport class InlineButtonsComponent {\n  /** Dictates the styling mode for the inline buttons, affecting color and background. */\n  @Input() mode:  'bezeled' | 'plain' | 'gray' = 'plain';\n\n  @HostBinding('class.mode-bezeled') get isModeBezeled() { return this.mode === 'bezeled'; }\n  @HostBinding('class.mode-plain') get isModePlain() { return this.mode === 'plain'; }\n  @HostBinding('class.mode-gray') get isModeGray() { return this.mode === 'gray'; }\n\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n        gap: 12px;\n      }\n\n      :host-context(.tgui-platform-ios) {\n        gap: 8px;\n      }\n    \n",
            "extends": [],
            "accessors": {
                "isModeBezeled": {
                    "name": "isModeBezeled",
                    "getSignature": {
                        "name": "isModeBezeled",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "isModePlain": {
                    "name": "isModePlain",
                    "getSignature": {
                        "name": "isModePlain",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                },
                "isModeGray": {
                    "name": "isModeGray",
                    "getSignature": {
                        "name": "isModeGray",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "InlineButtonsItemComponent",
            "id": "component-InlineButtonsItemComponent-f8ab0ab270ff93d96f90060480f93ac538fcb334128523573dfcf22dd9e6cbdf3e882bc0b76e8895dbdc8c3cef1d119b953b31fd8c207e9ca2566bef9df26c5e",
            "file": "projects/tgui/src/lib/components/blocks/inline-buttons/components/inline-buttons-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-inline-buttons-item",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      border-radius: 12px;\n      background: transparent;\n      color: var(--tgui--link_color);\n    }\n    \n    :host.mode-bezeled {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    .inline-button-tappable {\n      flex: 1 0 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      gap: 3px;\n      min-height: 60px;\n      min-width: 64px;\n      padding: 0 12px;\n      max-inline-size: 100%;\n      border: none;\n      border-radius: 12px;\n      box-sizing: border-box;\n    } \n\n    :host-context(.tgui-platform-ios) {\n      min-height: 64px;\n      min-width: 72px;\n      gap: 4px;\n    }\n\n    .text {\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      max-inline-size: inherit;\n    } \n"
            ],
            "template": "<tgui-tappable\n  [interactiveAnimation]=\"interactiveAnimation\"\n  [disabled]=\"disabled\"\n  class=\"inline-button-tappable\"\n>\n    <ng-content></ng-content>\n    <tgui-caption *ngIf=\"text\" class=\"text\" level=\"1\" weight=\"2\">{{ text }}</tgui-caption>\n\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisables the button",
                    "description": "<p>Disables the button</p>\n",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nType of interactive animation",
                    "description": "<p>Type of interactive animation</p>\n",
                    "line": 101,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional mode for styling the button, with 'plain' as the default.",
                    "description": "<p>Optional mode for styling the button, with &#39;plain&#39; as the default.</p>\n",
                    "line": 95,
                    "type": "\"bezeled\" | \"plain\" | \"gray\"",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText displayed inside the button.",
                    "description": "<p>Text displayed inside the button.</p>\n",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.mode-bezeled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-gray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.mode-plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                }
            ],
            "description": "<p><code>InlineButtonsItem</code> is designed for use within an InlineButtons container but can also serve\nas a standalone button if used by itself. It supports displaying optional text and can inherit\na styling mode from its parent InlineButtons context or utilize a locally defined mode.</p>\n",
            "rawdescription": "\n\n`InlineButtonsItem` is designed for use within an InlineButtons container but can also serve\nas a standalone button if used by itself. It supports displaying optional text and can inherit\na styling mode from its parent InlineButtons context or utilize a locally defined mode.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  ViewEncapsulation,\n  inject,\n  OnInit\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TappableComponent } from '@components/utils';\nimport { CaptionComponent } from '@components/typography/caption/caption.component';\n\n/**\n * `InlineButtonsItem` is designed for use within an InlineButtons container but can also serve \n * as a standalone button if used by itself. It supports displaying optional text and can inherit \n * a styling mode from its parent InlineButtons context or utilize a locally defined mode.\n */\n@Component({\n  selector: 'tgui-inline-buttons-item',\n  standalone: true,\n  imports: [CommonModule, TappableComponent, CaptionComponent],\n  template: `\n    <tgui-tappable \n      [interactiveAnimation]=\"interactiveAnimation\" \n      [disabled]=\"disabled\"\n      class=\"inline-button-tappable\"\n    >\n        <ng-content></ng-content>\n        <tgui-caption *ngIf=\"text\" class=\"text\" level=\"1\" weight=\"2\">{{ text }}</tgui-caption>\n\n    </tgui-tappable>\n  `,\n  styles: [`\n    :host {\n      border-radius: 12px;\n      background: transparent;\n      color: var(--tgui--link_color);\n    }\n    \n    :host.mode-bezeled {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    .inline-button-tappable {\n      flex: 1 0 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      gap: 3px;\n      min-height: 60px;\n      min-width: 64px;\n      padding: 0 12px;\n      max-inline-size: 100%;\n      border: none;\n      border-radius: 12px;\n      box-sizing: border-box;\n    } \n\n    :host-context(.tgui-platform-ios) {\n      min-height: 64px;\n      min-width: 72px;\n      gap: 4px;\n    }\n\n    .text {\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      max-inline-size: inherit;\n    } \n`],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InlineButtonsItemComponent {\n  /** Text displayed inside the button. */\n  @Input() text?: string;\n  \n  /** Optional mode for styling the button, with 'plain' as the default. */\n  @Input() mode:  'bezeled' | 'plain' | 'gray' = 'plain';\n  \n  /** Disables the button */\n  @Input() disabled = false;\n  \n  /** Type of interactive animation */\n  @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n\n  @HostBinding('class.mode-bezeled') get isModeBezeled() { return this.mode === 'bezeled'; }\n  @HostBinding('class.mode-plain') get isModePlain() { return this.mode === 'plain'; }\n  @HostBinding('class.mode-gray') get isModeGray() { return this.mode === 'gray'; }\n\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      border-radius: 12px;\n      background: transparent;\n      color: var(--tgui--link_color);\n    }\n    \n    :host.mode-bezeled {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host.mode-gray {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\n      background: var(--tgui--secondary_fill);\n    }\n\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\n      color: var(--tgui--plain_foreground);\n      background: var(--tgui--plain_background);\n    }\n    \n    .inline-button-tappable {\n      flex: 1 0 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      gap: 3px;\n      min-height: 60px;\n      min-width: 64px;\n      padding: 0 12px;\n      max-inline-size: 100%;\n      border: none;\n      border-radius: 12px;\n      box-sizing: border-box;\n    } \n\n    :host-context(.tgui-platform-ios) {\n      min-height: 64px;\n      min-width: 72px;\n      gap: 4px;\n    }\n\n    .text {\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      max-inline-size: inherit;\n    } \n\n",
            "extends": [],
            "accessors": {
                "isModeBezeled": {
                    "name": "isModeBezeled",
                    "getSignature": {
                        "name": "isModeBezeled",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                },
                "isModePlain": {
                    "name": "isModePlain",
                    "getSignature": {
                        "name": "isModePlain",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "isModeGray": {
                    "name": "isModeGray",
                    "getSignature": {
                        "name": "isModeGray",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "LargeTitleComponent",
            "id": "component-LargeTitleComponent-040021a34992bd97c1c092ef63f9bc43fd2e63d09652cdf20d736265406a8929e546a83ab6b4f2835ec074ef84566aa76c46e252a5b68e87fad230e4deb17bc9",
            "file": "projects/tgui/src/lib/components/typography/large-title/large-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-large-title",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the large title, influencing its styling.\n",
                    "description": "<p>The size level of the large title, influencing its styling.</p>\n",
                    "line": 54,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The LargeTitle component is designed for prominent display text, typically used for major headings\nor titles within an application. It encapsulates the Typography component&#39;s features, offering\nextensive styling and semantic customization options while defaulting to an <code>&lt;h1&gt;</code> HTML element.\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\nmaking it suitable for primary page titles or significant headings.</p>\n",
            "rawdescription": "\n\nThe LargeTitle component is designed for prominent display text, typically used for major headings\nor titles within an application. It encapsulates the Typography component's features, offering\nextensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\nmaking it suitable for primary page titles or significant headings.\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The LargeTitle component is designed for prominent display text, typically used for major headings\n * or titles within an application. It encapsulates the Typography component's features, offering\n * extensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\n * This choice of default component underscores the importance and hierarchy of the text it encapsulates,\n * making it suitable for primary page titles or significant headings.\n */\n@Component({\n  selector: 'tgui-large-title',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LargeTitleComponent extends TypographyComponent {\n  /**\n   * The size level of the large title, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h1 by default\n  @Input() override tag = 'h1';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--large_title--font_size);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\n      line-height: var(--tgui--large_title--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "RippleComponent",
            "id": "component-RippleComponent-cdbd958621a64170389eefdaf0747ff89ad89ee20a73a11fe1c7e8c049ee7091324bdf84b8c1bcd5a35d7181160d8625911fdc0b086d1beaa14940a54f7de0ee",
            "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/ripple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-ripple",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  "
            ],
            "template": "<span\n  class=\"ripple-wrapper\"\n  aria-hidden=\"true\"\n>\n  <span\n    *ngFor=\"let wave of waves\"\n    class=\"ripple-wave\"\n    [style.top.px]=\"wave.y\"\n    [style.left.px]=\"wave.x\"\n    [attr.data-id]=\"wave.pointerId\"\n  ></span>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "waves",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe collection of active ripple waves\n",
                    "description": "<p>The collection of active ripple waves</p>\n",
                    "line": 81,
                    "type": "RippleWave[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RippleWave } from '@services/ripple.service';\n\n@Component({\n  selector: 'tgui-ripple',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <span \n      class=\"ripple-wrapper\" \n      aria-hidden=\"true\"\n    >\n      <span \n        *ngFor=\"let wave of waves\" \n        class=\"ripple-wave\"\n        [style.top.px]=\"wave.y\"\n        [style.left.px]=\"wave.x\"\n        [attr.data-id]=\"wave.pointerId\"\n      ></span>\n    </span>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RippleComponent {\n  /**\n   * The collection of active ripple waves\n   */\n  @Input() waves: RippleWave[] = [];\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n    \n    .ripple-wrapper {\n      display: block;\n      overflow: hidden;\n      position: absolute;\n      inset: 0;\n      border-radius: inherit;\n      transition: background-color .15s ease-out;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    }\n\n    .ripple-wave {\n      content: '';\n      position: absolute;\n      height: 30px;\n      width: 30px;\n      margin: -15px 0;\n      border-radius: 50%;\n      background: var(--tgui--outline);\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\n      opacity: 0;\n    }\n\n    @keyframes waveRise {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      30% {\n        opacity: 1;\n      }\n\n      100% {\n        transform: scale(20);\n        opacity: 0;\n      }\n    }\n  \n",
            "extends": []
        },
        {
            "name": "RootComponent",
            "id": "component-RootComponent-5a92e05a94a8efd9b34e9cb4840f97c58aeed0687574ef3ed22ceb735efe87acaea782cc9f9de78fa00c2674f660055701de996067b792e85871c2674486be75",
            "file": "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-root",
            "styleUrls": [
                "./tgui-root.component.css"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApplication appearance, determined automatically if nothing passed",
                    "description": "<p>Application appearance, determined automatically if nothing passed</p>\n",
                    "line": 26,
                    "type": "AppearanceType",
                    "decorators": []
                },
                {
                    "name": "followSystemTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to follow system theme changes when appearance is set manually",
                    "description": "<p>Whether to follow system theme changes when appearance is set manually</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApplication platform, determined automatically if nothing passed",
                    "description": "<p>Application platform, determined automatically if nothing passed</p>\n",
                    "line": 23,
                    "type": "PlatformType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "inject(TGUI_CONFIG, { optional: true }) as { \n    platform?: PlatformType;\n    appearance?: AppearanceType;\n    followSystemTheme?: boolean;\n  } | null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "inject(DOCUMENT)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalContainerEl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "defaultValue": "inject(Renderer2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupPortalContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Root component for the TGUI library\nProvides theming, platform detection, and portal container functionality\nShould be used at the root of your application</p>\n",
            "rawdescription": "\n\nRoot component for the TGUI library\nProvides theming, platform detection, and portal container functionality\nShould be used at the root of your application\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, inject, InjectionToken, OnChanges, SimpleChanges, Renderer2, AfterViewInit } from '@angular/core';\n\nimport { DOCUMENT } from '@angular/common';\nimport { PortalService, PlatformService, ThemeService, PlatformType, AppearanceType  } from '../../../services';\n\n/**\n * Root component for the TGUI library\n * Provides theming, platform detection, and portal container functionality\n * Should be used at the root of your application\n */\n@Component({\n  selector: 'tgui-root',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./tgui-root.component.css'],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'tgui-root-wrapper'\n  }\n})\nexport class RootComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n  /** Application platform, determined automatically if nothing passed */\n  @Input() platform?: PlatformType;\n  \n  /** Application appearance, determined automatically if nothing passed */\n  @Input() appearance?: AppearanceType;\n\n  /** Whether to follow system theme changes when appearance is set manually */\n  @Input() followSystemTheme?: boolean = false;\n\n  // Внедрение зависимостей через inject\n  private platformService = inject(PlatformService);\n  private portalService = inject(PortalService);\n  private elementRef = inject(ElementRef<HTMLElement>);\n  private themeService = inject(ThemeService);\n  private renderer = inject(Renderer2);\n  private document = inject(DOCUMENT);\n  private config = inject(TGUI_CONFIG, { optional: true }) as { \n    platform?: PlatformType;\n    appearance?: AppearanceType;\n    followSystemTheme?: boolean;\n  } | null;\n\n  private portalContainerEl: HTMLDivElement | null = null;\n\n  ngOnInit(): void {\n    // Apply configuration from inputs or module config\n    const platformToUse = this.platform || this.config?.platform;\n    const appearanceToUse = this.appearance || this.config?.appearance;\n    const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\n    \n    // Initialize platform\n    if (platformToUse) {\n      this.platformService.setPlatform(platformToUse);\n    }\n    \n    // Load global CSS variables\n    this.themeService.loadGlobalStyles();\n    \n    // Initialize theme\n    this.themeService.setupTheme(appearanceToUse, followSystem);\n    \n  }\n  \n  ngAfterViewInit(): void {\n    // Wait for DOM to be ready before setting up portal container\n    setTimeout(() => {\n      this.setupPortalContainer();\n    }, 0);\n  }\n\n  private setupPortalContainer(): void {\n    \n    try {\n      // Create a dedicated div for portal content if it doesn't exist\n      if (!this.portalContainerEl) {\n        this.portalContainerEl = this.document.createElement('div');\n        this.portalContainerEl.className = 'tgui-portal-container';\n        this.renderer.appendChild(this.elementRef.nativeElement, this.portalContainerEl);\n      }\n      \n      // Create an ElementRef wrapping the portal container div\n      const portalElementRef = new ElementRef(this.portalContainerEl);\n      \n      // Register as portal container\n      this.portalService.setPortalContainer(portalElementRef);\n    } catch (e) {\n      console.error('Error setting up portal container:', e);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Отслеживаем изменения входных свойств\n    if (changes['appearance'] || changes['followSystemTheme']) {\n      const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\n      this.themeService.setupTheme(changes['appearance'].currentValue, followSystem);\n    }\n\n    if (changes['platform'] && !changes['platform'].firstChange) {\n      this.platformService.setPlatform(changes['platform'].currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    // Clean up portal container reference\n    this.portalService.clearPortalContainer();\n    \n    // Remove the portal container element if it exists\n    if (this.portalContainerEl && this.portalContainerEl.parentNode) {\n      this.portalContainerEl.parentNode.removeChild(this.portalContainerEl);\n    }\n    \n    console.log('TGUIRootComponent destroyed');\n  }\n}\n\n// Токен для инъекции конфигурации\nexport const TGUI_CONFIG = new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG');",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  font-family: var(--tgui--font-family, system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif);\n  color: var(--tgui--text_color);\n  -webkit-tap-highlight-color: transparent;\n  -webkit-text-size-adjust: 100%;\n  \n  /* Base font definitions */\n  --tgui--font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif;\n\n  --tgui--font_weight--accent1: 700;\n  --tgui--font_weight--accent2: 600;\n  --tgui--font_weight--accent3: 400;\n\n  --tgui--large_title--font_size: 34px;\n  --tgui--large_title--line_height: 42px;\n\n  --tgui--title1--font_size: 28px;\n  --tgui--title1--line_height: 36px;\n  --tgui--title2--font_size: 24px;\n  --tgui--title2--line_height: 32px;\n  --tgui--title3--font_size: 20px;\n  --tgui--title3--line_height: 24px;\n\n  --tgui--headline--font_size: 19px;\n  --tgui--headline--line_height: 28px;\n\n  --tgui--text--font_size: 17px;\n  --tgui--text--line_height: 26px;\n\n  --tgui--subheadline1--font_size: 16px;\n  --tgui--subheadline1--line_height: 24px;\n  --tgui--subheadline2--font_size: 15px;\n  --tgui--subheadline2--line_height: 22px;\n\n  --tgui--caption1--font_size: 13px;\n  --tgui--caption1--line_height: 20px;\n  --tgui--caption2--font_size: 11px;\n  --tgui--caption2--line_height: 16px;\n\n  --tgui--border--width: 1px;\n  --tgui--base--section--box_shadow: 0 1px 2px 0 rgba(0, 0, 0, .10);\n\n  /** Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #FFFFFF);\n  --tgui--text_color: var(--tg-theme-text-color, #000000);\n  --tgui--hint_color: var(--tg-theme-hint-color, #707579);\n  --tgui--link_color: var(--tg-theme-link-color, #007AFF);\n  --tgui--button_color: var(--tg-theme-button-color, #007AFF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #EFEFF4);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #FFFFFF);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #FFFFFF);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #707579);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #707579);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(0, 0, 0, .15);\n  --tgui--outline: rgba(0, 0, 0, .05);\n  --tgui--surface_primary: rgba(255, 255, 255, .95);\n  --tgui--tertiary_bg_color: #F4F4F7;\n  --tgui--quartenary_bg_color: #F6F6FA;\n  --tgui--segmented_control_active_bg: #FFFFFF;\n  --tgui--card_bg_color: #FFFFFF;\n  --tgui--secondary_hint_color: #A2ACB0;\n  --tgui--secondary_fill: rgba(67, 120, 255, .10);\n  --tgui--green: #31D158;\n  --tgui--destructive_background: #E53935;\n  --tgui--primary_code_highlight: #4378FF;\n  --tgui--secondary_code_highlight: #B00FB4;\n  --tgui--tertiary_code_highlight: #3A9F20;\n  --tgui--plain_background: rgba(0, 0, 0, .04);\n  --tgui--plain_foreground: rgba(0, 0, 0, .8);\n  --tgui--toast_accent_color: #55A6FF;\n  /* End of custom lib tokens */\n\n  /** Non-theme tokens */\n  --tgui--surface_dark: rgba(56, 56, 56, .85);\n  --tooltip_background_dark: rgba(0, 0, 0, .85);\n  --tgui--white: #FFFFFF;\n  --tgui--black: #000000;\n\n  --tgui--z-index--simple: 1;\n  --tgui--z-index--skeleton: 2;\n  --tgui--z-index--overlay: 3;\n}\n\n:host-context(.tgui-platform-ios) {\n  --tgui--large_title--line_height: 41px;\n  --tgui--title1--line_height: 34px;\n  --tgui--title2--line_height: 28px;\n  --tgui--title3--line_height: 25px;\n  --tgui--headline--line_height: 24px;\n  --tgui--text--line_height: 22px;\n  --tgui--subheadline1--line_height: 21px;\n  --tgui--subheadline2--line_height: 20px;\n  --tgui--caption1--line_height: 16px;\n  --tgui--caption2--line_height: 13px;\n}\n\n:host-context(.tgui-theme-dark) {\n  /* Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #212121);\n  --tgui--text_color: var(--tg-theme-text-color, #FFFFFF);\n  --tgui--hint_color: var(--tg-theme-hint-color, #AAAAAA);\n  --tgui--link_color: var(--tg-theme-link-color, #2990FF);\n  --tgui--button_color: var(--tg-theme-button-color, #2990FF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #0F0F0F);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #212121);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #212121);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #AAAAAA);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #AAAAAA);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(255, 255, 255, .05);\n  --tgui--outline: rgba(255, 255, 255, .10);\n  --tgui--surface_primary: rgba(23, 23, 23, .95);\n  --tgui--tertiary_bg_color: #2A2A2A;\n  --tgui--quartenary_bg_color: #2F2F2F;\n  --tgui--segmented_control_active_bg: #2F2F2F;\n  --tgui--card_bg_color: #242424;\n  --tgui--secondary_hint_color: #78797E;\n  --tgui--secondary_fill: rgba(41, 144, 255, .15);\n  --tgui--green: #32E55E;\n  --tgui--destructive_background: rgba(255, 35, 35, .02);\n  --tgui--primary_code_highlight: #2990FF;\n  --tgui--secondary_code_highlight: #E937ED;\n  --tgui--tertiary_code_highlight: #5AE536;\n  --tgui--plain_background: rgba(255, 255, 255, .08);\n  --tgui--plain_foreground: rgba(255, 255, 255, .95);\n  /* End of custom lib tokens */\n}\n\n@media (min-resolution: 2dppx) {\n  :host {\n    --tgui--border--width: .5px;\n  }\n}\n\n@supports (padding-top: constant(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: constant(safe-area-inset-bottom);\n  }\n}\n\n@supports (padding-top: env(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: env(safe-area-inset-bottom);\n  }\n}\n\n@supports (color: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent)) {\n  :host {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent);\n  }\n\n  :host-context(.tgui-theme-dark) {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 15%, transparent);\n  }\n} ",
                    "styleUrl": "./tgui-root.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges",
                "AfterViewInit"
            ]
        },
        {
            "name": "RootPortalComponent",
            "id": "component-RootPortalComponent-07a59bf06d5771ff8bb3e7dca777f882d9a8a918c8c7c1428d4b0ef0455a9f452e8ec0fd9a4847655b61fd24d81fad449f3f34f478e70ef069837a692f90db56",
            "file": "projects/tgui/src/lib/components/utils/portal/root-portal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-root-portal",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  "
            ],
            "template": "<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "portalService",
                    "defaultValue": "inject(PortalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component for rendering content in the portal container\nSimilar to RootRenderer in React version</p>\n",
            "rawdescription": "\n\nComponent for rendering content in the portal container\nSimilar to RootRenderer in React version\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, ViewChild, ViewContainerRef, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ViewEncapsulation, effect, inject, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { PortalService } from '../../../services';\n\n/**\n * Component for rendering content in the portal container\n * Similar to RootRenderer in React version\n */\n@Component({\n  selector: 'tgui-root-portal',\n  template: `\n    <ng-template #contentTemplate>\n      <ng-content></ng-content>\n    </ng-template>\n  `,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [`\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  `],\n})\nexport class RootPortalComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('contentTemplate', {static: true}) contentTemplate!: TemplateRef<any>;\n  \n  private destroy$ = new Subject<void>();\n  private viewRef: any = null;\n  private templateReady = false;\n  \n  private portalService = inject(PortalService);\n  private viewContainerRef = inject(ViewContainerRef);\n  private cdr = inject(ChangeDetectorRef);\n  \n  constructor() {\n    // Use effect to react to portal container changes\n    effect(() => {\n      const container = this.portalService.portalContainer();\n      \n      if (!this.templateReady || !this.contentTemplate) {\n        return;\n      }\n      \n      \n      // Clear previous view if it exists\n      if (this.viewRef) {\n        try {\n          this.viewContainerRef.remove(\n            this.viewContainerRef.indexOf(this.viewRef)\n          );\n        } catch (e) {\n          console.error('Error removing portal view:', e);\n        }\n        this.viewRef = null;\n      }\n      \n      if (container && container.nativeElement) {\n        \n        try {\n          // Create and insert view\n          this.viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate);\n          this.cdr.detectChanges();\n          \n          // Move nodes to portal container\n          this.viewRef.rootNodes.forEach((node: Node) => {\n            // Apply font-family to top-level nodes if they're HTML elements\n            if (node instanceof HTMLElement) {\n              node.style.fontFamily = 'var(--tgui--font-family)';\n            }\n            container.nativeElement.appendChild(node);\n          });\n          \n        } catch (e) {\n          console.error('Error creating portal view:', e);\n        }\n      } else {\n        console.warn('No portal container available');\n      }\n    });\n  }\n  \n  ngAfterViewInit(): void {\n    \n    // Force immediate check to ensure template detection\n    this.cdr.detectChanges();\n    \n    // Mark template as ready to use in the effect\n    this.templateReady = true;\n    \n    // Force the effect to run again now that template is ready\n    setTimeout(() => {\n      const container = this.portalService.portalContainer();\n      // Even if container is the same object, this change\n      // will trigger the effect to run again\n      if (container) {\n        this.portalService.clearPortalContainer();\n        setTimeout(() => {\n          this.portalService.setPortalContainer(container);\n        }, 0);\n      }\n    }, 0);\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    // Clean up view\n    if (this.viewRef) {\n      try {\n        this.viewContainerRef.remove(\n          this.viewContainerRef.indexOf(this.viewRef)\n        );\n      } catch (e) {\n        console.error('Error cleaning up portal view:', e);\n      }\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      font-family: var(--tgui--font-family);\n    }\n    \n    :host::ng-deep * {\n      font-family: var(--tgui--font-family);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SectionComponent",
            "id": "component-SectionComponent-916550260d46a37355c067ff30a297e0fa384b5ff35b74bb11b8e75a0708ef2d5f711b710b6d91dd7c8a3f05662ead9e520294dff02738578fe29553a1dbe3ef",
            "file": "projects/tgui/src/lib/components/blocks/section/section.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    .tgui-platform-base .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  "
            ],
            "template": "<section class=\"tgui-section\">\n  <div class=\"tgui-section-body-with-header\">\n    <!-- Header with wrapper -->\n    <ng-container *ngIf=\"headerContent || headerTemplate\">\n      <tgui-section-header *ngIf=\"headerContent && isPrimitiveContent(headerContent)\">\n        {{headerContent}}\n      </tgui-section-header>\n      <ng-container *ngIf=\"headerTemplate\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- Custom header content projection -->\n    <ng-content select=\"tgui-section-header\"></ng-content>\n\n    <!-- Body content -->\n    <div class=\"tgui-section-body\">\n      <ng-container *ngFor=\"let content of contentProjections; let last = last; let i = index\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        <tgui-divider *ngIf=\"!last\" class=\"tgui-section-divider\"></tgui-divider>\n      </ng-container>\n\n      <!-- Default content projection -->\n      <ng-content></ng-content>\n    </div>\n  </div>\n\n  <!-- Footer with wrapper -->\n  <ng-container *ngIf=\"footerContent || footerTemplate\">\n    <tgui-section-footer *ngIf=\"footerContent && isPrimitiveContent(footerContent)\">\n      {{footerContent}}\n    </tgui-section-footer>\n    <ng-container *ngIf=\"footerTemplate\">\n      <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n\n  <!-- Custom footer content projection -->\n  <ng-content select=\"tgui-section-footer\"></ng-content>\n</section>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContent for the section footer. If a string is passed, SectionFooter is automatically used.\nFor centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.\n",
                    "description": "<p>Content for the section footer. If a string is passed, SectionFooter is automatically used.\nFor centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.</p>\n",
                    "line": 128,
                    "type": "string | number | TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nContent for the section header. If a string is passed, SectionHeader is automatically used.\nFor more control or a large header, use <tgui-section-header large>...</tgui-section-header>.\n",
                    "description": "<p>Content for the section header. If a string is passed, SectionHeader is automatically used.\nFor more control or a large header, use <tgui-section-header large>...</tgui-section-header>.</p>\n",
                    "line": 122,
                    "type": "string | number | TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateRef<any>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "contentProjections",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "footerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'footerContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 131,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'headerContent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isPrimitive",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the value is a primitive (string or number)\n",
                    "description": "<p>Checks if the value is a primitive (string or number)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPrimitiveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the content is a primitive\n",
                    "description": "<p>Checks if the content is a primitive</p>\n",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "DividerComponent",
                    "type": "component"
                },
                {
                    "name": "SectionHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "SectionFooterComponent",
                    "type": "component"
                }
            ],
            "description": "<p>The Section component organizes content into separate sections with optional\nheaders and footers. It automatically wraps strings and numbers in appropriate\nSectionHeader and SectionFooter components, and inserts dividers between\nchild elements.</p>\n",
            "rawdescription": "\n\nThe Section component organizes content into separate sections with optional\nheaders and footers. It automatically wraps strings and numbers in appropriate\nSectionHeader and SectionFooter components, and inserts dividers between\nchild elements.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  ContentChild,\n  TemplateRef,\n  ViewChild,\n  ElementRef,\n  inject,\n  AfterContentInit,\n  ContentChildren,\n  QueryList\n} from '@angular/core';\nimport { CommonModule, NgClass, NgTemplateOutlet } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\nimport { DividerComponent } from '@misc/divider/divider.component';\nimport { SectionHeaderComponent } from './components/section-header/section-header.component';\nimport { SectionFooterComponent } from './components/section-footer/section-footer.component';\n\n/**\n * The Section component organizes content into separate sections with optional\n * headers and footers. It automatically wraps strings and numbers in appropriate\n * SectionHeader and SectionFooter components, and inserts dividers between\n * child elements.\n */\n@Component({\n  selector: 'tgui-section',\n  standalone: true,\n  imports: [CommonModule, NgTemplateOutlet, DividerComponent, SectionHeaderComponent, SectionFooterComponent],\n  template: `\n    <section class=\"tgui-section\">\n      <div class=\"tgui-section-body-with-header\">\n        <!-- Header with wrapper -->\n        <ng-container *ngIf=\"headerContent || headerTemplate\">\n          <tgui-section-header *ngIf=\"headerContent && isPrimitiveContent(headerContent)\">\n            {{headerContent}}\n          </tgui-section-header>\n          <ng-container *ngIf=\"headerTemplate\">\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n\n        <!-- Custom header content projection -->\n        <ng-content select=\"tgui-section-header\"></ng-content>\n\n        <!-- Body content -->\n        <div class=\"tgui-section-body\">\n          <ng-container *ngFor=\"let content of contentProjections; let last = last; let i = index\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n            <tgui-divider *ngIf=\"!last\" class=\"tgui-section-divider\"></tgui-divider>\n          </ng-container>\n          \n          <!-- Default content projection -->\n          <ng-content></ng-content>\n        </div>\n      </div>\n\n      <!-- Footer with wrapper -->\n      <ng-container *ngIf=\"footerContent || footerTemplate\">\n        <tgui-section-footer *ngIf=\"footerContent && isPrimitiveContent(footerContent)\">\n          {{footerContent}}\n        </tgui-section-footer>\n        <ng-container *ngIf=\"footerTemplate\">\n          <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </ng-container>\n      </ng-container>\n\n      <!-- Custom footer content projection -->\n      <ng-content select=\"tgui-section-footer\"></ng-content>\n    </section>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    .tgui-platform-base .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'attr.data-refresh-platform': 'true'\n  }\n})\nexport class SectionComponent implements AfterContentInit {\n  /**\n   * Content for the section header. If a string is passed, SectionHeader is automatically used.\n   * For more control or a large header, use <tgui-section-header large>...</tgui-section-header>.\n   */\n  @Input() header?: string | number | TemplateRef<any>;\n\n  /**\n   * Content for the section footer. If a string is passed, SectionFooter is automatically used.\n   * For centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.\n   */\n  @Input() footer?: string | number | TemplateRef<any>;\n\n  // Шаблоны из проекции содержимого\n  @ContentChild('headerContent') headerTemplate?: TemplateRef<any>;\n  @ContentChild('footerContent') footerTemplate?: TemplateRef<any>;\n\n  // Для хранения контента между элементами\n  @ContentChildren(TemplateRef) contentNodes!: QueryList<TemplateRef<any>>;\n  contentProjections: TemplateRef<any>[] = [];\n\n  // Получаем контент для header и footer\n  get headerContent(): string | number | null {\n    return this.isPrimitive(this.header) ? this.header as string | number : null;\n  }\n\n  get footerContent(): string | number | null {\n    return this.isPrimitive(this.footer) ? this.footer as string | number : null;\n  }\n\n  ngAfterContentInit(): void {\n    // Получаем все проекции шаблонов между разделителями\n    if (this.contentNodes) {\n      this.contentProjections = this.contentNodes.toArray();\n    }\n  }\n\n  /**\n   * Checks if the value is a primitive (string or number)\n   */\n  isPrimitive(value: any): boolean {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  /**\n   * Checks if the content is a primitive\n   */\n  isPrimitiveContent(content: any): boolean {\n    return this.isPrimitive(content);\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n      margin-bottom: 16px;\n    }\n\n    .tgui-section {\n      display: block;\n      width: 100%;\n    }\n\n    /* Platform specific styles */\n    .tgui-platform-base .tgui-section-body-with-header {\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body {\n      border-radius: 12px;\n      background: var(--tgui--section_bg_color);\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\n      border-radius: 12px 12px 0 0;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\n      border-radius: 0 0 12px 12px;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\n      border-radius: 12px;\n    }\n\n    .tgui-section-divider {\n      display: block;\n      width: 100%;\n    }\n  \n",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "headerContent": {
                    "name": "headerContent",
                    "getSignature": {
                        "name": "headerContent",
                        "type": "",
                        "returnType": "string | number | null",
                        "line": 139
                    }
                },
                "footerContent": {
                    "name": "footerContent",
                    "getSignature": {
                        "name": "footerContent",
                        "type": "",
                        "returnType": "string | number | null",
                        "line": 143
                    }
                }
            }
        },
        {
            "name": "SectionFooterComponent",
            "id": "component-SectionFooterComponent-b6807e9f2623dbe6de58db6008722ee48f1ce2a2b85e267c3aeac9137797c12da45c9ee7d26abd16d11eca69f93e6e36c71f397c02778d8375a4f31991bfddce",
            "file": "projects/tgui/src/lib/components/blocks/section/components/section-footer/section-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section-footer",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\n      padding: 8px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  "
            ],
            "template": "<footer class=\"tgui-section-footer\" [ngClass]=\"footerClasses\">\n  <ng-container *ngIf=\"_isPlatformIOS; else baseFooter\">\n    <tgui-caption class=\"tgui-section-footer-text\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </tgui-caption>\n  </ng-container>\n  <ng-template #baseFooter>\n    <tgui-subheadline level=\"2\" class=\"tgui-section-footer-text\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </tgui-subheadline>\n  </ng-template>\n</footer>\n<ng-template #contentTpl>\n  <ng-content></ng-content>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "centered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText centering, adding additional padding",
                    "description": "<p>Text centering, adding additional padding</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_isPlatformIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformSignal",
                    "defaultValue": "this.platformService.platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                },
                {
                    "name": "SubheadlineComponent",
                    "type": "component"
                }
            ],
            "description": "<p>The SectionFooter component represents a footer for the Section component.\nSupports centered mode for centered text.</p>\n",
            "rawdescription": "\n\nThe SectionFooter component represents a footer for the Section component.\nSupports centered mode for centered text.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  inject,\n  effect\n} from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\n// import { PlatformService } from '@services/platform.service';\nimport { CaptionComponent } from '@typography/caption/caption.component';\nimport { SubheadlineComponent } from '@typography/subheadline/subheadline.component';\nimport { PlatformService } from '@services/platform.service';\n/**\n * The SectionFooter component represents a footer for the Section component.\n * Supports centered mode for centered text.\n */\n@Component({\n  selector: 'tgui-section-footer',\n  standalone: true,\n  imports: [CommonModule, NgClass, CaptionComponent, SubheadlineComponent],\n  template: `\n    <footer class=\"tgui-section-footer\" [ngClass]=\"footerClasses\">\n      <ng-container *ngIf=\"_isPlatformIOS; else baseFooter\">\n        <tgui-caption class=\"tgui-section-footer-text\">\n        <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n        </tgui-caption>\n      </ng-container>\n      <ng-template #baseFooter>\n        <tgui-subheadline level=\"2\" class=\"tgui-section-footer-text\">\n        <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n        </tgui-subheadline>\n      </ng-template>\n    </footer>\n    <ng-template #contentTpl>\n      <ng-content></ng-content>\n    </ng-template>\n  `,\n  styles: [`\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\n      padding: 8px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SectionFooterComponent {\n  /** Text centering, adding additional padding */\n  @Input() centered = false;\n\n  private platformService = inject(PlatformService);\n  private platformSignal = this.platformService.platform;\n  public _isPlatformIOS: boolean = false\n  constructor() {\n    effect(() => {\n      const platform = this.platformSignal()\n      this._isPlatformIOS = platform === 'ios';\n    });\n  }\n\n  get footerClasses(): Record<string, boolean> {\n    return {\n      'tgui-section-footer--centered': this.centered\n    };\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-section-footer {\n      padding: 12px 24px;\n    }\n\n    .tgui-section-footer--centered {\n      padding: 16px 24px 20px;\n      text-align: center;\n    }\n\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\n      padding: 16px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\n      padding: 8px 16px 0;\n    }\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\n      color: var(--tgui--section_header_text_color);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 68
            },
            "extends": [],
            "accessors": {
                "footerClasses": {
                    "name": "footerClasses",
                    "getSignature": {
                        "name": "footerClasses",
                        "type": "",
                        "returnType": "Record<string, boolean>",
                        "line": 76
                    }
                }
            }
        },
        {
            "name": "SectionHeaderComponent",
            "id": "component-SectionHeaderComponent-a792b6a608fe8c7ae2a87cabb77ec4de462793ee435c21d8074a40629619d17cae9c23cc172d0791cd6529c84c9a56461056afc1f695f61d75190f87e6bb8bcb",
            "file": "projects/tgui/src/lib/components/blocks/section/components/section-header/section-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-section-header",
            "styleUrls": [],
            "styles": [
                "\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-platform-ios .tgui-section-header {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  "
            ],
            "template": "<header class=\"tgui-section-header\" [ngClass]=\"headerClasses\">\n  <ng-container *ngIf=\"large; else defaultHeader\">\n    <tgui-large-title>\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </tgui-large-title>\n  </ng-container>\n  <ng-template #defaultHeader>\n    <tgui-headline>\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </tgui-headline>\n  </ng-template>\n</header>\n<ng-template #contentTpl>\n  <ng-content></ng-content>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "large",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEnlarged header, changes font size, padding and color",
                    "description": "<p>Enlarged header, changes font size, padding and color</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "HeadlineComponent",
                    "type": "component"
                },
                {
                    "name": "LargeTitleComponent",
                    "type": "component"
                }
            ],
            "description": "<p>The SectionHeader component represents a header for the Section component.\nSupports large mode for an enlarged header.</p>\n",
            "rawdescription": "\n\nThe SectionHeader component represents a header for the Section component.\nSupports large mode for an enlarged header.\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ViewEncapsulation, \n  ChangeDetectionStrategy, \n  Input, \n  HostBinding,\n  inject,\n  effect\n} from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\nimport { PlatformService } from '@services/platform.service';\nimport { HeadlineComponent } from '@typography/headline/headline.component';\nimport { LargeTitleComponent } from '@typography/large-title/large-title.component';\n\n/**\n * The SectionHeader component represents a header for the Section component.\n * Supports large mode for an enlarged header.\n */\n@Component({\n  selector: 'tgui-section-header',\n  standalone: true,\n  imports: [CommonModule, NgClass, HeadlineComponent, LargeTitleComponent],\n  template: `\n    <header class=\"tgui-section-header\" [ngClass]=\"headerClasses\">\n      <ng-container *ngIf=\"large; else defaultHeader\">\n        <tgui-large-title>\n        <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n        </tgui-large-title>\n      </ng-container>\n      <ng-template #defaultHeader>\n        <tgui-headline>\n        <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n        </tgui-headline>\n      </ng-template>\n    </header>\n    <ng-template #contentTpl>\n      <ng-content></ng-content>\n    </ng-template>\n  `,\n  styles: [`\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-platform-ios .tgui-section-header {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SectionHeaderComponent {\n  /** Enlarged header, changes font size, padding and color */\n  @Input() large = false;\n\n\n  get headerClasses(): Record<string, boolean> {\n    return {\n      'tgui-section-header--large': this.large\n    };\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tgui-section-header {\n      padding: 20px 24px 4px 22px;\n      color: var(--tgui--link_color);\n    }\n\n    .tgui-section-header--large {\n      padding-left: 24px;\n      color: var(--tgui--text_color);\n    }\n\n    .tgui-platform-ios .tgui-section-header {\n      padding: 16px 16px 8px 16px;\n      color: var(--tgui--section_header_text_color);\n    }\n\n    .tgui-section-header--ios.tgui-section-header--large {\n      padding: 0 0 12px;\n      color: var(--tgui--text_color);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "headerClasses": {
                    "name": "headerClasses",
                    "getSignature": {
                        "name": "headerClasses",
                        "type": "",
                        "returnType": "Record<string, boolean>",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "SnackbarButtonComponent",
            "id": "component-SnackbarButtonComponent-709c118d903d84055021833427966a823174e2c3dc5d584103221a92fba9026a0806ff6cc75f7c7a914fd98d9de422551c96e387b1da3d62aee334ba9d40dfa2",
            "file": "projects/tgui/src/lib/components/feedback/snackbar/components/snackbar-button/snackbar-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-snackbar-button",
            "styleUrls": [
                "./snackbar-button.component.css"
            ],
            "styles": [],
            "template": "<tgui-tappable>\n  <ng-content></ng-content>\n</tgui-tappable>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TappableComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TappableComponent } from '../../../../utils/tappable/tappable.component';\n\n@Component({\n  selector: 'tgui-snackbar-button',\n  standalone: true,\n  imports: [CommonModule, TappableComponent],\n  template: `\n    <tgui-tappable>\n      <ng-content></ng-content>\n    </tgui-tappable>\n  `,\n  styleUrls: ['./snackbar-button.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SnackbarButtonComponent {} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n:host ::ng-deep tgui-tappable {\n  border: none;\n  padding: 0;\n  color: var(--tgui--toast_accent_color);\n  background: transparent;\n} ",
                    "styleUrl": "./snackbar-button.component.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SnackbarComponent",
            "id": "component-SnackbarComponent-5f31d46efd5ebac065797d72d4424f7a1d1f7d5e6c03749f8f98035efceaed546744dd33dbd75f8a558c63c5b5cc82d3c537fe262496c1bd3cff3bee37e47c08",
            "file": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-snackbar",
            "styleUrls": [
                "./snackbar.component.css"
            ],
            "styles": [],
            "template": "<tgui-root-portal>\n  <div\n    class=\"tgui-snackbar-wrapper\"\n    [class.tgui-snackbar-wrapper--ios]=\"isIOS()\"\n    [class.tgui-snackbar-wrapper--closing]=\"closing()\">\n    <div class=\"tgui-snackbar-body\">\n      <div *ngIf=\"beforeTemplate\" class=\"tgui-snackbar-before\">\n        <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n      </div>\n      <div class=\"tgui-snackbar-middle\">\n        <tgui-caption weight=\"2\" *ngIf=\"hasMainContent\">\n          <ng-content></ng-content>\n        </tgui-caption>\n        <tgui-caption *ngIf=\"description\">\n            {{ description }}\n        </tgui-caption>\n        <tgui-caption *ngIf=\"linkTemplate\">\n          <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </tgui-caption>\n      </div>\n      <div *ngIf=\"afterTemplate\" class=\"tgui-snackbar-after\">\n        <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n      </div>\n    </div>\n  </div>\n</tgui-root-portal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "duration",
                    "defaultValue": "4000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "afterTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'after'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "beforeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'before'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "closeTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closing",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "hasMainContent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "isIOS",
                    "defaultValue": "this.platformService.isIOS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "linkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'link'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TRANSITION_FINISH_DURATION",
                    "defaultValue": "320",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startCloseTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RootPortalComponent",
                    "type": "component"
                },
                {
                    "name": "CaptionComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, signal, OnInit, OnDestroy, inject, ChangeDetectionStrategy, TemplateRef, ContentChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RootPortalComponent } from '../../utils/portal/root-portal.component';\nimport { CaptionComponent } from '../../typography/caption/caption.component';\nimport { PlatformService } from '../../../services';\n\n@Component({\n  selector: 'tgui-snackbar',\n  standalone: true,\n  imports: [CommonModule, RootPortalComponent, CaptionComponent],\n  template: `\n    <tgui-root-portal>\n      <div \n        class=\"tgui-snackbar-wrapper\"\n        [class.tgui-snackbar-wrapper--ios]=\"isIOS()\"\n        [class.tgui-snackbar-wrapper--closing]=\"closing()\">\n        <div class=\"tgui-snackbar-body\">\n          <div *ngIf=\"beforeTemplate\" class=\"tgui-snackbar-before\">\n            <ng-container *ngTemplateOutlet=\"beforeTemplate\"></ng-container>\n          </div>\n          <div class=\"tgui-snackbar-middle\">\n            <tgui-caption weight=\"2\" *ngIf=\"hasMainContent\">\n              <ng-content></ng-content>\n            </tgui-caption>\n            <tgui-caption *ngIf=\"description\">\n                {{ description }}\n            </tgui-caption>\n            <tgui-caption *ngIf=\"linkTemplate\">\n              <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n            </tgui-caption>\n          </div>\n          <div *ngIf=\"afterTemplate\" class=\"tgui-snackbar-after\">\n            <ng-container *ngTemplateOutlet=\"afterTemplate\"></ng-container>\n          </div>\n        </div>\n      </div>\n    </tgui-root-portal>\n  `,\n  styleUrls: ['./snackbar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SnackbarComponent implements OnInit, OnDestroy {\n\n  @ContentChild('before') beforeTemplate?: TemplateRef<any>;\n  @ContentChild('after') afterTemplate?: TemplateRef<any>;\n  @ContentChild('link') linkTemplate?: TemplateRef<any>;\n\n  @Input() description?: string;\n  @Input() duration = 4000;\n  @Input() onClose!: () => void;\n  \n  private readonly TRANSITION_FINISH_DURATION = 320;\n  private closeTimeout?: any;\n  \n  closing = signal(false);\n  hasMainContent = true;\n  \n  private platformService = inject(PlatformService);\n  \n  isIOS = this.platformService.isIOS;\n  \n  ngOnInit(): void {\n    console.log('ngOnInit',this.beforeTemplate, this.afterTemplate, this.description, this.linkTemplate);\n    this.startCloseTimer();\n  }\n  \n  startCloseTimer(): void {\n    if (this.duration > 0) {\n      this.closeTimeout = setTimeout(() => {\n        this.close();\n      }, this.duration);\n    }\n  }\n  \n  close(): void {\n    this.closing.set(true);\n    setTimeout(() => {\n      if (this.onClose) {\n        this.onClose();\n      }\n    }, this.TRANSITION_FINISH_DURATION);\n  }\n  \n  ngOnDestroy(): void {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: contents;\n}\n\n.tgui-snackbar-wrapper {\n  position: fixed;\n  user-select: none;\n  left: 10px;\n  right: 10px;\n  bottom: 10px;\n  box-sizing: border-box;\n  max-inline-size: 460px;\n  animation: verticalIntro 340ms cubic-bezier(.3, .3, .5, 1);\n  transition: transform 320ms cubic-bezier(.3, .3, .5, 1);\n  z-index: 9999;\n  margin: 0 auto;\n}\n\n.tgui-snackbar-wrapper--closing {\n  transform: translate3d(0, 140%, 0);\n}\n\n.tgui-snackbar-wrapper--ios {\n  bottom: 16px;\n}\n\n.tgui-snackbar-wrapper--ios .tgui-snackbar-body {\n  border-radius: 14px;\n}\n\n.tgui-snackbar-body {\n  position: sticky;\n  inset: 0;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 10px 16px 10px 10px;\n  border-radius: 10px;\n  -webkit-backdrop-filter: blur(28px);\n  backdrop-filter: blur(28px);\n  background: var(--tgui--surface_dark);\n}\n\n.tgui-snackbar-before,\n.tgui-snackbar-after {\n  display: flex;\n  align-items: center;\n  color: var(--tgui--toast_accent_color);\n}\n\n.tgui-snackbar-middle {\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n  gap: 1px;\n  color: var(--tgui--white);\n}\n\n@keyframes verticalIntro {\n  from {\n    transform: translate3d(0, 140%, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n} ",
                    "styleUrl": "./snackbar.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-05a2fed82ee8440a566b4a38e62cbdec4a710f03ba265f3ca96183159ebdfedee9091677cafb8b5715a16fb94bdc061585d4c69eb8870a5154b4b7a5cbf2d2f5",
            "file": "projects/tgui/src/lib/components/feedback/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-spinner",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isIOS; else baseSpinner\">\n  <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n    <path\n      d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n</ng-container>\n<ng-template #baseSpinner>\n  <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n    <circle\n      class=\"spinner-path\"\n      cx=\"25\"\n      cy=\"25\"\n      r=\"20\"\n      fill=\"none\"\n      stroke-width=\"4\"\n    />\n  </svg>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the loading indicator ('s' - small, 'm' - medium, 'l' - large)\n",
                    "description": "<p>Size of the loading indicator (&#39;s&#39; - small, &#39;m&#39; - medium, &#39;l&#39; - large)</p>\n",
                    "line": 99,
                    "type": "\"s\" | \"m\" | \"l\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag indicating whether the current platform is iOS</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nFlag indicating whether the current platform is iOS\n"
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.size-l",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-m",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.size-s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Spinner component displays a loading indicator.\nAutomatically selects the appropriate indicator style based on the platform.</p>\n",
            "rawdescription": "\n\nSpinner component displays a loading indicator.\nAutomatically selects the appropriate indicator style based on the platform.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlatformService } from '../../../services';\n\n/**\n * Spinner component displays a loading indicator.\n * Automatically selects the appropriate indicator style based on the platform.\n */\n@Component({\n  selector: 'tgui-spinner',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <ng-container *ngIf=\"isIOS; else baseSpinner\">\n      <svg class=\"spinner-ios\" viewBox=\"0 0 1024 1024\" width=\"100%\" height=\"100%\">\n        <path \n          d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </ng-container>\n    <ng-template #baseSpinner>\n      <svg class=\"spinner-circle\" viewBox=\"0 0 50 50\" width=\"100%\" height=\"100%\">\n        <circle\n          class=\"spinner-path\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          stroke-width=\"4\"\n        />\n      </svg>\n    </ng-template>\n  `,\n  styles: [`\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpinnerComponent implements OnInit {\n  /**\n   * Size of the loading indicator ('s' - small, 'm' - medium, 'l' - large)\n   */\n  @Input() size: 's' | 'm' | 'l' = 'm';\n  \n  /**\n   * Flag indicating whether the current platform is iOS\n   */\n  isIOS = false;\n\n  private platformService = inject(PlatformService);\n\n  @HostBinding('class.size-s') get isSizeS() { return this.size === 's'; }\n  @HostBinding('class.size-m') get isSizeM() { return this.size === 'm'; }\n  @HostBinding('class.size-l') get isSizeL() { return this.size === 'l'; }\n  @HostBinding('attr.role') role = 'status';\n\n  ngOnInit(): void {\n    // Get current platform from service\n    this.isIOS = this.platformService.isIOS();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      color: inherit;\n    }\n\n    .spinner-circle {\n      animation: spinner-rotate 1.4s linear infinite;\n    }\n\n    .spinner-path {\n      stroke: currentColor;\n      stroke-linecap: round;\n      animation: spinner-dash 1.4s ease-in-out infinite;\n    }\n\n    :host.size-s {\n      width: 20px;\n      height: 20px;\n    }\n\n    :host.size-m {\n      width: 28px;\n      height: 28px;\n    }\n\n    :host.size-l {\n      width: 36px;\n      height: 36px;\n    }\n\n    .tgui-platform-ios :host .spinner-ios {\n      animation: spinner-rotate 1s linear infinite;\n    }\n\n    @keyframes spinner-rotate {\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes spinner-dash {\n      0% {\n        stroke-dasharray: 1, 150;\n        stroke-dashoffset: 0;\n      }\n      50% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -35;\n      }\n      100% {\n        stroke-dasharray: 90, 150;\n        stroke-dashoffset: -124;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSizeS": {
                    "name": "isSizeS",
                    "getSignature": {
                        "name": "isSizeS",
                        "type": "",
                        "returnType": "",
                        "line": 108
                    }
                },
                "isSizeM": {
                    "name": "isSizeM",
                    "getSignature": {
                        "name": "isSizeM",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "isSizeL": {
                    "name": "isSizeL",
                    "getSignature": {
                        "name": "isSizeL",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                }
            }
        },
        {
            "name": "SubheadlineComponent",
            "id": "component-SubheadlineComponent-662d6ce9146f5e02190559ce4ad0ef458f08effd5a611288720223a7279fd4beb55e99c8fc1655aa52b41ca8573a756c6a62d844115e01eb1aa91ed786bce867",
            "file": "projects/tgui/src/lib/components/typography/subheadline/subheadline.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-subheadline",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the size of the subheadline, with `1` being the default and '2' providing a smaller option.\n",
                    "description": "<p>Determines the size of the subheadline, with <code>1</code> being the default and &#39;2&#39; providing a smaller option.</p>\n",
                    "line": 53,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "defaultValue": "'h6'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Subheadline component is designed to render text that serves as a secondary heading\nor subheading within content. It leverages the Typography component for consistent text styling,\noffering additional control over the text&#39;s size through the <code>level</code> prop. By default, it renders\nas an <code>&lt;h6&gt;</code> element but can be customized with the <code>tag</code> property.</p>\n",
            "rawdescription": "\n\nThe Subheadline component is designed to render text that serves as a secondary heading\nor subheading within content. It leverages the Typography component for consistent text styling,\noffering additional control over the text's size through the `level` prop. By default, it renders\nas an `<h6>` element but can be customized with the `tag` property.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Subheadline component is designed to render text that serves as a secondary heading\n * or subheading within content. It leverages the Typography component for consistent text styling,\n * offering additional control over the text's size through the `level` prop. By default, it renders\n * as an `<h6>` element but can be customized with the `tag` property.\n */\n@Component({\n  selector: 'tgui-subheadline',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SubheadlineComponent extends TypographyComponent {\n  /**\n   * Determines the size of the subheadline, with `1` being the default and '2' providing a smaller option.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override tag to use h6 by default\n  @Input() override tag = 'h6';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--subheadline1--font_size);\n      line-height: var(--tgui--subheadline1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--subheadline2--font_size);\n      line-height: var(--tgui--subheadline2--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                }
            }
        },
        {
            "name": "TappableComponent",
            "id": "component-TappableComponent-49260d7f44ca1a4aea1a73707ef5a4b0eb78e2a0cb03282e0bcb726adabf34128166a147b8367f5a1f2a8538f47c09fc7ab6e09da763c2158677fc5ed38d8819",
            "file": "projects/tgui/src/lib/components/utils/tappable/tappable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-tappable",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  "
            ],
            "template": "<tgui-ripple *ngIf=\"hasRippleEffect\" [waves]=\"rippleWaves()\"></tgui-ripple>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nОтключить компонент",
                    "description": "<p>Отключить компонент</p>\n",
                    "line": 83,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "interactiveAnimation",
                    "defaultValue": "'background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nТип анимации для кликов",
                    "description": "<p>Тип анимации для кликов</p>\n",
                    "line": 70,
                    "type": "\"opacity\" | \"background\"",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nСделать компонент только для чтения",
                    "description": "<p>Сделать компонент только для чтения</p>\n",
                    "line": 73,
                    "type": "boolean | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_hasRippleEffect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Приватное кешированное значение ripple эффекта</p>\n",
                    "line": 96,
                    "rawdescription": "\nПриватное кешированное значение ripple эффекта",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isIOS",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformService",
                    "defaultValue": "inject(PlatformService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformSignal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rippleService",
                    "defaultValue": "inject(RippleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Подключения сервисов</p>\n",
                    "line": 99,
                    "rawdescription": "\nПодключения сервисов",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rippleWaves",
                    "defaultValue": "signal<RippleWave[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Волны ripple эффекта</p>\n",
                    "line": 93,
                    "rawdescription": "\nВолны ripple эффекта"
                }
            ],
            "methodsClass": [
                {
                    "name": "isReadOnly",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПроверка на readonly состояние\n",
                    "description": "<p>Проверка на readonly состояние</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPointerCancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointercancel/pointerup/pointerleave\n",
                    "description": "<p>Обработчик pointercancel/pointerup/pointerleave</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointercancel', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerup', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170,
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPointerDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointerdown\n",
                    "description": "<p>Обработчик pointerdown</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'pointerdown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateHasRippleEffect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 194,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 189,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 178,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nБиндим классы",
                    "description": "<p>Биндим классы</p>\n",
                    "line": 173,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.tappable--opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 184,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "pointercancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointercancel/pointerup/pointerleave\n",
                    "description": "<p>Обработчик pointercancel/pointerup/pointerleave</p>\n",
                    "line": 153
                },
                {
                    "name": "pointerdown",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointerdown\n",
                    "description": "<p>Обработчик pointerdown</p>\n",
                    "line": 141
                },
                {
                    "name": "pointerleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointercancel/pointerup/pointerleave\n",
                    "description": "<p>Обработчик pointercancel/pointerup/pointerleave</p>\n",
                    "line": 153
                },
                {
                    "name": "pointerup",
                    "args": [
                        {
                            "name": "event",
                            "type": "PointerEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбработчик pointercancel/pointerup/pointerleave\n",
                    "description": "<p>Обработчик pointercancel/pointerup/pointerleave</p>\n",
                    "line": 153
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RippleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  signal,\n  inject,\n  effect,\n  Signal\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlatformService, RippleService, RippleWave } from '../../../services';\nimport { RippleComponent } from './components/ripple/ripple.component';\n\n@Component({\n  selector: 'tgui-tappable',\n  standalone: true,\n  imports: [CommonModule, RippleComponent],\n  template: `\n    <tgui-ripple *ngIf=\"hasRippleEffect\" [waves]=\"rippleWaves()\"></tgui-ripple>\n    <ng-content></ng-content>\n  `,\n  styles: [`\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TappableComponent implements OnInit, OnChanges {\n  /** Тип анимации для кликов */\n  @Input() interactiveAnimation: 'opacity' | 'background' = 'background';\n  \n  /** Сделать компонент только для чтения */\n  @Input() set readonly(value: boolean | string) {\n    this._readonly = value;\n    this.updateHasRippleEffect();\n  }\n  get readonly(): boolean | string {\n    return this._readonly;\n  }\n  private _readonly: boolean | string = false;\n  \n  /** Отключить компонент */\n  @Input() set disabled(value: boolean | string) {\n    this._disabled = value;\n    this.updateHasRippleEffect();\n  }\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  private _disabled: boolean | string = false;\n\n  /** Волны ripple эффекта */\n  rippleWaves = signal<RippleWave[]>([]);\n\n  /** Приватное кешированное значение ripple эффекта */\n  private _hasRippleEffect = false;\n\n  /** Подключения сервисов */\n  private rippleService = inject(RippleService);\n  private platformService = inject(PlatformService);\n\n  private isIOS = false;\n  private platformSignal?: Signal<string>;\n\n  /** Public API для шаблона */\n  get hasRippleEffect(): boolean {\n    return this._hasRippleEffect;\n  }\n\n  constructor() {\n    this.platformSignal = this.platformService.platform;\n    effect(() => {\n      const platform = this.platformSignal!();\n      this.isIOS = platform === 'ios';\n      this.updateHasRippleEffect();\n    });\n  }\n\n  ngOnInit(): void {\n    this.isIOS = this.platformService.isIOS();\n    this.updateHasRippleEffect();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['interactiveAnimation']) {\n      this.updateHasRippleEffect();\n    }\n  }\n\n  private updateHasRippleEffect(): void {\n    const isDisabled = this.isReadOnly();\n    this._hasRippleEffect = !this.isIOS &&\n                            this.interactiveAnimation === 'background' &&\n                            !isDisabled;\n  }\n\n  /**\n   * Обработчик pointerdown\n   */\n  @HostListener('pointerdown', ['$event'])\n  onPointerDown(event: PointerEvent): void {\n    if (!this.isReadOnly() && this.hasRippleEffect) {\n      this.rippleService.handlePointerDown(event, this.rippleWaves);\n    }\n  }\n\n  /**\n   * Обработчик pointercancel/pointerup/pointerleave\n   */\n  @HostListener('pointercancel', ['$event'])\n  @HostListener('pointerup', ['$event'])\n  @HostListener('pointerleave', ['$event'])\n  onPointerCancel(event: PointerEvent): void {\n    if (this.hasRippleEffect) {\n      this.rippleService.handlePointerCancel(event.pointerId);\n    }\n  }\n\n  /**\n   * Проверка на readonly состояние\n   */\n  private isReadOnly(): boolean {\n    const isReadonlyValue = this._readonly === true || \n                            (typeof this._readonly === 'string' && this._readonly !== 'false');\n    const isDisabledValue = this._disabled === true || \n                            (typeof this._disabled === 'string' && this._disabled !== 'false');\n    return isReadonlyValue || isDisabledValue;\n  }\n\n  /** Биндим классы */\n\n  @HostBinding('class.readonly')\n  get isReadonlyClass(): boolean {\n    return this.isReadOnly();\n  }\n\n  @HostBinding('class.disabled')\n  get isDisabledClass(): boolean {\n    return this._disabled === true || \n           (typeof this._disabled === 'string' && this._disabled !== 'false');\n  }\n\n  @HostBinding('class.tappable--opacity')\n  get isOpacityAnimation(): boolean {\n    return this.interactiveAnimation === 'opacity';\n  }\n\n  @HostBinding('attr.readonly')\n  get readonlyAttr() {\n    return this._readonly ? '' : null;\n  }\n\n  @HostBinding('attr.disabled')\n  get disabledAttr() {\n    return this._disabled ? '' : null;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: relative;\n      isolation: isolate;\n      cursor: pointer;\n      transition: opacity .15s ease-out;\n      display: block;\n      touch-action: manipulation;\n      border-radius: inherit;\n      overflow: hidden;\n    }\n\n    :host.readonly {\n      cursor: default;\n      pointer-events: none;\n    }\n\n    :host.disabled {\n      cursor: default;\n      opacity: .35;\n      pointer-events: none;\n    }\n\n    :host(.tappable--opacity:active),\n    :host-context(.tgui-platform-ios):host(:active) {\n      opacity: .65;\n    }\n\n    @media (hover: hover) and (pointer: fine) {\n      :host(.tappable--opacity:hover),\n      :host-context(.tgui-platform-ios):host(:hover) {\n        opacity: .85;\n      }\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 108
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "rawdescription": "\nСделать компонент только для чтения",
                        "description": "<p>Сделать компонент только для чтения</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "readonly",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 77
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "rawdescription": "\nОтключить компонент",
                        "description": "<p>Отключить компонент</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 87
                    }
                },
                "hasRippleEffect": {
                    "name": "hasRippleEffect",
                    "getSignature": {
                        "name": "hasRippleEffect",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 106,
                        "rawdescription": "\nPublic API для шаблона",
                        "description": "<p>Public API для шаблона</p>\n"
                    }
                },
                "isReadonlyClass": {
                    "name": "isReadonlyClass",
                    "getSignature": {
                        "name": "isReadonlyClass",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 173,
                        "rawdescription": "\nБиндим классы",
                        "description": "<p>Биндим классы</p>\n"
                    }
                },
                "isDisabledClass": {
                    "name": "isDisabledClass",
                    "getSignature": {
                        "name": "isDisabledClass",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 178
                    }
                },
                "isOpacityAnimation": {
                    "name": "isOpacityAnimation",
                    "getSignature": {
                        "name": "isOpacityAnimation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 184
                    }
                },
                "readonlyAttr": {
                    "name": "readonlyAttr",
                    "getSignature": {
                        "name": "readonlyAttr",
                        "type": "",
                        "returnType": "",
                        "line": 189
                    }
                },
                "disabledAttr": {
                    "name": "disabledAttr",
                    "getSignature": {
                        "name": "disabledAttr",
                        "type": "",
                        "returnType": "",
                        "line": 194
                    }
                }
            }
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-a603ae5e05b766c6959777cb07d9ca59028d5a3d73e3c3cfcf57723932f940b7a605e806ec255fa6b5456cd68fa67034a7257f88a479fa9d4a475ba91938385e",
            "file": "projects/tgui/src/lib/components/typography/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-text",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe size level of the text, influencing its styling.\n",
                    "description": "<p>The size level of the text, influencing its styling.</p>\n",
                    "line": 55,
                    "type": "\"1\" | \"2\"",
                    "decorators": []
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Text component is designed for general-purpose text rendering,\noffering a wide range of typographic options. It extends the Typography\ncomponent, inheriting its flexibility and styling capabilities.\nThis component is ideal for paragraphs, labels, or any textual content, providing\nconsistent styling across the application.</p>\n",
            "rawdescription": "\n\nText component is designed for general-purpose text rendering,\noffering a wide range of typographic options. It extends the Typography\ncomponent, inheriting its flexibility and styling capabilities.\nThis component is ideal for paragraphs, labels, or any textual content, providing\nconsistent styling across the application.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * Text component is designed for general-purpose text rendering,\n * offering a wide range of typographic options. It extends the Typography\n * component, inheriting its flexibility and styling capabilities.\n * This component is ideal for paragraphs, labels, or any textual content, providing\n * consistent styling across the application.\n */\n@Component({\n  selector: 'tgui-text',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TextComponent extends TypographyComponent {\n  /**\n   * The size level of the text, influencing its styling.\n   */\n  @Input() level: '1' | '2' = '1';\n  \n  // Override plain property to keep consistency\n  @Input() override plain = true;\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--text--font_size);\n      line-height: var(--tgui--text--line_height);\n      font-size: 0.95em;\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "TguiComponent",
            "id": "component-TguiComponent-98d1768f2c4d8f6c25bd37d16d9f11f48c30531aedb8f4911930b838c235de5a8c907c7204597209a1d79135799366b156891f65bcd7f972fc93e5fcd0fcc553",
            "file": "projects/tgui/src/lib/tgui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tgui",
            "styleUrls": [],
            "styles": [],
            "template": "<tgui-root>\n  <ng-content></ng-content>\n</tgui-root>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": true,
            "deprecationMessage": "Use TGUIRootComponent instead",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RootComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RootComponent } from './components/utils/tgui-root/tgui-root.component';\n\n/**\n * @deprecated Use TGUIRootComponent instead\n */\n@Component({\n  selector: 'lib-tgui',\n  standalone: true,\n  imports: [RootComponent],\n  template: `\n    <tgui-root>\n      <ng-content></ng-content>\n    </tgui-root>\n  `,\n})\nexport class TguiComponent {\n  // This component is just a wrapper for backward compatibility\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TguiIcon12Quote",
            "id": "component-TguiIcon12Quote-ca108c4ba011ce61050bfaeb2afb8ed73aa04d056e2765e8bbe9f900ad782592ed992696a78463bf923d27a48445387308b5faf7fada47a4974a1074f3c541ba",
            "file": "projects/tgui/src/lib/icons/icon12/tgui-icon12-quote.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon12-quote",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"12\"\n  height=\"12\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"M3.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 5.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM4.26 9.65ZM8.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 10.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM9.26 9.65Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon12-quote',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"12\" \n      height=\"12\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path\n        d=\"M3.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 5.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM4.26 9.65ZM8.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 10.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM9.26 9.65Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon12Quote extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon16Cancel",
            "id": "component-TguiIcon16Cancel-ce37acb6f6cca51d15df44644e7f5a0d25aebbe4bad13e219702f51aa38e8834ff1ceb8dca3b5112d4d19b8e98968e5c4629aac71430bd80553ddbe86d005367",
            "file": "projects/tgui/src/lib/icons/icon16/tgui-icon16-cancel.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon16-cancel",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"16\"\n  height=\"16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M3.3 3.3a1 1 0 0 1 1.4 0L8 6.58l3.3-3.3a1 1 0 1 1 1.4 1.42L9.42 8l3.3 3.3a1 1 0 0 1-1.42 1.4L8 9.42l-3.3 3.3a1 1 0 0 1-1.4-1.42L6.58 8l-3.3-3.3a1 1 0 0 1 0-1.4Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon16-cancel',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"16\" \n      height=\"16\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M3.3 3.3a1 1 0 0 1 1.4 0L8 6.58l3.3-3.3a1 1 0 1 1 1.4 1.42L9.42 8l3.3 3.3a1 1 0 0 1-1.42 1.4L8 9.42l-3.3 3.3a1 1 0 0 1-1.4-1.42L6.58 8l-3.3-3.3a1 1 0 0 1 0-1.4Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon16Cancel extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon16Chevron",
            "id": "component-TguiIcon16Chevron-b5a6bf28b96087bbba577bc77d14c9b50bfd0fe333e2b8c4a8316b3d8ecb6ce6c93065e4c2be3a4a8021287e36a64e02e17937a5b044ee8d235000c8a625ab16",
            "file": "projects/tgui/src/lib/icons/icon16/tgui-icon16-chevron.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon16-chevron",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"16\"\n  height=\"16\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"m6 3 5 5-5 5\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon16-chevron',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"16\" \n      height=\"16\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        d=\"m6 3 5 5-5 5\" \n        stroke=\"currentColor\" \n        strokeWidth=\"2\" \n        strokeLinecap=\"round\" \n        strokeLinejoin=\"round\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon16Chevron extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon20ChevronDown",
            "id": "component-TguiIcon20ChevronDown-04784b67c56886b46add717808472292a1e611d4d0d6de21a6bc991eb967d098e97c0bb3be1e176dfd4dfd4c6fd8763dc9aedcc9ce24e3f661bbd34b239aab8f",
            "file": "projects/tgui/src/lib/icons/icon20/tgui-icon20-chevron-down.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon20-chevron-down",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"20\"\n  height=\"20\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M3.29289 6.29289c.39053-.39052 1.02369-.39052 1.41422 0L10 11.5858l5.2929-5.29291c.3905-.39052 1.0237-.39052 1.4142 0 .3905.39053.3905 1.02369 0 1.41422l-6 5.99999c-.3905.3905-1.02368.3905-1.41421 0l-6-5.99999c-.39052-.39053-.39052-1.02369 0-1.41422Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon20-chevron-down',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"20\" \n      height=\"20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M3.29289 6.29289c.39053-.39052 1.02369-.39052 1.41422 0L10 11.5858l5.2929-5.29291c.3905-.39052 1.0237-.39052 1.4142 0 .3905.39053.3905 1.02369 0 1.41422l-6 5.99999c-.3905.3905-1.02368.3905-1.41421 0l-6-5.99999c-.39052-.39053-.39052-1.02369 0-1.41422Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon20ChevronDown extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon20Copy",
            "id": "component-TguiIcon20Copy-6ce24ebd0ba7d68f96b261cb6357b363dad332822ec68d23a611cb0b4362484cfcfdc25350e0776932e0d563129b63e25852559669e31b879f97fe150a7ed8b3",
            "file": "projects/tgui/src/lib/icons/icon20/tgui-icon20-copy.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon20-copy",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"20\"\n  height=\"20\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M6.16145 2.5H9.5C10.8807 2.5 12 3.61929 12 5c0 .55229-.4477 1-1 1s-1-.44771-1-1c0-.27614-.22386-.5-.5-.5H6.2c-.57656 0-.94883.00078-1.23217.02393-.27166.02219-.37238.05987-.42182.08507-.18817.09587-.34115.24885-.43702.43701-.02519.04945-.06287.15016-.08507.42183C4.00077 5.75117 4 6.12345 4 6.7V9c0 .51259.00484.62284.01921.69509.07891.39671.389.70681.7857.78571.07224.0144.1825.0192.69509.0192.55228 0 1 .4477 1 1s-.44772 1-1 1h-.08389c-.3807.0003-.70853.0006-1.00139-.0576-1.19007-.2368-2.12036-1.1671-2.35708-2.3571-.05825-.29288-.05799-.62072-.05769-1.00141C1.99997 9.05621 2 9.02825 2 9l-.00001-2.33854c-.00001-.52715-.00003-.98191.03058-1.35649.0323-.39534.10361-.78856.29641-1.16694.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.7716-.26411 1.16695-.29641.37457-.0306.82933-.03059 1.35648-.03057Zm6.00005 5h1.677c.5272-.00002.982-.00003 1.3565.03057.3954.0323.7886.10362 1.167.29641.5645.28762 1.0234.74656 1.311 1.31105.1928.37838.2641.7716.2964 1.16697.0306.3746.0306.8293.0306 1.3565v1.677c0 .5272 0 .982-.0306 1.3565-.0323.3954-.1036.7886-.2964 1.167-.2876.5645-.7465 1.0234-1.311 1.311-.3784.1928-.7716.2641-1.167.2964-.3746.0306-.8293.0306-1.3565.0306h-1.677c-.5272 0-.982 0-1.3565-.0306-.3954-.0323-.7886-.1036-1.16698-.2964-.56448-.2876-1.02342-.7465-1.31104-1.311-.1928-.3784-.26411-.7716-.29641-1.167-.03061-.3745-.03059-.8293-.03058-1.3565v-1.677c-.00001-.5272-.00003-.982.03058-1.3565.0323-.39537.10361-.78859.29641-1.16697.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.77158-.26411 1.16698-.29641.3745-.0306.8293-.03059 1.3565-.03057Zm-1.1937 2.02393c-.2716.02219-.3724.05987-.4218.08507-.1882.09587-.3411.24885-.437.437-.0252.0495-.0629.1502-.0851.4218-.0231.2834-.0239.6556-.0239 1.2322v1.6c0 .5766.0008.9488.0239 1.2322.0222.2716.0599.3723.0851.4218.0959.1882.2488.3411.437.437.0494.0252.1502.0629.4218.0851.2834.0231.6556.0239 1.2322.0239h1.6c.5765 0 .9488-.0008 1.2322-.0239.2716-.0222.3723-.0599.4218-.0851.1881-.0959.3411-.2488.437-.437.0252-.0495.0629-.1502.0851-.4218.0231-.2834.0239-.6556.0239-1.2322v-1.6c0-.5766-.0008-.9488-.0239-1.2322-.0222-.2716-.0599-.3723-.0851-.4218-.0959-.18815-.2489-.34113-.437-.437-.0495-.0252-.1502-.06288-.4218-.08507C14.7488 9.50078 14.3765 9.5 13.8 9.5h-1.6c-.5766 0-.9488.00078-1.2322.02393Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\n\n@Component({\n  selector: 'tgui-icon20-copy',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"20\" \n      height=\"20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M6.16145 2.5H9.5C10.8807 2.5 12 3.61929 12 5c0 .55229-.4477 1-1 1s-1-.44771-1-1c0-.27614-.22386-.5-.5-.5H6.2c-.57656 0-.94883.00078-1.23217.02393-.27166.02219-.37238.05987-.42182.08507-.18817.09587-.34115.24885-.43702.43701-.02519.04945-.06287.15016-.08507.42183C4.00077 5.75117 4 6.12345 4 6.7V9c0 .51259.00484.62284.01921.69509.07891.39671.389.70681.7857.78571.07224.0144.1825.0192.69509.0192.55228 0 1 .4477 1 1s-.44772 1-1 1h-.08389c-.3807.0003-.70853.0006-1.00139-.0576-1.19007-.2368-2.12036-1.1671-2.35708-2.3571-.05825-.29288-.05799-.62072-.05769-1.00141C1.99997 9.05621 2 9.02825 2 9l-.00001-2.33854c-.00001-.52715-.00003-.98191.03058-1.35649.0323-.39534.10361-.78856.29641-1.16694.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.7716-.26411 1.16695-.29641.37457-.0306.82933-.03059 1.35648-.03057Zm6.00005 5h1.677c.5272-.00002.982-.00003 1.3565.03057.3954.0323.7886.10362 1.167.29641.5645.28762 1.0234.74656 1.311 1.31105.1928.37838.2641.7716.2964 1.16697.0306.3746.0306.8293.0306 1.3565v1.677c0 .5272 0 .982-.0306 1.3565-.0323.3954-.1036.7886-.2964 1.167-.2876.5645-.7465 1.0234-1.311 1.311-.3784.1928-.7716.2641-1.167.2964-.3746.0306-.8293.0306-1.3565.0306h-1.677c-.5272 0-.982 0-1.3565-.0306-.3954-.0323-.7886-.1036-1.16698-.2964-.56448-.2876-1.02342-.7465-1.31104-1.311-.1928-.3784-.26411-.7716-.29641-1.167-.03061-.3745-.03059-.8293-.03058-1.3565v-1.677c-.00001-.5272-.00003-.982.03058-1.3565.0323-.39537.10361-.78859.29641-1.16697.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.77158-.26411 1.16698-.29641.3745-.0306.8293-.03059 1.3565-.03057Zm-1.1937 2.02393c-.2716.02219-.3724.05987-.4218.08507-.1882.09587-.3411.24885-.437.437-.0252.0495-.0629.1502-.0851.4218-.0231.2834-.0239.6556-.0239 1.2322v1.6c0 .5766.0008.9488.0239 1.2322.0222.2716.0599.3723.0851.4218.0959.1882.2488.3411.437.437.0494.0252.1502.0629.4218.0851.2834.0231.6556.0239 1.2322.0239h1.6c.5765 0 .9488-.0008 1.2322-.0239.2716-.0222.3723-.0599.4218-.0851.1881-.0959.3411-.2488.437-.437.0252-.0495.0629-.1502.0851-.4218.0231-.2834.0239-.6556.0239-1.2322v-1.6c0-.5766-.0008-.9488-.0239-1.2322-.0222-.2716-.0599-.3723-.0851-.4218-.0959-.18815-.2489-.34113-.437-.437-.0495-.0252-.1502-.06288-.4218-.08507C14.7488 9.50078 14.3765 9.5 13.8 9.5h-1.6c-.5766 0-.9488.00078-1.2322.02393Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon20Copy extends TguiIconBase {} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon20QuestionMark",
            "id": "component-TguiIcon20QuestionMark-f19830ad296667f6a2c873f4802bb565e0956ec9bf04330835350fd8478ecdb0fd0591611117e1f48efd6aae4d29cc1e37e9dd0d72faf3da0c364ce40510d37c",
            "file": "projects/tgui/src/lib/icons/icon20/tgui-icon20-question-mark.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon20-question-mark",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"20\"\n  height=\"20\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"M10.0605 18.5815c-1.17313 0-2.27713-.2241-3.31196-.6723-1.03484-.4427-1.94792-1.0598-2.73926-1.8511-.78581-.7913-1.40283-1.7044-1.85108-2.7393-.44824-1.0348-.67236-2.1388-.67236-3.312 0-1.17314.22412-2.27715.67236-3.31198.44825-1.03483 1.06527-1.94515 1.85108-2.73095.79134-.79134 1.70166-1.41114 2.73095-1.85938 1.03483-.44824 2.13884-.67236 3.31197-.67236 1.1788 0 2.2855.22412 3.3204.67236 1.0348.44824 1.9479 1.06804 2.7392 1.85938.7914.7858 1.4111 1.69612 1.8594 2.73095.4482 1.03483.6724 2.13884.6724 3.31198 0 1.1732-.2242 2.2772-.6724 3.312-.4483 1.0349-1.068 1.948-1.8594 2.7393-.7913.7913-1.7044 1.4084-2.7392 1.8511-1.0349.4482-2.1389.6723-3.3121.6723Zm0-1.6933c.9574 0 1.8511-.1771 2.6812-.5313.8301-.3541 1.5605-.8466 2.1914-1.4775.6309-.6309 1.1234-1.3613 1.4775-2.1914.3542-.8301.5313-1.7238.5313-2.6812 0-.95179-.1771-1.84274-.5313-2.67282-.3541-.83561-.8466-1.56884-1.4775-2.1997s-1.3641-1.12337-2.1997-1.47754c-.8301-.35417-1.7238-.53125-2.6812-.53125-.95178 0-1.84549.17708-2.68111.53125-.83007.35417-1.55778.84668-2.1831 1.47754-.62533.63086-1.11507 1.36409-1.46924 2.1997-.35417.83008-.53125 1.72103-.53125 2.67282 0 .9574.17708 1.8511.53125 2.6812.35417.8301.84391 1.5605 1.46924 2.1914.63086.6309 1.36133 1.1234 2.1914 1.4775.83562.3542 1.72933.5313 2.68111.5313Zm-.18257-5.2295c-.52572 0-.78857-.2352-.78857-.7056V10.8618c0-.3818.09407-.6917.28222-.92967.19369-.23796.43994-.45931.73882-.66406.3541-.24349.617-.45101.7885-.62256.1771-.17155.2657-.38737.2657-.64746 0-.28223-.1052-.51188-.3155-.68897-.2047-.18262-.4759-.27392-.8135-.27392-.16597 0-.32092.02767-.4648.083-.13835.05534-.26839.13558-.39014.24073-.11621.09961-.22135.22412-.31543.37353l-.13281.17432c-.07747.10514-.17155.18815-.28222.24902-.10515.06087-.23243.09131-.38184.09131-.17155 0-.32373-.05811-.45654-.17432-.13282-.11621-.19922-.27392-.19922-.47314 0-.07747.00553-.14941.0166-.21582.0166-.07194.03874-.14388.06641-.21582.12727-.38737.42057-.72217.87988-1.0044.46484-.28222 1.0542-.42334 1.76811-.42334.4869 0 .9352.08578 1.3447.25733.415.17155.7471.4178.9961.73877.249.32096.3735.7111.3735 1.17041 0 .48698-.1245.87158-.3735 1.15381-.2435.28222-.5672.55892-.9712.83007-.2767.17708-.487.34588-.6309.50638-.1439.1605-.2213.3486-.2324.5644v.0498c0 .0166-.0028.0332-.0083.0498-.0111.1661-.0858.3072-.2241.4234-.1328.1162-.3127.1743-.53957.1743Zm-.0166 2.5483c-.26563 0-.49528-.0857-.68897-.2573-.18815-.1771-.28222-.3957-.28222-.6558 0-.26.09407-.4759.28222-.6474.18815-.1771.41781-.2656.68897-.2656.27117 0 .50077.0857.68897.2573.1881.1715.2822.3901.2822.6557 0 .2657-.0941.4843-.2822.6558-.1882.1716-.4178.2573-.68897.2573Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon20-question-mark',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"20\" \n      height=\"20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path\n        d=\"M10.0605 18.5815c-1.17313 0-2.27713-.2241-3.31196-.6723-1.03484-.4427-1.94792-1.0598-2.73926-1.8511-.78581-.7913-1.40283-1.7044-1.85108-2.7393-.44824-1.0348-.67236-2.1388-.67236-3.312 0-1.17314.22412-2.27715.67236-3.31198.44825-1.03483 1.06527-1.94515 1.85108-2.73095.79134-.79134 1.70166-1.41114 2.73095-1.85938 1.03483-.44824 2.13884-.67236 3.31197-.67236 1.1788 0 2.2855.22412 3.3204.67236 1.0348.44824 1.9479 1.06804 2.7392 1.85938.7914.7858 1.4111 1.69612 1.8594 2.73095.4482 1.03483.6724 2.13884.6724 3.31198 0 1.1732-.2242 2.2772-.6724 3.312-.4483 1.0349-1.068 1.948-1.8594 2.7393-.7913.7913-1.7044 1.4084-2.7392 1.8511-1.0349.4482-2.1389.6723-3.3121.6723Zm0-1.6933c.9574 0 1.8511-.1771 2.6812-.5313.8301-.3541 1.5605-.8466 2.1914-1.4775.6309-.6309 1.1234-1.3613 1.4775-2.1914.3542-.8301.5313-1.7238.5313-2.6812 0-.95179-.1771-1.84274-.5313-2.67282-.3541-.83561-.8466-1.56884-1.4775-2.1997s-1.3641-1.12337-2.1997-1.47754c-.8301-.35417-1.7238-.53125-2.6812-.53125-.95178 0-1.84549.17708-2.68111.53125-.83007.35417-1.55778.84668-2.1831 1.47754-.62533.63086-1.11507 1.36409-1.46924 2.1997-.35417.83008-.53125 1.72103-.53125 2.67282 0 .9574.17708 1.8511.53125 2.6812.35417.8301.84391 1.5605 1.46924 2.1914.63086.6309 1.36133 1.1234 2.1914 1.4775.83562.3542 1.72933.5313 2.68111.5313Zm-.18257-5.2295c-.52572 0-.78857-.2352-.78857-.7056V10.8618c0-.3818.09407-.6917.28222-.92967.19369-.23796.43994-.45931.73882-.66406.3541-.24349.617-.45101.7885-.62256.1771-.17155.2657-.38737.2657-.64746 0-.28223-.1052-.51188-.3155-.68897-.2047-.18262-.4759-.27392-.8135-.27392-.16597 0-.32092.02767-.4648.083-.13835.05534-.26839.13558-.39014.24073-.11621.09961-.22135.22412-.31543.37353l-.13281.17432c-.07747.10514-.17155.18815-.28222.24902-.10515.06087-.23243.09131-.38184.09131-.17155 0-.32373-.05811-.45654-.17432-.13282-.11621-.19922-.27392-.19922-.47314 0-.07747.00553-.14941.0166-.21582.0166-.07194.03874-.14388.06641-.21582.12727-.38737.42057-.72217.87988-1.0044.46484-.28222 1.0542-.42334 1.76811-.42334.4869 0 .9352.08578 1.3447.25733.415.17155.7471.4178.9961.73877.249.32096.3735.7111.3735 1.17041 0 .48698-.1245.87158-.3735 1.15381-.2435.28222-.5672.55892-.9712.83007-.2767.17708-.487.34588-.6309.50638-.1439.1605-.2213.3486-.2324.5644v.0498c0 .0166-.0028.0332-.0083.0498-.0111.1661-.0858.3072-.2241.4234-.1328.1162-.3127.1743-.53957.1743Zm-.0166 2.5483c-.26563 0-.49528-.0857-.68897-.2573-.18815-.1771-.28222-.3957-.28222-.6558 0-.26.09407-.4759.28222-.6474.18815-.1771.41781-.2656.68897-.2656.27117 0 .50077.0857.68897.2573.1881.1715.2822.3901.2822.6557 0 .2657-.0941.4843-.2822.6558-.1882.1716-.4178.2573-.68897.2573Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  `,\n})\nexport class TguiIcon20QuestionMark extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon20Select",
            "id": "component-TguiIcon20Select-a10ccce4c0f789136b8332447761f4860cdb64659f2fc0a5109a44746982fb94ba5998f3bb57348e9d065f470c960a3b003710c07e2918382c14c5df950a8e63",
            "file": "projects/tgui/src/lib/icons/icon20/tgui-icon20-select.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon20-select",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"20\"\n  height=\"20\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"M2.5 10.821 7 15.75l10.5-11.5\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon20-select',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"20\" \n      height=\"20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path\n        d=\"M2.5 10.821 7 15.75l10.5-11.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  `,\n})\nexport class TguiIcon20Select extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon20SelectIos",
            "id": "component-TguiIcon20SelectIos-db1c144a77e578773955bbf69fab190614bb87ba18480388131377463331135f04f535b1e0e6a46de4b7ada4948ac3155e27c3f92b9bbf3e5cb5a1d3dfcbfc20",
            "file": "projects/tgui/src/lib/icons/icon20/tgui-icon20-select-ios.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon20-select-ios",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"20\"\n  height=\"20\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"M8.174 18c-.473 0-.876-.21-1.208-.63l-4.602-5.82a1.727 1.727 0 0 1-.284-.465 1.423 1.423 0 0 1-.08-.474c0-.365.118-.666.355-.903s.536-.356.898-.356c.408 0 .752.18 1.03.539l3.856 5.017 7.525-12.242c.154-.243.313-.414.48-.51.165-.104.372-.156.621-.156.361 0 .657.116.889.347.23.23.346.526.346.884 0 .146-.024.292-.071.438a2.017 2.017 0 0 1-.222.456L9.39 17.335c-.284.443-.69.665-1.217.665Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon20-select-ios',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"20\" \n      height=\"20\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path\n        d=\"M8.174 18c-.473 0-.876-.21-1.208-.63l-4.602-5.82a1.727 1.727 0 0 1-.284-.465 1.423 1.423 0 0 1-.08-.474c0-.365.118-.666.355-.903s.536-.356.898-.356c.408 0 .752.18 1.03.539l3.856 5.017 7.525-12.242c.154-.243.313-.414.48-.51.165-.104.372-.156.621-.156.361 0 .657.116.889.347.23.23.346.526.346.884 0 .146-.024.292-.071.438a2.017 2.017 0 0 1-.222.456L9.39 17.335c-.284.443-.69.665-1.217.665Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  `,\n})\nexport class TguiIcon20SelectIos extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24Cancel",
            "id": "component-TguiIcon24Cancel-41dad037cfbb76ff4b3d876f8417a2859c2ebe357f0398de5f17eb8b6baefe0d0179ca718dff940bd048be8c9b75d1a66ae8722e072157f5b73fb160b9f24dfc",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-cancel.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-cancel",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M4.5 4.44a.9.9 0 0 1 1.27 0L12 10.56l6.22-6.14a.9.9 0 0 1 1.27 1.28l-6.21 6.13 6.2 6.13a.9.9 0 0 1-1.26 1.28L12 13.1l-6.23 6.15a.9.9 0 1 1-1.26-1.28l6.2-6.13-6.2-6.13a.9.9 0 0 1-.01-1.27Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-cancel',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M4.5 4.44a.9.9 0 0 1 1.27 0L12 10.56l6.22-6.14a.9.9 0 0 1 1.27 1.28l-6.21 6.13 6.2 6.13a.9.9 0 0 1-1.26 1.28L12 13.1l-6.23 6.15a.9.9 0 1 1-1.26-1.28l6.2-6.13-6.2-6.13a.9.9 0 0 1-.01-1.27Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24Cancel extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24Channel",
            "id": "component-TguiIcon24Channel-b49becf8639ff5e66623f6ed348b51f134bf4b10ddf90389fa40604744030a4a8e20182bfbba324fcb4572fecbd72fe348784242a6d8eca57dbe04615c693f3a",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-channel.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-channel",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"25\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M20.3345 4.69583c-.346-.56406-.9651-.85952-1.5842-.78415-.1303.01587-.3793.1062-.8925.47099-.4992.35487-1.1316.88076-2.0279 1.62737l-1.0131.84384v7.36662l1.201.8465c.8741.616 1.4867 1.047 1.9691 1.3339.4916.2923.7299.3598.8607.3676.5994.0357 1.1818-.272 1.5046-.8224.0752-.1282.1565-.381.2001-.9651.0428-.574.0434-1.34.0434-2.4288V8.38075c0-1.18556-.0006-2.02414-.0468-2.64881-.0474-.6407-.1364-.90909-.2144-1.03611Zm-7.3177 9.09147V7.33221H7.32665c-.60766 0-1.01705.00052-1.33441.02279-.30876.02167-.46285.06072-.56716.10516-.40136.17099-.72803.50259-.90011.9299-.04666.11586-.08557.28274-.10693.60477-.02187.32964-.02233.7538-.02233 1.37777v1.3914c0 .294.00084.3838.00668.4514.07352.8512.72316 1.494 1.50317 1.5653.06162.0057.14481.0066.43226.0066h6.67898Zm.5742-8.25509 1.1174-.93069c.8589-.71543 1.5442-1.28623 2.1065-1.68593.555-.39451 1.115-.71731 1.7179-.79071 1.3362-.16268 2.6314.481 3.3361 1.62975.3161.51527.424 1.15357.4751 1.84452.0517.69915.0517 1.60468.0517 2.74323v4.24772c0 1.0423 0 1.8757-.0484 2.5247-.0482.6468-.1505 1.2443-.4425 1.742-.6563 1.1189-1.8713 1.7855-3.1642 1.7085-.5788-.0345-1.1262-.2918-1.6737-.6173-.5497-.3269-1.2194-.7989-2.0539-1.387l-1.3815-.9737h-.2358v3.0331c0 1.7872-1.415 3.2796-3.2135 3.2796-.60764 0-1.21602-.1743-1.73688-.5279-1.1253-.7638-1.95819-1.4676-2.44463-2.5572-.38934-.8721-.52097-1.9169-.55377-3.2815-1.53933-.2768-2.70107-1.5796-2.83785-3.1631-.01344-.1556-.0134-.33-.01336-.5655v-1.4622c-.00001-.5865-.00001-1.0706.02628-1.46691.02724-.41065.08554-.79115.23328-1.15803.34635-.86004 1.01405-1.55123 1.86428-1.91347.36504-.15552.74311-.21645 1.14668-.24478.38788-.02722.86074-.02721 1.4291-.0272H13.591ZM7.24948 15.5873c.03562 1.2342.15547 1.9576.39485 2.4938.27219.6097.74578 1.078 1.81191 1.8017.20786.1411.46057.2172.72596.2172.7569 0 1.4135-.6383 1.4135-1.4796v-3.0331H7.24948Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-channel',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"25\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M20.3345 4.69583c-.346-.56406-.9651-.85952-1.5842-.78415-.1303.01587-.3793.1062-.8925.47099-.4992.35487-1.1316.88076-2.0279 1.62737l-1.0131.84384v7.36662l1.201.8465c.8741.616 1.4867 1.047 1.9691 1.3339.4916.2923.7299.3598.8607.3676.5994.0357 1.1818-.272 1.5046-.8224.0752-.1282.1565-.381.2001-.9651.0428-.574.0434-1.34.0434-2.4288V8.38075c0-1.18556-.0006-2.02414-.0468-2.64881-.0474-.6407-.1364-.90909-.2144-1.03611Zm-7.3177 9.09147V7.33221H7.32665c-.60766 0-1.01705.00052-1.33441.02279-.30876.02167-.46285.06072-.56716.10516-.40136.17099-.72803.50259-.90011.9299-.04666.11586-.08557.28274-.10693.60477-.02187.32964-.02233.7538-.02233 1.37777v1.3914c0 .294.00084.3838.00668.4514.07352.8512.72316 1.494 1.50317 1.5653.06162.0057.14481.0066.43226.0066h6.67898Zm.5742-8.25509 1.1174-.93069c.8589-.71543 1.5442-1.28623 2.1065-1.68593.555-.39451 1.115-.71731 1.7179-.79071 1.3362-.16268 2.6314.481 3.3361 1.62975.3161.51527.424 1.15357.4751 1.84452.0517.69915.0517 1.60468.0517 2.74323v4.24772c0 1.0423 0 1.8757-.0484 2.5247-.0482.6468-.1505 1.2443-.4425 1.742-.6563 1.1189-1.8713 1.7855-3.1642 1.7085-.5788-.0345-1.1262-.2918-1.6737-.6173-.5497-.3269-1.2194-.7989-2.0539-1.387l-1.3815-.9737h-.2358v3.0331c0 1.7872-1.415 3.2796-3.2135 3.2796-.60764 0-1.21602-.1743-1.73688-.5279-1.1253-.7638-1.95819-1.4676-2.44463-2.5572-.38934-.8721-.52097-1.9169-.55377-3.2815-1.53933-.2768-2.70107-1.5796-2.83785-3.1631-.01344-.1556-.0134-.33-.01336-.5655v-1.4622c-.00001-.5865-.00001-1.0706.02628-1.46691.02724-.41065.08554-.79115.23328-1.15803.34635-.86004 1.01405-1.55123 1.86428-1.91347.36504-.15552.74311-.21645 1.14668-.24478.38788-.02722.86074-.02721 1.4291-.0272H13.591ZM7.24948 15.5873c.03562 1.2342.15547 1.9576.39485 2.4938.27219.6097.74578 1.078 1.81191 1.8017.20786.1411.46057.2172.72596.2172.7569 0 1.4135-.6383 1.4135-1.4796v-3.0331H7.24948Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24Channel extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24Chat",
            "id": "component-TguiIcon24Chat-52105846de0f6c58412ff8195fff6790880a1037f7073b4018e9fcf4c318495bb1d98281f1bc533ad61673c4b72671232c158ea11ed65b34d4422d14cc81e3a6",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chat.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-chat",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M6.665 18.088A4.269 4.269 0 0 0 7 16.37c-1.54-1.259-2.5-3.04-2.5-5.017 0-3.815 3.582-6.908 8-6.908 4.419 0 8 3.093 8 6.908 0 3.816-3.581 6.909-8 6.909-.69 0-1.36-.076-2-.218-.423.464-1.236 1.062-2.59 1.539-.78.274-1.741.508-2.91.652.644-.635 1.288-1.27 1.665-2.148Zm4.38 1.88c.475.062.961.095 1.455.095 5.156 0 9.8-3.66 9.8-8.709 0-5.048-4.644-8.708-9.8-8.708-5.155 0-9.8 3.66-9.8 8.708 0 2.232.938 4.227 2.414 5.73-.175.65-.623 1.126-1.379 1.871a1.8 1.8 0 0 0 1.485 3.068c2.768-.341 4.648-1.165 5.824-2.056Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-chat',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M6.665 18.088A4.269 4.269 0 0 0 7 16.37c-1.54-1.259-2.5-3.04-2.5-5.017 0-3.815 3.582-6.908 8-6.908 4.419 0 8 3.093 8 6.908 0 3.816-3.581 6.909-8 6.909-.69 0-1.36-.076-2-.218-.423.464-1.236 1.062-2.59 1.539-.78.274-1.741.508-2.91.652.644-.635 1.288-1.27 1.665-2.148Zm4.38 1.88c.475.062.961.095 1.455.095 5.156 0 9.8-3.66 9.8-8.709 0-5.048-4.644-8.708-9.8-8.708-5.155 0-9.8 3.66-9.8 8.708 0 2.232.938 4.227 2.414 5.73-.175.65-.623 1.126-1.379 1.871a1.8 1.8 0 0 0 1.485 3.068c2.768-.341 4.648-1.165 5.824-2.056Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24Chat extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24ChevronDown",
            "id": "component-TguiIcon24ChevronDown-952f6632faab241647f5cf45d2c1f7c7d5ec6d6f8c49edabc2147c8385e77ff4b042338ec9852a992ba6326873558abea6c3ef8dd28b523ca31b71a33b348dc4",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-down.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-chevron-down",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M4.3 7.54a1 1 0 0 1 1.4 0l6.8 6.8 6.8-6.8a1 1 0 1 1 1.4 1.42l-7.5 7.5a1 1 0 0 1-1.4 0l-7.5-7.5a1 1 0 0 1 0-1.42Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-chevron-down',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M4.3 7.54a1 1 0 0 1 1.4 0l6.8 6.8 6.8-6.8a1 1 0 1 1 1.4 1.42l-7.5 7.5a1 1 0 0 1-1.4 0l-7.5-7.5a1 1 0 0 1 0-1.42Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24ChevronDown extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24ChevronLeft",
            "id": "component-TguiIcon24ChevronLeft-21acbd28a5e17f6e7d2b8252c70c3fc6eb4ce0e5070980f2001dcf1ddcfcef537dc92c24bf7ae577606fc5a1407509ef5fdb9f4c0e7c2cb1299b09e0db2b8d83",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-left.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-chevron-left",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M15.7071 3.79289c-.3905-.39052-1.0237-.39052-1.4142 0L6.79289 11.2929c-.39052.3905-.39052 1.0237 0 1.4142l7.50001 7.5c.3905.3905 1.0237.3905 1.4142 0 .3905-.3905.3905-1.0237 0-1.4142L8.91421 12l6.79289-6.79289c.3905-.39053.3905-1.02369 0-1.41422Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-chevron-left',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M15.7071 3.79289c-.3905-.39052-1.0237-.39052-1.4142 0L6.79289 11.2929c-.39052.3905-.39052 1.0237 0 1.4142l7.50001 7.5c.3905.3905 1.0237.3905 1.4142 0 .3905-.3905.3905-1.0237 0-1.4142L8.91421 12l6.79289-6.79289c.3905-.39053.3905-1.02369 0-1.41422Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24ChevronLeft extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24ChevronRight",
            "id": "component-TguiIcon24ChevronRight-1e17ed8f4017ce554f477a6bb41538cb163c55dd4e82a72ceebf896b78bc720ead3d44601acf1ef23bc424e733266517066258a0a2b555190aa2109a45fde6d5",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-right.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-chevron-right",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M7.29289 3.79289c.39053-.39052 1.02369-.39052 1.41422 0l7.49999 7.50001c.3905.3905.3905 1.0237 0 1.4142l-7.49999 7.5c-.39053.3905-1.02369.3905-1.41422 0-.39052-.3905-.39052-1.0237 0-1.4142L14.0858 12 7.29289 5.20711c-.39052-.39053-.39052-1.02369 0-1.41422Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-chevron-right',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M7.29289 3.79289c.39053-.39052 1.02369-.39052 1.41422 0l7.49999 7.50001c.3905.3905.3905 1.0237 0 1.4142l-7.49999 7.5c-.39053.3905-1.02369.3905-1.41422 0-.39052-.3905-.39052-1.0237 0-1.4142L14.0858 12 7.29289 5.20711c-.39052-.39053-.39052-1.02369 0-1.41422Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24ChevronRight extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24Close",
            "id": "component-TguiIcon24Close-bed92f4ecf8106d7bfe60b8f41a5124eccb9c70327010015db800887235ac2ff85fb7fbf0f8baa010c49e03b62a499d3bc1115e837c291d46b32a01ba237a1bd",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-close.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-close",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <g opacity=\".5\" fill=\"#000\" clipPath=\"url(#close_a)\">\n    <path\n      d=\"M12 24c6.5647 0 12-5.4471 12-12 0-6.56471-5.4471-12-12.0118-12C5.43529 0 0 5.43529 0 12c0 6.5529 5.44705 12 12 12Z\"\n      fillOpacity=\".04\" />\n    <path\n      d=\"M7.86242 17.1429c-.56394 0-1.00528-.4542-1.00528-1.0187 0-.2701.09807-.5279.29422-.7121L10.5472 12 7.15136 8.60006c-.19615-.19637-.29422-.44187-.29422-.71189 0-.57689.44134-1.00648 1.00528-1.00648.28196 0 .50263.09819.69878.28231l3.4204 3.4122 3.4449-3.42448c.2084-.20866.4291-.29458.6988-.29458.5639 0 1.0176.44187 1.0176 1.00648 0 .28231-.0859.50324-.3066.72417L13.4282 12l3.3959 3.4c.2084.1841.3065.4417.3065.7242 0 .5645-.4536 1.0187-1.0298 1.0187-.282 0-.5395-.0982-.7234-.2947l-3.3958-3.4121-3.38363 3.4121c-.19613.1965-.45359.2947-.73555.2947Z\"\n      fillOpacity=\".8\" fill=\"white\"/>\n  </g>\n  <defs>\n    <clipPath id=\"close_a\">\n      <path fill=\"#fff\" d=\"M0 0h24v24H0z\" />\n    </clipPath>\n  </defs>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-close',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <g opacity=\".5\" fill=\"#000\" clipPath=\"url(#close_a)\">\n        <path\n          d=\"M12 24c6.5647 0 12-5.4471 12-12 0-6.56471-5.4471-12-12.0118-12C5.43529 0 0 5.43529 0 12c0 6.5529 5.44705 12 12 12Z\"\n          fillOpacity=\".04\" />\n        <path\n          d=\"M7.86242 17.1429c-.56394 0-1.00528-.4542-1.00528-1.0187 0-.2701.09807-.5279.29422-.7121L10.5472 12 7.15136 8.60006c-.19615-.19637-.29422-.44187-.29422-.71189 0-.57689.44134-1.00648 1.00528-1.00648.28196 0 .50263.09819.69878.28231l3.4204 3.4122 3.4449-3.42448c.2084-.20866.4291-.29458.6988-.29458.5639 0 1.0176.44187 1.0176 1.00648 0 .28231-.0859.50324-.3066.72417L13.4282 12l3.3959 3.4c.2084.1841.3065.4417.3065.7242 0 .5645-.4536 1.0187-1.0298 1.0187-.282 0-.5395-.0982-.7234-.2947l-3.3958-3.4121-3.38363 3.4121c-.19613.1965-.45359.2947-.73555.2947Z\"\n          fillOpacity=\".8\" fill=\"white\"/>\n      </g>\n      <defs>\n        <clipPath id=\"close_a\">\n          <path fill=\"#fff\" d=\"M0 0h24v24H0z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  `,\n})\nexport class TguiIcon24Close extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24Notifications",
            "id": "component-TguiIcon24Notifications-4767b23b3cc4332af3fea91c48b02f4a1b031974640d49b9461414a2c488e5fed52ae4cc28ddfaadbc499a1222527e5f8ce9bc4bdba25b2d1ee62cb3421bde84",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-notifications.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-notifications",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M12.5 4.306c-.142 0-.278.004-.41.012-1.748.105-2.771.876-3.382 1.759-.637.921-.856 2.018-.856 2.738v3.2c0 .742 0 1.316-.177 1.857-.036.11-.077.219-.124.325-.23.52-.61.94-1.104 1.482l-.082.09c-.476.524-.783.865-.971 1.124.313.036.765.038 1.463.038h11.285c.698 0 1.15-.002 1.463-.038-.188-.26-.495-.6-.971-1.124l-.082-.09c-.493-.543-.874-.962-1.104-1.482a3.533 3.533 0 0 1-.124-.325c-.178-.541-.178-1.115-.177-1.857v-3.2c0-.72-.22-1.817-.856-2.738-.61-.883-1.635-1.654-3.382-1.759a6.86 6.86 0 0 0-.41-.012Zm-.512-1.791a8.57 8.57 0 0 1 1.023 0c2.291.137 3.8 1.195 4.713 2.516.887 1.283 1.181 2.764 1.181 3.784v3.077c0 .922.011 1.178.085 1.403.017.053.037.105.06.156.095.216.258.411.87 1.086l.04.043c.446.492.838.924 1.096 1.291.25.356.562.903.398 1.55a1.781 1.781 0 0 1-.212.501c-.35.565-.952.704-1.375.758-.438.057-1.012.057-1.667.057H6.8c-.656 0-1.23 0-1.668-.057-.423-.054-1.026-.193-1.375-.758a1.784 1.784 0 0 1-.212-.5c-.164-.648.148-1.195.398-1.55.258-.368.65-.8 1.097-1.292l.04-.043c.612-.675.774-.87.87-1.086a1.68 1.68 0 0 0 .059-.156c.074-.225.084-.48.084-1.403V8.815c0-1.02.295-2.501 1.182-3.784.913-1.32 2.422-2.379 4.713-2.516Z\"\n    fill=\"currentColor\"\n  />\n  <path\n    d=\"M12.5 22.5c.913 0 1.69-.712 1.976-1.706.13-.452-.255-.843-.714-.843h-2.526c-.459 0-.844.39-.714.843.286.994 1.063 1.706 1.977 1.706Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-notifications',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M12.5 4.306c-.142 0-.278.004-.41.012-1.748.105-2.771.876-3.382 1.759-.637.921-.856 2.018-.856 2.738v3.2c0 .742 0 1.316-.177 1.857-.036.11-.077.219-.124.325-.23.52-.61.94-1.104 1.482l-.082.09c-.476.524-.783.865-.971 1.124.313.036.765.038 1.463.038h11.285c.698 0 1.15-.002 1.463-.038-.188-.26-.495-.6-.971-1.124l-.082-.09c-.493-.543-.874-.962-1.104-1.482a3.533 3.533 0 0 1-.124-.325c-.178-.541-.178-1.115-.177-1.857v-3.2c0-.72-.22-1.817-.856-2.738-.61-.883-1.635-1.654-3.382-1.759a6.86 6.86 0 0 0-.41-.012Zm-.512-1.791a8.57 8.57 0 0 1 1.023 0c2.291.137 3.8 1.195 4.713 2.516.887 1.283 1.181 2.764 1.181 3.784v3.077c0 .922.011 1.178.085 1.403.017.053.037.105.06.156.095.216.258.411.87 1.086l.04.043c.446.492.838.924 1.096 1.291.25.356.562.903.398 1.55a1.781 1.781 0 0 1-.212.501c-.35.565-.952.704-1.375.758-.438.057-1.012.057-1.667.057H6.8c-.656 0-1.23 0-1.668-.057-.423-.054-1.026-.193-1.375-.758a1.784 1.784 0 0 1-.212-.5c-.164-.648.148-1.195.398-1.55.258-.368.65-.8 1.097-1.292l.04-.043c.612-.675.774-.87.87-1.086a1.68 1.68 0 0 0 .059-.156c.074-.225.084-.48.084-1.403V8.815c0-1.02.295-2.501 1.182-3.784.913-1.32 2.422-2.379 4.713-2.516Z\"\n        fill=\"currentColor\" \n      />\n      <path\n        d=\"M12.5 22.5c.913 0 1.69-.712 1.976-1.706.13-.452-.255-.843-.714-.843h-2.526c-.459 0-.844.39-.714.843.286.994 1.063 1.706 1.977 1.706Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24Notifications extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24PersonRemove",
            "id": "component-TguiIcon24PersonRemove-dff3c65462410900b8287eadd2ccc227971e800d2fcfd6f18c1f49fb108d75e11b5cbb1ef6e05ad0d1e22a1aded83db7cbcc7cf922e517ccadeafc374d7814e3",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-person-remove.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-person-remove",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M9.40001 3.89998c-1.47856 0-2.7 1.22035-2.7 2.75413s1.22144 2.75414 2.7 2.75414c1.47859 0 2.69999-1.22036 2.69999-2.75414 0-1.53378-1.2214-2.75413-2.69999-2.75413Zm-4.5 2.75413c0-2.50247 2.0021-4.55413 4.5-4.55413 2.49789 0 4.49999 2.05166 4.49999 4.55413 0 2.50247-2.0021 4.55409-4.49999 4.55409-2.4979 0-4.5-2.05162-4.5-4.55409Zm9.36629 8.79329c-.2335.4434-.3663.951-.3663 1.4924 0 1.758 1.4005 3.1602 3.1 3.1602.5337 0 1.0362-.1371 1.4755-.3801l-4.2092-4.2725Zm-.7352-2.0108c-.8855.8992-1.4311 2.1395-1.4311 3.5032 0 2.7267 2.1812 4.9602 4.9 4.9602 1.3573 0 2.5849-.5597 3.4696-1.4576.8843-.8977 1.4304-2.1375 1.4304-3.5026 0-2.7267-2.1812-4.9601-4.9-4.9601-1.3591 0-2.5838.5581-3.4689 1.4569Zm1.9938.7236 4.2086 4.2719c.2338-.4439.3665-.9515.3665-1.4923 0-1.758-1.4005-3.1601-3.1-3.1601-.5323 0-1.0353.1375-1.4751.3805ZM3.53465 13.847c.84767-.7943 1.88294-1.0553 2.66536-1.0553h4.37769c.497 0 .9.4029.9.9 0 .4971-.403.9-.9.9H6.20001c-.41759 0-.98231.145-1.43465.5688-.43226.405-.86535 1.1619-.86535 2.5914 0 .497-.40295.9-.9.9-.49706 0-.9-.403-.9-.9 0-1.8187.56691-3.0919 1.43464-3.9049Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-person-remove',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M9.40001 3.89998c-1.47856 0-2.7 1.22035-2.7 2.75413s1.22144 2.75414 2.7 2.75414c1.47859 0 2.69999-1.22036 2.69999-2.75414 0-1.53378-1.2214-2.75413-2.69999-2.75413Zm-4.5 2.75413c0-2.50247 2.0021-4.55413 4.5-4.55413 2.49789 0 4.49999 2.05166 4.49999 4.55413 0 2.50247-2.0021 4.55409-4.49999 4.55409-2.4979 0-4.5-2.05162-4.5-4.55409Zm9.36629 8.79329c-.2335.4434-.3663.951-.3663 1.4924 0 1.758 1.4005 3.1602 3.1 3.1602.5337 0 1.0362-.1371 1.4755-.3801l-4.2092-4.2725Zm-.7352-2.0108c-.8855.8992-1.4311 2.1395-1.4311 3.5032 0 2.7267 2.1812 4.9602 4.9 4.9602 1.3573 0 2.5849-.5597 3.4696-1.4576.8843-.8977 1.4304-2.1375 1.4304-3.5026 0-2.7267-2.1812-4.9601-4.9-4.9601-1.3591 0-2.5838.5581-3.4689 1.4569Zm1.9938.7236 4.2086 4.2719c.2338-.4439.3665-.9515.3665-1.4923 0-1.758-1.4005-3.1601-3.1-3.1601-.5323 0-1.0353.1375-1.4751.3805ZM3.53465 13.847c.84767-.7943 1.88294-1.0553 2.66536-1.0553h4.37769c.497 0 .9.4029.9.9 0 .4971-.403.9-.9.9H6.20001c-.41759 0-.98231.145-1.43465.5688-.43226.405-.86535 1.1619-.86535 2.5914 0 .497-.40295.9-.9.9-.49706 0-.9-.403-.9-.9 0-1.8187.56691-3.0919 1.43464-3.9049Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24PersonRemove extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24QR",
            "id": "component-TguiIcon24QR-233d3539d1d94aa30d2ba842b8a94980a92235400ecefbd0defb032872b1654c6733975a48bb2cf0c7312616150a5745a2e2fffac22551eb1f7f464c261ecced",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-qr.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-qr",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M6.96424 2.48363h.07906c.63394-.00002 1.16862-.00003 1.60495.03899.4573.0409.89367.13017 1.30119.36235.46206.26326.84726.64277 1.11566 1.10156.2376.40608.3289.84138.3706 1.29567.0397.4322.0397.96123.0397 1.58569v.08066c0 .62446 0 1.1535-.0397 1.58569-.0417.45429-.133.88959-.3706 1.29568-.2684.45878-.6536.83828-1.11566 1.10158-.40752.2322-.84389.3214-1.30119.3623-.43632.039-.971.039-1.60493.039h-.07909c-.63393 0-1.16861 0-1.60493-.039-.4573-.0409-.89368-.1301-1.30119-.3623-.46208-.2633-.84726-.6428-1.11567-1.10158-.23758-.40609-.3289-.84139-.37063-1.29568-.03969-.4322-.03968-.96124-.03966-1.58572v-.08059c-.00002-.62448-.00003-1.15353.03966-1.58573.04173-.45429.13305-.88959.37063-1.29567.26841-.45879.65359-.8383 1.11566-1.10156.40752-.23218.8439-.32145 1.3012-.36235.43632-.03902.97101-.03901 1.60494-.03899ZM5.51965 4.31547c-.33464.02993-.48072.08233-.57048.13347-.18947.10795-.34534.26236-.4531.44655-.04952.08464-.10175.22412-.1318.55134-.03123.34005-.03212.78578-.03212 1.46139 0 .67561.00089 1.12135.03212 1.46139.03005.32722.08228.4667.1318.55134.10776.18419.26363.3386.4531.44656.08976.05114.23584.10354.57048.13347.34657.03099.80016.03183 1.48412.03183.68397 0 1.13756-.00084 1.48413-.03183.33464-.02993.48071-.08233.57048-.13347.18947-.10796.34534-.26237.45309-.44656.04953-.08464.10176-.22412.13181-.55134.03123-.34004.03212-.78578.03212-1.46139 0-.67561-.00089-1.12134-.03212-1.46139-.03005-.32722-.08228-.4667-.13181-.55134-.10775-.18419-.26362-.3386-.4531-.44655-.08975-.05114-.23583-.10354-.57047-.13347-.34657-.031-.80016-.03184-1.48413-.03184-.68396 0-1.13755.00084-1.48412.03184ZM16.9648 2.48363h.079c.634-.00002 1.1687-.00003 1.605.03899.4573.0409.8937.13017 1.3012.36235.4621.26326.8472.64277 1.1157 1.10156.2375.40608.3289.84138.3706 1.29567.0397.4322.0397.96125.0396 1.58574v.08057c.0001.62448.0001 1.15353-.0396 1.58573-.0417.45429-.1331.88959-.3706 1.29568-.2685.45878-.6536.83828-1.1157 1.10158-.4075.2322-.8439.3214-1.3012.3623-.4363.039-.971.039-1.6049.039h-.0791c-.634 0-1.1686 0-1.605-.039-.4573-.0409-.8936-.1301-1.3012-.3623-.462-.2633-.8472-.6428-1.1156-1.10158-.2376-.40609-.3289-.84139-.3706-1.29568-.0397-.4322-.0397-.96125-.0397-1.58573v-.08057c0-.62449 0-1.15353.0397-1.58574.0417-.45429.133-.88959.3706-1.29567.2684-.45879.6536-.8383 1.1156-1.10156.4076-.23218.8439-.32145 1.3012-.36235.4364-.03902.971-.03901 1.605-.03899Zm-1.4446 1.83184c-.3347.02993-.4807.08233-.5705.13347-.1895.10795-.3453.26236-.4531.44655-.0495.08464-.1017.22412-.1318.55134-.0312.34005-.0321.78578-.0321 1.46139 0 .67561.0009 1.12135.0321 1.46139.0301.32722.0823.4667.1318.55134.1078.18419.2636.3386.4531.44656.0898.05114.2358.10354.5705.13347.3466.03099.8001.03183 1.4841.03183.684 0 1.1376-.00084 1.4841-.03183.3347-.02993.4808-.08233.5705-.13347.1895-.10796.3454-.26237.4531-.44656.0495-.08464.10176-.22412.1318-.55134.0313-.34004.0321-.78578.0321-1.46139 0-.67561-.0008-1.12134-.0321-1.46139-.03-.32722-.0823-.4667-.1318-.55134-.1077-.18419-.2636-.3386-.4531-.44655-.0897-.05114-.2358-.10354-.5705-.13347-.3465-.031-.8001-.03184-1.4841-.03184-.684 0-1.1375.00084-1.4841.03184Z\"\n    fill=\"currentColor\"\n  />\n  <path\n    d=\"M14.7468 13.5283c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm2.4001 2.3686c.5681 0 1.0286.4544 1.0286 1.0151 0 .5606-.4605 1.015-1.0286 1.015-.5681 0-1.0286-.4544-1.0286-1.015 0-.5607.4605-1.0151 1.0286-1.0151Zm2.4001-2.3686c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Zm-4.8002 4.7371c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm4.8002 0c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-qr',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M6.96424 2.48363h.07906c.63394-.00002 1.16862-.00003 1.60495.03899.4573.0409.89367.13017 1.30119.36235.46206.26326.84726.64277 1.11566 1.10156.2376.40608.3289.84138.3706 1.29567.0397.4322.0397.96123.0397 1.58569v.08066c0 .62446 0 1.1535-.0397 1.58569-.0417.45429-.133.88959-.3706 1.29568-.2684.45878-.6536.83828-1.11566 1.10158-.40752.2322-.84389.3214-1.30119.3623-.43632.039-.971.039-1.60493.039h-.07909c-.63393 0-1.16861 0-1.60493-.039-.4573-.0409-.89368-.1301-1.30119-.3623-.46208-.2633-.84726-.6428-1.11567-1.10158-.23758-.40609-.3289-.84139-.37063-1.29568-.03969-.4322-.03968-.96124-.03966-1.58572v-.08059c-.00002-.62448-.00003-1.15353.03966-1.58573.04173-.45429.13305-.88959.37063-1.29567.26841-.45879.65359-.8383 1.11566-1.10156.40752-.23218.8439-.32145 1.3012-.36235.43632-.03902.97101-.03901 1.60494-.03899ZM5.51965 4.31547c-.33464.02993-.48072.08233-.57048.13347-.18947.10795-.34534.26236-.4531.44655-.04952.08464-.10175.22412-.1318.55134-.03123.34005-.03212.78578-.03212 1.46139 0 .67561.00089 1.12135.03212 1.46139.03005.32722.08228.4667.1318.55134.10776.18419.26363.3386.4531.44656.08976.05114.23584.10354.57048.13347.34657.03099.80016.03183 1.48412.03183.68397 0 1.13756-.00084 1.48413-.03183.33464-.02993.48071-.08233.57048-.13347.18947-.10796.34534-.26237.45309-.44656.04953-.08464.10176-.22412.13181-.55134.03123-.34004.03212-.78578.03212-1.46139 0-.67561-.00089-1.12134-.03212-1.46139-.03005-.32722-.08228-.4667-.13181-.55134-.10775-.18419-.26362-.3386-.4531-.44655-.08975-.05114-.23583-.10354-.57047-.13347-.34657-.031-.80016-.03184-1.48413-.03184-.68396 0-1.13755.00084-1.48412.03184ZM16.9648 2.48363h.079c.634-.00002 1.1687-.00003 1.605.03899.4573.0409.8937.13017 1.3012.36235.4621.26326.8472.64277 1.1157 1.10156.2375.40608.3289.84138.3706 1.29567.0397.4322.0397.96125.0396 1.58574v.08057c.0001.62448.0001 1.15353-.0396 1.58573-.0417.45429-.1331.88959-.3706 1.29568-.2685.45878-.6536.83828-1.1157 1.10158-.4075.2322-.8439.3214-1.3012.3623-.4363.039-.971.039-1.6049.039h-.0791c-.634 0-1.1686 0-1.605-.039-.4573-.0409-.8936-.1301-1.3012-.3623-.462-.2633-.8472-.6428-1.1156-1.10158-.2376-.40609-.3289-.84139-.3706-1.29568-.0397-.4322-.0397-.96125-.0397-1.58573v-.08057c0-.62449 0-1.15353.0397-1.58574.0417-.45429.133-.88959.3706-1.29567.2684-.45879.6536-.8383 1.1156-1.10156.4076-.23218.8439-.32145 1.3012-.36235.4364-.03902.971-.03901 1.605-.03899Zm-1.4446 1.83184c-.3347.02993-.4807.08233-.5705.13347-.1895.10795-.3453.26236-.4531.44655-.0495.08464-.1017.22412-.1318.55134-.0312.34005-.0321.78578-.0321 1.46139 0 .67561.0009 1.12135.0321 1.46139.0301.32722.0823.4667.1318.55134.1078.18419.2636.3386.4531.44656.0898.05114.2358.10354.5705.13347.3466.03099.8001.03183 1.4841.03183.684 0 1.1376-.00084 1.4841-.03183.3347-.02993.4808-.08233.5705-.13347.1895-.10796.3454-.26237.4531-.44656.0495-.08464.10176-.22412.1318-.55134.0313-.34004.0321-.78578.0321-1.46139 0-.67561-.0008-1.12134-.0321-1.46139-.03-.32722-.0823-.4667-.1318-.55134-.1077-.18419-.2636-.3386-.4531-.44655-.0897-.05114-.2358-.10354-.5705-.13347-.3465-.031-.8001-.03184-1.4841-.03184-.684 0-1.1375.00084-1.4841.03184Z\"\n        fill=\"currentColor\" \n      />\n      <path\n        d=\"M14.7468 13.5283c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm2.4001 2.3686c.5681 0 1.0286.4544 1.0286 1.0151 0 .5606-.4605 1.015-1.0286 1.015-.5681 0-1.0286-.4544-1.0286-1.015 0-.5607.4605-1.0151 1.0286-1.0151Zm2.4001-2.3686c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Zm-4.8002 4.7371c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm4.8002 0c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon24QR extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon24SunLow",
            "id": "component-TguiIcon24SunLow-2975343f525188672a5296f566d077d92a8932c1b065f1b87c324e7b0c0a18f5a6ee466154b2e85af5cb7ba4828586c9c44bbfdf4826d36d716a5b5a84846b3d",
            "file": "projects/tgui/src/lib/icons/icon24/tgui-icon24-sun-low.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon24-sun-low",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"24\"\n  height=\"24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M12 15.45c1.9054 0 3.45-1.5446 3.45-3.45 0-1.9054-1.5446-3.45-3.45-3.45-1.9054 0-3.45 1.5446-3.45 3.45 0 1.9054 1.5446 3.45 3.45 3.45Zm0 1.8c2.8995 0 5.25-2.3505 5.25-5.25 0-2.89949-2.3505-5.25-5.25-5.25-2.89949 0-5.25 2.35051-5.25 5.25 0 2.8995 2.35051 5.25 5.25 5.25Z\"\n    fill=\"currentColor\"\n  />\n  <circle cx=\"18.5\" cy=\"5.5\" r=\"1\" fill=\"currentColor\" />\n  <circle cx=\"5.5\" cy=\"5.5\" r=\"1\" fill=\"currentColor\" />\n  <circle cx=\"20.5\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n  <circle cx=\"3.5\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n  <circle cx=\"18.5\" cy=\"18.5\" r=\"1\" fill=\"currentColor\" />\n  <path d=\"M13 20.5c0 .5523-.4477 1-1 1s-1-.4477-1-1 .4477-1 1-1 1 .4477 1 1Z\" fill=\"currentColor\" />\n  <circle cx=\"5.5\" cy=\"18.5\" r=\"1\" fill=\"currentColor\" />\n  <path d=\"M13 3.5c0 .55228-.4477 1-1 1s-1-.44772-1-1 .4477-1 1-1 1 .44772 1 1Z\" fill=\"currentColor\" />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon24-sun-low',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"24\" \n      height=\"24\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M12 15.45c1.9054 0 3.45-1.5446 3.45-3.45 0-1.9054-1.5446-3.45-3.45-3.45-1.9054 0-3.45 1.5446-3.45 3.45 0 1.9054 1.5446 3.45 3.45 3.45Zm0 1.8c2.8995 0 5.25-2.3505 5.25-5.25 0-2.89949-2.3505-5.25-5.25-5.25-2.89949 0-5.25 2.35051-5.25 5.25 0 2.8995 2.35051 5.25 5.25 5.25Z\"\n        fill=\"currentColor\" \n      />\n      <circle cx=\"18.5\" cy=\"5.5\" r=\"1\" fill=\"currentColor\" />\n      <circle cx=\"5.5\" cy=\"5.5\" r=\"1\" fill=\"currentColor\" />\n      <circle cx=\"20.5\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n      <circle cx=\"3.5\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n      <circle cx=\"18.5\" cy=\"18.5\" r=\"1\" fill=\"currentColor\" />\n      <path d=\"M13 20.5c0 .5523-.4477 1-1 1s-1-.4477-1-1 .4477-1 1-1 1 .4477 1 1Z\" fill=\"currentColor\" />\n      <circle cx=\"5.5\" cy=\"18.5\" r=\"1\" fill=\"currentColor\" />\n      <path d=\"M13 3.5c0 .55228-.4477 1-1 1s-1-.44772-1-1 .4477-1 1-1 1 .44772 1 1Z\" fill=\"currentColor\" />\n    </svg>\n  `,\n})\nexport class TguiIcon24SunLow extends TguiIconBase {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28AddCircle",
            "id": "component-TguiIcon28AddCircle-5bc0f505e1431267952c1c180be52ce1ec9849e28dc667700c0e781a5477e1215f4692b598e9bf961c447073a976789a454a8b84158e645b903b1e8b0b4eda13",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-add-circle.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-add-circle",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"29\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M14.5 3.9C8.92193 3.9 4.40001 8.42192 4.40001 14c0 5.5781 4.52192 10.1 10.09999 10.1 5.5781 0 10.1-4.5219 10.1-10.1 0-5.57808-4.5219-10.1-10.1-10.1ZM2.60001 14c0-6.57219 5.32781-11.9 11.89999-11.9 6.5722 0 11.9 5.32781 11.9 11.9 0 6.5722-5.3278 11.9-11.9 11.9-6.57218 0-11.89999-5.3278-11.89999-11.9ZM14.5 8.6c.4971 0 .9.40294.9.9v3.6H19c.4971 0 .9.4029.9.9 0 .4971-.4029.9-.9.9h-3.6v3.6c0 .4971-.4029.9-.9.9-.4971 0-.9-.4029-.9-.9v-3.6H10c-.49705 0-.89999-.4029-.89999-.9 0-.4971.40294-.9.89999-.9h3.6V9.5c0-.49706.4029-.9.9-.9Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-add-circle',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"29\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M14.5 3.9C8.92193 3.9 4.40001 8.42192 4.40001 14c0 5.5781 4.52192 10.1 10.09999 10.1 5.5781 0 10.1-4.5219 10.1-10.1 0-5.57808-4.5219-10.1-10.1-10.1ZM2.60001 14c0-6.57219 5.32781-11.9 11.89999-11.9 6.5722 0 11.9 5.32781 11.9 11.9 0 6.5722-5.3278 11.9-11.9 11.9-6.57218 0-11.89999-5.3278-11.89999-11.9ZM14.5 8.6c.4971 0 .9.40294.9.9v3.6H19c.4971 0 .9.4029.9.9 0 .4971-.4029.9-.9.9h-3.6v3.6c0 .4971-.4029.9-.9.9-.4971 0-.9-.4029-.9-.9v-3.6H10c-.49705 0-.89999-.4029-.89999-.9 0-.4971.40294-.9.89999-.9h3.6V9.5c0-.49706.4029-.9.9-.9Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28AddCircle extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Archive",
            "id": "component-TguiIcon28Archive-5de680cbd5323aa6d96080a2dbad905ee0b55588a05c95ad51824540089c28e336c6780cd596cc355ce695075608dec25dc63f12cddbc08ce9f07b757fcf7000",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-archive.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-archive",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"29\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M9.72 5.35c-.59 0-1.14.25-1.54.67l-.9.98H20.7l-.9-.98c-.4-.42-.95-.67-1.53-.67H9.72ZM22.29 8.8H5.7c-.19.32-.3.7-.3 1.08V20.2c0 1.7 1.38 3.07 3.08 3.07h11.05c1.7 0 3.07-1.37 3.07-3.07V9.88c0-.39-.1-.76-.3-1.08ZM4.54 7.33c-.6.7-.94 1.61-.94 2.55V20.2c0 2.7 2.18 4.87 4.87 4.87h11.05c2.69 0 4.87-2.18 4.87-4.87V9.88c0-.98-.36-1.91-1.02-2.63l-2.24-2.44a3.88 3.88 0 0 0-2.86-1.26H9.72c-1.09 0-2.13.46-2.86 1.26L4.62 7.25a4.13 4.13 0 0 0-.08.08ZM14 11.55c.5 0 .9.4.9.9v5.36l1.83-1.75a.9.9 0 0 1 1.25 1.3l-3.36 3.2a.9.9 0 0 1-1.24 0l-3.35-3.2a.9.9 0 1 1 1.24-1.3l1.83 1.75v-5.36c0-.5.4-.9.9-.9Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-archive',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"29\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M9.72 5.35c-.59 0-1.14.25-1.54.67l-.9.98H20.7l-.9-.98c-.4-.42-.95-.67-1.53-.67H9.72ZM22.29 8.8H5.7c-.19.32-.3.7-.3 1.08V20.2c0 1.7 1.38 3.07 3.08 3.07h11.05c1.7 0 3.07-1.37 3.07-3.07V9.88c0-.39-.1-.76-.3-1.08ZM4.54 7.33c-.6.7-.94 1.61-.94 2.55V20.2c0 2.7 2.18 4.87 4.87 4.87h11.05c2.69 0 4.87-2.18 4.87-4.87V9.88c0-.98-.36-1.91-1.02-2.63l-2.24-2.44a3.88 3.88 0 0 0-2.86-1.26H9.72c-1.09 0-2.13.46-2.86 1.26L4.62 7.25a4.13 4.13 0 0 0-.08.08ZM14 11.55c.5 0 .9.4.9.9v5.36l1.83-1.75a.9.9 0 0 1 1.25 1.3l-3.36 3.2a.9.9 0 0 1-1.24 0l-3.35-3.2a.9.9 0 1 1 1.24-1.3l1.83 1.75v-5.36c0-.5.4-.9.9-.9Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Archive extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Attach",
            "id": "component-TguiIcon28Attach-eb173280e57fac4ca50c0b9ce680d8c1168292dfe0613fe6fa781577bf95dd139015907f54082fbcdd3e6337c4831ce72fdb1a08567594f7067ab0885469b934",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-attach.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-attach",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M20.286 6.445c-2.342-2.307-6.19-2.307-8.53 0l-5.353 5.272a.99.99 0 0 1-1.388-1.41l5.352-5.272c3.112-3.065 8.196-3.065 11.307 0a7.598 7.598 0 0 1 0 10.885l-7.347 7.238c-2.355 2.32-6.198 2.32-8.553 0a5.762 5.762 0 0 1 0-8.253l7.381-7.27c1.585-1.56 4.141-1.632 5.814-.167a4.06 4.06 0 0 1 .082 6.068l-6.158 5.688a.99.99 0 0 1-1.343-1.454l6.16-5.687c.93-.859.91-2.29-.044-3.127a2.315 2.315 0 0 0-3.122.088l-7.381 7.27a3.784 3.784 0 0 0 0 5.435c1.584 1.56 4.191 1.56 5.775 0l7.348-7.238a5.62 5.62 0 0 0 0-8.066Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-attach',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M20.286 6.445c-2.342-2.307-6.19-2.307-8.53 0l-5.353 5.272a.99.99 0 0 1-1.388-1.41l5.352-5.272c3.112-3.065 8.196-3.065 11.307 0a7.598 7.598 0 0 1 0 10.885l-7.347 7.238c-2.355 2.32-6.198 2.32-8.553 0a5.762 5.762 0 0 1 0-8.253l7.381-7.27c1.585-1.56 4.141-1.632 5.814-.167a4.06 4.06 0 0 1 .082 6.068l-6.158 5.688a.99.99 0 0 1-1.343-1.454l6.16-5.687c.93-.859.91-2.29-.044-3.127a2.315 2.315 0 0 0-3.122.088l-7.381 7.27a3.784 3.784 0 0 0 0 5.435c1.584 1.56 4.191 1.56 5.775 0l7.348-7.238a5.62 5.62 0 0 0 0-8.066Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Attach extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Chat",
            "id": "component-TguiIcon28Chat-8f7bac56bb02a11b67fb7bf1677d505c64cf8b0539717ea034b938fa0b0dc24a2f129baa6f7b70f9bbf16ce3eb0f08f1a0048331c2ad0e278cd3abb0eb45db51",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-chat.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-chat",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M7.15 20.64c.27-.6.45-1.29.45-2.13a7.55 7.55 0 0 1-2.91-5.84c0-4.44 4.17-8.04 9.3-8.04 5.15 0 9.32 3.6 9.32 8.04 0 4.44-4.17 8.04-9.31 8.04-.8 0-1.58-.1-2.33-.26a7.55 7.55 0 0 1-3.19 1.86c-.87.29-1.94.54-3.21.7a8.4 8.4 0 0 0 1.88-2.37Zm5.12 1.93c.57.08 1.14.12 1.73.12 5.95 0 11.29-4.23 11.29-10.02 0-5.8-5.34-10.02-11.3-10.02-5.94 0-11.28 4.22-11.28 10.02 0 2.58 1.1 4.9 2.82 6.63-.2.82-.75 1.4-1.65 2.3a1.98 1.98 0 0 0 1.63 3.37c3.24-.4 5.42-1.37 6.76-2.4Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-chat',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M7.15 20.64c.27-.6.45-1.29.45-2.13a7.55 7.55 0 0 1-2.91-5.84c0-4.44 4.17-8.04 9.3-8.04 5.15 0 9.32 3.6 9.32 8.04 0 4.44-4.17 8.04-9.31 8.04-.8 0-1.58-.1-2.33-.26a7.55 7.55 0 0 1-3.19 1.86c-.87.29-1.94.54-3.21.7a8.4 8.4 0 0 0 1.88-2.37Zm5.12 1.93c.57.08 1.14.12 1.73.12 5.95 0 11.29-4.23 11.29-10.02 0-5.8-5.34-10.02-11.3-10.02-5.94 0-11.28 4.22-11.28 10.02 0 2.58 1.1 4.9 2.82 6.63-.2.82-.75 1.4-1.65 2.3a1.98 1.98 0 0 0 1.63 3.37c3.24-.4 5.42-1.37 6.76-2.4Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Chat extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Close",
            "id": "component-TguiIcon28Close-3bed191e1977d20d5dd716c6103545e3c8baee7bfce27e760d18747d56b15eb0226cd093925ece5be49e984970d839adb3c27a751c16a1de4f56e69da691605f",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-close.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-close",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <g clipPath=\"url(#close_a)\" fill=\"currentColor\">\n    <path\n      d=\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\"\n      fillOpacity=\".04\"\n    />\n    <path\n      opacity=\".5\"\n      d=\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\"\n      fillOpacity=\".8\"\n    />\n  </g>\n  <defs>\n    <clipPath id=\"close_a\">\n      <path fill=\"#fff\" d=\"M0 0h28v28H0z\" />\n    </clipPath>\n  </defs>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-close',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <g clipPath=\"url(#close_a)\" fill=\"currentColor\">\n        <path \n          d=\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\"\n          fillOpacity=\".04\" \n        />\n        <path \n          opacity=\".5\"\n          d=\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\"\n          fillOpacity=\".8\" \n        />\n      </g>\n      <defs>\n        <clipPath id=\"close_a\">\n          <path fill=\"#fff\" d=\"M0 0h28v28H0z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  `,\n})\nexport class TguiIcon28Close extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28CloseAmbient",
            "id": "component-TguiIcon28CloseAmbient-73cf97cdbc47b57632397642e409e03b9088be31bb52f6deea038d2aa0a8ee98bd3b31cb5c7c642d29c7c99a8ce2a80feb89edbebb2d6eff0a520458314cd4fe",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-close-ambient.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-close-ambient",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <g clipPath=\"url(#close_ambient_a)\">\n    <path\n      d=\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\"\n      fill=\"#000\"\n      fillOpacity=\".1\"\n    />\n    <path\n      d=\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\"\n      fill=\"#fff\"\n    />\n  </g>\n  <defs>\n    <clipPath id=\"close_ambient_a\">\n      <path fill=\"#fff\" d=\"M0 0h28v28H0z\" />\n    </clipPath>\n  </defs>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-close-ambient',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <g clipPath=\"url(#close_ambient_a)\">\n        <path \n          d=\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\"\n          fill=\"#000\" \n          fillOpacity=\".1\" \n        />\n        <path\n          d=\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\"\n          fill=\"#fff\" \n        />\n      </g>\n      <defs>\n        <clipPath id=\"close_ambient_a\">\n          <path fill=\"#fff\" d=\"M0 0h28v28H0z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  `,\n})\nexport class TguiIcon28CloseAmbient extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Devices",
            "id": "component-TguiIcon28Devices-747ef47e23b79ff46f5d331c414faed4b7a6bca8f2dac7114c0ab23efb00ddb87e1cb0e7063d2a87f32ba17de4d5d43a6157fc8d81e8692849828f6ee412beb8",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-devices.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-devices",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M4.03 7.9c0-1.59 1.3-2.88 2.89-2.88h16.74a.9.9 0 0 1 0 1.8H6.92c-.6 0-1.09.48-1.09 1.08v12.9h9.63a.9.9 0 0 1 0 1.8H2a.9.9 0 1 1 0-1.8h2.03V7.9Zm16.93 3.77c-.6 0-1.08.5-1.08 1.1v6.95c0 .6.48 1.08 1.08 1.08h3.05c.6 0 1.09-.48 1.09-1.08v-6.96c0-.6-.49-1.09-1.09-1.09h-3.05Zm-2.88 1.1c0-1.6 1.29-2.9 2.88-2.9h3.05c1.6 0 2.89 1.3 2.89 2.9v6.95c0 1.6-1.3 2.88-2.89 2.88h-3.05c-1.6 0-2.88-1.29-2.88-2.88v-6.96Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-devices',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M4.03 7.9c0-1.59 1.3-2.88 2.89-2.88h16.74a.9.9 0 0 1 0 1.8H6.92c-.6 0-1.09.48-1.09 1.08v12.9h9.63a.9.9 0 0 1 0 1.8H2a.9.9 0 1 1 0-1.8h2.03V7.9Zm16.93 3.77c-.6 0-1.08.5-1.08 1.1v6.95c0 .6.48 1.08 1.08 1.08h3.05c.6 0 1.09-.48 1.09-1.08v-6.96c0-.6-.49-1.09-1.09-1.09h-3.05Zm-2.88 1.1c0-1.6 1.29-2.9 2.88-2.9h3.05c1.6 0 2.89 1.3 2.89 2.9v6.95c0 1.6-1.3 2.88-2.89 2.88h-3.05c-1.6 0-2.88-1.29-2.88-2.88v-6.96Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Devices extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Edit",
            "id": "component-TguiIcon28Edit-0f7ffc9a60fd8bcc8342adc8af2bbb9f97e19de9dab2205b156668a977fda05325242325ef444e65b1e5413c03b226333056fb1cb0e303236f44fd43872d1835",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-edit.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-edit",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M18.92 3.4c.21-.03.43-.03.64 0 .58.06 1.04.32 1.47.66.41.32.86.77 1.4 1.29l.06.07c.55.54 1 1 1.34 1.4.35.44.62.91.7 1.5.02.21.02.43 0 .65a2.89 2.89 0 0 1-.7 1.5c-.33.4-.8.86-1.34 1.4L10.48 23.73l-.08.08a4.6 4.6 0 0 1-1.23.97 2.9 2.9 0 0 1-.26.11c-.47.17-.97.17-1.56.17H7.12c-.74 0-1.37 0-1.88-.06a2.9 2.9 0 0 1-1.5-.55c-.2-.15-.37-.32-.52-.51a2.9 2.9 0 0 1-.54-1.5c-.06-.51-.06-1.14-.06-1.88v-.16c0-.58 0-1.07.16-1.53l.14-.33c.22-.44.56-.78.97-1.19l.08-.08L16.06 5.35c.53-.52.98-.97 1.39-1.29.43-.34.9-.6 1.47-.67Zm.44 1.78h-.24c-.1.01-.26.06-.56.3-.32.25-.7.62-1.27 1.18l-.7.7 3.96 3.9.64-.64c.6-.58.98-.96 1.23-1.28.25-.3.3-.46.31-.57v-.25c-.01-.1-.06-.27-.3-.57-.26-.32-.65-.7-1.24-1.29a17.1 17.1 0 0 0-1.27-1.18c-.3-.24-.45-.29-.56-.3Zm-.1 7.34-3.95-3.9-10.07 9.94c-.53.52-.64.64-.7.77l-.06.13a17.21 17.21 0 0 0-.01 2.77c.04.38.11.52.18.6.05.08.12.14.19.2.08.07.23.14.6.18.4.05.92.05 1.73.05h.07a3.66 3.66 0 0 0 1.17-.1c.13-.07.26-.18.8-.71l10.06-9.93Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-edit',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M18.92 3.4c.21-.03.43-.03.64 0 .58.06 1.04.32 1.47.66.41.32.86.77 1.4 1.29l.06.07c.55.54 1 1 1.34 1.4.35.44.62.91.7 1.5.02.21.02.43 0 .65a2.89 2.89 0 0 1-.7 1.5c-.33.4-.8.86-1.34 1.4L10.48 23.73l-.08.08a4.6 4.6 0 0 1-1.23.97 2.9 2.9 0 0 1-.26.11c-.47.17-.97.17-1.56.17H7.12c-.74 0-1.37 0-1.88-.06a2.9 2.9 0 0 1-1.5-.55c-.2-.15-.37-.32-.52-.51a2.9 2.9 0 0 1-.54-1.5c-.06-.51-.06-1.14-.06-1.88v-.16c0-.58 0-1.07.16-1.53l.14-.33c.22-.44.56-.78.97-1.19l.08-.08L16.06 5.35c.53-.52.98-.97 1.39-1.29.43-.34.9-.6 1.47-.67Zm.44 1.78h-.24c-.1.01-.26.06-.56.3-.32.25-.7.62-1.27 1.18l-.7.7 3.96 3.9.64-.64c.6-.58.98-.96 1.23-1.28.25-.3.3-.46.31-.57v-.25c-.01-.1-.06-.27-.3-.57-.26-.32-.65-.7-1.24-1.29a17.1 17.1 0 0 0-1.27-1.18c-.3-.24-.45-.29-.56-.3Zm-.1 7.34-3.95-3.9-10.07 9.94c-.53.52-.64.64-.7.77l-.06.13a17.21 17.21 0 0 0-.01 2.77c.04.38.11.52.18.6.05.08.12.14.19.2.08.07.23.14.6.18.4.05.92.05 1.73.05h.07a3.66 3.66 0 0 0 1.17-.1c.13-.07.26-.18.8-.71l10.06-9.93Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Edit extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Heart",
            "id": "component-TguiIcon28Heart-ecf7cd955b7ae7104544671e32fd7a47924325db8af7db021055e543ccc25910ff7ee689f1f92ff635aca47ab681dc9b124c7ad2db63677ee1174fffd1d1ea4e",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-heart.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-heart",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M14 5.126c-.994-.932-2.343-1.678-3.823-1.95-1.761-.323-3.71.03-5.402 1.524-1.128.996-1.833 2.563-2.067 4.256a9.678 9.678 0 0 0 .834 5.41c.607 1.287 2.054 2.908 3.557 4.4 1.537 1.523 3.247 3.023 4.5 4.083a3.706 3.706 0 0 0 4.803 0c1.252-1.06 2.962-2.56 4.499-4.084 1.503-1.491 2.95-3.112 3.558-4.4a9.677 9.677 0 0 0 .833-5.409c-.233-1.693-.939-3.26-2.067-4.256-1.692-1.495-3.64-1.847-5.402-1.524-1.48.272-2.828 1.018-3.823 1.95Zm-4.148-.18c-1.274-.233-2.648.01-3.886 1.103-.72.635-1.283 1.758-1.475 3.153a7.878 7.878 0 0 0 .678 4.395c.455.964 1.677 2.381 3.198 3.89 1.488 1.477 3.159 2.942 4.394 3.988.72.61 1.757.61 2.478 0 1.235-1.046 2.906-2.511 4.394-3.988 1.521-1.509 2.743-2.926 3.198-3.89a7.878 7.878 0 0 0 .678-4.395c-.192-1.395-.756-2.518-1.475-3.153-1.238-1.093-2.612-1.336-3.886-1.103-1.304.24-2.502.984-3.271 1.857a1.17 1.17 0 0 1-1.754 0c-.768-.873-1.967-1.617-3.271-1.857Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-heart',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M14 5.126c-.994-.932-2.343-1.678-3.823-1.95-1.761-.323-3.71.03-5.402 1.524-1.128.996-1.833 2.563-2.067 4.256a9.678 9.678 0 0 0 .834 5.41c.607 1.287 2.054 2.908 3.557 4.4 1.537 1.523 3.247 3.023 4.5 4.083a3.706 3.706 0 0 0 4.803 0c1.252-1.06 2.962-2.56 4.499-4.084 1.503-1.491 2.95-3.112 3.558-4.4a9.677 9.677 0 0 0 .833-5.409c-.233-1.693-.939-3.26-2.067-4.256-1.692-1.495-3.64-1.847-5.402-1.524-1.48.272-2.828 1.018-3.823 1.95Zm-4.148-.18c-1.274-.233-2.648.01-3.886 1.103-.72.635-1.283 1.758-1.475 3.153a7.878 7.878 0 0 0 .678 4.395c.455.964 1.677 2.381 3.198 3.89 1.488 1.477 3.159 2.942 4.394 3.988.72.61 1.757.61 2.478 0 1.235-1.046 2.906-2.511 4.394-3.988 1.521-1.509 2.743-2.926 3.198-3.89a7.878 7.878 0 0 0 .678-4.395c-.192-1.395-.756-2.518-1.475-3.153-1.238-1.093-2.612-1.336-3.886-1.103-1.304.24-2.502.984-3.271 1.857a1.17 1.17 0 0 1-1.754 0c-.768-.873-1.967-1.617-3.271-1.857Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Heart extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon28Stats",
            "id": "component-TguiIcon28Stats-1f5bc554ec7c4b0f8d3c94396b318240d6692e435d1ed3fc7064249660ffa89150ce53c0a3eb199e803f1d6bef30ace84a2da7c38fc3c064327e01d56342aa24",
            "file": "projects/tgui/src/lib/icons/icon28/tgui-icon28-stats.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon28-stats",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"28\"\n  height=\"28\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon28-stats',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"28\" \n      height=\"28\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon28Stats extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon32ProfileColoredSquare",
            "id": "component-TguiIcon32ProfileColoredSquare-dae06c407d9b5e3094053c57da5dc8422b344dd625eba45d22c2d75fd09134c7e23af67fff74f5a026d845e6da0e05bae8281931aa792d329f0f372f6a3dc0ec",
            "file": "projects/tgui/src/lib/icons/icon32/tgui-icon32-profile-colored-square.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon32-profile-colored-square",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"33\"\n  height=\"32\"\n  viewBox=\"0 0 33 32\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    d=\"M1.5 10.6C1.5 7.23968 1.5 5.55953 2.15396 4.27606C2.7292 3.14708 3.64708 2.2292 4.77606 1.65396C6.05953 1 7.73969 1 11.1 1H21.9C25.2603 1 26.9405 1 28.2239 1.65396C29.3529 2.2292 30.2708 3.14708 30.846 4.27606C31.5 5.55953 31.5 7.23969 31.5 10.6V21.4C31.5 24.7603 31.5 26.4405 30.846 27.7239C30.2708 28.8529 29.3529 29.7708 28.2239 30.346C26.9405 31 25.2603 31 21.9 31H11.1C7.73968 31 6.05953 31 4.77606 30.346C3.64708 29.7708 2.7292 28.8529 2.15396 27.7239C1.5 26.4405 1.5 24.7603 1.5 21.4V10.6Z\"\n    fill=\"#008AFF\" />\n  <path\n    d=\"M18.459 13.2759H22.9912C23.1351 13.2759 23.2568 13.2261 23.3564 13.1265C23.4561 13.0269 23.5059 12.9051 23.5059 12.7612C23.5059 12.6174 23.4561 12.4984 23.3564 12.4043C23.2568 12.3047 23.1351 12.2549 22.9912 12.2549H18.459C18.3096 12.2549 18.1851 12.3047 18.0854 12.4043C17.9858 12.4984 17.936 12.6174 17.936 12.7612C17.936 12.9051 17.9858 13.0269 18.0854 13.1265C18.1851 13.2261 18.3096 13.2759 18.459 13.2759ZM18.459 16.5298H22.9912C23.1351 16.5298 23.2568 16.48 23.3564 16.3804C23.4561 16.2808 23.5059 16.1562 23.5059 16.0068C23.5059 15.8685 23.4561 15.7523 23.3564 15.6582C23.2568 15.5586 23.1351 15.5088 22.9912 15.5088H18.459C18.3096 15.5088 18.1851 15.5586 18.0854 15.6582C17.9858 15.7523 17.936 15.8685 17.936 16.0068C17.936 16.1562 17.9858 16.2808 18.0854 16.3804C18.1851 16.48 18.3096 16.5298 18.459 16.5298ZM18.459 19.7754H22.9912C23.1351 19.7754 23.2568 19.7284 23.3564 19.6343C23.4561 19.5347 23.5059 19.4157 23.5059 19.2773C23.5059 19.1335 23.4561 19.0117 23.3564 18.9121C23.2568 18.807 23.1351 18.7544 22.9912 18.7544H18.459C18.3096 18.7544 18.1851 18.807 18.0854 18.9121C17.9858 19.0117 17.936 19.1335 17.936 19.2773C17.936 19.4157 17.9858 19.5347 18.0854 19.6343C18.1851 19.7284 18.3096 19.7754 18.459 19.7754ZM9.80957 19.8335H16.2925C16.4253 19.8335 16.5249 19.792 16.5913 19.709C16.6632 19.626 16.6992 19.5236 16.6992 19.4019C16.6992 19.2026 16.6245 18.9508 16.4751 18.6465C16.3312 18.3366 16.1071 18.0267 15.8027 17.7168C15.5039 17.4014 15.1248 17.1385 14.6655 16.9282C14.2062 16.7179 13.6667 16.6128 13.0469 16.6128C12.4271 16.6128 11.8875 16.7179 11.4282 16.9282C10.9744 17.1385 10.5954 17.4014 10.291 17.7168C9.99219 18.0267 9.76807 18.3366 9.61865 18.6465C9.47477 18.9508 9.40283 19.2026 9.40283 19.4019C9.40283 19.5236 9.43604 19.626 9.50244 19.709C9.57438 19.792 9.67676 19.8335 9.80957 19.8335ZM13.0469 16.0317C13.5505 16.0317 13.9793 15.8436 14.3335 15.4673C14.6877 15.091 14.8647 14.6178 14.8647 14.0479C14.8647 13.6937 14.7817 13.37 14.6157 13.0767C14.4552 12.7834 14.2367 12.5482 13.96 12.3711C13.6888 12.194 13.3844 12.1055 13.0469 12.1055C12.7148 12.1055 12.4105 12.194 12.1338 12.3711C11.8571 12.5482 11.6357 12.7834 11.4697 13.0767C11.3092 13.37 11.229 13.6937 11.229 14.0479C11.229 14.6178 11.4061 15.091 11.7603 15.4673C12.12 15.8436 12.5488 16.0317 13.0469 16.0317ZM9.31982 23.6519C8.45101 23.6519 7.79801 23.436 7.36084 23.0044C6.9292 22.5783 6.71338 21.9391 6.71338 21.0869V10.9434C6.71338 10.0856 6.9292 9.44368 7.36084 9.01758C7.79801 8.58594 8.45101 8.37012 9.31982 8.37012H23.6802C24.5545 8.37012 25.2075 8.58594 25.6392 9.01758C26.0708 9.44922 26.2866 10.0911 26.2866 10.9434V21.0869C26.2866 21.9391 26.0708 22.5783 25.6392 23.0044C25.2075 23.436 24.5545 23.6519 23.6802 23.6519H9.31982Z\"\n    fill=\"white\" />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon32-profile-colored-square',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"33\" \n      height=\"32\" \n      viewBox=\"0 0 33 32\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path\n        d=\"M1.5 10.6C1.5 7.23968 1.5 5.55953 2.15396 4.27606C2.7292 3.14708 3.64708 2.2292 4.77606 1.65396C6.05953 1 7.73969 1 11.1 1H21.9C25.2603 1 26.9405 1 28.2239 1.65396C29.3529 2.2292 30.2708 3.14708 30.846 4.27606C31.5 5.55953 31.5 7.23969 31.5 10.6V21.4C31.5 24.7603 31.5 26.4405 30.846 27.7239C30.2708 28.8529 29.3529 29.7708 28.2239 30.346C26.9405 31 25.2603 31 21.9 31H11.1C7.73968 31 6.05953 31 4.77606 30.346C3.64708 29.7708 2.7292 28.8529 2.15396 27.7239C1.5 26.4405 1.5 24.7603 1.5 21.4V10.6Z\"\n        fill=\"#008AFF\" />\n      <path\n        d=\"M18.459 13.2759H22.9912C23.1351 13.2759 23.2568 13.2261 23.3564 13.1265C23.4561 13.0269 23.5059 12.9051 23.5059 12.7612C23.5059 12.6174 23.4561 12.4984 23.3564 12.4043C23.2568 12.3047 23.1351 12.2549 22.9912 12.2549H18.459C18.3096 12.2549 18.1851 12.3047 18.0854 12.4043C17.9858 12.4984 17.936 12.6174 17.936 12.7612C17.936 12.9051 17.9858 13.0269 18.0854 13.1265C18.1851 13.2261 18.3096 13.2759 18.459 13.2759ZM18.459 16.5298H22.9912C23.1351 16.5298 23.2568 16.48 23.3564 16.3804C23.4561 16.2808 23.5059 16.1562 23.5059 16.0068C23.5059 15.8685 23.4561 15.7523 23.3564 15.6582C23.2568 15.5586 23.1351 15.5088 22.9912 15.5088H18.459C18.3096 15.5088 18.1851 15.5586 18.0854 15.6582C17.9858 15.7523 17.936 15.8685 17.936 16.0068C17.936 16.1562 17.9858 16.2808 18.0854 16.3804C18.1851 16.48 18.3096 16.5298 18.459 16.5298ZM18.459 19.7754H22.9912C23.1351 19.7754 23.2568 19.7284 23.3564 19.6343C23.4561 19.5347 23.5059 19.4157 23.5059 19.2773C23.5059 19.1335 23.4561 19.0117 23.3564 18.9121C23.2568 18.807 23.1351 18.7544 22.9912 18.7544H18.459C18.3096 18.7544 18.1851 18.807 18.0854 18.9121C17.9858 19.0117 17.936 19.1335 17.936 19.2773C17.936 19.4157 17.9858 19.5347 18.0854 19.6343C18.1851 19.7284 18.3096 19.7754 18.459 19.7754ZM9.80957 19.8335H16.2925C16.4253 19.8335 16.5249 19.792 16.5913 19.709C16.6632 19.626 16.6992 19.5236 16.6992 19.4019C16.6992 19.2026 16.6245 18.9508 16.4751 18.6465C16.3312 18.3366 16.1071 18.0267 15.8027 17.7168C15.5039 17.4014 15.1248 17.1385 14.6655 16.9282C14.2062 16.7179 13.6667 16.6128 13.0469 16.6128C12.4271 16.6128 11.8875 16.7179 11.4282 16.9282C10.9744 17.1385 10.5954 17.4014 10.291 17.7168C9.99219 18.0267 9.76807 18.3366 9.61865 18.6465C9.47477 18.9508 9.40283 19.2026 9.40283 19.4019C9.40283 19.5236 9.43604 19.626 9.50244 19.709C9.57438 19.792 9.67676 19.8335 9.80957 19.8335ZM13.0469 16.0317C13.5505 16.0317 13.9793 15.8436 14.3335 15.4673C14.6877 15.091 14.8647 14.6178 14.8647 14.0479C14.8647 13.6937 14.7817 13.37 14.6157 13.0767C14.4552 12.7834 14.2367 12.5482 13.96 12.3711C13.6888 12.194 13.3844 12.1055 13.0469 12.1055C12.7148 12.1055 12.4105 12.194 12.1338 12.3711C11.8571 12.5482 11.6357 12.7834 11.4697 13.0767C11.3092 13.37 11.229 13.6937 11.229 14.0479C11.229 14.6178 11.4061 15.091 11.7603 15.4673C12.12 15.8436 12.5488 16.0317 13.0469 16.0317ZM9.31982 23.6519C8.45101 23.6519 7.79801 23.436 7.36084 23.0044C6.9292 22.5783 6.71338 21.9391 6.71338 21.0869V10.9434C6.71338 10.0856 6.9292 9.44368 7.36084 9.01758C7.79801 8.58594 8.45101 8.37012 9.31982 8.37012H23.6802C24.5545 8.37012 25.2075 8.58594 25.6392 9.01758C26.0708 9.44922 26.2866 10.0911 26.2866 10.9434V21.0869C26.2866 21.9391 26.0708 22.5783 25.6392 23.0044C25.2075 23.436 24.5545 23.6519 23.6802 23.6519H9.31982Z\"\n        fill=\"white\" />\n    </svg>\n  `,\n})\nexport class TguiIcon32ProfileColoredSquare extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIcon36Backspace",
            "id": "component-TguiIcon36Backspace-abcb8e5f53cec426626af7f9b9dba0e28b2d9fe28d0884c22eab550a736b5fbd7d878d47adac89521e49668d609b0ea97719456627d0f82d2a33f85e44d349d4",
            "file": "projects/tgui/src/lib/icons/icon36/tgui-icon36-backspace.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-icon36-backspace",
            "styleUrls": [],
            "styles": [],
            "template": "<svg\n  width=\"36\"\n  height=\"36\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  [tguiSvgProps]=\"props\"\n>\n  <path\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    d=\"M15.886 6.5h8.855c.805 0 1.47 0 2.01.044.563.046 1.08.145 1.564.392a4 4 0 0 1 1.749 1.748c.247.485.345 1.002.391 1.564.045.541.045 1.206.045 2.01v11.483c0 .805 0 1.47-.045 2.01-.046.563-.144 1.08-.391 1.565a4 4 0 0 1-1.748 1.748c-.486.247-1.002.346-1.565.392-.54.044-1.205.044-2.01.044h-8.855c-.635 0-1.115 0-1.578-.11a4.001 4.001 0 0 1-1.156-.48c-.405-.248-.745-.587-1.193-1.037l-.072-.072-5.73-5.729c-.569-.57-1.039-1.039-1.39-1.453-.365-.43-.66-.865-.829-1.383a4 4 0 0 1 0-2.472c.168-.518.464-.953.829-1.383.351-.414.821-.884 1.39-1.453l5.73-5.73.072-.071c.448-.45.787-.789 1.193-1.038a4 4 0 0 1 1.156-.479c.463-.11.943-.11 1.578-.11Zm.102 2c-.782 0-1.01.006-1.213.055-.204.05-.399.13-.578.24-.178.109-.344.265-.896.818l-5.7 5.7c-.606.606-1.017 1.018-1.31 1.362-.284.335-.397.54-.45.707a2 2 0 0 0 0 1.236c.053.167.166.371.45.707.293.344.704.756 1.31 1.362l5.7 5.7c.552.552.718.709.896.818.18.11.374.19.578.24.204.049.431.055 1.213.055H24.7c.856 0 1.438 0 1.889-.038.438-.035.662-.1.819-.18a2 2 0 0 0 .874-.874c.08-.157.144-.38.18-.82.037-.45.038-1.032.038-1.888V12.3c0-.857-.001-1.439-.038-1.889-.036-.438-.1-.663-.18-.819a2 2 0 0 0-.875-.874c-.156-.08-.38-.145-.819-.18-.45-.037-1.032-.038-1.889-.038h-8.711Zm-1.196 4.793a1 1 0 0 1 1.415 0l3.293 3.293 3.292-3.293a1 1 0 0 1 1.415 1.414L20.914 18l3.293 3.293a1 1 0 0 1-1.415 1.414L19.5 19.414l-3.292 3.293a1 1 0 1 1-1.415-1.414L18.085 18l-3.293-3.293a1 1 0 0 1 0-1.414Z\"\n    fill=\"currentColor\"\n  />\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": [],
                    "inheritance": {
                        "file": "TguiIconBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TguiSvgPropsDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TguiIconBase } from '../icon-base.component';\nimport { TguiSvgPropsDirective } from '../directives';\nimport { TguiIconProps } from '../icon.interface';\n\n@Component({\n  selector: 'tgui-icon36-backspace',\n  standalone: true,\n  imports: [CommonModule, TguiSvgPropsDirective],\n  template: `\n    <svg \n      width=\"36\" \n      height=\"36\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\"\n      [tguiSvgProps]=\"props\"\n    >\n      <path \n        fillRule=\"evenodd\" \n        clipRule=\"evenodd\"\n        d=\"M15.886 6.5h8.855c.805 0 1.47 0 2.01.044.563.046 1.08.145 1.564.392a4 4 0 0 1 1.749 1.748c.247.485.345 1.002.391 1.564.045.541.045 1.206.045 2.01v11.483c0 .805 0 1.47-.045 2.01-.046.563-.144 1.08-.391 1.565a4 4 0 0 1-1.748 1.748c-.486.247-1.002.346-1.565.392-.54.044-1.205.044-2.01.044h-8.855c-.635 0-1.115 0-1.578-.11a4.001 4.001 0 0 1-1.156-.48c-.405-.248-.745-.587-1.193-1.037l-.072-.072-5.73-5.729c-.569-.57-1.039-1.039-1.39-1.453-.365-.43-.66-.865-.829-1.383a4 4 0 0 1 0-2.472c.168-.518.464-.953.829-1.383.351-.414.821-.884 1.39-1.453l5.73-5.73.072-.071c.448-.45.787-.789 1.193-1.038a4 4 0 0 1 1.156-.479c.463-.11.943-.11 1.578-.11Zm.102 2c-.782 0-1.01.006-1.213.055-.204.05-.399.13-.578.24-.178.109-.344.265-.896.818l-5.7 5.7c-.606.606-1.017 1.018-1.31 1.362-.284.335-.397.54-.45.707a2 2 0 0 0 0 1.236c.053.167.166.371.45.707.293.344.704.756 1.31 1.362l5.7 5.7c.552.552.718.709.896.818.18.11.374.19.578.24.204.049.431.055 1.213.055H24.7c.856 0 1.438 0 1.889-.038.438-.035.662-.1.819-.18a2 2 0 0 0 .874-.874c.08-.157.144-.38.18-.82.037-.45.038-1.032.038-1.888V12.3c0-.857-.001-1.439-.038-1.889-.036-.438-.1-.663-.18-.819a2 2 0 0 0-.875-.874c-.156-.08-.38-.145-.819-.18-.45-.037-1.032-.038-1.889-.038h-8.711Zm-1.196 4.793a1 1 0 0 1 1.415 0l3.293 3.293 3.292-3.293a1 1 0 0 1 1.415 1.414L20.914 18l3.293 3.293a1 1 0 0 1-1.415 1.414L19.5 19.414l-3.292 3.293a1 1 0 1 1-1.415-1.414L18.085 18l-3.293-3.293a1 1 0 0 1 0-1.414Z\"\n        fill=\"currentColor\" \n      />\n    </svg>\n  `,\n})\nexport class TguiIcon36Backspace extends TguiIconBase {\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "TguiIconBase"
            ]
        },
        {
            "name": "TguiIconBase",
            "id": "component-TguiIconBase-a76efd20692517a498a0536e54a69dc5dd9a759b5b2bd3dca5d468e5454a45b4e59219771690887be83e764d0f443584b45c09506feab6ba5181a88f257b13da",
            "file": "projects/tgui/src/lib/icons/icon-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "props",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TguiIconProps",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { TguiIconProps } from './icon.interface';\n\n@Component({\n  template: '',\n})\nexport abstract class TguiIconBase {\n  @Input() props: TguiIconProps = {};\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-8aa7383cf7d98ce9ca52be071b75259ec5d8cf3274543138a77aca37442d146b482a1f1d699a877c453c7400ec7d9cc6d4b119a7c02eded0a278f0f061cff26d",
            "file": "projects/tgui/src/lib/components/typography/title/title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-title",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "'2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\n",
                    "description": "<p>Determines the size and semantic tag of the title, with options for <code>h2</code>, <code>h3</code>, or <code>h4</code>.</p>\n",
                    "line": 58,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": []
                },
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "titleLevelTags",
                    "defaultValue": "{\n    '1': 'h2',\n    '2': 'h3',\n    '3': 'h4'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.level-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.level-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "TypographyComponent"
                    }
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Title component is designed to render text as a page or section heading,\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses <code>h3</code>\nfor its semantic HTML element but can be customized via the <code>level</code> prop or explicitly with the <code>tag</code> property.</p>\n",
            "rawdescription": "\n\nThe Title component is designed to render text as a page or section heading,\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\nfor its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TypographyComponent } from '@typography/typography.component';\n\n/**\n * The Title component is designed to render text as a page or section heading,\n * providing clear hierarchy and structure within content. It supports three levels of emphasis,\n * allowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\n * for its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\n */\n@Component({\n  selector: 'tgui-title',\n  standalone: true,\n  imports: [CommonModule],\n  template: '<ng-content></ng-content>',\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TitleComponent extends TypographyComponent implements OnInit {\n  /**\n   * Determines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\n   */\n  @Input() level: '1' | '2' | '3' = '2';\n  \n  // Host bindings for level classes\n  @HostBinding('class.level-1') get isLevel1() { return this.level === '1'; }\n  @HostBinding('class.level-2') get isLevel2() { return this.level === '2'; }\n  @HostBinding('class.level-3') get isLevel3() { return this.level === '3'; }\n  \n  // Добавляем привязки хоста для CSS-классов весов и других свойств\n  @HostBinding('class.plain') override get isPlain() { return this.plain; }\n  @HostBinding('class.caps') override get isCaps() { return this.caps; }\n  @HostBinding('class.weight-1') override get isWeight1() { return this.weight === '1'; }\n  @HostBinding('class.weight-2') override get isWeight2() { return this.weight === '2'; }\n  @HostBinding('class.weight-3') override get isWeight3() { return this.weight === '3'; }\n  \n  // Set the correct semantic HTML tag based on level\n  private titleLevelTags: Record<string, string> = {\n    '1': 'h2',\n    '2': 'h3',\n    '3': 'h4'\n  };\n  \n  // Override ngOnInit to set the tag based on level\n  ngOnInit() {\n    // Set the tag based on level if no custom tag is specified\n    if (!this.tag) {\n      this.tag = this.titleLevelTags[this.level];\n    }\n    \n    // Call the parent's ngOnInit\n    // super.ngOnInit();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: inline-block;\n    }\n    \n    :host.level-1 {\n      font-size: var(--tgui--title1--font_size);\n      line-height: var(--tgui--title1--line_height);\n    }\n    \n    :host.level-2 {\n      font-size: var(--tgui--title2--font_size);\n      line-height: var(--tgui--title2--line_height);\n    }\n    \n    :host.level-3 {\n      font-size: var(--tgui--title3--font_size);\n      line-height: var(--tgui--title3--line_height);\n    }\n    \n    :host.weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [
                "TypographyComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isLevel1": {
                    "name": "isLevel1",
                    "getSignature": {
                        "name": "isLevel1",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isLevel2": {
                    "name": "isLevel2",
                    "getSignature": {
                        "name": "isLevel2",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "isLevel3": {
                    "name": "isLevel3",
                    "getSignature": {
                        "name": "isLevel3",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            }
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-ada95c44f228629213336d9ee7e7e6a51a8a84aa6dc2eff868aa4f237f23241753eaf6fa5a738ad30ce6d2ad679353b21f1d9ee6930602dfe5621a8756607e9e",
            "file": "projects/tgui/src/lib/components/typography/typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tgui-typography",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain, .plain {\n      margin: 0;\n    }\n\n    :host.weight-1, .weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2, .weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3, .weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps, .caps {\n      text-transform: uppercase;\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"!tag\">\n  <ng-content></ng-content>\n</ng-container>\n<ng-container *ngIf=\"tag\">\n  <ng-container [ngSwitch]=\"tag\">\n    <h1 *ngSwitchCase=\"'h1'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h1>\n    <h2 *ngSwitchCase=\"'h2'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h2>\n    <h3 *ngSwitchCase=\"'h3'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h3>\n    <h4 *ngSwitchCase=\"'h4'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h4>\n    <h5 *ngSwitchCase=\"'h5'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h5>\n    <h6 *ngSwitchCase=\"'h6'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </h6>\n    <p *ngSwitchCase=\"'p'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </p>\n    <span *ngSwitchCase=\"'span'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </span>\n    <div *ngSwitchCase=\"'div'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n      <ng-content></ng-content>\n    </div>\n    <ng-container *ngSwitchDefault>\n      <span [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n        <ng-content></ng-content>\n      </span>\n    </ng-container>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "caps",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "plain",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "weight",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"1\" | \"2\" | \"3\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.caps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.plain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.weight-3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>The Typography component is a versatile wrapper for text content, offering\ncustomizable styling options such as weight, capitalization, and HTML tag. It&#39;s designed\nto facilitate consistent text styling across your application, with support for customization\nthrough inputs.</p>\n",
            "rawdescription": "\n\nThe Typography component is a versatile wrapper for text content, offering\ncustomizable styling options such as weight, capitalization, and HTML tag. It's designed\nto facilitate consistent text styling across your application, with support for customization\nthrough inputs.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ElementRef, Renderer2, OnInit, ViewEncapsulation, HostBinding, ChangeDetectionStrategy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The Typography component is a versatile wrapper for text content, offering\n * customizable styling options such as weight, capitalization, and HTML tag. It's designed\n * to facilitate consistent text styling across your application, with support for customization\n * through inputs.\n */\n@Component({\n  selector: 'tgui-typography',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <ng-container *ngIf=\"!tag\">\n      <ng-content></ng-content>\n    </ng-container>\n    <ng-container *ngIf=\"tag\">\n      <ng-container [ngSwitch]=\"tag\">\n        <h1 *ngSwitchCase=\"'h1'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h1>\n        <h2 *ngSwitchCase=\"'h2'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h2>\n        <h3 *ngSwitchCase=\"'h3'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h3>\n        <h4 *ngSwitchCase=\"'h4'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h4>\n        <h5 *ngSwitchCase=\"'h5'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h5>\n        <h6 *ngSwitchCase=\"'h6'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </h6>\n        <p *ngSwitchCase=\"'p'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </p>\n        <span *ngSwitchCase=\"'span'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </span>\n        <div *ngSwitchCase=\"'div'\" [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n          <ng-content></ng-content>\n        </div>\n        <ng-container *ngSwitchDefault>\n          <span [class.plain]=\"plain\" [class.caps]=\"caps\" [class.weight-1]=\"weight === '1'\" [class.weight-2]=\"weight === '2'\" [class.weight-3]=\"weight === '3'\">\n            <ng-content></ng-content>\n          </span>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain, .plain {\n      margin: 0;\n    }\n\n    :host.weight-1, .weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2, .weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3, .weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps, .caps {\n      text-transform: uppercase;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TypographyComponent {\n  @Input() weight: '1' | '2' | '3' = '3';\n  @Input() caps = false;\n  @Input() plain = true;\n  @Input() tag?: string;\n\n  @HostBinding('class.plain') get isPlain() { return this.plain && !this.tag; }\n  @HostBinding('class.caps') get isCaps() { return this.caps && !this.tag; }\n  @HostBinding('class.weight-1') get isWeight1() { return this.weight === '1' && !this.tag; }\n  @HostBinding('class.weight-2') get isWeight2() { return this.weight === '2' && !this.tag; }\n  @HostBinding('class.weight-3') get isWeight3() { return this.weight === '3' && !this.tag; }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      font-family: var(--tgui--font-family);\n      display: inline-block;\n    }\n\n    :host.plain, .plain {\n      margin: 0;\n    }\n\n    :host.weight-1, .weight-1 {\n      font-weight: var(--tgui--font_weight--accent1);\n    }\n\n    :host.weight-2, .weight-2 {\n      font-weight: var(--tgui--font_weight--accent2);\n    }\n\n    :host.weight-3, .weight-3 {\n      font-weight: var(--tgui--font_weight--accent3);\n    }\n\n    :host.caps, .caps {\n      text-transform: uppercase;\n    }\n  \n",
            "extends": [],
            "accessors": {
                "isPlain": {
                    "name": "isPlain",
                    "getSignature": {
                        "name": "isPlain",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "isCaps": {
                    "name": "isCaps",
                    "getSignature": {
                        "name": "isCaps",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "isWeight1": {
                    "name": "isWeight1",
                    "getSignature": {
                        "name": "isWeight1",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "isWeight2": {
                    "name": "isWeight2",
                    "getSignature": {
                        "name": "isWeight2",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                },
                "isWeight3": {
                    "name": "isWeight3",
                    "getSignature": {
                        "name": "isWeight3",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (h2)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n          </div>\n        </div>\n        \n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (h3)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 3 (h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n            <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n            <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n            <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n            <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Ambient",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'ambient',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Ambient Card\"\n          subtitle=\"This card uses the ambient style with a dark background.\">\n          <div style=\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\">\n            Additional content with lower opacity text\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'number',\n    mode: 'primary',\n    large: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-badge \n        [type]=\"type\" \n        [mode]=\"mode\" \n        [large]=\"large\"\n      >\n        3\n      </tgui-badge>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'filled',\n    stretched: false,\n    loading: false,\n    disabled: false,\n    interactiveAnimation: 'background'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-button \n        [size]=\"size\" \n        [mode]=\"mode\" \n        [stretched]=\"stretched\" \n        [loading]=\"loading\" \n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n      >\n        Button\n      </tgui-button>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<tgui-spinner [size]=\"size\"></tgui-spinner>`,\n  }),\n}"
            },
            {
                "name": "CaptionInContext",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <h4 style=\"margin-bottom: 8px;\">Chart Title</h4>\n          <div style=\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\"></div>\n          <tgui-caption level=\"2\">Chart data source: Example Dataset, 2023</tgui-caption>\n        </div>\n        \n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <img style=\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\" />\n          <tgui-caption level=\"1\">Photo by Example Photographer © 2023</tgui-caption>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(ts|mdx)'\n  ],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-docs',\n    '@storybook/addon-controls',\n  ],\n  staticDirs: [\n    { from: '../src/lib/styles', to: 'styles' } // Без префикса assets/tgui\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableIvy: true,\n    },\n  },\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n  webpackFinal: async (config) => {\n    config.resolve = {\n      ...(config.resolve || {}),\n      alias: {\n        ...(config.resolve?.alias || {}),\n        '@components': '../src/lib/components',\n        '@services': '../src/lib/services',\n        '@utils': '../src/lib/components/utils',\n        '@feedback': '../src/lib/components/feedback',\n        '@blocks': '../src/lib/components/blocks',\n        '@form': '../src/lib/components/form',\n        '@layout': '../src/lib/components/layout',\n        '@overlays': '../src/lib/components/overlays',\n        '@typography': '../src/lib/components/typography',\n        '@navigation': '../src/lib/components/navigation',\n        '@directives': '../src/lib/directives',\n        '@lib': '../src/lib',\n      },\n    };\n    return config;\n  },\n}"
            },
            {
                "name": "CustomBorderRadius",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    borderRadius: '8px'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image with custom border radius\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Custom Border Radius\"\n          subtitle=\"This card uses a custom border radius of 8px instead of the default 24px.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .color-container {\n        display: flex;\n        gap: 24px;\n      }\n      .color-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 16px;\n        border-radius: 8px;\n      }\n      .color-item:nth-child(1) {\n        color: var(--tgui--link_color);\n      }\n      .color-item:nth-child(2) {\n        color: var(--tgui--destructive);\n      }\n      .color-item:nth-child(3) {\n        color: #4CAF50;\n      }\n      .color-item:nth-child(4) {\n        background: #333;\n        color: white;\n      }\n      .color-label {\n        margin-top: 8px;\n        font-size: 14px;\n      }\n    `],\n    template: `\n      <div>\n        <p style=\"margin-bottom: 16px;\">\n          The spinner color is inherited from the parent container through the CSS <code>color</code> property.\n        </p>\n        \n        <div class=\"color-container\">\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Primary</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Destructive</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Success</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Light</span>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomOffsets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <div>\n          <p>Большой отступ (-6px):</p>\n          <tgui-avatar-stack [offset]=\"-6\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Стандартный отступ (-12px):</p>\n          <tgui-avatar-stack [offset]=\"-12\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Маленький отступ (-18px):</p>\n          <tgui-avatar-stack [offset]=\"-18\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Обычный разделитель</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Кастомный разделитель</div>\n        <tgui-divider style=\"border-color: var(--tgui--button_color); border-width: 2px;\"></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент после разделителя</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент выше разделителя</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент ниже разделителя</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card Title\"\n          subtitle=\"Card description text would go here to provide more information about this card.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            Additional content can be added here\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'bezeled',\n    disabled: false,\n    interactiveAnimation: 'background',\n    type: 'button'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-icon-button\n        [size]=\"size\"\n        [mode]=\"mode\"\n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n        [type]=\"type\"\n      >\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </tgui-icon-button>\n    `\n  })\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    header: 'Section Header',\n    footer: 'Section Footer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\" [footer]=\"footer\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>Basic section content</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentShapes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar shape=\"circle\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"rounded\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"square\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"xs\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"s\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"m\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"l\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"xl\" initials=\"JD\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "DifferentSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'s'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'l'\"></tgui-avatar>\n        </tgui-avatar-stack>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px;\">\n        <tgui-inline-buttons mode=\"bezeled\">\n          <tgui-inline-buttons-item [text]=\"'Enabled'\">\n            <tgui-icon24-chat></tgui-icon24-chat>\n          </tgui-inline-buttons-item>\n          <tgui-inline-buttons-item [disabled]=\"true\" [text]=\"'Disabled'\">\n            <tgui-icon24-notifications></tgui-icon24-notifications>\n          </tgui-inline-buttons-item>\n          <tgui-inline-buttons-item [text]=\"'Enabled'\">\n            <tgui-icon24-qr></tgui-icon24-qr>\n          </tgui-inline-buttons-item>\n        </tgui-inline-buttons>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button [disabled]=\"true\" mode=\"bezeled\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"plain\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"gray\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"outline\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Dots",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge type=\"dot\" mode=\"primary\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"critical\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"secondary\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"gray\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"white\"></tgui-badge>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "InList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Первый элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Второй элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Третий элемент списка</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ItemModes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Mixed Modes</h3>\n          <tgui-inline-buttons mode=\"plain\">\n            <tgui-inline-buttons-item [text]=\"'Plain'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [mode]=\"'bezeled'\" [text]=\"'Bezeled'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [mode]=\"'gray'\" [text]=\"'Gray'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n        <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n        <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Level2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n        <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n        <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconsShowcaseComponent>",
                "defaultValue": "{\n  title: 'Icons/Overview',\n  component: IconsShowcaseComponent,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DividerComponent>",
                "defaultValue": "{\n  title: 'Components/Misc/Divider',\n  component: DividerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DividerComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AvatarComponent>",
                "defaultValue": "{\n  title: 'Blocks/Avatar',\n  component: AvatarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['xs', 's', 'm', 'l', 'xl'],\n      control: { type: 'select' },\n      description: 'Размер аватара',\n      defaultValue: 'm',\n    },\n    shape: {\n      options: ['circle', 'rounded', 'square'],\n      control: { type: 'select' },\n      description: 'Форма аватара',\n      defaultValue: 'circle',\n    },\n    src: {\n      control: 'text',\n      description: 'URL изображения аватара',\n    },\n    initials: {\n      control: 'text',\n      description: 'Текст для формирования инициалов, если изображение отсутствует',\n    },\n    color: {\n      control: 'color',\n      description: 'Цвет фона для аватара с инициалами',\n    },\n    online: {\n      control: 'boolean',\n      description: 'Индикатор онлайн-статуса',\n      defaultValue: false,\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AvatarStackComponent>",
                "defaultValue": "{\n  title: 'Blocks/AvatarStack',\n  component: AvatarStackComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [AvatarComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    offset: {\n      control: { type: 'range', min: -24, max: 0, step: 1 },\n      defaultValue: -12,\n      description: 'Смещение между аватарами в пикселях'\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BadgeComponent>",
                "defaultValue": "{\n  title: 'Blocks/Badge',\n  component: BadgeComponent,\n  tags: ['autodocs'],\n  decorators: [],\n  argTypes: {\n    type: {\n      options: ['number', 'dot'],\n      control: { type: 'select' },\n      description: 'Badge type',\n      defaultValue: 'number',\n    },\n    mode: {\n      options: ['primary', 'critical', 'secondary', 'gray', 'white'],\n      control: { type: 'select' },\n      description: 'Badge color mode',\n      defaultValue: 'primary',\n    },\n    large: {\n      control: 'boolean',\n      description: 'Increases badge size (for number type only)',\n      defaultValue: false,\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Blocks/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Button size',\n      defaultValue: 'm',\n    },\n    mode: {\n      options: ['filled', 'bezeled', 'plain', 'gray', 'outline', 'white'],\n      control: { type: 'select' },\n      description: 'Button display variant',\n      defaultValue: 'filled',\n    },\n    stretched: {\n      control: 'boolean',\n      description: 'Stretch button to full width',\n      defaultValue: false,\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Show loading indicator',\n      defaultValue: false,\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disabled state',\n      defaultValue: false,\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'radio' },\n      description: 'Type of interaction animation',\n      defaultValue: 'background',\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardComponent>",
                "defaultValue": "{\n  title: 'Blocks/Card',\n  component: CardComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\n    }),\n  ],\n  argTypes: {\n    type: {\n      options: ['plain', 'ambient'],\n      control: { type: 'radio' },\n      description: 'Defines the visual style of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'plain' },\n      },\n    },\n    borderRadius: {\n      control: { type: 'text' },\n      description: 'Defines the border radius of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '24px' },\n      },\n    },\n    image: {\n      control: { type: 'text' },\n      description: 'URL of the image to display at the top of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'undefined' },\n      },\n    },\n    imageHeight: {\n      control: { type: 'text' },\n      description: 'Height of the image section',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '200px' },\n      },\n    }\n  },\n  args: {\n    type: 'plain',\n    borderRadius: '24px',\n    imageHeight: '200px'\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InlineButtonsComponent>",
                "defaultValue": "{\n  title: 'Blocks/InlineButtons',\n  component: InlineButtonsComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        InlineButtonsItemComponent,\n        TappableComponent,\n        TguiIcon24Chat,\n        TguiIcon24Notifications,\n        TguiIcon24QR\n      ],\n    }),\n  ],\n  argTypes: {\n    mode: {\n      options: ['plain', 'bezeled', 'gray'],\n      control: { type: 'select' },\n      description: 'Visual style of the buttons',\n      table: {\n        type: { summary: 'plain | bezeled | gray' },\n        defaultValue: { summary: 'plain' }\n      }\n    }\n  },\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'The InlineButtons component is a container for multiple inline button items, providing a consistent styling and layout. It is commonly used for action bars or tool strips.'\n      }\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconButtonComponent>",
                "defaultValue": "{\n  title: 'Blocks/IconButton',\n  component: IconButtonComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, TappableComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Size of the icon button',\n      table: {\n        type: { summary: 's | m | l' },\n        defaultValue: { summary: 'm' }\n      }\n    },\n    mode: {\n      options: ['bezeled', 'plain', 'gray', 'outline'],\n      control: { type: 'select' },\n      description: 'Visual style of the button',\n      table: {\n        type: { summary: 'bezeled | plain | gray | outline' },\n        defaultValue: { summary: 'bezeled' }\n      }\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'select' },\n      description: 'Type of animation on interaction',\n      table: {\n        type: { summary: 'opacity | background' },\n        defaultValue: { summary: 'background' }\n      }\n    },\n    type: {\n      options: ['button', 'submit', 'reset'],\n      control: { type: 'select' },\n      description: 'HTML button type',\n      table: {\n        type: { summary: 'button | submit | reset' },\n        defaultValue: { summary: 'button' }\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: 'The IconButton component is designed for icon-only buttons. It supports different sizes and visual styles.'\n      }\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SectionComponent>",
                "defaultValue": "{\n  title: 'Blocks/Section',\n  component: SectionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SectionComponent,\n        SectionHeaderComponent,\n        SectionFooterComponent,\n        TextComponent,\n        DividerComponent\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SpinnerComponent>",
                "defaultValue": "{\n  title: 'Feedback/Spinner',\n  component: SpinnerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, SpinnerComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Loading indicator size',\n      defaultValue: 'm',\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SnackbarComponent>",
                "defaultValue": "{\n  title: 'Feedback/Snackbar',\n  component: SnackbarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        SnackbarComponent,\n        SnackbarButtonComponent,\n        RootPortalComponent,\n        TappableComponent,\n        RootComponent,\n        ButtonComponent,\n        DemoSnackbarComponent\n      ],\n      providers: [PlatformService]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen'\n  },\n  argTypes: {\n    description: {\n      control: 'text',\n      description: 'Additional text description shown below the main message'\n    },\n    duration: {\n      control: {\n        type: 'number',\n        min: 1000,\n        max: 10000,\n        step: 1000\n      },\n      description: 'Duration in milliseconds before the snackbar is automatically closed'\n    },\n    beforeTemplate: { control: false },\n    afterTemplate: { control: false },\n    linkTemplate: { control: false },\n    onClose: { control: false }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CaptionComponent>",
                "defaultValue": "{\n  title: 'Typography/Caption',\n  component: CaptionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CaptionComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the caption',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeadlineComponent>",
                "defaultValue": "{\n  title: 'Typography/Headline',\n  component: HeadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [HeadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the headline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h5)',\n      defaultValue: 'h5',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LargeTitleComponent>",
                "defaultValue": "{\n  title: 'Typography/LargeTitle',\n  component: LargeTitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [LargeTitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the large title',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h1)',\n      defaultValue: 'h1',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SubheadlineComponent>",
                "defaultValue": "{\n  title: 'Typography/Subheadline',\n  component: SubheadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [SubheadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the subheadline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h6)',\n      defaultValue: 'h6',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TitleComponent>",
                "defaultValue": "{\n  title: 'Typography/Title',\n  component: TitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Size level of the title, determines size and semantic tag (h2, h3, h4)',\n      defaultValue: '2',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, defaults based on level)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextComponent>",
                "defaultValue": "{\n  title: 'Typography/Text',\n  component: TextComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TextComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the text',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RippleComponent>",
                "defaultValue": "{\n  title: 'Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n}"
            },
            {
                "name": "Modes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge mode=\"primary\">1</tgui-badge>\n        <tgui-badge mode=\"critical\">2</tgui-badge>\n        <tgui-badge mode=\"secondary\">3</tgui-badge>\n        <tgui-badge mode=\"gray\">4</tgui-badge>\n        <tgui-badge mode=\"white\">5</tgui-badge>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Modes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px;\">\n        <tgui-button mode=\"filled\">Filled</tgui-button>\n        <tgui-button mode=\"bezeled\">Bezeled</tgui-button>\n        <tgui-button mode=\"plain\">Plain</tgui-button>\n        <tgui-button mode=\"gray\">Gray</tgui-button>\n        <tgui-button mode=\"outline\">Outline</tgui-button>\n        <tgui-button mode=\"white\">White</tgui-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Modes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Plain Mode</h3>\n          <tgui-inline-buttons mode=\"plain\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Bezeled Mode</h3>\n          <tgui-inline-buttons mode=\"bezeled\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Gray Mode</h3>\n          <tgui-inline-buttons mode=\"gray\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Modes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button mode=\"bezeled\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"plain\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"gray\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"outline\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "MultipleItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    header: 'Multiple Items',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>First section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Second section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Third section item</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Overview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Paragraph",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px;\">\n        <tgui-text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\n        </tgui-text>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "PlatformSpecific",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .platform-demo {\n        display: flex;\n        flex-direction: column;\n        gap: 32px;\n      }\n      .platform-container {\n        padding: 24px;\n        border-radius: 8px;\n        background-color: var(--tgui--secondary_fill);\n      }\n      .platform-title {\n        font-size: 16px;\n        font-weight: 500;\n        margin-bottom: 16px;\n      }\n      .platform-spinners {\n        display: flex;\n        gap: 24px;\n      }\n    `],\n    template: `\n      <div class=\"platform-demo\">\n        <div>\n          <p>\n            The Spinner component automatically adapts to the current platform.\n            On iOS, it displays a circular indicator with solid fill, on Android/Web - a circular progress.\n          </p>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">iOS Spinner (example)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"m\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"l\" class=\"platform-ios\"></tgui-spinner>\n          </div>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">Android/Web Spinner (example)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\"></tgui-spinner>\n            <tgui-spinner size=\"m\"></tgui-spinner>\n            <tgui-spinner size=\"l\"></tgui-spinner>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    mode: 'plain'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-inline-buttons [mode]=\"mode\">\n        <tgui-inline-buttons-item [text]=\"'Chat'\">\n            <tgui-icon24-chat></tgui-icon24-chat>\n        </tgui-inline-buttons-item>\n        <tgui-inline-buttons-item [text]=\"'Mute'\">\n            <tgui-icon24-notifications></tgui-icon24-notifications>\n        </tgui-inline-buttons-item>\n        <tgui-inline-buttons-item [text]=\"'QR'\">\n            <tgui-icon24-qr></tgui-icon24-qr>\n        </tgui-inline-buttons-item>\n      </tgui-inline-buttons>\n    `\n  })\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    controls: { hideNoControlsWarning: true }\n  },\n  render: () => ({\n    template: `<demo-snackbar></demo-snackbar>`\n  })\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RootComponent],\n      providers: [\n        ThemeService, \n        PlatformService, \n        PortalService,\n        TelegramService,\n        {\n          provide: TGUI_CONFIG,\n          useValue: {\n            platform: 'base',\n            appearance: 'light',\n            followSystemTheme: false\n          }\n        },\n      ],\n    }),\n    \n    componentWrapperDecorator(\n      story => `<tgui-root [appearance]=\"appearance\" [platform]=\"platform\"><div style=\"background-color: var(--tgui--bg_color); padding: 3rem;\">${story}</div></tgui-root>`,\n      ({globals: {theme, platform}}) => ({\n        appearance: theme,\n        platform: platform\n      })\n    )\n  ],\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\nglobalTypes: {\n    platform: {\n      name: 'Platform',\n      description: 'Platform for components',\n      defaultValue: 'base',\n      toolbar: {\n        icon: 'mobile',\n        items: ['base', 'ios'],\n        title: 'Platform',\n        dynamicTitle: true,\n      },\n    },\n    theme: {\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        title: 'Theme',\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        dynamicTitle: true,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Click for demonstration';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\n           This effect is automatically used in the Button component with interactiveAnimation=\"background\" value.</p>\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n}"
            },
            {
                "name": "RippleEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"margin-bottom: 8px;\">\n          <strong>Ripple effect (background)</strong>\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"background\" mode=\"filled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"bezeled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"plain\">Background Ripple</tgui-button>\n        </div>\n        \n        <div style=\"margin: 16px 0 8px 0;\">\n          <strong>Without ripple (opacity)</strong>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"filled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"bezeled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"plain\">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge [large]=\"false\">1</tgui-badge>\n        <tgui-badge [large]=\"true\">99</tgui-badge>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-button size=\"s\">Small</tgui-button>\n        <tgui-button size=\"m\">Medium</tgui-button>\n        <tgui-button size=\"l\">Large</tgui-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button size=\"s\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10 17.5V2.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M4.16667 8.33334L10 2.5L15.8333 8.33334\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button size=\"m\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button size=\"l\">\n          <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M14 24.5V3.5\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5.83334 11.6667L14 3.5L22.1667 11.6667\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .spinner-container {\n        display: flex;\n        gap: 24px;\n        align-items: center;\n      }\n      .spinner-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n      .spinner-label {\n        font-size: 14px;\n        margin-top: 8px;\n      }\n    `],\n    template: `\n      <div class=\"spinner-container\">\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n          <span class=\"spinner-label\">Small (s)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"m\"></tgui-spinner>\n          <span class=\"spinner-label\">Medium (m)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"l\"></tgui-spinner>\n          <span class=\"spinner-label\">Large (l)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div>\n          <tgui-button [loading]=\"true\">Loading</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]=\"true\">Disabled</tgui-button>\n        </div>\n        <div style=\"width: 100%;\">\n          <tgui-button [stretched]=\"true\">Stretched button</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "TGUI_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG')"
            },
            {
                "name": "Title1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Title2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Title3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    level: '3',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Types",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge type=\"number\">5</tgui-badge>\n        <tgui-badge type=\"dot\"></tgui-badge>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>How to use Ripple</h3>\n        <p>The Ripple component is usually not used directly in developer code, \n        but is integrated into buttons and other interactive elements.</p>\n        \n        <h4>Example of usage in the Button component:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  With ripple effect\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\n        when the button has the parameter interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "UsageExamples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <div style=\"margin-bottom: 8px;\">Notifications count:</div>\n          <div style=\"display: flex; align-items: center;\">\n            Messages <tgui-badge style=\"margin-left: 8px;\">12</tgui-badge>\n          </div>\n        </div>\n        \n        <div>\n          <div style=\"margin-bottom: 8px;\">Status indicators:</div>\n          <div style=\"display: flex; gap: 16px;\">\n            <div style=\"display: flex; align-items: center;\">\n              <tgui-badge type=\"dot\" mode=\"critical\"></tgui-badge> \n              <span style=\"margin-left: 8px;\">Critical</span>\n            </div>\n            <div style=\"display: flex; align-items: center;\">\n              <tgui-badge type=\"dot\" mode=\"primary\"></tgui-badge> \n              <span style=\"margin-left: 8px;\">Active</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "UserCardExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <div style=\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\" online=\"true\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">John Doe</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen just now</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"10\"></tgui-avatar-badge>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" initials=\"Anna Smith\" color=\"#8e24aa\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">Anna Smith</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen 2 hours ago</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"3\"></tgui-avatar-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithAdvancedChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      beforeIcon: `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M8 3.5V12.5M3.5 8H12.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" />\n        </svg>\n      `\n    },\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip [mode]=\"'mono'\" [before]=\"beforeTemplate\">\n          Featured\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Advanced Chip\"\n          subtitle=\"This card uses a chip with an icon and styling.\">\n        </tgui-card-cell>\n\n        <ng-template #beforeTemplate>\n          <div [innerHTML]=\"beforeIcon\"></div>\n        </ng-template>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\">\n          <tgui-avatar-badge [count]=\"5\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"John Doe\">\n          <tgui-avatar-badge [count]=\"42\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"Overflow\" color=\"#e91e63\">\n          <tgui-avatar-badge [count]=\"999\"></tgui-avatar-badge>\n        </tgui-avatar>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithCenteredFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header>Section Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with centered footer</tgui-text>\n          </div>\n          <tgui-section-footer [centered]=\"true\">Centered Footer</tgui-section-footer>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card with Chip\"\n          subtitle=\"This card includes a chip component positioned in the top-right corner.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithCustomColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n    color: '#3949ab',\n  },\n}"
            },
            {
                "name": "WithDirectImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Direct Image Card\"\n          subtitle=\"This card uses the image property directly on the card without a separate cell.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            This approach is more similar to the React implementation.\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithDirectImageAndChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell\n          header=\"Direct Image with Chip\"\n          subtitle=\"This card combines the direct image approach with a chip.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
            },
            {
                "name": "WithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/men/32.jpg',\n    alt: 'User avatar',\n  },\n}"
            },
            {
                "name": "WithInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n  },\n}"
            },
            {
                "name": "WithInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [initials]=\"'AB'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'EF'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "WithLargeHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header [large]=\"true\">Large Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with large header</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithMixedContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
            },
            {
                "name": "WithOnlineStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/women/44.jpg',\n    online: true,\n  },\n}"
            }
        ],
        "functions": [
            {
                "name": "applyTheme",
                "file": "projects/tgui/src/lib/utils/theme-helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\n",
                "args": [
                    {
                        "name": "theme",
                        "type": "AppearanceType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 359,
                            "end": 364,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "theme"
                        },
                        "type": "AppearanceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 353,
                            "end": 358,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\n"
                    }
                ]
            },
            {
                "name": "setupSystemThemeDetection",
                "file": "projects/tgui/src/lib/utils/theme-helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Setup system theme detection using prefers-color-scheme</p>\n",
                "args": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 766,
                            "end": 774,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "callback"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 760,
                            "end": 765,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Optional callback function that will be called when the theme changes</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 849,
                            "end": 856,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function to cleanup the listeners</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AppearanceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "projects/tgui/src/lib/services/theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AvatarShape",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"circle\" | \"rounded\" | \"square\"",
                "file": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AvatarSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xxs\" | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"",
                "file": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BadgeMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"critical\" | \"secondary\" | \"gray\" | \"white\"",
                "file": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BadgeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"number\" | \"dot\"",
                "file": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CardType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"plain\" | \"ambient\"",
                "file": "projects/tgui/src/lib/components/blocks/card/card.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Card types that define the visual style of the card</p>\n",
                "kind": 192
            },
            {
                "name": "PlatformType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"base\" | \"ios\"",
                "file": "projects/tgui/src/lib/services/platform.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconsShowcaseComponent>",
                "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DividerComponent>",
                "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AvatarComponent>",
                "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AvatarStackComponent>",
                "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BadgeComponent>",
                "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardComponent>",
                "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InlineButtonsComponent>",
                "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconButtonComponent>",
                "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SectionComponent>",
                "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SpinnerComponent>",
                "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SnackbarComponent>",
                "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CaptionComponent>",
                "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeadlineComponent>",
                "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LargeTitleComponent>",
                "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SubheadlineComponent>",
                "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TitleComponent>",
                "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextComponent>",
                "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RippleComponent>",
                "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n            <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n            <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "CaptionInContext",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <h4 style=\"margin-bottom: 8px;\">Chart Title</h4>\n          <div style=\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\"></div>\n          <tgui-caption level=\"2\">Chart data source: Example Dataset, 2023</tgui-caption>\n        </div>\n        \n        <div style=\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\">\n          <img style=\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\" />\n          <tgui-caption level=\"1\">Photo by Example Photographer © 2023</tgui-caption>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"1\" weight=\"1\">Caption Level 1 - Bold</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"2\">Caption Level 1 - Medium</tgui-caption>\n        <tgui-caption level=\"1\" weight=\"3\">Caption Level 1 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-caption level=\"2\" weight=\"1\">Caption Level 2 - Bold</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"2\">Caption Level 2 - Medium</tgui-caption>\n        <tgui-caption level=\"2\" weight=\"3\">Caption Level 2 - Regular</tgui-caption>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CaptionComponent>",
                    "defaultValue": "{\n  title: 'Typography/Caption',\n  component: CaptionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CaptionComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the caption',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h5)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n            <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"1\" weight=\"1\">Headline Level 1 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"2\">Headline Level 1 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"1\" weight=\"3\">Headline Level 1 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-headline level=\"2\" weight=\"1\">Headline Level 2 - Bold (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"2\">Headline Level 2 - Medium (h5)</tgui-headline>\n        <tgui-headline level=\"2\" weight=\"3\">Headline Level 2 - Regular (h5)</tgui-headline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeadlineComponent>",
                    "defaultValue": "{\n  title: 'Typography/Headline',\n  component: HeadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [HeadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the headline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h5)',\n      defaultValue: 'h5',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n            <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n            <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"1\" weight=\"1\">Large Title Level 1 - Bold</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"2\">Large Title Level 1 - Medium</tgui-large-title>\n        <tgui-large-title level=\"1\" weight=\"3\">Large Title Level 1 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-large-title level=\"2\" weight=\"1\">Large Title Level 2 - Bold</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"2\">Large Title Level 2 - Medium</tgui-large-title>\n        <tgui-large-title level=\"2\" weight=\"3\">Large Title Level 2 - Regular</tgui-large-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LargeTitleComponent>",
                    "defaultValue": "{\n  title: 'Typography/LargeTitle',\n  component: LargeTitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [LargeTitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the large title',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h1)',\n      defaultValue: 'h1',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller, h6)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n            <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"1\" weight=\"1\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"2\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"1\" weight=\"3\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-subheadline level=\"2\" weight=\"1\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"2\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\n        <tgui-subheadline level=\"2\" weight=\"3\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SubheadlineComponent>",
                    "defaultValue": "{\n  title: 'Typography/Subheadline',\n  component: SubheadlineComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [SubheadlineComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the subheadline',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is h6)',\n      defaultValue: 'h6',\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/typography/title/story/title.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (h2)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n            <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n          </div>\n        </div>\n        \n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (h3)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n            <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 3 (h4)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n            <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TitleComponent>",
                    "defaultValue": "{\n  title: 'Typography/Title',\n  component: TitleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TitleComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Size level of the title, determines size and semantic tag (h2, h3, h4)',\n      defaultValue: '2',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, defaults based on level)',\n    },\n  },\n}"
                },
                {
                    "name": "Title1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"1\" weight=\"1\">Title Level 1 - Bold (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"2\">Title Level 1 - Medium (h2)</tgui-title>\n        <tgui-title level=\"1\" weight=\"3\">Title Level 1 - Regular (h2)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Title2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"2\" weight=\"1\">Title Level 2 - Bold (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"2\">Title Level 2 - Medium (h3)</tgui-title>\n        <tgui-title level=\"2\" weight=\"3\">Title Level 2 - Regular (h3)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Title3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '3',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-title level=\"3\" weight=\"1\">Title Level 3 - Bold (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"2\">Title Level 3 - Medium (h4)</tgui-title>\n        <tgui-title level=\"3\" weight=\"3\">Title Level 3 - Regular (h4)</tgui-title>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/typography/text/story/text.stories.ts": [
                {
                    "name": "AllVariations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div style=\"margin-bottom: 16px;\">\n          <h3 style=\"margin-bottom: 12px;\">Level 1 (Default)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n            <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n            <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin-bottom: 12px;\">Level 2 (Smaller)</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px;\">\n            <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n            <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n            <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '1',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"1\" weight=\"1\">Text Level 1 - Bold</tgui-text>\n        <tgui-text level=\"1\" weight=\"2\">Text Level 1 - Medium</tgui-text>\n        <tgui-text level=\"1\" weight=\"3\">Text Level 1 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Level2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    level: '2',\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <tgui-text level=\"2\" weight=\"1\">Text Level 2 - Bold</tgui-text>\n        <tgui-text level=\"2\" weight=\"2\">Text Level 2 - Medium</tgui-text>\n        <tgui-text level=\"2\" weight=\"3\">Text Level 2 - Regular</tgui-text>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextComponent>",
                    "defaultValue": "{\n  title: 'Typography/Text',\n  component: TextComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [TextComponent],\n    }),\n  ],\n  argTypes: {\n    level: {\n      options: ['1', '2'],\n      control: { type: 'select' },\n      description: 'Size level of the text',\n      defaultValue: '1',\n    },\n    weight: {\n      options: ['1', '2', '3'],\n      control: { type: 'select' },\n      description: 'Font weight',\n      defaultValue: '3',\n    },\n    caps: {\n      control: 'boolean',\n      description: 'Transform text to uppercase',\n      defaultValue: false,\n    },\n    plain: {\n      control: 'boolean',\n      description: 'Remove default margins',\n      defaultValue: true,\n    },\n    tag: {\n      control: 'text',\n      description: 'HTML tag to render (optional, default is span)',\n      defaultValue: 'span',\n    },\n  },\n}"
                },
                {
                    "name": "Paragraph",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 600px;\">\n        <tgui-text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\n        </tgui-text>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts": [
                {
                    "name": "Ambient",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'ambient',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Ambient Card\"\n          subtitle=\"This card uses the ambient style with a dark background.\">\n          <div style=\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\">\n            Additional content with lower opacity text\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "CustomBorderRadius",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    borderRadius: '8px'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image with custom border radius\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Custom Border Radius\"\n          subtitle=\"This card uses a custom border radius of 8px instead of the default 24px.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px;\">\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card Title\"\n          subtitle=\"Card description text would go here to provide more information about this card.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            Additional content can be added here\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardComponent>",
                    "defaultValue": "{\n  title: 'Blocks/Card',\n  component: CardComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\n    }),\n  ],\n  argTypes: {\n    type: {\n      options: ['plain', 'ambient'],\n      control: { type: 'radio' },\n      description: 'Defines the visual style of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'plain' },\n      },\n    },\n    borderRadius: {\n      control: { type: 'text' },\n      description: 'Defines the border radius of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '24px' },\n      },\n    },\n    image: {\n      control: { type: 'text' },\n      description: 'URL of the image to display at the top of the card',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'undefined' },\n      },\n    },\n    imageHeight: {\n      control: { type: 'text' },\n      description: 'Height of the image section',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '200px' },\n      },\n    }\n  },\n  args: {\n    type: 'plain',\n    borderRadius: '24px',\n    imageHeight: '200px'\n  },\n}"
                },
                {
                    "name": "WithAdvancedChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      beforeIcon: `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M8 3.5V12.5M3.5 8H12.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" />\n        </svg>\n      `\n    },\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip [mode]=\"'mono'\" [before]=\"beforeTemplate\">\n          Featured\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Advanced Chip\"\n          subtitle=\"This card uses a chip with an icon and styling.\">\n        </tgui-card-cell>\n\n        <ng-template #beforeTemplate>\n          <div [innerHTML]=\"beforeIcon\"></div>\n        </ng-template>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card [type]=\"type\" [borderRadius]=\"borderRadius\" style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell [isImage]=\"true\">\n          <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\">\n            Image content goes here\n          </div>\n        </tgui-card-cell>\n        <tgui-card-cell\n          header=\"Card with Chip\"\n          subtitle=\"This card includes a chip component positioned in the top-right corner.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDirectImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px;\">\n        <tgui-card-cell\n          header=\"Direct Image Card\"\n          subtitle=\"This card uses the image property directly on the card without a separate cell.\">\n          <div style=\"margin-top: 10px; color: #707579;\">\n            This approach is more similar to the React implementation.\n          </div>\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDirectImageAndChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    image: 'https://via.placeholder.com/300x200'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-card \n        [type]=\"type\" \n        [borderRadius]=\"borderRadius\" \n        [image]=\"image\" \n        [imageHeight]=\"imageHeight\"\n        style=\"width: 300px; position: relative;\">\n        <tgui-card-chip mode=\"elevated\">\n          <span>New</span>\n        </tgui-card-chip>\n        <tgui-card-cell\n          header=\"Direct Image with Chip\"\n          subtitle=\"This card combines the direct image approach with a chip.\">\n        </tgui-card-cell>\n      </tgui-card>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'number',\n    mode: 'primary',\n    large: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-badge \n        [type]=\"type\" \n        [mode]=\"mode\" \n        [large]=\"large\"\n      >\n        3\n      </tgui-badge>\n    `,\n  }),\n}"
                },
                {
                    "name": "Dots",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge type=\"dot\" mode=\"primary\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"critical\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"secondary\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"gray\"></tgui-badge>\n        <tgui-badge type=\"dot\" mode=\"white\"></tgui-badge>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BadgeComponent>",
                    "defaultValue": "{\n  title: 'Blocks/Badge',\n  component: BadgeComponent,\n  tags: ['autodocs'],\n  decorators: [],\n  argTypes: {\n    type: {\n      options: ['number', 'dot'],\n      control: { type: 'select' },\n      description: 'Badge type',\n      defaultValue: 'number',\n    },\n    mode: {\n      options: ['primary', 'critical', 'secondary', 'gray', 'white'],\n      control: { type: 'select' },\n      description: 'Badge color mode',\n      defaultValue: 'primary',\n    },\n    large: {\n      control: 'boolean',\n      description: 'Increases badge size (for number type only)',\n      defaultValue: false,\n    }\n  },\n}"
                },
                {
                    "name": "Modes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge mode=\"primary\">1</tgui-badge>\n        <tgui-badge mode=\"critical\">2</tgui-badge>\n        <tgui-badge mode=\"secondary\">3</tgui-badge>\n        <tgui-badge mode=\"gray\">4</tgui-badge>\n        <tgui-badge mode=\"white\">5</tgui-badge>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge [large]=\"false\">1</tgui-badge>\n        <tgui-badge [large]=\"true\">99</tgui-badge>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Types",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-badge type=\"number\">5</tgui-badge>\n        <tgui-badge type=\"dot\"></tgui-badge>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "UsageExamples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <div style=\"margin-bottom: 8px;\">Notifications count:</div>\n          <div style=\"display: flex; align-items: center;\">\n            Messages <tgui-badge style=\"margin-left: 8px;\">12</tgui-badge>\n          </div>\n        </div>\n        \n        <div>\n          <div style=\"margin-bottom: 8px;\">Status indicators:</div>\n          <div style=\"display: flex; gap: 16px;\">\n            <div style=\"display: flex; align-items: center;\">\n              <tgui-badge type=\"dot\" mode=\"critical\"></tgui-badge> \n              <span style=\"margin-left: 8px;\">Critical</span>\n            </div>\n            <div style=\"display: flex; align-items: center;\">\n              <tgui-badge type=\"dot\" mode=\"primary\"></tgui-badge> \n              <span style=\"margin-left: 8px;\">Active</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'filled',\n    stretched: false,\n    loading: false,\n    disabled: false,\n    interactiveAnimation: 'background'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-button \n        [size]=\"size\" \n        [mode]=\"mode\" \n        [stretched]=\"stretched\" \n        [loading]=\"loading\" \n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n      >\n        Button\n      </tgui-button>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Blocks/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Button size',\n      defaultValue: 'm',\n    },\n    mode: {\n      options: ['filled', 'bezeled', 'plain', 'gray', 'outline', 'white'],\n      control: { type: 'select' },\n      description: 'Button display variant',\n      defaultValue: 'filled',\n    },\n    stretched: {\n      control: 'boolean',\n      description: 'Stretch button to full width',\n      defaultValue: false,\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Show loading indicator',\n      defaultValue: false,\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disabled state',\n      defaultValue: false,\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'radio' },\n      description: 'Type of interaction animation',\n      defaultValue: 'background',\n    }\n  },\n}"
                },
                {
                    "name": "Modes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px;\">\n        <tgui-button mode=\"filled\">Filled</tgui-button>\n        <tgui-button mode=\"bezeled\">Bezeled</tgui-button>\n        <tgui-button mode=\"plain\">Plain</tgui-button>\n        <tgui-button mode=\"gray\">Gray</tgui-button>\n        <tgui-button mode=\"outline\">Outline</tgui-button>\n        <tgui-button mode=\"white\">White</tgui-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "RippleEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"margin-bottom: 8px;\">\n          <strong>Ripple effect (background)</strong>\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"background\" mode=\"filled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"bezeled\">Background Ripple</tgui-button>\n          <tgui-button interactiveAnimation=\"background\" mode=\"plain\">Background Ripple</tgui-button>\n        </div>\n        \n        <div style=\"margin: 16px 0 8px 0;\">\n          <strong>Without ripple (opacity)</strong>\n        </div>\n        <div style=\"display: flex; gap: 16px;\">\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"filled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"bezeled\">Opacity Effect</tgui-button>\n          <tgui-button interactiveAnimation=\"opacity\" mode=\"plain\">Opacity Effect</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n        <tgui-button size=\"s\">Small</tgui-button>\n        <tgui-button size=\"m\">Medium</tgui-button>\n        <tgui-button size=\"l\">Large</tgui-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div>\n          <tgui-button [loading]=\"true\">Loading</tgui-button>\n        </div>\n        <div>\n          <tgui-button [disabled]=\"true\">Disabled</tgui-button>\n        </div>\n        <div style=\"width: 100%;\">\n          <tgui-button [stretched]=\"true\">Stretched button</tgui-button>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<tgui-spinner [size]=\"size\"></tgui-spinner>`,\n  }),\n}"
                },
                {
                    "name": "CustomColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .color-container {\n        display: flex;\n        gap: 24px;\n      }\n      .color-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 16px;\n        border-radius: 8px;\n      }\n      .color-item:nth-child(1) {\n        color: var(--tgui--link_color);\n      }\n      .color-item:nth-child(2) {\n        color: var(--tgui--destructive);\n      }\n      .color-item:nth-child(3) {\n        color: #4CAF50;\n      }\n      .color-item:nth-child(4) {\n        background: #333;\n        color: white;\n      }\n      .color-label {\n        margin-top: 8px;\n        font-size: 14px;\n      }\n    `],\n    template: `\n      <div>\n        <p style=\"margin-bottom: 16px;\">\n          The spinner color is inherited from the parent container through the CSS <code>color</code> property.\n        </p>\n        \n        <div class=\"color-container\">\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Primary</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Destructive</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Success</span>\n          </div>\n          <div class=\"color-item\">\n            <tgui-spinner></tgui-spinner>\n            <span class=\"color-label\">Light</span>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SpinnerComponent>",
                    "defaultValue": "{\n  title: 'Feedback/Spinner',\n  component: SpinnerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, SpinnerComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Loading indicator size',\n      defaultValue: 'm',\n    }\n  },\n}"
                },
                {
                    "name": "PlatformSpecific",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .platform-demo {\n        display: flex;\n        flex-direction: column;\n        gap: 32px;\n      }\n      .platform-container {\n        padding: 24px;\n        border-radius: 8px;\n        background-color: var(--tgui--secondary_fill);\n      }\n      .platform-title {\n        font-size: 16px;\n        font-weight: 500;\n        margin-bottom: 16px;\n      }\n      .platform-spinners {\n        display: flex;\n        gap: 24px;\n      }\n    `],\n    template: `\n      <div class=\"platform-demo\">\n        <div>\n          <p>\n            The Spinner component automatically adapts to the current platform.\n            On iOS, it displays a circular indicator with solid fill, on Android/Web - a circular progress.\n          </p>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">iOS Spinner (example)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"m\" class=\"platform-ios\"></tgui-spinner>\n            <tgui-spinner size=\"l\" class=\"platform-ios\"></tgui-spinner>\n          </div>\n        </div>\n        \n        <div class=\"platform-container\">\n          <div class=\"platform-title\">Android/Web Spinner (example)</div>\n          <div class=\"platform-spinners\">\n            <tgui-spinner size=\"s\"></tgui-spinner>\n            <tgui-spinner size=\"m\"></tgui-spinner>\n            <tgui-spinner size=\"l\"></tgui-spinner>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .spinner-container {\n        display: flex;\n        gap: 24px;\n        align-items: center;\n      }\n      .spinner-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n      .spinner-label {\n        font-size: 14px;\n        margin-top: 8px;\n      }\n    `],\n    template: `\n      <div class=\"spinner-container\">\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"s\"></tgui-spinner>\n          <span class=\"spinner-label\">Small (s)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"m\"></tgui-spinner>\n          <span class=\"spinner-label\">Medium (m)</span>\n        </div>\n        <div class=\"spinner-item\">\n          <tgui-spinner size=\"l\"></tgui-spinner>\n          <span class=\"spinner-label\">Large (l)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(ts|mdx)'\n  ],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-docs',\n    '@storybook/addon-controls',\n  ],\n  staticDirs: [\n    { from: '../src/lib/styles', to: 'styles' } // Без префикса assets/tgui\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableIvy: true,\n    },\n  },\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n  webpackFinal: async (config) => {\n    config.resolve = {\n      ...(config.resolve || {}),\n      alias: {\n        ...(config.resolve?.alias || {}),\n        '@components': '../src/lib/components',\n        '@services': '../src/lib/services',\n        '@utils': '../src/lib/components/utils',\n        '@feedback': '../src/lib/components/feedback',\n        '@blocks': '../src/lib/components/blocks',\n        '@form': '../src/lib/components/form',\n        '@layout': '../src/lib/components/layout',\n        '@overlays': '../src/lib/components/overlays',\n        '@typography': '../src/lib/components/typography',\n        '@navigation': '../src/lib/components/navigation',\n        '@directives': '../src/lib/directives',\n        '@lib': '../src/lib',\n      },\n    };\n    return config;\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts": [
                {
                    "name": "CustomOffsets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <div>\n          <p>Большой отступ (-6px):</p>\n          <tgui-avatar-stack [offset]=\"-6\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Стандартный отступ (-12px):</p>\n          <tgui-avatar-stack [offset]=\"-12\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n        \n        <div>\n          <p>Маленький отступ (-18px):</p>\n          <tgui-avatar-stack [offset]=\"-18\">\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n            <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n          </tgui-avatar-stack>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  }\n}"
                },
                {
                    "name": "DifferentSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'s'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'s'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n        </tgui-avatar-stack>\n        \n        <tgui-avatar-stack>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'l'\"></tgui-avatar>\n          <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'l'\"></tgui-avatar>\n        </tgui-avatar-stack>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AvatarStackComponent>",
                    "defaultValue": "{\n  title: 'Blocks/AvatarStack',\n  component: AvatarStackComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [AvatarComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    offset: {\n      control: { type: 'range', min: -24, max: 0, step: 1 },\n      defaultValue: -12,\n      description: 'Смещение между аватарами в пикселях'\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=2'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [initials]=\"'AB'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'EF'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithMixedContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    offset: -12\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-avatar-stack [offset]=\"offset\">\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=1'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [initials]=\"'CD'\" [size]=\"'m'\"></tgui-avatar>\n        <tgui-avatar [src]=\"'https://i.pravatar.cc/150?img=3'\" [size]=\"'m'\"></tgui-avatar>\n      </tgui-avatar-stack>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/misc/divider/divider.stories.ts": [
                {
                    "name": "CustomStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Обычный разделитель</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Кастомный разделитель</div>\n        <tgui-divider style=\"border-color: var(--tgui--button_color); border-width: 2px;\"></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент после разделителя</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент выше разделителя</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 10px 0; color: var(--tgui--text_color);\">Элемент ниже разделителя</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "InList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\">\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Первый элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Второй элемент списка</div>\n        <tgui-divider></tgui-divider>\n        <div style=\"padding: 12px 0; color: var(--tgui--text_color);\">Третий элемент списка</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DividerComponent>",
                    "defaultValue": "{\n  title: 'Components/Misc/Divider',\n  component: DividerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DividerComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    mode: 'bezeled',\n    disabled: false,\n    interactiveAnimation: 'background',\n    type: 'button'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-icon-button\n        [size]=\"size\"\n        [mode]=\"mode\"\n        [disabled]=\"disabled\"\n        [interactiveAnimation]=\"interactiveAnimation\"\n        [type]=\"type\"\n      >\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </tgui-icon-button>\n    `\n  })\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button [disabled]=\"true\" mode=\"bezeled\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"plain\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"gray\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button [disabled]=\"true\" mode=\"outline\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconButtonComponent>",
                    "defaultValue": "{\n  title: 'Blocks/IconButton',\n  component: IconButtonComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, TappableComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['s', 'm', 'l'],\n      control: { type: 'select' },\n      description: 'Size of the icon button',\n      table: {\n        type: { summary: 's | m | l' },\n        defaultValue: { summary: 'm' }\n      }\n    },\n    mode: {\n      options: ['bezeled', 'plain', 'gray', 'outline'],\n      control: { type: 'select' },\n      description: 'Visual style of the button',\n      table: {\n        type: { summary: 'bezeled | plain | gray | outline' },\n        defaultValue: { summary: 'bezeled' }\n      }\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    interactiveAnimation: {\n      options: ['opacity', 'background'],\n      control: { type: 'select' },\n      description: 'Type of animation on interaction',\n      table: {\n        type: { summary: 'opacity | background' },\n        defaultValue: { summary: 'background' }\n      }\n    },\n    type: {\n      options: ['button', 'submit', 'reset'],\n      control: { type: 'select' },\n      description: 'HTML button type',\n      table: {\n        type: { summary: 'button | submit | reset' },\n        defaultValue: { summary: 'button' }\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: 'The IconButton component is designed for icon-only buttons. It supports different sizes and visual styles.'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "Modes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button mode=\"bezeled\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"plain\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"gray\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button mode=\"outline\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; align-items: center;\">\n        <tgui-icon-button size=\"s\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10 17.5V2.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M4.16667 8.33334L10 2.5L15.8333 8.33334\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button size=\"m\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 21V3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5 10L12 3L19 10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n        \n        <tgui-icon-button size=\"l\">\n          <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M14 24.5V3.5\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M5.83334 11.6667L14 3.5L22.1667 11.6667\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </tgui-icon-button>\n      </div>\n    `\n  })\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    header: 'Section Header',\n    footer: 'Section Footer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\" [footer]=\"footer\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>Basic section content</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SectionComponent>",
                    "defaultValue": "{\n  title: 'Blocks/Section',\n  component: SectionComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SectionComponent,\n        SectionHeaderComponent,\n        SectionFooterComponent,\n        TextComponent,\n        DividerComponent\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n}"
                },
                {
                    "name": "MultipleItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    header: 'Multiple Items',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section [header]=\"header\">\n          <div style=\"padding: 16px;\">\n            <tgui-text>First section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Second section item</tgui-text>\n          </div>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Third section item</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCenteredFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header>Section Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with centered footer</tgui-text>\n          </div>\n          <tgui-section-footer [centered]=\"true\">Centered Footer</tgui-section-footer>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithLargeHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 400px;\">\n        <tgui-section>\n          <tgui-section-header [large]=\"true\">Large Header</tgui-section-header>\n          <div style=\"padding: 16px;\">\n            <tgui-text>Section with large header</tgui-text>\n          </div>\n        </tgui-section>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts": [
                {
                    "name": "DifferentShapes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar shape=\"circle\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"rounded\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n        <tgui-avatar shape=\"square\" size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "DifferentSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"xs\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"s\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"m\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"l\" initials=\"JD\"></tgui-avatar>\n        <tgui-avatar size=\"xl\" initials=\"JD\"></tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AvatarComponent>",
                    "defaultValue": "{\n  title: 'Blocks/Avatar',\n  component: AvatarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: ['xs', 's', 'm', 'l', 'xl'],\n      control: { type: 'select' },\n      description: 'Размер аватара',\n      defaultValue: 'm',\n    },\n    shape: {\n      options: ['circle', 'rounded', 'square'],\n      control: { type: 'select' },\n      description: 'Форма аватара',\n      defaultValue: 'circle',\n    },\n    src: {\n      control: 'text',\n      description: 'URL изображения аватара',\n    },\n    initials: {\n      control: 'text',\n      description: 'Текст для формирования инициалов, если изображение отсутствует',\n    },\n    color: {\n      control: 'color',\n      description: 'Цвет фона для аватара с инициалами',\n    },\n    online: {\n      control: 'boolean',\n      description: 'Индикатор онлайн-статуса',\n      defaultValue: false,\n    },\n  },\n}"
                },
                {
                    "name": "UserCardExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <div style=\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\" online=\"true\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">John Doe</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen just now</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"10\"></tgui-avatar-badge>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\">\n          <tgui-avatar size=\"l\" initials=\"Anna Smith\" color=\"#8e24aa\"></tgui-avatar>\n          <div>\n            <div style=\"font-weight: 600; margin-bottom: 4px;\">Anna Smith</div>\n            <div style=\"color: var(--tgui--hint_color); font-size: 14px;\">Last seen 2 hours ago</div>\n          </div>\n          <div style=\"margin-left: auto;\">\n            <tgui-avatar-badge [count]=\"3\"></tgui-avatar-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <tgui-avatar size=\"l\" src=\"https://randomuser.me/api/portraits/men/32.jpg\">\n          <tgui-avatar-badge [count]=\"5\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"John Doe\">\n          <tgui-avatar-badge [count]=\"42\"></tgui-avatar-badge>\n        </tgui-avatar>\n        \n        <tgui-avatar size=\"l\" initials=\"Overflow\" color=\"#e91e63\">\n          <tgui-avatar-badge [count]=\"999\"></tgui-avatar-badge>\n        </tgui-avatar>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCustomColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n    color: '#3949ab',\n  },\n}"
                },
                {
                    "name": "WithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/men/32.jpg',\n    alt: 'User avatar',\n  },\n}"
                },
                {
                    "name": "WithInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    initials: 'John Doe',\n  },\n}"
                },
                {
                    "name": "WithOnlineStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'm',\n    shape: 'circle',\n    src: 'https://randomuser.me/api/portraits/women/44.jpg',\n    online: true,\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px;\">\n        <tgui-inline-buttons mode=\"bezeled\">\n          <tgui-inline-buttons-item [text]=\"'Enabled'\">\n            <tgui-icon24-chat></tgui-icon24-chat>\n          </tgui-inline-buttons-item>\n          <tgui-inline-buttons-item [disabled]=\"true\" [text]=\"'Disabled'\">\n            <tgui-icon24-notifications></tgui-icon24-notifications>\n          </tgui-inline-buttons-item>\n          <tgui-inline-buttons-item [text]=\"'Enabled'\">\n            <tgui-icon24-qr></tgui-icon24-qr>\n          </tgui-inline-buttons-item>\n        </tgui-inline-buttons>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "ItemModes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Mixed Modes</h3>\n          <tgui-inline-buttons mode=\"plain\">\n            <tgui-inline-buttons-item [text]=\"'Plain'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [mode]=\"'bezeled'\" [text]=\"'Bezeled'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [mode]=\"'gray'\" [text]=\"'Gray'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InlineButtonsComponent>",
                    "defaultValue": "{\n  title: 'Blocks/InlineButtons',\n  component: InlineButtonsComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        InlineButtonsItemComponent,\n        TappableComponent,\n        TguiIcon24Chat,\n        TguiIcon24Notifications,\n        TguiIcon24QR\n      ],\n    }),\n  ],\n  argTypes: {\n    mode: {\n      options: ['plain', 'bezeled', 'gray'],\n      control: { type: 'select' },\n      description: 'Visual style of the buttons',\n      table: {\n        type: { summary: 'plain | bezeled | gray' },\n        defaultValue: { summary: 'plain' }\n      }\n    }\n  },\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'The InlineButtons component is a container for multiple inline button items, providing a consistent styling and layout. It is commonly used for action bars or tool strips.'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "Modes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Plain Mode</h3>\n          <tgui-inline-buttons mode=\"plain\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Bezeled Mode</h3>\n          <tgui-inline-buttons mode=\"bezeled\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n\n        <div>\n          <h3 style=\"margin-bottom: 8px; font-size: 14px; color: #666;\">Gray Mode</h3>\n          <tgui-inline-buttons mode=\"gray\">\n            <tgui-inline-buttons-item [text]=\"'Chat'\">\n              <tgui-icon24-chat></tgui-icon24-chat>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'Mute'\">\n              <tgui-icon24-notifications></tgui-icon24-notifications>\n            </tgui-inline-buttons-item>\n            <tgui-inline-buttons-item [text]=\"'QR'\">\n              <tgui-icon24-qr></tgui-icon24-qr>\n            </tgui-inline-buttons-item>\n          </tgui-inline-buttons>\n        </div>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    mode: 'plain'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <tgui-inline-buttons [mode]=\"mode\">\n        <tgui-inline-buttons-item [text]=\"'Chat'\">\n            <tgui-icon24-chat></tgui-icon24-chat>\n        </tgui-inline-buttons-item>\n        <tgui-inline-buttons-item [text]=\"'Mute'\">\n            <tgui-icon24-notifications></tgui-icon24-notifications>\n        </tgui-inline-buttons-item>\n        <tgui-inline-buttons-item [text]=\"'QR'\">\n            <tgui-icon24-qr></tgui-icon24-qr>\n        </tgui-inline-buttons-item>\n      </tgui-inline-buttons>\n    `\n  })\n}"
                }
            ],
            "projects/tgui/src/lib/icons/story/icons.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconsShowcaseComponent>",
                    "defaultValue": "{\n  title: 'Icons/Overview',\n  component: IconsShowcaseComponent,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n}"
                },
                {
                    "name": "Overview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SnackbarComponent>",
                    "defaultValue": "{\n  title: 'Feedback/Snackbar',\n  component: SnackbarComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        SnackbarComponent,\n        SnackbarButtonComponent,\n        RootPortalComponent,\n        TappableComponent,\n        RootComponent,\n        ButtonComponent,\n        DemoSnackbarComponent\n      ],\n      providers: [PlatformService]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen'\n  },\n  argTypes: {\n    description: {\n      control: 'text',\n      description: 'Additional text description shown below the main message'\n    },\n    duration: {\n      control: {\n        type: 'number',\n        min: 1000,\n        max: 10000,\n        step: 1000\n      },\n      description: 'Duration in milliseconds before the snackbar is automatically closed'\n    },\n    beforeTemplate: { control: false },\n    afterTemplate: { control: false },\n    linkTemplate: { control: false },\n    onClose: { control: false }\n  }\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    controls: { hideNoControlsWarning: true }\n  },\n  render: () => ({\n    template: `<demo-snackbar></demo-snackbar>`\n  })\n}"
                }
            ],
            "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RippleComponent>",
                    "defaultValue": "{\n  title: 'Utils/Ripple',\n  component: RippleComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RippleComponent],\n    }),\n  ],\n}"
                },
                {
                    "name": "Preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    styles: [`\n      .ripple-demo {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background-color: var(--tgui--secondary_fill);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        overflow: hidden;\n        margin-bottom: 16px;\n      }\n      \n      .ripple-demo::after {\n        content: 'Click for demonstration';\n        position: relative;\n        z-index: 1;\n      }\n      \n      .description {\n        max-width: 600px;\n        margin-bottom: 16px;\n      }\n    `],\n    template: `\n      <div class=\"description\">\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\n           This effect is automatically used in the Button component with interactiveAnimation=\"background\" value.</p>\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\n      </div>\n      \n      <div #container class=\"ripple-demo\" (click)=\"addRipple($event)\">\n        <tgui-ripple [waves]=\"waves\"></tgui-ripple>\n      </div>\n    `,\n    props: {\n      waves: [] as RippleWave[],\n      addRipple: function(event: MouseEvent) {\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        const newWave: RippleWave = {\n          x,\n          y,\n          date: Date.now(),\n          pointerId: Date.now() // use timestamp as a unique ID\n        };\n        \n        this['waves'] = [...this['waves'], newWave];\n        \n        // Clear the wave after animation completes\n        setTimeout(() => {\n          this['waves'] = this['waves'].filter((wave: RippleWave) => wave.date !== newWave.date);\n        }, 300);\n      }\n    } as RippleDemoProps\n  }),\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"max-width: 700px;\">\n        <h3>How to use Ripple</h3>\n        <p>The Ripple component is usually not used directly in developer code, \n        but is integrated into buttons and other interactive elements.</p>\n        \n        <h4>Example of usage in the Button component:</h4>\n        <pre>\n&lt;tgui-button interactiveAnimation=\"background\"&gt;\n  With ripple effect\n&lt;/tgui-button&gt;\n        </pre>\n        \n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\n        when the button has the parameter interactiveAnimation=\"background\".</p>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/tgui/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [CommonModule, RootComponent],\n      providers: [\n        ThemeService, \n        PlatformService, \n        PortalService,\n        TelegramService,\n        {\n          provide: TGUI_CONFIG,\n          useValue: {\n            platform: 'base',\n            appearance: 'light',\n            followSystemTheme: false\n          }\n        },\n      ],\n    }),\n    \n    componentWrapperDecorator(\n      story => `<tgui-root [appearance]=\"appearance\" [platform]=\"platform\"><div style=\"background-color: var(--tgui--bg_color); padding: 3rem;\">${story}</div></tgui-root>`,\n      ({globals: {theme, platform}}) => ({\n        appearance: theme,\n        platform: platform\n      })\n    )\n  ],\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\nglobalTypes: {\n    platform: {\n      name: 'Platform',\n      description: 'Platform for components',\n      defaultValue: 'base',\n      toolbar: {\n        icon: 'mobile',\n        items: ['base', 'ios'],\n        title: 'Platform',\n        dynamicTitle: true,\n      },\n    },\n    theme: {\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        title: 'Theme',\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        dynamicTitle: true,\n      },\n    },\n  },\n}"
                }
            ],
            "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts": [
                {
                    "name": "TGUI_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<{\n  platform?: PlatformType;\n  appearance?: AppearanceType;\n  followSystemTheme?: boolean;\n}>('TGUI_CONFIG')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/tgui/src/lib/utils/theme-helper.ts": [
                {
                    "name": "applyTheme",
                    "file": "projects/tgui/src/lib/utils/theme-helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\n",
                    "args": [
                        {
                            "name": "theme",
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 359,
                                "end": 364,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "theme"
                            },
                            "type": "AppearanceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 353,
                                "end": 358,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\n"
                        }
                    ]
                },
                {
                    "name": "setupSystemThemeDetection",
                    "file": "projects/tgui/src/lib/utils/theme-helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Setup system theme detection using prefers-color-scheme</p>\n",
                    "args": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 766,
                                "end": 774,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "callback"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 760,
                                "end": 765,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional callback function that will be called when the theme changes</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 849,
                                "end": 856,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function to cleanup the listeners</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/tgui/src/lib/services/theme.service.ts": [
                {
                    "name": "AppearanceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "projects/tgui/src/lib/services/theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts": [
                {
                    "name": "AvatarShape",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"circle\" | \"rounded\" | \"square\"",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "AvatarSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xxs\" | \"xs\" | \"s\" | \"m\" | \"l\" | \"xl\"",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/components/blocks/badge/badge.component.ts": [
                {
                    "name": "BadgeMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"critical\" | \"secondary\" | \"gray\" | \"white\"",
                    "file": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "BadgeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"number\" | \"dot\"",
                    "file": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/components/blocks/card/card.component.ts": [
                {
                    "name": "CardType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"plain\" | \"ambient\"",
                    "file": "projects/tgui/src/lib/components/blocks/card/card.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Card types that define the visual style of the card</p>\n",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/services/platform.service.ts": [
                {
                    "name": "PlatformType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"base\" | \"ios\"",
                    "file": "projects/tgui/src/lib/services/platform.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/tgui/src/lib/icons/story/icons.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconsShowcaseComponent>",
                    "file": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/misc/divider/divider.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DividerComponent>",
                    "file": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AvatarComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AvatarStackComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BadgeComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InlineButtonsComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconButtonComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SectionComponent>",
                    "file": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SpinnerComponent>",
                    "file": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SnackbarComponent>",
                    "file": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CaptionComponent>",
                    "file": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeadlineComponent>",
                    "file": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LargeTitleComponent>",
                    "file": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SubheadlineComponent>",
                    "file": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/title/story/title.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TitleComponent>",
                    "file": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/typography/text/story/text.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextComponent>",
                    "file": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RippleComponent>",
                    "file": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 9,
        "status": "low",
        "files": [
            {
                "filePath": "projects/tgui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/avatar-stack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarStackComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomOffsets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMixedContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 50,
                "coverageCount": "9/18",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AvatarShape",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AvatarSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarAcronymComponent",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarBadgeComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentShapes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserCardExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithOnlineStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BadgeMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/badge.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BadgeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dots",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Types",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsageExamples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 36,
                "coverageCount": "11/30",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RippleEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 80,
                "coverageCount": "12/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/card.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CardType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/components/card-cell/card-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardCellComponent",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/components/card-chip/card-chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardChipComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ambient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomBorderRadius",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAdvancedChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDirectImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDirectImageAndChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 35,
                "coverageCount": "6/17",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/components/inline-buttons-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineButtonsItemComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/inline-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineButtonsComponent",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ItemModes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/components/section-footer/section-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionFooterComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/components/section-header/section-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionHeaderComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionComponent",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCenteredFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLargeHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/components/snackbar-button/snackbar-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnackbarOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DemoSnackbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PlatformSpecific",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/form/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DividerComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/misc/divider/divider.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/caption.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CaptionComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CaptionInContext",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/headline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadlineComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/large-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LargeTitleComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/subheadline/subheadline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubheadlineComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Level2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paragraph",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/story/text.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/story/title.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/portal/root-portal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootPortalComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/ripple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RippleComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RippleDemoProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tappable/tappable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TappableComponent",
                "coveragePercent": 50,
                "coverageCount": "14/28",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootComponent",
                "coveragePercent": 23,
                "coverageCount": "4/17",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TGUI_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/directives/portal-outlet.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PortalOutletDirective",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/directives/tgui-theme.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TGUIThemeDirective",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/directives/svg-props.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TguiSvgPropsDirective",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIconBase",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TguiIconProps",
                "coveragePercent": 100,
                "coverageCount": "21/21",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon12/tgui-icon12-quote.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon12Quote",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon16/tgui-icon16-cancel.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon16Cancel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon16/tgui-icon16-chevron.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon16Chevron",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon20/tgui-icon20-chevron-down.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon20ChevronDown",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon20/tgui-icon20-copy.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon20Copy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon20/tgui-icon20-question-mark.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon20QuestionMark",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon20/tgui-icon20-select-ios.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon20SelectIos",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon20/tgui-icon20-select.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon20Select",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-cancel.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24Cancel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-channel.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24Channel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chat.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24Chat",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-down.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24ChevronDown",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-left.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24ChevronLeft",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-right.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24ChevronRight",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-close.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24Close",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-notifications.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24Notifications",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-person-remove.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24PersonRemove",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-qr.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24QR",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon24/tgui-icon24-sun-low.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon24SunLow",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-add-circle.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28AddCircle",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-archive.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Archive",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-attach.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Attach",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-chat.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Chat",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-close-ambient.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28CloseAmbient",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-close.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Close",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-devices.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Devices",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-edit.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Edit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-heart.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Heart",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon28/tgui-icon28-stats.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon28Stats",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon32/tgui-icon32-profile-colored-square.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon32ProfileColoredSquare",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/icon36/tgui-icon36-backspace.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiIcon36Backspace",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconsShowcaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Overview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/icons/story/icons.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/platform.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlatformService",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/services/platform.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PlatformType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/portal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PortalService",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/services/ripple.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RippleService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/tgui/src/lib/services/ripple.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RippleWave",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/telegram.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TelegramService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeParams",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WebApp",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/telegram.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 40,
                "coverageCount": "8/20",
                "status": "medium"
            },
            {
                "filePath": "projects/tgui/src/lib/services/theme.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AppearanceType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/tgui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TguiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/tgui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TguiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/utils/theme-helper.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemThemeService",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/tgui/src/lib/utils/theme-helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applyTheme",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/tgui/src/lib/utils/theme-helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setupSystemThemeDetection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}