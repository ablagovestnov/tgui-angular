(self.webpackChunktguiangular=self.webpackChunktguiangular||[]).push([[8792],{"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./projects/tgui/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"CustomTouchEvent","id":"interface-CustomTouchEvent-33992f53964ea88709f6396f8b608ff79aa20eb7b9dbfc6b2df81df3bd664ea0b8e9d22ff63f139f8539800fb01cc205afbf8f0c4f5f4b64bb319392e85284e5","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  Component,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  ElementRef,\\n  inject,\\n  Renderer2,\\n  HostListener,\\n  signal,\\n  computed,\\n  input,\\n  output,\\n  OutputEmitterRef,\\n  OnInit,\\n  OnDestroy,\\n  CUSTOM_ELEMENTS_SCHEMA\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Interface for a touch/gesture event\\n */\\nexport interface Gesture {\\n  startX: number;\\n  startY: number;\\n  startT: Date;\\n  duration: number;\\n  isPressed: boolean;\\n  isY: boolean;\\n  isX: boolean;\\n  isSlideX: boolean;\\n  isSlideY: boolean;\\n  isSlide: boolean;\\n  clientX: number;\\n  clientY: number;\\n  shiftX: number;\\n  shiftY: number;\\n  shiftXAbs: number;\\n  shiftYAbs: number;\\n}\\n\\n/**\\n * Custom touch event type combining MouseEvent and TouchEvent properties\\n */\\nexport interface CustomTouchEvent extends MouseEvent {\\n  touches?: TouchList;\\n  changedTouches?: TouchList;\\n}\\n\\n/**\\n * Touch event handler type\\n */\\nexport type TouchEventHandler = (e: TouchEvent) => void;\\n\\n/**\\n * Touch event with gesture information\\n */\\nexport interface TouchEvent extends Gesture {\\n  originalEvent: CustomTouchEvent;\\n}\\n\\n/**\\n * Component for handling touch and gesture events\\n * \\n * This component is ported from the VKUI library for convenient handling of pointer events\\n * https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\n */\\n@Component({\\n  selector: \'tgui-touch\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\\n})\\nexport class TouchComponent implements OnInit, OnDestroy {\\n  private elementRef = inject(ElementRef);\\n  private renderer = inject(Renderer2);\\n\\n  // Input properties using Signal API\\n  usePointerHover = input<boolean>(false);\\n  useCapture = input<boolean>(false);\\n  slideThreshold = input<number>(5);\\n  noSlideClick = input<boolean>(false);\\n  stopPropagation = input<boolean>(false);\\n\\n  // Output events using Signal API\\n  onEnter = output<MouseEvent>();\\n  onLeave = output<MouseEvent>();\\n  onStart = output<TouchEvent>();\\n  onStartX = output<TouchEvent>();\\n  onStartY = output<TouchEvent>();\\n  onMove = output<TouchEvent>();\\n  onMoveX = output<TouchEvent>();\\n  onMoveY = output<TouchEvent>();\\n  onEnd = output<TouchEvent>();\\n  onEndX = output<TouchEvent>();\\n  onEndY = output<TouchEvent>();\\n\\n  // Internal state\\n  private gesture = signal<Partial<Gesture> | null>(null);\\n  private didSlide = signal(false);\\n  private supportedEvents = this.getSupportedEvents();\\n  private permanentUnlisteners: (() => void)[] = []; // Listeners that should persist throughout component lifecycle\\n  private moveEndUnlisteners: (() => void)[] = []; // Listeners that should be removed after gesture end\\n\\n  /**\\n   * Check if touch events are enabled in the browser\\n   */\\n  private touchEnabled(): boolean {\\n    return typeof window !== \'undefined\' && \'ontouchstart\' in window;\\n  }\\n\\n  /**\\n   * Get supported events based on browser capabilities\\n   */\\n  private getSupportedEvents(): string[] {\\n    if (this.touchEnabled()) {\\n      return [\'touchstart\', \'touchmove\', \'touchend\', \'touchcancel\'];\\n    }\\n    return [\'mousedown\', \'mousemove\', \'mouseup\', \'mouseleave\'];\\n  }\\n\\n  /**\\n   * Initialize a gesture\\n   */\\n  private initGesture(startX: number, startY: number): Gesture {\\n    return {\\n      startX,\\n      startY,\\n      startT: new Date(),\\n      duration: 0,\\n      isPressed: true,\\n      isY: false,\\n      isX: false,\\n      isSlideX: false,\\n      isSlideY: false,\\n      isSlide: false,\\n      clientX: 0,\\n      clientY: 0,\\n      shiftX: 0,\\n      shiftY: 0,\\n      shiftXAbs: 0,\\n      shiftYAbs: 0,\\n    };\\n  }\\n\\n  /**\\n   * Get X coordinate from an event\\n   */\\n  private coordX(e: CustomTouchEvent): number {\\n    if (e.clientX != null) {\\n      return e.clientX;\\n    }\\n    return e.changedTouches?.[0]?.clientX || 0;\\n  }\\n\\n  /**\\n   * Get Y coordinate from an event\\n   */\\n  private coordY(e: CustomTouchEvent): number {\\n    if (e.clientY != null) {\\n      return e.clientY;\\n    }\\n    return e.changedTouches?.[0]?.clientY || 0;\\n  }\\n\\n  ngOnInit(): void {\\n    this.setupListeners();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.removeAllListeners();\\n  }\\n\\n  /**\\n   * Setup event listeners\\n   */\\n  private setupListeners(): void {\\n    // Setup hover events if needed\\n    if (this.usePointerHover()) {\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerenter\' : \'mouseenter\',\\n        (e: MouseEvent) => this.handleHoverEnter(e)\\n      );\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerleave\' : \'mouseleave\',\\n        (e: MouseEvent) => this.handleHoverLeave(e)\\n      );\\n    }\\n\\n    // Setup touch/mouse start events\\n    this.addPermanentEventListener(\\n      this.supportedEvents[0],\\n      (e: CustomTouchEvent) => this.handleStart(e)\\n    );\\n  }\\n\\n  /**\\n   * Handle start of a touch/mouse interaction\\n   */\\n  private handleStart(e: CustomTouchEvent): void {\\n    const newGesture = this.initGesture(this.coordX(e), this.coordY(e));\\n    this.gesture.set(newGesture);\\n\\n    // Fire start events\\n    this.handleGestureEvent(e, [\\n      this.onStart,\\n      this.onStartX,\\n      this.onStartY\\n    ]);\\n\\n    // Add move and end events\\n    const targetElement = this.touchEnabled() \\n      ? (e.target as HTMLElement) // Touch events fire on the initial target\\n      : (window.document as any); // Mouse events need document-level capture\\n\\n    // Add move and end event listeners\\n    this.addDocumentEventListeners(targetElement);\\n  }\\n\\n  /**\\n   * Add event listeners at document level for move and end events\\n   */\\n  private addDocumentEventListeners(target: HTMLElement | Document): void {\\n    const moveListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[1],\\n      (e: CustomTouchEvent) => this.handleMove(e)\\n    );\\n\\n    const endListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[2],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    const cancelListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[3],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    this.moveEndUnlisteners.push(moveListener, endListener, cancelListener);\\n  }\\n\\n  /**\\n   * Handle move events\\n   */\\n  private handleMove(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    \\n    if (!currentGesture?.isPressed) {\\n      return;\\n    }\\n\\n    const { isPressed, isX, isY, startX = 0, startY = 0 } = currentGesture;\\n\\n    if (isPressed) {\\n      const clientX = this.coordX(e);\\n      const clientY = this.coordY(e);\\n\\n      // Calculate offsets\\n      const shiftX = clientX - startX;\\n      const shiftY = clientY - startY;\\n\\n      // Absolute offset values\\n      const shiftXAbs = Math.abs(shiftX);\\n      const shiftYAbs = Math.abs(shiftY);\\n\\n      // Check for multitouch - interrupt the gesture if detected\\n      if (e.touches && e.touches.length > 1) {\\n        this.handleEnd(e);\\n        return;\\n      }\\n\\n      // If direction not determined yet\\n      if (!isX && !isY) {\\n        const willBeX = shiftXAbs >= this.slideThreshold() && shiftXAbs > shiftYAbs;\\n        const willBeY = shiftYAbs >= this.slideThreshold() && shiftYAbs > shiftXAbs;\\n        const willBeSlidedX = willBeX && this.hasListeners(this.onMoveX) || this.hasListeners(this.onMove);\\n        const willBeSlidedY = willBeY && this.hasListeners(this.onMoveY) || this.hasListeners(this.onMove);\\n\\n        // Update gesture state\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            isY: willBeY,\\n            isX: willBeX,\\n            isSlideX: willBeSlidedX,\\n            isSlideY: willBeSlidedY,\\n            isSlide: willBeSlidedX || willBeSlidedY\\n          };\\n        });\\n      }\\n\\n      const updatedGesture = this.gesture();\\n      \\n      if (updatedGesture?.isSlide) {\\n        // Update gesture with new coordinates\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            clientX,\\n            clientY,\\n            shiftX,\\n            shiftY,\\n            shiftXAbs,\\n            shiftYAbs\\n          };\\n        });\\n\\n        // Fire move events\\n        this.handleGestureEvent(e, [\\n          this.onMove,\\n          updatedGesture.isSlideX ? this.onMoveX : null,\\n          updatedGesture.isSlideY ? this.onMoveY : null\\n        ]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Check if an output emitter has any listeners\\n   */\\n  private hasListeners(emitter: OutputEmitterRef<any>): boolean {\\n    // In Angular, we can\'t directly check if an output has listeners\\n    // So we\'ll make our best guess implementation\\n    return true;\\n  }\\n\\n  /**\\n   * Handle end of interaction\\n   */\\n  private handleEnd(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    const { isPressed, isSlide, isSlideX, isSlideY } = currentGesture || {};\\n\\n    if (isPressed) {\\n      // Fire end events\\n      this.handleGestureEvent(e, [\\n        this.onEnd,\\n        isSlideY ? this.onEndY : null,\\n        isSlideX ? this.onEndX : null\\n      ]);\\n    }\\n\\n    // Track if slide occurred for click handling\\n    if (this.touchEnabled() && isSlide) {\\n      // If it\'s a touch device and touchmove was detected,\\n      // the click event won\'t be triggered\\n      this.didSlide.set(false);\\n    } else {\\n      this.didSlide.set(Boolean(isSlide));\\n    }\\n\\n    // Reset gesture state\\n    this.gesture.set({});\\n\\n    // If it was a touch event, simulate hover cancellation\\n    if (this.touchEnabled() && this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e as MouseEvent);\\n    }\\n\\n    // Remove document listeners for move and end events\\n    this.removeMoveEndListeners();\\n  }\\n\\n  /**\\n   * Handle hover enter event\\n   */\\n  private handleHoverEnter(e: MouseEvent): void {\\n    if (this.hasListeners(this.onEnter)) {\\n      this.onEnter.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle hover leave event\\n   */\\n  private handleHoverLeave(e: MouseEvent): void {\\n    if (this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle gesture events and emit to appropriate outputs\\n   */\\n  private handleGestureEvent(e: CustomTouchEvent, handlers: Array<OutputEmitterRef<TouchEvent> | null>): void {\\n    if (this.stopPropagation()) {\\n      e.stopPropagation();\\n    }\\n\\n    handlers.forEach(emitter => {\\n      if (!emitter || !this.hasListeners(emitter)) return;\\n      \\n      const currentGesture = this.gesture();\\n      if (!currentGesture) return;\\n      \\n      const duration = Date.now() - (currentGesture.startT?.getTime() ?? 0);\\n      \\n      // Create a complete TouchEvent object with all required properties\\n      const touchEvent: TouchEvent = {\\n        startX: currentGesture.startX ?? 0,\\n        startY: currentGesture.startY ?? 0,\\n        startT: currentGesture.startT ?? new Date(),\\n        duration,\\n        isPressed: currentGesture.isPressed ?? false,\\n        isY: currentGesture.isY ?? false,\\n        isX: currentGesture.isX ?? false,\\n        isSlideX: currentGesture.isSlideX ?? false,\\n        isSlideY: currentGesture.isSlideY ?? false,\\n        isSlide: currentGesture.isSlide ?? false,\\n        clientX: currentGesture.clientX ?? 0,\\n        clientY: currentGesture.clientY ?? 0,\\n        shiftX: currentGesture.shiftX ?? 0,\\n        shiftY: currentGesture.shiftY ?? 0,\\n        shiftXAbs: currentGesture.shiftXAbs ?? 0,\\n        shiftYAbs: currentGesture.shiftYAbs ?? 0,\\n        originalEvent: e\\n      };\\n      \\n      emitter.emit(touchEvent);\\n    });\\n  }\\n\\n  /**\\n   * Add permanent event listeners to the host element\\n   * These listeners remain active throughout the component lifecycle\\n   */\\n  private addPermanentEventListener(eventName: string, handler: (e: any) => void): void {\\n    const unlistener = this.renderer.listen(\\n      this.elementRef.nativeElement,\\n      eventName,\\n      (e: any) => handler(e)\\n    );\\n    this.permanentUnlisteners.push(unlistener);\\n  }\\n\\n  /**\\n   * Remove move and end event listeners\\n   * These are cleaned up after every gesture completes\\n   */\\n  private removeMoveEndListeners(): void {\\n    this.moveEndUnlisteners.forEach(unlisten => unlisten());\\n    this.moveEndUnlisteners = [];\\n  }\\n\\n  /**\\n   * Remove all event listeners\\n   * Called on component destruction\\n   */\\n  private removeAllListeners(): void {\\n    this.removeMoveEndListeners();\\n    this.permanentUnlisteners.forEach(unlisten => unlisten());\\n    this.permanentUnlisteners = [];\\n  }\\n\\n  /**\\n   * Cancel the transition through nested links if a swipe was detected\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(e: MouseEvent): void {\\n    if (!this.didSlide()) {\\n      return;\\n    }\\n\\n    if (this.noSlideClick()) {\\n      e.stopPropagation();\\n      e.preventDefault();\\n    }\\n\\n    this.didSlide.set(false);\\n  }\\n\\n  /**\\n   * Dragstart event handler\\n   * Cancels the native browser behavior for nested links and images\\n   */\\n  @HostListener(\'dragstart\', [\'$event\'])\\n  onDragStart(e: DragEvent): void {\\n    const target = e.target as HTMLElement;\\n    if (target.tagName === \'A\' || target.tagName === \'IMG\') {\\n      e.preventDefault();\\n    }\\n  }\\n} ","properties":[{"name":"changedTouches","deprecated":false,"deprecationMessage":"","type":"TouchList","indexKey":"","optional":true,"description":"","line":47},{"name":"touches","deprecated":false,"deprecationMessage":"","type":"TouchList","indexKey":"","optional":true,"description":"","line":46}],"indexSignatures":[],"kind":171,"description":"<p>Custom touch event type combining MouseEvent and TouchEvent properties</p>\\n","rawdescription":"\\n\\nCustom touch event type combining MouseEvent and TouchEvent properties\\n","methods":[],"extends":["MouseEvent"]},{"name":"Gesture","id":"interface-Gesture-33992f53964ea88709f6396f8b608ff79aa20eb7b9dbfc6b2df81df3bd664ea0b8e9d22ff63f139f8539800fb01cc205afbf8f0c4f5f4b64bb319392e85284e5","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  Component,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  ElementRef,\\n  inject,\\n  Renderer2,\\n  HostListener,\\n  signal,\\n  computed,\\n  input,\\n  output,\\n  OutputEmitterRef,\\n  OnInit,\\n  OnDestroy,\\n  CUSTOM_ELEMENTS_SCHEMA\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Interface for a touch/gesture event\\n */\\nexport interface Gesture {\\n  startX: number;\\n  startY: number;\\n  startT: Date;\\n  duration: number;\\n  isPressed: boolean;\\n  isY: boolean;\\n  isX: boolean;\\n  isSlideX: boolean;\\n  isSlideY: boolean;\\n  isSlide: boolean;\\n  clientX: number;\\n  clientY: number;\\n  shiftX: number;\\n  shiftY: number;\\n  shiftXAbs: number;\\n  shiftYAbs: number;\\n}\\n\\n/**\\n * Custom touch event type combining MouseEvent and TouchEvent properties\\n */\\nexport interface CustomTouchEvent extends MouseEvent {\\n  touches?: TouchList;\\n  changedTouches?: TouchList;\\n}\\n\\n/**\\n * Touch event handler type\\n */\\nexport type TouchEventHandler = (e: TouchEvent) => void;\\n\\n/**\\n * Touch event with gesture information\\n */\\nexport interface TouchEvent extends Gesture {\\n  originalEvent: CustomTouchEvent;\\n}\\n\\n/**\\n * Component for handling touch and gesture events\\n * \\n * This component is ported from the VKUI library for convenient handling of pointer events\\n * https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\n */\\n@Component({\\n  selector: \'tgui-touch\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\\n})\\nexport class TouchComponent implements OnInit, OnDestroy {\\n  private elementRef = inject(ElementRef);\\n  private renderer = inject(Renderer2);\\n\\n  // Input properties using Signal API\\n  usePointerHover = input<boolean>(false);\\n  useCapture = input<boolean>(false);\\n  slideThreshold = input<number>(5);\\n  noSlideClick = input<boolean>(false);\\n  stopPropagation = input<boolean>(false);\\n\\n  // Output events using Signal API\\n  onEnter = output<MouseEvent>();\\n  onLeave = output<MouseEvent>();\\n  onStart = output<TouchEvent>();\\n  onStartX = output<TouchEvent>();\\n  onStartY = output<TouchEvent>();\\n  onMove = output<TouchEvent>();\\n  onMoveX = output<TouchEvent>();\\n  onMoveY = output<TouchEvent>();\\n  onEnd = output<TouchEvent>();\\n  onEndX = output<TouchEvent>();\\n  onEndY = output<TouchEvent>();\\n\\n  // Internal state\\n  private gesture = signal<Partial<Gesture> | null>(null);\\n  private didSlide = signal(false);\\n  private supportedEvents = this.getSupportedEvents();\\n  private permanentUnlisteners: (() => void)[] = []; // Listeners that should persist throughout component lifecycle\\n  private moveEndUnlisteners: (() => void)[] = []; // Listeners that should be removed after gesture end\\n\\n  /**\\n   * Check if touch events are enabled in the browser\\n   */\\n  private touchEnabled(): boolean {\\n    return typeof window !== \'undefined\' && \'ontouchstart\' in window;\\n  }\\n\\n  /**\\n   * Get supported events based on browser capabilities\\n   */\\n  private getSupportedEvents(): string[] {\\n    if (this.touchEnabled()) {\\n      return [\'touchstart\', \'touchmove\', \'touchend\', \'touchcancel\'];\\n    }\\n    return [\'mousedown\', \'mousemove\', \'mouseup\', \'mouseleave\'];\\n  }\\n\\n  /**\\n   * Initialize a gesture\\n   */\\n  private initGesture(startX: number, startY: number): Gesture {\\n    return {\\n      startX,\\n      startY,\\n      startT: new Date(),\\n      duration: 0,\\n      isPressed: true,\\n      isY: false,\\n      isX: false,\\n      isSlideX: false,\\n      isSlideY: false,\\n      isSlide: false,\\n      clientX: 0,\\n      clientY: 0,\\n      shiftX: 0,\\n      shiftY: 0,\\n      shiftXAbs: 0,\\n      shiftYAbs: 0,\\n    };\\n  }\\n\\n  /**\\n   * Get X coordinate from an event\\n   */\\n  private coordX(e: CustomTouchEvent): number {\\n    if (e.clientX != null) {\\n      return e.clientX;\\n    }\\n    return e.changedTouches?.[0]?.clientX || 0;\\n  }\\n\\n  /**\\n   * Get Y coordinate from an event\\n   */\\n  private coordY(e: CustomTouchEvent): number {\\n    if (e.clientY != null) {\\n      return e.clientY;\\n    }\\n    return e.changedTouches?.[0]?.clientY || 0;\\n  }\\n\\n  ngOnInit(): void {\\n    this.setupListeners();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.removeAllListeners();\\n  }\\n\\n  /**\\n   * Setup event listeners\\n   */\\n  private setupListeners(): void {\\n    // Setup hover events if needed\\n    if (this.usePointerHover()) {\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerenter\' : \'mouseenter\',\\n        (e: MouseEvent) => this.handleHoverEnter(e)\\n      );\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerleave\' : \'mouseleave\',\\n        (e: MouseEvent) => this.handleHoverLeave(e)\\n      );\\n    }\\n\\n    // Setup touch/mouse start events\\n    this.addPermanentEventListener(\\n      this.supportedEvents[0],\\n      (e: CustomTouchEvent) => this.handleStart(e)\\n    );\\n  }\\n\\n  /**\\n   * Handle start of a touch/mouse interaction\\n   */\\n  private handleStart(e: CustomTouchEvent): void {\\n    const newGesture = this.initGesture(this.coordX(e), this.coordY(e));\\n    this.gesture.set(newGesture);\\n\\n    // Fire start events\\n    this.handleGestureEvent(e, [\\n      this.onStart,\\n      this.onStartX,\\n      this.onStartY\\n    ]);\\n\\n    // Add move and end events\\n    const targetElement = this.touchEnabled() \\n      ? (e.target as HTMLElement) // Touch events fire on the initial target\\n      : (window.document as any); // Mouse events need document-level capture\\n\\n    // Add move and end event listeners\\n    this.addDocumentEventListeners(targetElement);\\n  }\\n\\n  /**\\n   * Add event listeners at document level for move and end events\\n   */\\n  private addDocumentEventListeners(target: HTMLElement | Document): void {\\n    const moveListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[1],\\n      (e: CustomTouchEvent) => this.handleMove(e)\\n    );\\n\\n    const endListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[2],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    const cancelListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[3],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    this.moveEndUnlisteners.push(moveListener, endListener, cancelListener);\\n  }\\n\\n  /**\\n   * Handle move events\\n   */\\n  private handleMove(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    \\n    if (!currentGesture?.isPressed) {\\n      return;\\n    }\\n\\n    const { isPressed, isX, isY, startX = 0, startY = 0 } = currentGesture;\\n\\n    if (isPressed) {\\n      const clientX = this.coordX(e);\\n      const clientY = this.coordY(e);\\n\\n      // Calculate offsets\\n      const shiftX = clientX - startX;\\n      const shiftY = clientY - startY;\\n\\n      // Absolute offset values\\n      const shiftXAbs = Math.abs(shiftX);\\n      const shiftYAbs = Math.abs(shiftY);\\n\\n      // Check for multitouch - interrupt the gesture if detected\\n      if (e.touches && e.touches.length > 1) {\\n        this.handleEnd(e);\\n        return;\\n      }\\n\\n      // If direction not determined yet\\n      if (!isX && !isY) {\\n        const willBeX = shiftXAbs >= this.slideThreshold() && shiftXAbs > shiftYAbs;\\n        const willBeY = shiftYAbs >= this.slideThreshold() && shiftYAbs > shiftXAbs;\\n        const willBeSlidedX = willBeX && this.hasListeners(this.onMoveX) || this.hasListeners(this.onMove);\\n        const willBeSlidedY = willBeY && this.hasListeners(this.onMoveY) || this.hasListeners(this.onMove);\\n\\n        // Update gesture state\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            isY: willBeY,\\n            isX: willBeX,\\n            isSlideX: willBeSlidedX,\\n            isSlideY: willBeSlidedY,\\n            isSlide: willBeSlidedX || willBeSlidedY\\n          };\\n        });\\n      }\\n\\n      const updatedGesture = this.gesture();\\n      \\n      if (updatedGesture?.isSlide) {\\n        // Update gesture with new coordinates\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            clientX,\\n            clientY,\\n            shiftX,\\n            shiftY,\\n            shiftXAbs,\\n            shiftYAbs\\n          };\\n        });\\n\\n        // Fire move events\\n        this.handleGestureEvent(e, [\\n          this.onMove,\\n          updatedGesture.isSlideX ? this.onMoveX : null,\\n          updatedGesture.isSlideY ? this.onMoveY : null\\n        ]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Check if an output emitter has any listeners\\n   */\\n  private hasListeners(emitter: OutputEmitterRef<any>): boolean {\\n    // In Angular, we can\'t directly check if an output has listeners\\n    // So we\'ll make our best guess implementation\\n    return true;\\n  }\\n\\n  /**\\n   * Handle end of interaction\\n   */\\n  private handleEnd(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    const { isPressed, isSlide, isSlideX, isSlideY } = currentGesture || {};\\n\\n    if (isPressed) {\\n      // Fire end events\\n      this.handleGestureEvent(e, [\\n        this.onEnd,\\n        isSlideY ? this.onEndY : null,\\n        isSlideX ? this.onEndX : null\\n      ]);\\n    }\\n\\n    // Track if slide occurred for click handling\\n    if (this.touchEnabled() && isSlide) {\\n      // If it\'s a touch device and touchmove was detected,\\n      // the click event won\'t be triggered\\n      this.didSlide.set(false);\\n    } else {\\n      this.didSlide.set(Boolean(isSlide));\\n    }\\n\\n    // Reset gesture state\\n    this.gesture.set({});\\n\\n    // If it was a touch event, simulate hover cancellation\\n    if (this.touchEnabled() && this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e as MouseEvent);\\n    }\\n\\n    // Remove document listeners for move and end events\\n    this.removeMoveEndListeners();\\n  }\\n\\n  /**\\n   * Handle hover enter event\\n   */\\n  private handleHoverEnter(e: MouseEvent): void {\\n    if (this.hasListeners(this.onEnter)) {\\n      this.onEnter.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle hover leave event\\n   */\\n  private handleHoverLeave(e: MouseEvent): void {\\n    if (this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle gesture events and emit to appropriate outputs\\n   */\\n  private handleGestureEvent(e: CustomTouchEvent, handlers: Array<OutputEmitterRef<TouchEvent> | null>): void {\\n    if (this.stopPropagation()) {\\n      e.stopPropagation();\\n    }\\n\\n    handlers.forEach(emitter => {\\n      if (!emitter || !this.hasListeners(emitter)) return;\\n      \\n      const currentGesture = this.gesture();\\n      if (!currentGesture) return;\\n      \\n      const duration = Date.now() - (currentGesture.startT?.getTime() ?? 0);\\n      \\n      // Create a complete TouchEvent object with all required properties\\n      const touchEvent: TouchEvent = {\\n        startX: currentGesture.startX ?? 0,\\n        startY: currentGesture.startY ?? 0,\\n        startT: currentGesture.startT ?? new Date(),\\n        duration,\\n        isPressed: currentGesture.isPressed ?? false,\\n        isY: currentGesture.isY ?? false,\\n        isX: currentGesture.isX ?? false,\\n        isSlideX: currentGesture.isSlideX ?? false,\\n        isSlideY: currentGesture.isSlideY ?? false,\\n        isSlide: currentGesture.isSlide ?? false,\\n        clientX: currentGesture.clientX ?? 0,\\n        clientY: currentGesture.clientY ?? 0,\\n        shiftX: currentGesture.shiftX ?? 0,\\n        shiftY: currentGesture.shiftY ?? 0,\\n        shiftXAbs: currentGesture.shiftXAbs ?? 0,\\n        shiftYAbs: currentGesture.shiftYAbs ?? 0,\\n        originalEvent: e\\n      };\\n      \\n      emitter.emit(touchEvent);\\n    });\\n  }\\n\\n  /**\\n   * Add permanent event listeners to the host element\\n   * These listeners remain active throughout the component lifecycle\\n   */\\n  private addPermanentEventListener(eventName: string, handler: (e: any) => void): void {\\n    const unlistener = this.renderer.listen(\\n      this.elementRef.nativeElement,\\n      eventName,\\n      (e: any) => handler(e)\\n    );\\n    this.permanentUnlisteners.push(unlistener);\\n  }\\n\\n  /**\\n   * Remove move and end event listeners\\n   * These are cleaned up after every gesture completes\\n   */\\n  private removeMoveEndListeners(): void {\\n    this.moveEndUnlisteners.forEach(unlisten => unlisten());\\n    this.moveEndUnlisteners = [];\\n  }\\n\\n  /**\\n   * Remove all event listeners\\n   * Called on component destruction\\n   */\\n  private removeAllListeners(): void {\\n    this.removeMoveEndListeners();\\n    this.permanentUnlisteners.forEach(unlisten => unlisten());\\n    this.permanentUnlisteners = [];\\n  }\\n\\n  /**\\n   * Cancel the transition through nested links if a swipe was detected\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(e: MouseEvent): void {\\n    if (!this.didSlide()) {\\n      return;\\n    }\\n\\n    if (this.noSlideClick()) {\\n      e.stopPropagation();\\n      e.preventDefault();\\n    }\\n\\n    this.didSlide.set(false);\\n  }\\n\\n  /**\\n   * Dragstart event handler\\n   * Cancels the native browser behavior for nested links and images\\n   */\\n  @HostListener(\'dragstart\', [\'$event\'])\\n  onDragStart(e: DragEvent): void {\\n    const target = e.target as HTMLElement;\\n    if (target.tagName === \'A\' || target.tagName === \'IMG\') {\\n      e.preventDefault();\\n    }\\n  }\\n} ","properties":[{"name":"clientX","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":34},{"name":"clientY","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":35},{"name":"duration","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":27},{"name":"isPressed","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":28},{"name":"isSlide","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":33},{"name":"isSlideX","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":31},{"name":"isSlideY","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":32},{"name":"isX","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":30},{"name":"isY","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":29},{"name":"shiftX","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":36},{"name":"shiftXAbs","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":38},{"name":"shiftY","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":37},{"name":"shiftYAbs","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":39},{"name":"startT","deprecated":false,"deprecationMessage":"","type":"Date","indexKey":"","optional":false,"description":"","line":26},{"name":"startX","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":24},{"name":"startY","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":25}],"indexSignatures":[],"kind":171,"description":"<p>Interface for a touch/gesture event</p>\\n","rawdescription":"\\n\\nInterface for a touch/gesture event\\n","methods":[],"extends":[]},{"name":"RippleDemoProps","id":"interface-RippleDemoProps-400de0fe8968fc1b3129a1c1cd55b4d83addd95e0b3fa19e32ff1b23d38e6b18c647fa9edfa7a969834be39ae0c24ab923a711562f3013fb27259f71ce79c312","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { moduleMetadata, type Meta, type StoryObj } from \'@storybook/angular\';\\nimport { RippleComponent } from \'../ripple.component\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { RippleWave } from \'@services/ripple.service\';\\n\\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories\\nconst meta: Meta<RippleComponent> = {\\n  title: \'Utils/Ripple\',\\n  component: RippleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, RippleComponent],\\n    }),\\n  ],\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<RippleComponent>;\\n\\ninterface RippleDemoProps {\\n  waves: RippleWave[];\\n  addRipple: (event: MouseEvent) => void;\\n}\\n\\n// Demo component with ripple effect simulation\\nexport const Preview: Story = {\\n  render: () => ({\\n    styles: [`\\n      .ripple-demo {\\n        position: relative;\\n        width: 200px;\\n        height: 200px;\\n        background-color: var(--tgui--secondary_fill);\\n        border-radius: 8px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        margin-bottom: 16px;\\n      }\\n      \\n      .ripple-demo::after {\\n        content: \'Click for demonstration\';\\n        position: relative;\\n        z-index: 1;\\n      }\\n      \\n      .description {\\n        max-width: 600px;\\n        margin-bottom: 16px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"description\\">\\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\\n           This effect is automatically used in the Button component with interactiveAnimation=\\"background\\" value.</p>\\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\\n      </div>\\n      \\n      <div #container class=\\"ripple-demo\\" (click)=\\"addRipple($event)\\">\\n        <tgui-ripple [waves]=\\"waves\\"></tgui-ripple>\\n      </div>\\n    `,\\n    props: {\\n      waves: [] as RippleWave[],\\n      addRipple: function(event: MouseEvent) {\\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\\n        const x = event.clientX - rect.left;\\n        const y = event.clientY - rect.top;\\n        \\n        const newWave: RippleWave = {\\n          x,\\n          y,\\n          date: Date.now(),\\n          pointerId: Date.now() // use timestamp as a unique ID\\n        };\\n        \\n        this[\'waves\'] = [...this[\'waves\'], newWave];\\n        \\n        // Clear the wave after animation completes\\n        setTimeout(() => {\\n          this[\'waves\'] = this[\'waves\'].filter((wave: RippleWave) => wave.date !== newWave.date);\\n        }, 300);\\n      }\\n    } as RippleDemoProps\\n  }),\\n};\\n\\n// Usage description\\nexport const Usage: Story = {\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 700px;\\">\\n        <h3>How to use Ripple</h3>\\n        <p>The Ripple component is usually not used directly in developer code, \\n        but is integrated into buttons and other interactive elements.</p>\\n        \\n        <h4>Example of usage in the Button component:</h4>\\n        <pre>\\n&lt;tgui-button interactiveAnimation=\\"background\\"&gt;\\n  With ripple effect\\n&lt;/tgui-button&gt;\\n        </pre>\\n        \\n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\\n        when the button has the parameter interactiveAnimation=\\"background\\".</p>\\n      </div>\\n    `,\\n  }),\\n}; \\n","properties":[{"name":"addRipple","deprecated":false,"deprecationMessage":"","type":"function","indexKey":"","optional":false,"description":"","line":23},{"name":"waves","deprecated":false,"deprecationMessage":"","type":"RippleWave[]","indexKey":"","optional":false,"description":"","line":22}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"RippleWave","id":"interface-RippleWave-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224","file":"projects/tgui/src/lib/services/ripple.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable, signal } from \'@angular/core\';\\n\\nexport interface RippleWave {\\n  x: number;\\n  y: number;\\n  date: number;\\n  pointerId: number;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class RippleService {\\n  private RIPPLE_DELAY = 70;\\n  private WAVE_LIVE = 225;\\n\\n  /**\\n   * Map to track pointer delay timers by pointerId\\n   */\\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\\n  \\n  /**\\n   * Add a new ripple wave effect at the specified coordinates\\n   */\\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\\n    const dateNow = Date.now();\\n    // Filter out expired waves\\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\\n\\n    // Add the new wave\\n    const newWaves = [\\n      ...filteredWaves,\\n      {\\n        x,\\n        y,\\n        date: dateNow,\\n        pointerId,\\n      }\\n    ];\\n\\n    // Clean up the timer for this pointerId\\n    this.pointerDelayTimers.delete(pointerId);\\n    \\n    return newWaves;\\n  }\\n\\n  /**\\n   * Handle pointer down event\\n   * @param event Pointer event\\n   * @param wavesSignal Signal для управления волнами\\n   */\\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\\n    const x = event.clientX - rect.left;\\n    const y = event.clientY - rect.top;\\n\\n    // Set a timeout to create the ripple effect after a short delay\\n    this.pointerDelayTimers.set(\\n      event.pointerId,\\n      setTimeout(() => {\\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\\n        wavesSignal.set(newWaves);\\n        \\n        // Clear the waves after they\'ve completed their animation\\n        setTimeout(() => {\\n          wavesSignal.set([]);\\n        }, this.WAVE_LIVE);\\n      }, this.RIPPLE_DELAY)\\n    );\\n  }\\n\\n  /**\\n   * Handle pointer cancel/up event\\n   */\\n  handlePointerCancel(pointerId: number): void {\\n    const timer = this.pointerDelayTimers.get(pointerId);\\n    if (timer) {\\n      clearTimeout(timer);\\n      this.pointerDelayTimers.delete(pointerId);\\n    }\\n  }\\n} ","properties":[{"name":"date","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":6},{"name":"pointerId","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":7},{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":4},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":5}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"SnackbarOptions","id":"interface-SnackbarOptions-fdb7f25441ea7cdb72bf47b0613ecd3f11e429fb038dc1dca25ccf11cd6a27c3b1bbc998ebae21f8aa6b979580bc593df2c2a7d8c5c1beeec8d07d23b5d0a30f","file":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable, inject, TemplateRef, createComponent, ApplicationRef, EnvironmentInjector } from \'@angular/core\';\\nimport { SnackbarComponent } from \'./snackbar.component\';\\n\\nexport interface SnackbarOptions {\\n  beforeTemplate?: TemplateRef<any>;\\n  afterTemplate?: TemplateRef<any>;\\n  description?: string;\\n  linkTemplate?: TemplateRef<any>;\\n  duration?: number;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class SnackbarService {\\n  private appRef = inject(ApplicationRef);\\n  private injector = inject(EnvironmentInjector);\\n  private activeSnackbars: any[] = [];\\n  \\n  show(message: string, options: SnackbarOptions = {}): void {\\n    // Создаем компонент программно\\n    const snackbarRef = createComponent(SnackbarComponent, {\\n      environmentInjector: this.injector,\\n      projectableNodes: [[document.createTextNode(message)]]\\n    });\\n    \\n    // Настраиваем свойства\\n    const instance = snackbarRef.instance;\\n    instance.beforeTemplate = options.beforeTemplate;\\n    instance.afterTemplate = options.afterTemplate;\\n    instance.description = options.description;\\n    instance.linkTemplate = options.linkTemplate;\\n    instance.duration = options.duration ?? 4000;\\n    instance.onClose = () => this.close(snackbarRef);\\n    \\n    // Добавляем в DOM и в отслеживаемые\\n    this.appRef.attachView(snackbarRef.hostView);\\n    this.activeSnackbars.push(snackbarRef);\\n  }\\n  \\n  private close(snackbarRef: any): void {\\n    const index = this.activeSnackbars.indexOf(snackbarRef);\\n    if (index !== -1) {\\n      this.activeSnackbars.splice(index, 1);\\n      this.appRef.detachView(snackbarRef.hostView);\\n      snackbarRef.destroy();\\n    }\\n  }\\n  \\n  closeAll(): void {\\n    for (const snackbar of this.activeSnackbars) {\\n      snackbar.instance.close();\\n    }\\n  }\\n} ","properties":[{"name":"afterTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":6},{"name":"beforeTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":5},{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":7},{"name":"duration","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":true,"description":"","line":9},{"name":"linkTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":8}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"StoryComponentProps","id":"interface-StoryComponentProps-fde257304bffcc205e00ac2da76486baea7365e3220769b2efa2b8aa9dd1d8f108d53373c797285bae089828118876ffc0a5bde3e6795f85733f535b620040d7","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Meta, StoryObj } from \'@storybook/angular\';\\nimport { signal, WritableSignal } from \'@angular/core\';\\nimport { TouchComponent, TouchEvent } from \'../touch.component\';\\n\\nconst meta: Meta<TouchComponent> = {\\n  title: \'Utils/Touch\',\\n  component: TouchComponent,\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    usePointerHover: {\\n      control: \'boolean\',\\n      description: \'Use pointer events for hover instead of mouse events\',\\n      defaultValue: false\\n    },\\n    useCapture: {\\n      control: \'boolean\',\\n      description: \'Use capture phase for events\',\\n      defaultValue: false\\n    },\\n    slideThreshold: {\\n      control: { type: \'number\', min: 1, max: 50 },\\n      description: \'Threshold in pixels before a touch is considered a slide\',\\n      defaultValue: 5\\n    },\\n    noSlideClick: {\\n      control: \'boolean\',\\n      description: \'Prevent clicks after a slide is detected\',\\n      defaultValue: false\\n    },\\n    stopPropagation: {\\n      control: \'boolean\',\\n      description: \'Stop event propagation\',\\n      defaultValue: false\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: `\\nA component for handling touch and gesture events.\\nThis component helps in handling swipe gestures and detecting various touch interactions.\\nIt\'s especially useful for implementing custom touch behaviors like swipeable lists, carousels, etc.\\n        `\\n      }\\n    }\\n  }\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<TouchComponent>;\\n\\ninterface StoryComponentProps {\\n  lastEvent: WritableSignal<string>;\\n  swipePosition: WritableSignal<number>;\\n}\\n\\nexport const Basic: Story = {\\n  render: () => ({\\n    props: {\\n      lastEvent: signal<string>(\'No events yet\'),\\n      onStart(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Start - X: ${event.startX}, Y: ${event.startY}`);\\n      },\\n      onMove(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Move - Shift X: ${event.shiftX}, Shift Y: ${event.shiftY}`);\\n      },\\n      onEnd(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`End - Duration: ${event.duration}ms`);\\n      }\\n    },\\n    template: `\\n      <div style=\\"width: 100%; padding: 16px;\\">\\n        <h3>Touch Component Demo</h3>\\n        \\n        <div>\\n          <tgui-touch\\n            [usePointerHover]=\\"usePointerHover\\"\\n            [useCapture]=\\"useCapture\\"\\n            [slideThreshold]=\\"slideThreshold\\"\\n            [noSlideClick]=\\"noSlideClick\\"\\n            [stopPropagation]=\\"stopPropagation\\"\\n            (onStart)=\\"onStart($event)\\"\\n            (onMove)=\\"onMove($event)\\"\\n            (onEnd)=\\"onEnd($event)\\"\\n            style=\\"display: block; width: 100%; height: 200px; background-color: #f0f0f0; border-radius: 8px; display: flex; align-items: center; justify-content: center; user-select: none; touch-action: manipulation;\\"\\n          >\\n            <div style=\\"text-align: center;\\">\\n              Touch or swipe here\\n            </div>\\n          </tgui-touch>\\n        </div>\\n        \\n        <div style=\\"margin-top: 16px; padding: 8px; background-color: #eee; border-radius: 4px;\\">\\n          <strong>Last Event:</strong> {{ lastEvent() }}\\n        </div>\\n      </div>\\n    `\\n  })\\n};\\n\\nexport const HorizontalSwipe: Story = {\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startX;\\n        },\\n        onMoveX(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-100, event.shiftX), 100);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Horizontal Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 100px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveX)=\\"onMoveX($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-y;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; top: 0; left: 50%; transform: translateX(-50%); width: 80px; height: 80px; margin: 10px; background-color: #2196F3; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateX(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the blue box left and right</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n};\\n\\nexport const VerticalSwipe: Story = {\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startY;\\n        },\\n        onMoveY(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-50, event.shiftY), 50);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Vertical Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 200px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveY)=\\"onMoveY($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-x;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; left: 50%; transform: translateX(-50%); top: 60px; width: 80px; height: 80px; background-color: #4CAF50; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateY(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the green box up and down</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n};","properties":[{"name":"lastEvent","deprecated":false,"deprecationMessage":"","type":"WritableSignal<string>","indexKey":"","optional":false,"description":"","line":53},{"name":"swipePosition","deprecated":false,"deprecationMessage":"","type":"WritableSignal<number>","indexKey":"","optional":false,"description":"","line":54}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"TguiIconProps","id":"interface-TguiIconProps-d88773b19396c2f17a9d0e4364a452ce7a3ac0e67bbafc3f39403a769604b79005e97ed995f180353afbf115a77c82481bb6eb1f2d4411221dfec17a3b00a324","file":"projects/tgui/src/lib/icons/icon.interface.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { EventEmitter } from \'@angular/core\';\\n\\n/**\\n * Base interface for icon components, compatible with React version\\n */\\nexport interface TguiIconProps {\\n  /**\\n   * CSS class to apply to the icon\\n   */\\n  class?: string;\\n  \\n  /**\\n   * Additional styles to apply to the icon\\n   */\\n  style?: { [key: string]: string };\\n  \\n  /**\\n   * Aria label for accessibility\\n   */\\n  ariaLabel?: string;\\n  \\n  /**\\n   * Title for the icon\\n   */\\n  title?: string;\\n\\n  /**\\n   * ID of the element\\n   */\\n  id?: string;\\n\\n  /**\\n   * Fill color of the icon\\n   */\\n  fill?: string;\\n\\n  /**\\n   * Stroke color of the icon\\n   */\\n  stroke?: string;\\n\\n  /**\\n   * Width of the icon (can be CSS units or number)\\n   */\\n  width?: string | number;\\n\\n  /**\\n   * Height of the icon (can be CSS units or number)\\n   */\\n  height?: string | number;\\n\\n  /**\\n   * Role attribute for accessibility\\n   */\\n  role?: string;\\n\\n  /**\\n   * Tab index for keyboard navigation\\n   */\\n  tabIndex?: number;\\n\\n  /**\\n   * Whether the element should get focus on load\\n   */\\n  autoFocus?: boolean;\\n\\n  /**\\n   * Click event handler\\n   */\\n  onClick?: EventEmitter<MouseEvent>;\\n\\n  /**\\n   * Focus event handler\\n   */\\n  onFocus?: EventEmitter<FocusEvent>;\\n\\n  /**\\n   * Blur event handler\\n   */\\n  onBlur?: EventEmitter<FocusEvent>;\\n\\n  /**\\n   * Mouse enter event handler\\n   */\\n  onMouseEnter?: EventEmitter<MouseEvent>;\\n\\n  /**\\n   * Mouse leave event handler\\n   */\\n  onMouseLeave?: EventEmitter<MouseEvent>;\\n\\n  /**\\n   * Key down event handler\\n   */\\n  onKeyDown?: EventEmitter<KeyboardEvent>;\\n\\n  /**\\n   * Pointer down event handler\\n   */\\n  onPointerDown?: EventEmitter<PointerEvent>;\\n\\n  /**\\n   * Pointer up event handler\\n   */\\n  onPointerUp?: EventEmitter<PointerEvent>;\\n} ","properties":[{"name":"ariaLabel","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Aria label for accessibility</p>\\n","line":20,"rawdescription":"\\n\\nAria label for accessibility\\n"},{"name":"autoFocus","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":true,"description":"<p>Whether the element should get focus on load</p>\\n","line":65,"rawdescription":"\\n\\nWhether the element should get focus on load\\n"},{"name":"class","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>CSS class to apply to the icon</p>\\n","line":10,"rawdescription":"\\n\\nCSS class to apply to the icon\\n"},{"name":"fill","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Fill color of the icon</p>\\n","line":35,"rawdescription":"\\n\\nFill color of the icon\\n"},{"name":"height","deprecated":false,"deprecationMessage":"","type":"string | number","indexKey":"","optional":true,"description":"<p>Height of the icon (can be CSS units or number)</p>\\n","line":50,"rawdescription":"\\n\\nHeight of the icon (can be CSS units or number)\\n"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>ID of the element</p>\\n","line":30,"rawdescription":"\\n\\nID of the element\\n"},{"name":"onBlur","deprecated":false,"deprecationMessage":"","type":"EventEmitter<FocusEvent>","indexKey":"","optional":true,"description":"<p>Blur event handler</p>\\n","line":80,"rawdescription":"\\n\\nBlur event handler\\n"},{"name":"onClick","deprecated":false,"deprecationMessage":"","type":"EventEmitter<MouseEvent>","indexKey":"","optional":true,"description":"<p>Click event handler</p>\\n","line":70,"rawdescription":"\\n\\nClick event handler\\n"},{"name":"onFocus","deprecated":false,"deprecationMessage":"","type":"EventEmitter<FocusEvent>","indexKey":"","optional":true,"description":"<p>Focus event handler</p>\\n","line":75,"rawdescription":"\\n\\nFocus event handler\\n"},{"name":"onKeyDown","deprecated":false,"deprecationMessage":"","type":"EventEmitter<KeyboardEvent>","indexKey":"","optional":true,"description":"<p>Key down event handler</p>\\n","line":95,"rawdescription":"\\n\\nKey down event handler\\n"},{"name":"onMouseEnter","deprecated":false,"deprecationMessage":"","type":"EventEmitter<MouseEvent>","indexKey":"","optional":true,"description":"<p>Mouse enter event handler</p>\\n","line":85,"rawdescription":"\\n\\nMouse enter event handler\\n"},{"name":"onMouseLeave","deprecated":false,"deprecationMessage":"","type":"EventEmitter<MouseEvent>","indexKey":"","optional":true,"description":"<p>Mouse leave event handler</p>\\n","line":90,"rawdescription":"\\n\\nMouse leave event handler\\n"},{"name":"onPointerDown","deprecated":false,"deprecationMessage":"","type":"EventEmitter<PointerEvent>","indexKey":"","optional":true,"description":"<p>Pointer down event handler</p>\\n","line":100,"rawdescription":"\\n\\nPointer down event handler\\n"},{"name":"onPointerUp","deprecated":false,"deprecationMessage":"","type":"EventEmitter<PointerEvent>","indexKey":"","optional":true,"description":"<p>Pointer up event handler</p>\\n","line":105,"rawdescription":"\\n\\nPointer up event handler\\n"},{"name":"role","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Role attribute for accessibility</p>\\n","line":55,"rawdescription":"\\n\\nRole attribute for accessibility\\n"},{"name":"stroke","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Stroke color of the icon</p>\\n","line":40,"rawdescription":"\\n\\nStroke color of the icon\\n"},{"name":"style","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":true,"description":"<p>Additional styles to apply to the icon</p>\\n","line":15,"rawdescription":"\\n\\nAdditional styles to apply to the icon\\n"},{"name":"tabIndex","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":true,"description":"<p>Tab index for keyboard navigation</p>\\n","line":60,"rawdescription":"\\n\\nTab index for keyboard navigation\\n"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Title for the icon</p>\\n","line":25,"rawdescription":"\\n\\nTitle for the icon\\n"},{"name":"width","deprecated":false,"deprecationMessage":"","type":"string | number","indexKey":"","optional":true,"description":"<p>Width of the icon (can be CSS units or number)</p>\\n","line":45,"rawdescription":"\\n\\nWidth of the icon (can be CSS units or number)\\n"}],"indexSignatures":[],"kind":171,"description":"<p>Base interface for icon components, compatible with React version</p>\\n","rawdescription":"\\n\\nBase interface for icon components, compatible with React version\\n","methods":[],"extends":[]},{"name":"ThemeParams","id":"interface-ThemeParams-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b","file":"projects/tgui/src/lib/services/telegram.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\n\\n// Define Telegram WebApp interface\\ninterface ThemeParams {\\n  bg_color?: string;\\n  text_color?: string;\\n  hint_color?: string;\\n  link_color?: string;\\n  button_color?: string;\\n  button_text_color?: string;\\n  secondary_bg_color?: string;\\n  header_bg_color?: string;\\n  accent_text_color?: string;\\n  section_bg_color?: string;\\n  section_header_text_color?: string;\\n  subtitle_text_color?: string;\\n  destructive_text_color?: string;\\n}\\n\\ninterface WebApp {\\n  colorScheme: \'light\' | \'dark\';\\n  themeParams: ThemeParams;\\n  onEvent(eventName: string, eventHandler: () => void): void;\\n  offEvent(eventName: string, eventHandler: () => void): void;\\n}\\n\\ndeclare global {\\n  interface Window {\\n    Telegram?: {\\n      WebApp?: WebApp;\\n    };\\n  }\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TelegramService {\\n  // Check if DOM is available\\n  private get canUseDOM(): boolean {\\n    return !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\\n  }\\n\\n  // Get Telegram WebApp data\\n  public getTelegramData(): WebApp | undefined {\\n    if (!this.canUseDOM) {\\n      return undefined;\\n    }\\n\\n    return window.Telegram?.WebApp;\\n  }\\n\\n  // Helper function to convert hex color to RGB\\n  public hexToRGB(hex: string): [number, number, number] {\\n    // Remove # if present\\n    hex = hex.replace(\'#\', \'\');\\n    \\n    // Parse hex values\\n    const r = parseInt(hex.substring(0, 2), 16);\\n    const g = parseInt(hex.substring(2, 4), 16);\\n    const b = parseInt(hex.substring(4, 6), 16);\\n    \\n    return [r, g, b];\\n  }\\n} ","properties":[{"name":"accent_text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":13},{"name":"bg_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":5},{"name":"button_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":9},{"name":"button_text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":10},{"name":"destructive_text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":17},{"name":"header_bg_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":12},{"name":"hint_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":7},{"name":"link_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":8},{"name":"secondary_bg_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":11},{"name":"section_bg_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":14},{"name":"section_header_text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":15},{"name":"subtitle_text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":16},{"name":"text_color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":6}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"TouchEvent","id":"interface-TouchEvent-33992f53964ea88709f6396f8b608ff79aa20eb7b9dbfc6b2df81df3bd664ea0b8e9d22ff63f139f8539800fb01cc205afbf8f0c4f5f4b64bb319392e85284e5","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  Component,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  ElementRef,\\n  inject,\\n  Renderer2,\\n  HostListener,\\n  signal,\\n  computed,\\n  input,\\n  output,\\n  OutputEmitterRef,\\n  OnInit,\\n  OnDestroy,\\n  CUSTOM_ELEMENTS_SCHEMA\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Interface for a touch/gesture event\\n */\\nexport interface Gesture {\\n  startX: number;\\n  startY: number;\\n  startT: Date;\\n  duration: number;\\n  isPressed: boolean;\\n  isY: boolean;\\n  isX: boolean;\\n  isSlideX: boolean;\\n  isSlideY: boolean;\\n  isSlide: boolean;\\n  clientX: number;\\n  clientY: number;\\n  shiftX: number;\\n  shiftY: number;\\n  shiftXAbs: number;\\n  shiftYAbs: number;\\n}\\n\\n/**\\n * Custom touch event type combining MouseEvent and TouchEvent properties\\n */\\nexport interface CustomTouchEvent extends MouseEvent {\\n  touches?: TouchList;\\n  changedTouches?: TouchList;\\n}\\n\\n/**\\n * Touch event handler type\\n */\\nexport type TouchEventHandler = (e: TouchEvent) => void;\\n\\n/**\\n * Touch event with gesture information\\n */\\nexport interface TouchEvent extends Gesture {\\n  originalEvent: CustomTouchEvent;\\n}\\n\\n/**\\n * Component for handling touch and gesture events\\n * \\n * This component is ported from the VKUI library for convenient handling of pointer events\\n * https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\n */\\n@Component({\\n  selector: \'tgui-touch\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\\n})\\nexport class TouchComponent implements OnInit, OnDestroy {\\n  private elementRef = inject(ElementRef);\\n  private renderer = inject(Renderer2);\\n\\n  // Input properties using Signal API\\n  usePointerHover = input<boolean>(false);\\n  useCapture = input<boolean>(false);\\n  slideThreshold = input<number>(5);\\n  noSlideClick = input<boolean>(false);\\n  stopPropagation = input<boolean>(false);\\n\\n  // Output events using Signal API\\n  onEnter = output<MouseEvent>();\\n  onLeave = output<MouseEvent>();\\n  onStart = output<TouchEvent>();\\n  onStartX = output<TouchEvent>();\\n  onStartY = output<TouchEvent>();\\n  onMove = output<TouchEvent>();\\n  onMoveX = output<TouchEvent>();\\n  onMoveY = output<TouchEvent>();\\n  onEnd = output<TouchEvent>();\\n  onEndX = output<TouchEvent>();\\n  onEndY = output<TouchEvent>();\\n\\n  // Internal state\\n  private gesture = signal<Partial<Gesture> | null>(null);\\n  private didSlide = signal(false);\\n  private supportedEvents = this.getSupportedEvents();\\n  private permanentUnlisteners: (() => void)[] = []; // Listeners that should persist throughout component lifecycle\\n  private moveEndUnlisteners: (() => void)[] = []; // Listeners that should be removed after gesture end\\n\\n  /**\\n   * Check if touch events are enabled in the browser\\n   */\\n  private touchEnabled(): boolean {\\n    return typeof window !== \'undefined\' && \'ontouchstart\' in window;\\n  }\\n\\n  /**\\n   * Get supported events based on browser capabilities\\n   */\\n  private getSupportedEvents(): string[] {\\n    if (this.touchEnabled()) {\\n      return [\'touchstart\', \'touchmove\', \'touchend\', \'touchcancel\'];\\n    }\\n    return [\'mousedown\', \'mousemove\', \'mouseup\', \'mouseleave\'];\\n  }\\n\\n  /**\\n   * Initialize a gesture\\n   */\\n  private initGesture(startX: number, startY: number): Gesture {\\n    return {\\n      startX,\\n      startY,\\n      startT: new Date(),\\n      duration: 0,\\n      isPressed: true,\\n      isY: false,\\n      isX: false,\\n      isSlideX: false,\\n      isSlideY: false,\\n      isSlide: false,\\n      clientX: 0,\\n      clientY: 0,\\n      shiftX: 0,\\n      shiftY: 0,\\n      shiftXAbs: 0,\\n      shiftYAbs: 0,\\n    };\\n  }\\n\\n  /**\\n   * Get X coordinate from an event\\n   */\\n  private coordX(e: CustomTouchEvent): number {\\n    if (e.clientX != null) {\\n      return e.clientX;\\n    }\\n    return e.changedTouches?.[0]?.clientX || 0;\\n  }\\n\\n  /**\\n   * Get Y coordinate from an event\\n   */\\n  private coordY(e: CustomTouchEvent): number {\\n    if (e.clientY != null) {\\n      return e.clientY;\\n    }\\n    return e.changedTouches?.[0]?.clientY || 0;\\n  }\\n\\n  ngOnInit(): void {\\n    this.setupListeners();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.removeAllListeners();\\n  }\\n\\n  /**\\n   * Setup event listeners\\n   */\\n  private setupListeners(): void {\\n    // Setup hover events if needed\\n    if (this.usePointerHover()) {\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerenter\' : \'mouseenter\',\\n        (e: MouseEvent) => this.handleHoverEnter(e)\\n      );\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerleave\' : \'mouseleave\',\\n        (e: MouseEvent) => this.handleHoverLeave(e)\\n      );\\n    }\\n\\n    // Setup touch/mouse start events\\n    this.addPermanentEventListener(\\n      this.supportedEvents[0],\\n      (e: CustomTouchEvent) => this.handleStart(e)\\n    );\\n  }\\n\\n  /**\\n   * Handle start of a touch/mouse interaction\\n   */\\n  private handleStart(e: CustomTouchEvent): void {\\n    const newGesture = this.initGesture(this.coordX(e), this.coordY(e));\\n    this.gesture.set(newGesture);\\n\\n    // Fire start events\\n    this.handleGestureEvent(e, [\\n      this.onStart,\\n      this.onStartX,\\n      this.onStartY\\n    ]);\\n\\n    // Add move and end events\\n    const targetElement = this.touchEnabled() \\n      ? (e.target as HTMLElement) // Touch events fire on the initial target\\n      : (window.document as any); // Mouse events need document-level capture\\n\\n    // Add move and end event listeners\\n    this.addDocumentEventListeners(targetElement);\\n  }\\n\\n  /**\\n   * Add event listeners at document level for move and end events\\n   */\\n  private addDocumentEventListeners(target: HTMLElement | Document): void {\\n    const moveListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[1],\\n      (e: CustomTouchEvent) => this.handleMove(e)\\n    );\\n\\n    const endListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[2],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    const cancelListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[3],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    this.moveEndUnlisteners.push(moveListener, endListener, cancelListener);\\n  }\\n\\n  /**\\n   * Handle move events\\n   */\\n  private handleMove(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    \\n    if (!currentGesture?.isPressed) {\\n      return;\\n    }\\n\\n    const { isPressed, isX, isY, startX = 0, startY = 0 } = currentGesture;\\n\\n    if (isPressed) {\\n      const clientX = this.coordX(e);\\n      const clientY = this.coordY(e);\\n\\n      // Calculate offsets\\n      const shiftX = clientX - startX;\\n      const shiftY = clientY - startY;\\n\\n      // Absolute offset values\\n      const shiftXAbs = Math.abs(shiftX);\\n      const shiftYAbs = Math.abs(shiftY);\\n\\n      // Check for multitouch - interrupt the gesture if detected\\n      if (e.touches && e.touches.length > 1) {\\n        this.handleEnd(e);\\n        return;\\n      }\\n\\n      // If direction not determined yet\\n      if (!isX && !isY) {\\n        const willBeX = shiftXAbs >= this.slideThreshold() && shiftXAbs > shiftYAbs;\\n        const willBeY = shiftYAbs >= this.slideThreshold() && shiftYAbs > shiftXAbs;\\n        const willBeSlidedX = willBeX && this.hasListeners(this.onMoveX) || this.hasListeners(this.onMove);\\n        const willBeSlidedY = willBeY && this.hasListeners(this.onMoveY) || this.hasListeners(this.onMove);\\n\\n        // Update gesture state\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            isY: willBeY,\\n            isX: willBeX,\\n            isSlideX: willBeSlidedX,\\n            isSlideY: willBeSlidedY,\\n            isSlide: willBeSlidedX || willBeSlidedY\\n          };\\n        });\\n      }\\n\\n      const updatedGesture = this.gesture();\\n      \\n      if (updatedGesture?.isSlide) {\\n        // Update gesture with new coordinates\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            clientX,\\n            clientY,\\n            shiftX,\\n            shiftY,\\n            shiftXAbs,\\n            shiftYAbs\\n          };\\n        });\\n\\n        // Fire move events\\n        this.handleGestureEvent(e, [\\n          this.onMove,\\n          updatedGesture.isSlideX ? this.onMoveX : null,\\n          updatedGesture.isSlideY ? this.onMoveY : null\\n        ]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Check if an output emitter has any listeners\\n   */\\n  private hasListeners(emitter: OutputEmitterRef<any>): boolean {\\n    // In Angular, we can\'t directly check if an output has listeners\\n    // So we\'ll make our best guess implementation\\n    return true;\\n  }\\n\\n  /**\\n   * Handle end of interaction\\n   */\\n  private handleEnd(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    const { isPressed, isSlide, isSlideX, isSlideY } = currentGesture || {};\\n\\n    if (isPressed) {\\n      // Fire end events\\n      this.handleGestureEvent(e, [\\n        this.onEnd,\\n        isSlideY ? this.onEndY : null,\\n        isSlideX ? this.onEndX : null\\n      ]);\\n    }\\n\\n    // Track if slide occurred for click handling\\n    if (this.touchEnabled() && isSlide) {\\n      // If it\'s a touch device and touchmove was detected,\\n      // the click event won\'t be triggered\\n      this.didSlide.set(false);\\n    } else {\\n      this.didSlide.set(Boolean(isSlide));\\n    }\\n\\n    // Reset gesture state\\n    this.gesture.set({});\\n\\n    // If it was a touch event, simulate hover cancellation\\n    if (this.touchEnabled() && this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e as MouseEvent);\\n    }\\n\\n    // Remove document listeners for move and end events\\n    this.removeMoveEndListeners();\\n  }\\n\\n  /**\\n   * Handle hover enter event\\n   */\\n  private handleHoverEnter(e: MouseEvent): void {\\n    if (this.hasListeners(this.onEnter)) {\\n      this.onEnter.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle hover leave event\\n   */\\n  private handleHoverLeave(e: MouseEvent): void {\\n    if (this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle gesture events and emit to appropriate outputs\\n   */\\n  private handleGestureEvent(e: CustomTouchEvent, handlers: Array<OutputEmitterRef<TouchEvent> | null>): void {\\n    if (this.stopPropagation()) {\\n      e.stopPropagation();\\n    }\\n\\n    handlers.forEach(emitter => {\\n      if (!emitter || !this.hasListeners(emitter)) return;\\n      \\n      const currentGesture = this.gesture();\\n      if (!currentGesture) return;\\n      \\n      const duration = Date.now() - (currentGesture.startT?.getTime() ?? 0);\\n      \\n      // Create a complete TouchEvent object with all required properties\\n      const touchEvent: TouchEvent = {\\n        startX: currentGesture.startX ?? 0,\\n        startY: currentGesture.startY ?? 0,\\n        startT: currentGesture.startT ?? new Date(),\\n        duration,\\n        isPressed: currentGesture.isPressed ?? false,\\n        isY: currentGesture.isY ?? false,\\n        isX: currentGesture.isX ?? false,\\n        isSlideX: currentGesture.isSlideX ?? false,\\n        isSlideY: currentGesture.isSlideY ?? false,\\n        isSlide: currentGesture.isSlide ?? false,\\n        clientX: currentGesture.clientX ?? 0,\\n        clientY: currentGesture.clientY ?? 0,\\n        shiftX: currentGesture.shiftX ?? 0,\\n        shiftY: currentGesture.shiftY ?? 0,\\n        shiftXAbs: currentGesture.shiftXAbs ?? 0,\\n        shiftYAbs: currentGesture.shiftYAbs ?? 0,\\n        originalEvent: e\\n      };\\n      \\n      emitter.emit(touchEvent);\\n    });\\n  }\\n\\n  /**\\n   * Add permanent event listeners to the host element\\n   * These listeners remain active throughout the component lifecycle\\n   */\\n  private addPermanentEventListener(eventName: string, handler: (e: any) => void): void {\\n    const unlistener = this.renderer.listen(\\n      this.elementRef.nativeElement,\\n      eventName,\\n      (e: any) => handler(e)\\n    );\\n    this.permanentUnlisteners.push(unlistener);\\n  }\\n\\n  /**\\n   * Remove move and end event listeners\\n   * These are cleaned up after every gesture completes\\n   */\\n  private removeMoveEndListeners(): void {\\n    this.moveEndUnlisteners.forEach(unlisten => unlisten());\\n    this.moveEndUnlisteners = [];\\n  }\\n\\n  /**\\n   * Remove all event listeners\\n   * Called on component destruction\\n   */\\n  private removeAllListeners(): void {\\n    this.removeMoveEndListeners();\\n    this.permanentUnlisteners.forEach(unlisten => unlisten());\\n    this.permanentUnlisteners = [];\\n  }\\n\\n  /**\\n   * Cancel the transition through nested links if a swipe was detected\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(e: MouseEvent): void {\\n    if (!this.didSlide()) {\\n      return;\\n    }\\n\\n    if (this.noSlideClick()) {\\n      e.stopPropagation();\\n      e.preventDefault();\\n    }\\n\\n    this.didSlide.set(false);\\n  }\\n\\n  /**\\n   * Dragstart event handler\\n   * Cancels the native browser behavior for nested links and images\\n   */\\n  @HostListener(\'dragstart\', [\'$event\'])\\n  onDragStart(e: DragEvent): void {\\n    const target = e.target as HTMLElement;\\n    if (target.tagName === \'A\' || target.tagName === \'IMG\') {\\n      e.preventDefault();\\n    }\\n  }\\n} ","properties":[{"name":"originalEvent","deprecated":false,"deprecationMessage":"","type":"CustomTouchEvent","indexKey":"","optional":false,"description":"","line":59}],"indexSignatures":[],"kind":171,"description":"<p>Touch event with gesture information</p>\\n","rawdescription":"\\n\\nTouch event with gesture information\\n","methods":[],"extends":["Gesture"]},{"name":"WebApp","id":"interface-WebApp-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b","file":"projects/tgui/src/lib/services/telegram.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\n\\n// Define Telegram WebApp interface\\ninterface ThemeParams {\\n  bg_color?: string;\\n  text_color?: string;\\n  hint_color?: string;\\n  link_color?: string;\\n  button_color?: string;\\n  button_text_color?: string;\\n  secondary_bg_color?: string;\\n  header_bg_color?: string;\\n  accent_text_color?: string;\\n  section_bg_color?: string;\\n  section_header_text_color?: string;\\n  subtitle_text_color?: string;\\n  destructive_text_color?: string;\\n}\\n\\ninterface WebApp {\\n  colorScheme: \'light\' | \'dark\';\\n  themeParams: ThemeParams;\\n  onEvent(eventName: string, eventHandler: () => void): void;\\n  offEvent(eventName: string, eventHandler: () => void): void;\\n}\\n\\ndeclare global {\\n  interface Window {\\n    Telegram?: {\\n      WebApp?: WebApp;\\n    };\\n  }\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TelegramService {\\n  // Check if DOM is available\\n  private get canUseDOM(): boolean {\\n    return !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\\n  }\\n\\n  // Get Telegram WebApp data\\n  public getTelegramData(): WebApp | undefined {\\n    if (!this.canUseDOM) {\\n      return undefined;\\n    }\\n\\n    return window.Telegram?.WebApp;\\n  }\\n\\n  // Helper function to convert hex color to RGB\\n  public hexToRGB(hex: string): [number, number, number] {\\n    // Remove # if present\\n    hex = hex.replace(\'#\', \'\');\\n    \\n    // Parse hex values\\n    const r = parseInt(hex.substring(0, 2), 16);\\n    const g = parseInt(hex.substring(2, 4), 16);\\n    const b = parseInt(hex.substring(4, 6), 16);\\n    \\n    return [r, g, b];\\n  }\\n} ","properties":[{"name":"colorScheme","deprecated":false,"deprecationMessage":"","type":"\\"light\\" | \\"dark\\"","indexKey":"","optional":false,"description":"","line":21},{"name":"themeParams","deprecated":false,"deprecationMessage":"","type":"ThemeParams","indexKey":"","optional":false,"description":"","line":22}],"indexSignatures":[],"kind":173,"methods":[{"name":"offEvent","args":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":""},{"name":"eventHandler","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":24,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"eventHandler","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"onEvent","args":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":""},{"name":"eventHandler","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":23,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"eventHandler","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]}],"extends":[]},{"name":"Window","id":"interface-Window-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b","file":"projects/tgui/src/lib/services/telegram.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\n\\n// Define Telegram WebApp interface\\ninterface ThemeParams {\\n  bg_color?: string;\\n  text_color?: string;\\n  hint_color?: string;\\n  link_color?: string;\\n  button_color?: string;\\n  button_text_color?: string;\\n  secondary_bg_color?: string;\\n  header_bg_color?: string;\\n  accent_text_color?: string;\\n  section_bg_color?: string;\\n  section_header_text_color?: string;\\n  subtitle_text_color?: string;\\n  destructive_text_color?: string;\\n}\\n\\ninterface WebApp {\\n  colorScheme: \'light\' | \'dark\';\\n  themeParams: ThemeParams;\\n  onEvent(eventName: string, eventHandler: () => void): void;\\n  offEvent(eventName: string, eventHandler: () => void): void;\\n}\\n\\ndeclare global {\\n  interface Window {\\n    Telegram?: {\\n      WebApp?: WebApp;\\n    };\\n  }\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TelegramService {\\n  // Check if DOM is available\\n  private get canUseDOM(): boolean {\\n    return !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\\n  }\\n\\n  // Get Telegram WebApp data\\n  public getTelegramData(): WebApp | undefined {\\n    if (!this.canUseDOM) {\\n      return undefined;\\n    }\\n\\n    return window.Telegram?.WebApp;\\n  }\\n\\n  // Helper function to convert hex color to RGB\\n  public hexToRGB(hex: string): [number, number, number] {\\n    // Remove # if present\\n    hex = hex.replace(\'#\', \'\');\\n    \\n    // Parse hex values\\n    const r = parseInt(hex.substring(0, 2), 16);\\n    const g = parseInt(hex.substring(2, 4), 16);\\n    const b = parseInt(hex.substring(4, 6), 16);\\n    \\n    return [r, g, b];\\n  }\\n} ","properties":[{"name":"Telegram","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":true,"description":"","line":29}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]}],"injectables":[{"name":"PlatformService","id":"injectable-PlatformService-da35e3f5d70773bebd38cfc6f0d2ff2568f4571fb10142b336d812ca0fbf66328ad848099bd4ccf896c4231162bded0a2e3640101a6ca1b19659ce440ebb8ca5","file":"projects/tgui/src/lib/services/platform.service.ts","properties":[{"name":"_isIOSPlatform","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"boolean | null","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[123]},{"name":"document","defaultValue":"inject(DOCUMENT)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":17,"modifierKind":[123]},{"name":"platform","defaultValue":"signal<PlatformType>(\'base\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":12,"modifierKind":[125]}],"methods":[{"name":"applyPlatformToDOM","args":[{"name":"platform","type":"PlatformType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":69,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nApply platform class to DOM\\n","description":"<p>Apply platform class to DOM</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"platform","type":"PlatformType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"detectIOSFromUserAgent","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if the device is iOS based on user agent\\n","description":"<p>Check if the device is iOS based on user agent</p>\\n","modifierKind":[123]},{"name":"detectPlatform","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":56,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetect platform based on user agent\\n","description":"<p>Detect platform based on user agent</p>\\n","modifierKind":[123]},{"name":"isIOS","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks if current platform is iOS\\nUses DOM class to determine platform, caches result for better performance\\n","description":"<p>Checks if current platform is iOS\\nUses DOM class to determine platform, caches result for better performance</p>\\n","modifierKind":[125]},{"name":"setPlatform","args":[{"name":"platform","type":"PlatformType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":26,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSet platform manually\\n","description":"<p>Set platform manually</p>\\n","modifierKind":[125],"jsdoctags":[{"name":"platform","type":"PlatformType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { DOCUMENT } from \'@angular/common\';\\nimport { Inject, Injectable, signal, inject } from \'@angular/core\';\\nimport { TelegramService } from \'./telegram.service\';\\n\\nexport type PlatformType = \'base\' | \'ios\';\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class PlatformService {\\n  // Signal for platform that components can subscribe to\\n  public platform = signal<PlatformType>(\'base\');\\n  \\n  // Cached value for checking iOS platform\\n  private _isIOSPlatform: boolean | null = null;\\n\\n  private document = inject(DOCUMENT);\\n\\n  constructor() {\\n    this.detectPlatform();\\n  }\\n\\n  /**\\n   * Set platform manually\\n   */\\n  public setPlatform(platform: PlatformType): void {\\n    this.platform.set(platform);\\n    this.applyPlatformToDOM(platform);\\n    // Update cached value\\n    this._isIOSPlatform = platform === \'ios\';\\n  }\\n  \\n  /**\\n   * Checks if current platform is iOS\\n   * Uses DOM class to determine platform, caches result for better performance\\n   */\\n  public isIOS(): boolean {\\n    // If value is already cached, return it\\n    if (this._isIOSPlatform !== null) {\\n      return this._isIOSPlatform;\\n    }\\n    \\n    // Otherwise check for iOS class in DOM\\n    if (this.document && this.document.documentElement) {\\n      this._isIOSPlatform = this.document.documentElement.classList.contains(\'tgui-platform-ios\');\\n      return this._isIOSPlatform;\\n    }\\n    \\n    // If unable to determine, return false\\n    return false;\\n  }\\n\\n  /**\\n   * Detect platform based on user agent\\n   */\\n  private detectPlatform(): void {\\n    const isIOS = this.detectIOSFromUserAgent();\\n    const detectedPlatform: PlatformType = isIOS ? \'ios\' : \'base\';\\n    \\n    this.platform.set(detectedPlatform);\\n    this.applyPlatformToDOM(detectedPlatform);\\n    // Cache result\\n    this._isIOSPlatform = isIOS;\\n  }\\n\\n  /**\\n   * Apply platform class to DOM\\n   */\\n  private applyPlatformToDOM(platform: PlatformType): void {\\n    // Remove existing platform classes\\n    this.document.documentElement.classList.remove(\'tgui-platform-base\', \'tgui-platform-ios\');\\n    \\n    // Add the appropriate platform class\\n    this.document.documentElement.classList.add(`tgui-platform-${platform}`);\\n  }\\n\\n  /**\\n   * Check if the device is iOS based on user agent\\n   */\\n  private detectIOSFromUserAgent(): boolean {\\n    if (typeof window === \'undefined\' || !window.navigator) {\\n      return false;\\n    }\\n\\n    const userAgent = window.navigator.userAgent.toLowerCase();\\n    \\n    return /iphone|ipad|ipod/.test(userAgent) || \\n           (userAgent.includes(\'mac\') && \'ontouchend\' in document);\\n  }\\n} ","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":17},"extends":[],"type":"injectable"},{"name":"PortalService","id":"injectable-PortalService-8fece340023811fd532f9e283dd9aabe9f4a30f311083c08a175b1ec40a6a4d635359fd25c8032b053ebf36bac4bdee008b8e91cb5aed5ab062a2f9873233108","file":"projects/tgui/src/lib/services/portal.service.ts","properties":[{"name":"hasPortalContainer","defaultValue":"computed(() => !!this.portalContainer())","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":18,"modifierKind":[125,148]},{"name":"portalContainer","defaultValue":"this.portalContainerRef.asReadonly()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[125,148]},{"name":"portalContainerRef","defaultValue":"signal<ElementRef<HTMLElement> | null>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":12,"modifierKind":[123,148]}],"methods":[{"name":"clearPortalContainer","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClear the portal container reference\\nThis should be called when the container is destroyed\\n","description":"<p>Clear the portal container reference\\nThis should be called when the container is destroyed</p>\\n","modifierKind":[125]},{"name":"getPortalContainerElement","args":[],"optional":false,"returnType":"HTMLElement | null","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGet the current portal container element\\nReturns the native DOM element or null if not set\\n","description":"<p>Get the current portal container element\\nReturns the native DOM element or null if not set</p>\\n","modifierKind":[125]},{"name":"isPortalReady","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":62,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if portal container is ready for use\\n","description":"<p>Check if portal container is ready for use</p>\\n","modifierKind":[125]},{"name":"setPortalContainer","args":[{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSet the portal container reference\\nThis is typically called by the TGUIRootComponent\\n","description":"<p>Set the portal container reference\\nThis is typically called by the TGUIRootComponent</p>\\n","modifierKind":[125],"jsdoctags":[{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Service for managing portal container references\\nProvides functionality for components to render content outside of their DOM hierarchy</p>\\n","rawdescription":"\\n\\nService for managing portal container references\\nProvides functionality for components to render content outside of their DOM hierarchy\\n","sourceCode":"import { Injectable, ElementRef, signal, computed } from \'@angular/core\';\\n\\n/**\\n * Service for managing portal container references\\n * Provides functionality for components to render content outside of their DOM hierarchy\\n */\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class PortalService {\\n  // Signal to store the portal container reference\\n  private readonly portalContainerRef = signal<ElementRef<HTMLElement> | null>(null);\\n\\n  // Public readonly signal for accessing the portal container\\n  public readonly portalContainer = this.portalContainerRef.asReadonly();\\n  \\n  // Computed signal to check if portal container is available\\n  public readonly hasPortalContainer = computed(() => !!this.portalContainer());\\n  \\n  constructor() {\\n    console.log(\'PortalService initialized\');\\n  }\\n  \\n  /**\\n   * Set the portal container reference\\n   * This is typically called by the TGUIRootComponent\\n   */\\n  public setPortalContainer(elementRef: ElementRef<HTMLElement>): void {\\n    if (!elementRef || !elementRef.nativeElement) {\\n      console.error(\'Invalid portal container provided to PortalService\');\\n      return;\\n    }\\n    \\n    console.log(\'Setting portal container:\', elementRef.nativeElement);\\n    this.portalContainerRef.set(elementRef);\\n  }\\n  \\n  /**\\n   * Clear the portal container reference\\n   * This should be called when the container is destroyed\\n   */\\n  public clearPortalContainer(): void {\\n    console.log(\'Clearing portal container reference\');\\n    this.portalContainerRef.set(null);\\n  }\\n  \\n  /**\\n   * Get the current portal container element\\n   * Returns the native DOM element or null if not set\\n   */\\n  public getPortalContainerElement(): HTMLElement | null {\\n    const container = this.portalContainer()?.nativeElement || null;\\n    if (!container) {\\n      console.warn(\'Portal container not available - make sure tgui-root component is properly set up\');\\n    }\\n    return container;\\n  }\\n  \\n  /**\\n   * Check if portal container is ready for use\\n   */\\n  public isPortalReady(): boolean {\\n    const isReady = !!this.getPortalContainerElement();\\n    console.log(\'Portal ready status:\', isReady);\\n    return isReady;\\n  }\\n} ","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":18},"extends":[],"type":"injectable"},{"name":"RippleService","id":"injectable-RippleService-ea82b87cce70315539cba6b067c33d0af218458d6eb84c1929c65b70bf01845d956260864455cfed3965fa2e1a6658b772589867111a6bc5730dea721e9c3224","file":"projects/tgui/src/lib/services/ripple.service.ts","properties":[{"name":"pointerDelayTimers","defaultValue":"new Map<number, ReturnType<typeof setTimeout>>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Map to track pointer delay timers by pointerId</p>\\n","line":20,"rawdescription":"\\n\\nMap to track pointer delay timers by pointerId\\n","modifierKind":[123]},{"name":"RIPPLE_DELAY","defaultValue":"70","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":14,"modifierKind":[123]},{"name":"WAVE_LIVE","defaultValue":"225","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[123]}],"methods":[{"name":"addWave","args":[{"name":"x","type":"number","deprecated":false,"deprecationMessage":""},{"name":"y","type":"number","deprecated":false,"deprecationMessage":""},{"name":"pointerId","type":"number","deprecated":false,"deprecationMessage":""},{"name":"currentWaves","type":"RippleWave[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RippleWave[]","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd a new ripple wave effect at the specified coordinates\\n","description":"<p>Add a new ripple wave effect at the specified coordinates</p>\\n","jsdoctags":[{"name":"x","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"y","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"pointerId","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"currentWaves","type":"RippleWave[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handlePointerCancel","args":[{"name":"pointerId","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":75,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle pointer cancel/up event\\n","description":"<p>Handle pointer cancel/up event</p>\\n","jsdoctags":[{"name":"pointerId","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handlePointerDown","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""},{"name":"wavesSignal","type":"ReturnType<<RippleWave[]>>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle pointer down event\\n","description":"<p>Handle pointer down event</p>\\n","jsdoctags":[{"name":{"pos":1082,"end":1087,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"PointerEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":1076,"end":1081,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Pointer event</p>\\n"},{"name":{"pos":1114,"end":1125,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"wavesSignal"},"type":"ReturnType<<RippleWave[]>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":1108,"end":1113,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Signal для управления волнами</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable, signal } from \'@angular/core\';\\n\\nexport interface RippleWave {\\n  x: number;\\n  y: number;\\n  date: number;\\n  pointerId: number;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class RippleService {\\n  private RIPPLE_DELAY = 70;\\n  private WAVE_LIVE = 225;\\n\\n  /**\\n   * Map to track pointer delay timers by pointerId\\n   */\\n  private pointerDelayTimers = new Map<number, ReturnType<typeof setTimeout>>();\\n  \\n  /**\\n   * Add a new ripple wave effect at the specified coordinates\\n   */\\n  addWave(x: number, y: number, pointerId: number, currentWaves: RippleWave[]): RippleWave[] {\\n    const dateNow = Date.now();\\n    // Filter out expired waves\\n    const filteredWaves = currentWaves.filter((wave) => wave.date + this.WAVE_LIVE > dateNow);\\n\\n    // Add the new wave\\n    const newWaves = [\\n      ...filteredWaves,\\n      {\\n        x,\\n        y,\\n        date: dateNow,\\n        pointerId,\\n      }\\n    ];\\n\\n    // Clean up the timer for this pointerId\\n    this.pointerDelayTimers.delete(pointerId);\\n    \\n    return newWaves;\\n  }\\n\\n  /**\\n   * Handle pointer down event\\n   * @param event Pointer event\\n   * @param wavesSignal Signal для управления волнами\\n   */\\n  handlePointerDown(event: PointerEvent, wavesSignal: ReturnType<typeof signal<RippleWave[]>>): void {\\n    const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\\n    const x = event.clientX - rect.left;\\n    const y = event.clientY - rect.top;\\n\\n    // Set a timeout to create the ripple effect after a short delay\\n    this.pointerDelayTimers.set(\\n      event.pointerId,\\n      setTimeout(() => {\\n        const newWaves = this.addWave(x, y, event.pointerId, wavesSignal());\\n        wavesSignal.set(newWaves);\\n        \\n        // Clear the waves after they\'ve completed their animation\\n        setTimeout(() => {\\n          wavesSignal.set([]);\\n        }, this.WAVE_LIVE);\\n      }, this.RIPPLE_DELAY)\\n    );\\n  }\\n\\n  /**\\n   * Handle pointer cancel/up event\\n   */\\n  handlePointerCancel(pointerId: number): void {\\n    const timer = this.pointerDelayTimers.get(pointerId);\\n    if (timer) {\\n      clearTimeout(timer);\\n      this.pointerDelayTimers.delete(pointerId);\\n    }\\n  }\\n} ","extends":[],"type":"injectable"},{"name":"SnackbarService","id":"injectable-SnackbarService-fdb7f25441ea7cdb72bf47b0613ecd3f11e429fb038dc1dca25ccf11cd6a27c3b1bbc998ebae21f8aa6b979580bc593df2c2a7d8c5c1beeec8d07d23b5d0a30f","file":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts","properties":[{"name":"activeSnackbars","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"any[]","indexKey":"","optional":false,"description":"","line":18,"modifierKind":[123]},{"name":"appRef","defaultValue":"inject(ApplicationRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":16,"modifierKind":[123]},{"name":"injector","defaultValue":"inject(EnvironmentInjector)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":17,"modifierKind":[123]}],"methods":[{"name":"close","args":[{"name":"snackbarRef","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"snackbarRef","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"closeAll","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":50,"deprecated":false,"deprecationMessage":""},{"name":"show","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":""},{"name":"options","type":"SnackbarOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}"}],"optional":false,"returnType":"void","typeParameters":[],"line":20,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"options","type":"SnackbarOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable, inject, TemplateRef, createComponent, ApplicationRef, EnvironmentInjector } from \'@angular/core\';\\nimport { SnackbarComponent } from \'./snackbar.component\';\\n\\nexport interface SnackbarOptions {\\n  beforeTemplate?: TemplateRef<any>;\\n  afterTemplate?: TemplateRef<any>;\\n  description?: string;\\n  linkTemplate?: TemplateRef<any>;\\n  duration?: number;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class SnackbarService {\\n  private appRef = inject(ApplicationRef);\\n  private injector = inject(EnvironmentInjector);\\n  private activeSnackbars: any[] = [];\\n  \\n  show(message: string, options: SnackbarOptions = {}): void {\\n    // Создаем компонент программно\\n    const snackbarRef = createComponent(SnackbarComponent, {\\n      environmentInjector: this.injector,\\n      projectableNodes: [[document.createTextNode(message)]]\\n    });\\n    \\n    // Настраиваем свойства\\n    const instance = snackbarRef.instance;\\n    instance.beforeTemplate = options.beforeTemplate;\\n    instance.afterTemplate = options.afterTemplate;\\n    instance.description = options.description;\\n    instance.linkTemplate = options.linkTemplate;\\n    instance.duration = options.duration ?? 4000;\\n    instance.onClose = () => this.close(snackbarRef);\\n    \\n    // Добавляем в DOM и в отслеживаемые\\n    this.appRef.attachView(snackbarRef.hostView);\\n    this.activeSnackbars.push(snackbarRef);\\n  }\\n  \\n  private close(snackbarRef: any): void {\\n    const index = this.activeSnackbars.indexOf(snackbarRef);\\n    if (index !== -1) {\\n      this.activeSnackbars.splice(index, 1);\\n      this.appRef.detachView(snackbarRef.hostView);\\n      snackbarRef.destroy();\\n    }\\n  }\\n  \\n  closeAll(): void {\\n    for (const snackbar of this.activeSnackbars) {\\n      snackbar.instance.close();\\n    }\\n  }\\n} ","extends":[],"type":"injectable"},{"name":"SystemThemeService","id":"injectable-SystemThemeService-3c7cb33b939c8744b7383bcb972356a6fcbc48190d1c57ceabb74448fe741d7c1b9060834fd48cba506b6419afab7e942baf1d67781f5d6a042a3bc1b50fbcfc","file":"projects/tgui/src/lib/utils/theme-helper.ts","properties":[{"name":"cleanup","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":" | null","indexKey":"","optional":false,"description":"","line":65,"modifierKind":[123]},{"name":"theme","defaultValue":"this.themeSignal.asReadonly()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":63,"modifierKind":[125,148]},{"name":"themeSignal","defaultValue":"signal<AppearanceType>(this.getInitialTheme())","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60,"modifierKind":[123,148]}],"methods":[{"name":"disableSystemTheme","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":""},{"name":"enableSystemTheme","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":""},{"name":"getInitialTheme","args":[],"optional":false,"returnType":"AppearanceType","typeParameters":[],"line":93,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":""},{"name":"setTheme","args":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":72,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setupThemeDetection","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":100,"deprecated":false,"deprecationMessage":"","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","description":"<p>Angular service для использования системных тем\\nИспользует сигналы для отслеживания изменений темы</p>\\n","rawdescription":"\\n\\nAngular service для использования системных тем\\nИспользует сигналы для отслеживания изменений темы\\n","sourceCode":"import { Injectable, OnDestroy, inject, signal } from \'@angular/core\';\\nimport { takeUntilDestroyed } from \'@angular/core/rxjs-interop\';\\nimport { AppearanceType } from \'@services/theme.service\';\\n\\n/**\\n * Apply the specified theme by adding the appropriate CSS class to the document\'s root element\\n * @param theme The theme to apply (\'light\' or \'dark\')\\n */\\nexport function applyTheme(theme: AppearanceType): void {\\n  // Remove existing theme classes\\n  document.documentElement.classList.remove(\'tgui-theme-light\', \'tgui-theme-dark\');\\n  \\n  // Add the appropriate theme class\\n  document.documentElement.classList.add(`tgui-theme-${theme}`);\\n}\\n\\n/**\\n * Setup system theme detection using prefers-color-scheme\\n * @param callback Optional callback function that will be called when the theme changes\\n * @returns A function to cleanup the listeners\\n */\\nexport function setupSystemThemeDetection(callback?: (theme: AppearanceType) => void): () => void {\\n  if (typeof window === \'undefined\') return () => {};\\n  \\n  const isDarkMode = window.matchMedia(\'(prefers-color-scheme: dark)\');\\n  \\n  // Apply initial theme based on system preference\\n  const initialTheme: AppearanceType = isDarkMode.matches ? \'dark\' : \'light\';\\n  applyTheme(initialTheme);\\n  callback?.(initialTheme);\\n  \\n  // Add listener for theme changes\\n  const handleThemeChange = (event: MediaQueryListEvent) => {\\n    const newTheme: AppearanceType = event.matches ? \'dark\' : \'light\';\\n    applyTheme(newTheme);\\n    callback?.(newTheme);\\n  };\\n  \\n  isDarkMode.addEventListener(\'change\', handleThemeChange);\\n  \\n  // Return cleanup function\\n  return () => {\\n    isDarkMode.removeEventListener(\'change\', handleThemeChange);\\n  };\\n}\\n\\n/**\\n * Angular service для использования системных тем\\n * Использует сигналы для отслеживания изменений темы\\n */\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class SystemThemeService implements OnDestroy {\\n  // Signal для темы с начальным значением\\n  private readonly themeSignal = signal<AppearanceType>(this.getInitialTheme());\\n  \\n  // Публичный readonly signal для доступа к теме\\n  public readonly theme = this.themeSignal.asReadonly();\\n  \\n  private cleanup: (() => void) | null = null;\\n  \\n  constructor() {\\n    this.setupThemeDetection();\\n  }\\n  \\n  // Устанавливаем тему вручную\\n  setTheme(theme: AppearanceType): void {\\n    this.themeSignal.set(theme);\\n    applyTheme(theme);\\n  }\\n  \\n  // Включаем отслеживание системной темы\\n  enableSystemTheme(): void {\\n    this.cleanup && this.cleanup();\\n    this.setupThemeDetection();\\n  }\\n  \\n  // Отключаем отслеживание системной темы\\n  disableSystemTheme(): void {\\n    this.cleanup && this.cleanup();\\n    this.cleanup = null;\\n  }\\n  \\n  ngOnDestroy(): void {\\n    this.cleanup && this.cleanup();\\n  }\\n  \\n  private getInitialTheme(): AppearanceType {\\n    if (typeof window === \'undefined\') return \'light\';\\n    \\n    const isDarkMode = window.matchMedia(\'(prefers-color-scheme: dark)\');\\n    return isDarkMode.matches ? \'dark\' : \'light\';\\n  }\\n  \\n  private setupThemeDetection(): void {\\n    if (typeof window === \'undefined\') return;\\n    \\n    const mediaQuery = window.matchMedia(\'(prefers-color-scheme: dark)\');\\n    \\n    // Устанавливаем начальную тему\\n    const initialTheme: AppearanceType = mediaQuery.matches ? \'dark\' : \'light\';\\n    this.themeSignal.set(initialTheme);\\n    applyTheme(initialTheme);\\n    \\n    // Создаем обработчик события изменения медиа-запроса\\n    const handleMediaQueryChange = (event: MediaQueryListEvent) => {\\n      const newTheme: AppearanceType = event.matches ? \'dark\' : \'light\';\\n      this.themeSignal.set(newTheme);\\n      applyTheme(newTheme);\\n    };\\n    \\n    // Добавляем слушатель события\\n    mediaQuery.addEventListener(\'change\', handleMediaQueryChange);\\n    \\n    // Функция очистки\\n    this.cleanup = () => {\\n      mediaQuery.removeEventListener(\'change\', handleMediaQueryChange);\\n    };\\n  }\\n} ","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":65},"extends":[],"type":"injectable"},{"name":"TelegramService","id":"injectable-TelegramService-9ec5105ad6c021906871938b679132a75ca654ed2f7d915ba50d195671a9354e9c5f2d251e741c40cc867ed3f0a37415a507a3ecba0ebe3089c5a9ffb188754b","file":"projects/tgui/src/lib/services/telegram.service.ts","properties":[],"methods":[{"name":"getTelegramData","args":[],"optional":false,"returnType":"WebApp | undefined","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","modifierKind":[125]},{"name":"hexToRGB","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":"","modifierKind":[125],"jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\n\\n// Define Telegram WebApp interface\\ninterface ThemeParams {\\n  bg_color?: string;\\n  text_color?: string;\\n  hint_color?: string;\\n  link_color?: string;\\n  button_color?: string;\\n  button_text_color?: string;\\n  secondary_bg_color?: string;\\n  header_bg_color?: string;\\n  accent_text_color?: string;\\n  section_bg_color?: string;\\n  section_header_text_color?: string;\\n  subtitle_text_color?: string;\\n  destructive_text_color?: string;\\n}\\n\\ninterface WebApp {\\n  colorScheme: \'light\' | \'dark\';\\n  themeParams: ThemeParams;\\n  onEvent(eventName: string, eventHandler: () => void): void;\\n  offEvent(eventName: string, eventHandler: () => void): void;\\n}\\n\\ndeclare global {\\n  interface Window {\\n    Telegram?: {\\n      WebApp?: WebApp;\\n    };\\n  }\\n}\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TelegramService {\\n  // Check if DOM is available\\n  private get canUseDOM(): boolean {\\n    return !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\\n  }\\n\\n  // Get Telegram WebApp data\\n  public getTelegramData(): WebApp | undefined {\\n    if (!this.canUseDOM) {\\n      return undefined;\\n    }\\n\\n    return window.Telegram?.WebApp;\\n  }\\n\\n  // Helper function to convert hex color to RGB\\n  public hexToRGB(hex: string): [number, number, number] {\\n    // Remove # if present\\n    hex = hex.replace(\'#\', \'\');\\n    \\n    // Parse hex values\\n    const r = parseInt(hex.substring(0, 2), 16);\\n    const g = parseInt(hex.substring(2, 4), 16);\\n    const b = parseInt(hex.substring(4, 6), 16);\\n    \\n    return [r, g, b];\\n  }\\n} ","accessors":{"canUseDOM":{"name":"canUseDOM","getSignature":{"name":"canUseDOM","type":"boolean","returnType":"boolean","line":40}}},"extends":[],"type":"injectable"},{"name":"TguiService","id":"injectable-TguiService-96737dce57d4f75d15958abccfda47b625b0512a08b78bb321b63c6d59996c0beb002a99561d750a6dda7397e1a1077eccf2f839ec5d14c2eccbf43cf0127a3b","file":"projects/tgui/src/lib/tgui.service.ts","properties":[],"methods":[],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TguiService {\\n\\n  constructor() { }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":6},"extends":[],"type":"injectable"},{"name":"ThemeService","id":"injectable-ThemeService-9f8dfee41535c78f8fcad1a4d11a01c2ec260291658ca487dd89f491905ec9020ab7f09604a0d23a10e20e63502c919dfefadcac13b10488935d063c0b860a37","file":"projects/tgui/src/lib/services/theme.service.ts","properties":[{"name":"appearance","defaultValue":"signal<AppearanceType>(\'light\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":12,"modifierKind":[125]},{"name":"currentTheme","defaultValue":"\'light\'","deprecated":false,"deprecationMessage":"","type":"AppearanceType","indexKey":"","optional":false,"description":"","line":17,"modifierKind":[123]},{"name":"document","defaultValue":"inject(DOCUMENT)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":21,"modifierKind":[123]},{"name":"handleThemeChange","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":" | null","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[123]},{"name":"mediaQueryList","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"MediaQueryList | null","indexKey":"","optional":false,"description":"","line":14,"modifierKind":[123]},{"name":"renderer","deprecated":false,"deprecationMessage":"","type":"Renderer2","indexKey":"","optional":false,"description":"","line":18,"modifierKind":[123]},{"name":"telegramService","defaultValue":"inject(TelegramService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":20,"modifierKind":[123]},{"name":"themeChangeListener","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":" | null","indexKey":"","optional":false,"description":"","line":13,"modifierKind":[123]},{"name":"useSystemTheme","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":16,"modifierKind":[123]}],"methods":[{"name":"applyThemeToDOM","args":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":178,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nApply theme class to DOM\\n","description":"<p>Apply theme class to DOM</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"cleanupListeners","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":202,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClean up event listeners\\n","description":"<p>Clean up event listeners</p>\\n","modifierKind":[123]},{"name":"detectSystemTheme","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetect and apply system theme\\n","description":"<p>Detect and apply system theme</p>\\n","modifierKind":[125]},{"name":"initializeTheme","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":118,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInitialize the theme detection\\n","description":"<p>Initialize the theme detection</p>\\n","modifierKind":[123]},{"name":"loadGlobalStyles","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":90,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLoad global CSS variables to make them available for all components\\n","description":"<p>Load global CSS variables to make them available for all components</p>\\n","modifierKind":[125]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":29,"deprecated":false,"deprecationMessage":""},{"name":"setTheme","args":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":""},{"name":"followSystem","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChange the theme manually\\n","description":"<p>Change the theme manually</p>\\n","modifierKind":[125],"jsdoctags":[{"name":{"pos":1165,"end":1170,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"theme"},"type":"AppearanceType","deprecated":false,"deprecationMessage":"","tagName":{"pos":1159,"end":1164,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The theme to set</p>\\n"},{"name":{"pos":1200,"end":1212,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"followSystem"},"type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"pos":1194,"end":1199,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>If true, will follow system theme changes after setting. Default false.</p>\\n"}]},{"name":"setupBrowserThemeDetection","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":147,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSetup browser theme detection using prefers-color-scheme\\n","description":"<p>Setup browser theme detection using prefers-color-scheme</p>\\n","modifierKind":[123]},{"name":"setupTheme","args":[{"name":"appearance","type":"AppearanceType","deprecated":false,"deprecationMessage":"","optional":true},{"name":"followSystem","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSetup theme based on inputs and system preferences\\n","description":"<p>Setup theme based on inputs and system preferences</p>\\n","modifierKind":[125],"jsdoctags":[{"name":{"pos":1759,"end":1769,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"appearance"},"type":"AppearanceType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1753,"end":1758,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Appearance to use</p>\\n"},{"name":{"pos":1800,"end":1812,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"followSystem"},"type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"pos":1794,"end":1799,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Whether to follow system theme</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { DOCUMENT } from \'@angular/common\';\\nimport { Inject, Injectable, OnDestroy, signal, inject, Renderer2, RendererFactory2 } from \'@angular/core\';\\nimport { TelegramService } from \'./telegram.service\';\\n\\nexport type AppearanceType = \'light\' | \'dark\';\\n\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class ThemeService implements OnDestroy {\\n  // Signal for appearance that components can subscribe to\\n  public appearance = signal<AppearanceType>(\'light\');\\n  private themeChangeListener: (() => void) | null = null;\\n  private mediaQueryList: MediaQueryList | null = null;\\n  private handleThemeChange: ((event: MediaQueryListEvent) => void) | null = null;\\n  private useSystemTheme = false;\\n  private currentTheme: AppearanceType = \'light\';\\n  private renderer: Renderer2;\\n\\n  private telegramService = inject(TelegramService);\\n  private document = inject(DOCUMENT);\\n\\n  constructor(rendererFactory: RendererFactory2) {\\n    console.log(`themeService: constructor`);\\n    this.renderer = rendererFactory.createRenderer(null, null);\\n    this.initializeTheme();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.cleanupListeners();\\n  }\\n\\n  /**\\n   * Change the theme manually\\n   * @param theme The theme to set\\n   * @param followSystem If true, will follow system theme changes after setting. Default false.\\n   */\\n  public setTheme(theme: AppearanceType, followSystem = false): void {\\n    this.cleanupListeners();\\n    this.appearance.set(theme);\\n    this.applyThemeToDOM(theme);\\n    \\n    // If instructed to follow system theme, restore the detector\\n    if (followSystem) {\\n      this.useSystemTheme = true;\\n      this.setupBrowserThemeDetection();\\n    } else {\\n      this.useSystemTheme = false;\\n    }\\n  }\\n\\n  /**\\n   * Setup theme based on inputs and system preferences\\n   * @param appearance Appearance to use\\n   * @param followSystem Whether to follow system theme\\n   */\\n  public setupTheme(appearance?: AppearanceType, followSystem: boolean = false): void {\\n    console.log(`themeService: setupTheme: appearance=${appearance}, currentTheme=${this.currentTheme}`);\\n    this.cleanupListeners();\\n    if (followSystem) {\\n      // Follow system theme\\n      this.useSystemTheme = true;\\n      this.setupBrowserThemeDetection();\\n    } else if (appearance) {\\n      // Set specific theme\\n      this.setTheme(appearance, false);\\n    } else {\\n      // If nothing specified, try to detect system theme\\n      this.detectSystemTheme();\\n    }\\n  }\\n\\n  /**\\n   * Detect and apply system theme\\n   */\\n  public detectSystemTheme(): void {\\n    if (typeof window === \'undefined\') {\\n      // Use light theme by default\\n      this.setTheme(\'light\', false);\\n      return;\\n    }\\n    \\n    const prefersDarkMode = window.matchMedia(\'(prefers-color-scheme: dark)\').matches;\\n    this.setTheme(prefersDarkMode ? \'dark\' : \'light\', false);\\n  }\\n\\n  /**\\n   * Load global CSS variables to make them available for all components\\n   */\\n  public loadGlobalStyles(): void {\\n    // Check if styles are already loaded\\n    if (this.document.getElementById(\'tgui-variables-css\')) {\\n      return;\\n    }\\n    \\n    const head = this.document.head;\\n    const link = this.document.createElement(\'link\');\\n    \\n    link.id = \'tgui-variables-css\';\\n    link.rel = \'stylesheet\';\\n    link.type = \'text/css\';\\n    \\n    // Add error handling\\n    link.onerror = () => {\\n      console.error(\'Failed to load TGUI variables CSS file. Theme functionality may be limited.\');\\n    };\\n    \\n    // In production builds, this will be replaced with the actual path\\n    // The actual file is bundled with the library during build\\n    link.href = \'assets/tgui/styles/variables.css\';\\n    \\n    head.appendChild(link);\\n  }\\n\\n  /**\\n   * Initialize the theme detection\\n   */\\n  private initializeTheme(): void {\\n    // First check Telegram API\\n    const telegramData = this.telegramService.getTelegramData();\\n    \\n    if (telegramData) {\\n      // Use Telegram theme\\n      this.appearance.set(telegramData.colorScheme);\\n      this.applyThemeToDOM(telegramData.colorScheme);\\n      \\n      // Set up listener for theme changes\\n      this.themeChangeListener = () => {\\n        const newTelegramData = this.telegramService.getTelegramData();\\n        if (newTelegramData) {\\n          this.appearance.set(newTelegramData.colorScheme);\\n          this.applyThemeToDOM(newTelegramData.colorScheme);\\n        }\\n      };\\n      \\n      telegramData.onEvent(\'themeChanged\', this.themeChangeListener);\\n    } else {\\n      // Use browser preference\\n      this.useSystemTheme = true;\\n      this.setupBrowserThemeDetection();\\n    }\\n  }\\n\\n  /**\\n   * Setup browser theme detection using prefers-color-scheme\\n   */\\n  private setupBrowserThemeDetection(): void {\\n    if (typeof window === \'undefined\') return;\\n    \\n    const isDarkMode = window.matchMedia(\'(prefers-color-scheme: dark)\');\\n    this.mediaQueryList = isDarkMode;\\n    \\n    // Apply theme based on system preference only if following system theme\\n    if (this.useSystemTheme) {\\n      const theme: AppearanceType = isDarkMode.matches ? \'dark\' : \'light\';\\n      this.appearance.set(theme);\\n      this.applyThemeToDOM(theme);\\n    }\\n    \\n    // Add listener for theme changes and store reference to the handler\\n    this.handleThemeChange = (event: MediaQueryListEvent) => {\\n      if (this.useSystemTheme) {\\n        const newTheme: AppearanceType = event.matches ? \'dark\' : \'light\';\\n        this.appearance.set(newTheme);\\n        this.applyThemeToDOM(newTheme);\\n      }\\n    };\\n    \\n    isDarkMode.addEventListener(\'change\', this.handleThemeChange);\\n    \\n    // Store reference for cleanup\\n    this.mediaQueryList = isDarkMode;\\n  }\\n\\n  /**\\n   * Apply theme class to DOM\\n   */\\n  private applyThemeToDOM(theme: AppearanceType): void {\\n\\n    if (theme === this.currentTheme) {\\n      if(theme === \'dark\') {\\n        this.renderer.removeClass(this.document.documentElement, `tgui-theme-light`);\\n      } else {\\n        this.renderer.removeClass(this.document.documentElement, `tgui-theme-dark`);\\n      }\\n      return;\\n    };\\n    \\n    // Remove existing theme classes\\n    this.renderer.removeClass(this.document.documentElement, `tgui-theme-${this.currentTheme}`);\\n\\n    // Add the appropriate theme class\\n    this.renderer.addClass(this.document.documentElement, `tgui-theme-${theme}`);\\n    \\n    // Update current theme\\n    this.currentTheme = theme;\\n  }\\n\\n  /**\\n   * Clean up event listeners\\n   */\\n  private cleanupListeners(): void {\\n    // Clean up Telegram listeners\\n    const telegramData = this.telegramService.getTelegramData();\\n    if (telegramData && this.themeChangeListener) {\\n      telegramData.offEvent(\'themeChanged\', this.themeChangeListener);\\n      this.themeChangeListener = null;\\n    }\\n    \\n    // Clean up media query listeners using stored reference\\n    if (this.mediaQueryList && this.handleThemeChange) {\\n      this.mediaQueryList.removeEventListener(\'change\', this.handleThemeChange);\\n      this.mediaQueryList = null;\\n      this.handleThemeChange = null;\\n    }\\n  }\\n} ","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"rendererFactory","type":"RendererFactory2","deprecated":false,"deprecationMessage":""}],"line":21,"jsdoctags":[{"name":"rendererFactory","type":"RendererFactory2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"type":"injectable"},{"name":"TypographyCellService","id":"injectable-TypographyCellService-572d02634ea5d77023661b3a8d999a8d9e46b3641a8d231bac3e41d96eebdb62ddb4933c194ed34bf2124d6a052ad1336680b56ee5ca6cd2459bd8b0f1dc6fa2","file":"projects/tgui/src/lib/components/blocks/cell/services/typography-cell.service.ts","properties":[{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[123]}],"methods":[{"name":"getDescriptionComponent","args":[],"optional":false,"returnType":"Type<any>","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns the appropriate component type for the description based on platform\\niOS: CaptionComponent\\nAndroid/Web: SubheadlineComponent with level 2\\n","description":"<p>Returns the appropriate component type for the description based on platform\\niOS: CaptionComponent\\nAndroid/Web: SubheadlineComponent with level 2</p>\\n"},{"name":"getDescriptionLevel","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns the level to use for description component if it\'s a SubheadlineComponent\\n","description":"<p>Returns the level to use for description component if it&#39;s a SubheadlineComponent</p>\\n"},{"name":"getTitleComponent","args":[],"optional":false,"returnType":"Type<any>","typeParameters":[],"line":22,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns the appropriate component type for the title based on platform\\niOS: TextComponent\\nAndroid/Web: SubheadlineComponent with level 1\\n","description":"<p>Returns the appropriate component type for the title based on platform\\niOS: TextComponent\\nAndroid/Web: SubheadlineComponent with level 1</p>\\n"},{"name":"getTitleLevel","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns the level to use for title component if it\'s a SubheadlineComponent\\n","description":"<p>Returns the level to use for title component if it&#39;s a SubheadlineComponent</p>\\n"}],"deprecated":false,"deprecationMessage":"","description":"<p>Service that provides platform-specific typography components for Cell\\nSimilar to the React useTypographyCellComponents hook</p>\\n","rawdescription":"\\n\\nService that provides platform-specific typography components for Cell\\nSimilar to the React useTypographyCellComponents hook\\n","sourceCode":"import { Injectable, inject, Type } from \'@angular/core\';\\nimport { PlatformService } from \'../../../../services/platform.service\';\\nimport { TextComponent } from \'../../../typography/text/text.component\';\\nimport { SubheadlineComponent } from \'../../../typography/subheadline/subheadline.component\';\\nimport { CaptionComponent } from \'../../../typography/caption/caption.component\';\\n\\n/**\\n * Service that provides platform-specific typography components for Cell\\n * Similar to the React useTypographyCellComponents hook\\n */\\n@Injectable({\\n  providedIn: \'root\'\\n})\\nexport class TypographyCellService {\\n  private platformService = inject(PlatformService);\\n\\n  /**\\n   * Returns the appropriate component type for the title based on platform\\n   * iOS: TextComponent\\n   * Android/Web: SubheadlineComponent with level 1\\n   */\\n  getTitleComponent(): Type<any> {\\n    return this.platformService.isIOS() ? TextComponent : SubheadlineComponent;\\n  }\\n\\n  /**\\n   * Returns the appropriate component type for the description based on platform\\n   * iOS: CaptionComponent\\n   * Android/Web: SubheadlineComponent with level 2\\n   */\\n  getDescriptionComponent(): Type<any> {\\n    return this.platformService.isIOS() ? CaptionComponent : SubheadlineComponent;\\n  }\\n\\n  /**\\n   * Returns the level to use for title component if it\'s a SubheadlineComponent\\n   */\\n  getTitleLevel(): string {\\n    return this.platformService.isIOS() ? \'\' : \'1\';\\n  }\\n\\n  /**\\n   * Returns the level to use for description component if it\'s a SubheadlineComponent\\n   */\\n  getDescriptionLevel(): string {\\n    return \'2\';\\n  }\\n} ","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[],"directives":[{"name":"ContentSlotDirective","id":"directive-ContentSlotDirective-7a5b3d01099fded7e13665ea2654484673772c2d229889762a3803d65005b1399aaa3b501abfea87f190faaa67e6be106659854d537bdc1f47fc133904223ae7","file":"projects/tgui/src/lib/directives/content-slot.directive.ts","type":"directive","description":"<p>A directive for selecting content slots in components.\\nThis allows components to project content into specific areas using the content-slot attribute.</p>\\n<b>Example :</b><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">```html\\n&lt;div content-slot=&quot;header&quot;&gt;Header Content&lt;/div&gt;</code></pre></div><b>Example :</b><div><pre class=\\"line-numbers\\"><code class=\\"language-none\\"></code></pre></div>","rawdescription":"\\n\\nA directive for selecting content slots in components.\\nThis allows components to project content into specific areas using the content-slot attribute.\\n\\n```html\\n```html\\n<div content-slot=\\"header\\">Header Content</div>\\n```\\n```","sourceCode":"import { Directive, Input } from \'@angular/core\';\\n\\n/**\\n * A directive for selecting content slots in components.\\n * This allows components to project content into specific areas using the content-slot attribute.\\n * \\n * @example\\n * ```html\\n * <div content-slot=\\"header\\">Header Content</div>\\n * ```\\n */\\n@Directive({\\n  selector: \'[content-slot]\',\\n  standalone: true\\n})\\nexport class ContentSlotDirective {\\n  @Input(\'content-slot\') slotName!: string;\\n} ","selector":"[content-slot]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"content-slot","deprecated":false,"deprecationMessage":"","line":17,"type":"string","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[],"extends":[]},{"name":"HorizontalScrollDirective","id":"directive-HorizontalScrollDirective-fbd0d49811b316576ef143797af666f9de8cc0b522023c6c73671e81a1e2a4a33b32335cc18cfd4e16af7a01369cfd8160f3d7e799646c63a776b65cbb4f4343","file":"projects/tgui/src/lib/directives/horizontal-scroll.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import { Directive, HostBinding } from \'@angular/core\';\\n\\n@Directive({\\n  selector: \'[tguiHorizontalScroll]\',\\n  standalone: true\\n})\\nexport class HorizontalScrollDirective {\\n  @HostBinding(\'style.display\') display = \'flex\';\\n  @HostBinding(\'style.overflow-x\') overflowX = \'scroll\';\\n  @HostBinding(\'style.-webkit-overflow-scrolling\') webkitOverflowScrolling = \'touch\';\\n  @HostBinding(\'style.scrollbar-width\') scrollbarWidth = \'none\';        // Firefox\\n  @HostBinding(\'style.-ms-overflow-style\') msOverflowStyle = \'none\';    // IE/Edge\\n  @HostBinding(\'class.tgui-hide-scrollbar\') hideScrollbar = true;       // Chrome/Safari\\n}","selector":"[tguiHorizontalScroll]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.tgui-hide-scrollbar","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":13,"type":"boolean","decorators":[]},{"name":"style.-ms-overflow-style","defaultValue":"\'none\'","deprecated":false,"deprecationMessage":"","line":12,"type":"string","decorators":[]},{"name":"style.-webkit-overflow-scrolling","defaultValue":"\'touch\'","deprecated":false,"deprecationMessage":"","line":10,"type":"string","decorators":[]},{"name":"style.display","defaultValue":"\'flex\'","deprecated":false,"deprecationMessage":"","line":8,"type":"string","decorators":[]},{"name":"style.overflow-x","defaultValue":"\'scroll\'","deprecated":false,"deprecationMessage":"","line":9,"type":"string","decorators":[]},{"name":"style.scrollbar-width","defaultValue":"\'none\'","deprecated":false,"deprecationMessage":"","line":11,"type":"string","decorators":[]}],"hostListeners":[],"propertiesClass":[{"name":"display","defaultValue":"\'flex\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":8,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.display\'"}],"modifierKind":[170]},{"name":"hideScrollbar","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":13,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'class.tgui-hide-scrollbar\'"}],"modifierKind":[170]},{"name":"msOverflowStyle","defaultValue":"\'none\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":12,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.-ms-overflow-style\'"}],"modifierKind":[170]},{"name":"overflowX","defaultValue":"\'scroll\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":9,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.overflow-x\'"}],"modifierKind":[170]},{"name":"scrollbarWidth","defaultValue":"\'none\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":11,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.scrollbar-width\'"}],"modifierKind":[170]},{"name":"webkitOverflowScrolling","defaultValue":"\'touch\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":10,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.-webkit-overflow-scrolling\'"}],"modifierKind":[170]}],"methodsClass":[],"extends":[]},{"name":"PortalOutletDirective","id":"directive-PortalOutletDirective-1b7d5bb8ee72d63c9225c3384efd0da72f8571ae6b04a79fbcb7fd1043fab76a26639211726e3342dd2b9b82fa2be5978a6c4950b33ea5f02f2de02448efe692","file":"projects/tgui/src/lib/directives/portal-outlet.directive.ts","type":"directive","description":"<p>Directive that renders content into a portal container\\nUse it to project content outside of its normal DOM hierarchy</p>\\n","rawdescription":"\\n\\nDirective that renders content into a portal container\\nUse it to project content outside of its normal DOM hierarchy\\n","sourceCode":"import { Directive, Input, TemplateRef, ViewContainerRef, OnInit, OnDestroy, ElementRef, EmbeddedViewRef, inject, effect } from \'@angular/core\';\\nimport { Subject, takeUntil } from \'rxjs\';\\nimport { PortalService } from \'../services\';\\n\\n/**\\n * Directive that renders content into a portal container\\n * Use it to project content outside of its normal DOM hierarchy\\n */\\n@Directive({\\n  selector: \'[tguiPortalOutlet]\',\\n  standalone: true\\n})\\nexport class PortalOutletDirective implements OnInit, OnDestroy {\\n  @Input() tguiPortalOutlet: TemplateRef<any> | null = null;\\n  \\n  private destroy$ = new Subject<void>();\\n  \\n  private viewContainerRef = inject(ViewContainerRef);\\n  private portalService = inject(PortalService);\\n  \\n  constructor() {\\n    effect(() => {\\n      const container = this.portalService.portalContainer();\\n      \\n      // Skip rendering if we\'re not initialized yet\\n      if (!this.tguiPortalOutlet) return;\\n      \\n      // Clear existing content\\n      this.viewContainerRef.clear();\\n      \\n      // Only render if we have both a container and a template\\n      if (container && this.tguiPortalOutlet) {\\n        const embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.tguiPortalOutlet) as EmbeddedViewRef<any>;\\n        \\n        // Move the generated content to the portal container\\n        const viewRootNodes = embeddedViewRef.rootNodes || [];\\n        viewRootNodes.forEach((node: Node) => {\\n          container.nativeElement.appendChild(node);\\n        });\\n      }\\n    });\\n  }\\n  \\n  ngOnInit(): void {\\n    // Initialization is now handled in the effect\\n  }\\n  \\n  ngOnDestroy(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n  }\\n} ","selector":"[tguiPortalOutlet]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"tguiPortalOutlet","defaultValue":"null","deprecated":false,"deprecationMessage":"","line":14,"type":"TemplateRef<any> | null","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"destroy$","defaultValue":"new Subject<void>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":16,"modifierKind":[123]},{"name":"portalService","defaultValue":"inject(PortalService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":19,"modifierKind":[123]},{"name":"viewContainerRef","defaultValue":"inject(ViewContainerRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":18,"modifierKind":[123]}],"methodsClass":[{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":48,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":""}],"extends":[],"implements":["OnInit","OnDestroy"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":19}},{"name":"TguiSvgPropsDirective","id":"directive-TguiSvgPropsDirective-d51698ce27441b069085f493dd28b7d3176b72d310a9e261ffb94594569d04ef30a6a423d9a2063d92f3cfbed8122af21d102f8d9a4bc3706eca201191b57c8b","file":"projects/tgui/src/lib/icons/directives/svg-props.directive.ts","type":"directive","description":"<p>Директива для автоматической передачи свойств иконки в SVG элемент\\nПозволяет использовать подход, аналогичный {...props} в React</p>\\n","rawdescription":"\\n\\nДиректива для автоматической передачи свойств иконки в SVG элемент\\nПозволяет использовать подход, аналогичный {...props} в React\\n","sourceCode":"import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n/**\\n * Директива для автоматической передачи свойств иконки в SVG элемент\\n * Позволяет использовать подход, аналогичный {...props} в React\\n */\\n@Directive({\\n  selector: \'[tguiSvgProps]\',\\n  standalone: true\\n})\\nexport class TguiSvgPropsDirective implements OnChanges {\\n  @Input(\'tguiSvgProps\') props!: TguiIconProps;\\n\\n  constructor(private el: ElementRef<SVGElement>) {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes[\'props\'] && this.props) {\\n      this.applyProps();\\n    }\\n  }\\n\\n  private applyProps(): void {\\n    const el = this.el.nativeElement;\\n    const props = this.props;\\n\\n    // Применяем базовые атрибуты\\n    if (props.class) el.setAttribute(\'class\', props.class);\\n    if (props.id) el.setAttribute(\'id\', props.id);\\n    if (props.fill) el.setAttribute(\'fill\', props.fill);\\n    if (props.stroke) el.setAttribute(\'stroke\', props.stroke);\\n    if (props.width) el.setAttribute(\'width\', props.width.toString());\\n    if (props.height) el.setAttribute(\'height\', props.height.toString());\\n    if (props.role) el.setAttribute(\'role\', props.role);\\n    if (props.tabIndex !== undefined) el.setAttribute(\'tabindex\', props.tabIndex.toString());\\n    if (props.autoFocus) el.setAttribute(\'autofocus\', \'true\');\\n    if (props.ariaLabel) el.setAttribute(\'aria-label\', props.ariaLabel);\\n    if (props.title) el.setAttribute(\'title\', props.title);\\n\\n    // Применяем стили\\n    if (props.style) {\\n      const styleStr = Object.entries(props.style)\\n        .map(([key, value]) => `${this.kebabCase(key)}: ${value}`)\\n        .join(\'; \');\\n      el.setAttribute(\'style\', styleStr);\\n    }\\n\\n    // Добавляем обработчики событий\\n    this.setupEventHandlers(el, props);\\n  }\\n\\n  private setupEventHandlers(el: SVGElement, props: TguiIconProps): void {\\n    // Очищаем старые обработчики\\n    this.removeEventHandlers(el);\\n\\n    // Добавляем новые\\n    if (props.onClick) {\\n      el.addEventListener(\'click\', (e) => props.onClick?.emit(e as MouseEvent));\\n    }\\n    if (props.onFocus) {\\n      el.addEventListener(\'focus\', (e) => props.onFocus?.emit(e as FocusEvent));\\n    }\\n    if (props.onBlur) {\\n      el.addEventListener(\'blur\', (e) => props.onBlur?.emit(e as FocusEvent));\\n    }\\n    if (props.onMouseEnter) {\\n      el.addEventListener(\'mouseenter\', (e) => props.onMouseEnter?.emit(e as MouseEvent));\\n    }\\n    if (props.onMouseLeave) {\\n      el.addEventListener(\'mouseleave\', (e) => props.onMouseLeave?.emit(e as MouseEvent));\\n    }\\n    if (props.onKeyDown) {\\n      el.addEventListener(\'keydown\', (e) => props.onKeyDown?.emit(e as KeyboardEvent));\\n    }\\n    if (props.onPointerDown) {\\n      el.addEventListener(\'pointerdown\', (e) => props.onPointerDown?.emit(e as PointerEvent));\\n    }\\n    if (props.onPointerUp) {\\n      el.addEventListener(\'pointerup\', (e) => props.onPointerUp?.emit(e as PointerEvent));\\n    }\\n  }\\n\\n  private removeEventHandlers(el: SVGElement): void {\\n    // Функция-заглушка для удаления обработчиков\\n    // В реальном коде здесь должны быть removeEventListener для каждого типа события\\n  }\\n\\n  private kebabCase(str: string): string {\\n    return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \'$1-$2\').toLowerCase();\\n  }\\n} ","selector":"[tguiSvgProps]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"tguiSvgProps","deprecated":false,"deprecationMessage":"","line":13,"type":"TguiIconProps","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"applyProps","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":23,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"kebabCase","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":88,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":17,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"removeEventHandlers","args":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setupEventHandlers","args":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":""},{"name":"props","type":"TguiIconProps","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"props","type":"TguiIconProps","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[],"implements":["OnChanges"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"el","type":"ElementRef<SVGElement>","deprecated":false,"deprecationMessage":""}],"line":13,"jsdoctags":[{"name":"el","type":"ElementRef<SVGElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"TGUIThemeDirective","id":"directive-TGUIThemeDirective-2f3a8db879075f534b302cdb0231acb783f926d5e1983fbbab2dc9faee182cd3e015120f283935497354e9296057d74394cdd220b322ddde45d36530cc9648d2","file":"projects/tgui/src/lib/directives/tgui-theme.directive.ts","type":"directive","description":"<p>Directive that automatically loads the TGUI styles\\nThis should be applied once on a root element (typically body or app-root)</p>\\n","rawdescription":"\\n\\nDirective that automatically loads the TGUI styles\\nThis should be applied once on a root element (typically body or app-root)\\n","sourceCode":"import { Directive, ElementRef, OnInit, Renderer2, inject } from \'@angular/core\';\\n\\n/**\\n * Directive that automatically loads the TGUI styles\\n * This should be applied once on a root element (typically body or app-root)\\n */\\n@Directive({\\n  selector: \'[tguiTheme]\',\\n  standalone: true,\\n})\\nexport class TGUIThemeDirective implements OnInit {\\n  // CSS file path - this will be loaded from assets in the actual build\\n  private stylesPath = \'assets/tgui/styles/variables.css\';\\n  \\n  private el = inject(ElementRef);\\n  private renderer = inject(Renderer2);\\n\\n  ngOnInit(): void {\\n    this.loadStyles();\\n  }\\n\\n  private loadStyles(): void {\\n    const head = document.head;\\n    const link = document.createElement(\'link\');\\n    \\n    link.rel = \'stylesheet\';\\n    link.type = \'text/css\';\\n    link.href = this.stylesPath;\\n    \\n    head.appendChild(link);\\n  }\\n} ","selector":"[tguiTheme]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"el","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[123]},{"name":"renderer","defaultValue":"inject(Renderer2)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":16,"modifierKind":[123]},{"name":"stylesPath","defaultValue":"\'assets/tgui/styles/variables.css\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":13,"modifierKind":[123]}],"methodsClass":[{"name":"loadStyles","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":22,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":18,"deprecated":false,"deprecationMessage":""}],"extends":[],"implements":["OnInit"]}],"components":[{"name":"AccordionComponent","id":"component-AccordionComponent-d1c37b0f59ef672a04fcfe417ae9ccd4eb6cdce9c3e2093e19682d8fd35e58b78da51a1b301d9439df91d08b866b602e5bb8e52107cfc8a9876da12983da746c","file":"projects/tgui/src/lib/components/blocks/accordion/accordion.component.ts","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-accordion","styleUrls":[],"styles":[],"template":"<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"expanded","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetermines whether the accordion is currently expanded or collapsed.\\n","description":"<p>Determines whether the accordion is currently expanded or collapsed.</p>\\n","line":44,"type":"boolean","decorators":[]},{"name":"id","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\\nsummary and content. If not provided, a unique ID will be generated automatically.\\nThis ID is crucial for screen readers and other assistive technologies to understand the\\nrelationship between the accordion header and content.\\n","description":"<p>Optional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\\nsummary and content. If not provided, a unique ID will be generated automatically.\\nThis ID is crucial for screen readers and other assistive technologies to understand the\\nrelationship between the accordion header and content.</p>\\n","line":35,"type":"string | undefined","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_expanded","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Public readonly signal for expansion state</p>\\n","line":60,"rawdescription":"\\nPublic readonly signal for expansion state","modifierKind":[148]},{"name":"_id","defaultValue":"signal(`tgui-accordion-${Math.random().toString(36).substring(2, 9)}`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Internal signal for ID</p>\\n","line":63,"rawdescription":"\\nInternal signal for ID","modifierKind":[123]},{"name":"contentId","defaultValue":"computed(() => `${this._id()}-content`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Computed ID for the content element</p>\\n","line":69,"rawdescription":"\\nComputed ID for the content element","modifierKind":[148]},{"name":"labelId","defaultValue":"computed(() => `${this._id()}-label`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Computed ID for the label element</p>\\n","line":66,"rawdescription":"\\nComputed ID for the label element","modifierKind":[148]}],"methodsClass":[{"name":"toggleExpanded","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nToggle the expanded state of the accordion\\n","description":"<p>Toggle the expanded state of the accordion</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.accordion-expanded","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHost binding to add the expanded class when the accordion is expanded\\n","description":"<p>Host binding to add the expanded class when the accordion is expanded</p>\\n","line":55,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>This component serves as a container for an accordion item, comprising a summary and\\ncontent sections. It uses a signal-based approach to manage its state and to allow its children\\n(<code>tgui-accordion-summary</code> and <code>tgui-accordion-content</code>) to access shared state.</p>\\n","rawdescription":"\\n\\nThis component serves as a container for an accordion item, comprising a summary and\\ncontent sections. It uses a signal-based approach to manage its state and to allow its children\\n(`tgui-accordion-summary` and `tgui-accordion-content`) to access shared state.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  Input, \\n  signal, \\n  computed,\\n  ContentChild,\\n  inject,\\n  HostBinding\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * This component serves as a container for an accordion item, comprising a summary and\\n * content sections. It uses a signal-based approach to manage its state and to allow its children\\n * (`tgui-accordion-summary` and `tgui-accordion-content`) to access shared state.\\n */\\n@Component({\\n  selector: \'tgui-accordion\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-content></ng-content>\\n  `,\\n  styles: [],\\n  encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class AccordionComponent {\\n  /**\\n   * Optional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\\n   * summary and content. If not provided, a unique ID will be generated automatically.\\n   * This ID is crucial for screen readers and other assistive technologies to understand the\\n   * relationship between the accordion header and content.\\n   */\\n  @Input() set id(value: string | undefined) {\\n    if (value) {\\n      this._id.set(value);\\n    }\\n  }\\n\\n  /**\\n   * Determines whether the accordion is currently expanded or collapsed.\\n   */\\n  @Input() set expanded(value: boolean) {\\n    this._expanded.set(value);\\n  }\\n  \\n  get expanded(): boolean {\\n    return this._expanded();\\n  }\\n\\n  /**\\n   * Host binding to add the expanded class when the accordion is expanded\\n   */\\n  @HostBinding(\'class.accordion-expanded\') get isExpanded(): boolean {\\n    return this.expanded;\\n  }\\n\\n  /** Public readonly signal for expansion state */\\n  readonly _expanded = signal(false);\\n  \\n  /** Internal signal for ID */\\n  private _id = signal(`tgui-accordion-${Math.random().toString(36).substring(2, 9)}`);\\n  \\n  /** Computed ID for the label element */\\n  readonly labelId = computed(() => `${this._id()}-label`);\\n  \\n  /** Computed ID for the content element */\\n  readonly contentId = computed(() => `${this._id()}-content`);\\n\\n  /**\\n   * Toggle the expanded state of the accordion\\n   */\\n  toggleExpanded(): void {\\n    this._expanded.update(state => !state);\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"accessors":{"id":{"name":"id","setSignature":{"name":"id","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"string | undefined","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":35,"rawdescription":"\\n\\nOptional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\\nsummary and content. If not provided, a unique ID will be generated automatically.\\nThis ID is crucial for screen readers and other assistive technologies to understand the\\nrelationship between the accordion header and content.\\n","description":"<p>Optional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\\nsummary and content. If not provided, a unique ID will be generated automatically.\\nThis ID is crucial for screen readers and other assistive technologies to understand the\\nrelationship between the accordion header and content.</p>\\n","jsdoctags":[{"name":"value","type":"string | undefined","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"expanded":{"name":"expanded","setSignature":{"name":"expanded","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"boolean","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":44,"rawdescription":"\\n\\nDetermines whether the accordion is currently expanded or collapsed.\\n","description":"<p>Determines whether the accordion is currently expanded or collapsed.</p>\\n","jsdoctags":[{"name":"value","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"expanded","type":"boolean","returnType":"boolean","line":48}},"isExpanded":{"name":"isExpanded","getSignature":{"name":"isExpanded","type":"boolean","returnType":"boolean","line":55,"rawdescription":"\\n\\nHost binding to add the expanded class when the accordion is expanded\\n","description":"<p>Host binding to add the expanded class when the accordion is expanded</p>\\n"}}}},{"name":"AccordionContentComponent","id":"component-AccordionContentComponent-6aadaa61dcd79fef25aa12eba2b030a420d34344e73d62c26dbe8e2228e80e5f05a5676c290aaa615fb9c22b84982020814f0eb2e19bbce57ffc882171e570cc","file":"projects/tgui/src/lib/components/blocks/accordion/components/accordion-content/accordion-content.component.ts","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-accordion-content","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n      overflow: hidden;\\n      background: var(--tgui--bg_color);\\n    }\\n    \\n    .body {\\n      max-block-size: 0;\\n      transition: max-height 200ms ease-in-out;\\n    }\\n  "],"template":"<div\\n  class=\\"body\\"\\n  #bodyElement\\n  [style.maxHeight]=\\"maxHeight()\\"\\n>\\n  <ng-content></ng-content>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"accordion","defaultValue":"inject(AccordionComponent)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":52,"modifierKind":[124]},{"name":"bodyElement","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":50,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'bodyElement\'"}],"modifierKind":[170]},{"name":"initialized","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":65,"modifierKind":[123]},{"name":"maxHeight","defaultValue":"signal(\'0px\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":56},{"name":"mutationObserver","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"MutationObserver | null","indexKey":"","optional":false,"description":"","line":68,"modifierKind":[123]},{"name":"ngZone","defaultValue":"inject(NgZone)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":53,"modifierKind":[123]},{"name":"resizeObserver","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"ResizeObserver | null","indexKey":"","optional":false,"description":"","line":69,"modifierKind":[123]},{"name":"role","defaultValue":"\'region\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":60,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.role\'"}],"modifierKind":[170]}],"methodsClass":[{"name":"disconnectObservers","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":125,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisconnect all observers during component destruction\\n","description":"<p>Disconnect all observers during component destruction</p>\\n","modifierKind":[123]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":""},{"name":"setupContentObservers","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":91,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSet up observers to detect changes in content size\\n","description":"<p>Set up observers to detect changes in content size</p>\\n","modifierKind":[123]},{"name":"updateContentHeight","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":140,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdate height based on current content\\n","description":"<p>Update height based on current content</p>\\n","modifierKind":[123]},{"name":"updateMaxHeight","args":[{"name":"expanded","type":"boolean","deprecated":false,"deprecationMessage":""},{"name":"initialized","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCalculates and sets the appropriate max-height based on content\\n","description":"<p>Calculates and sets the appropriate max-height based on content</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"expanded","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"initialized","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.aria-hidden","deprecated":false,"deprecationMessage":"","line":62,"type":"boolean","decorators":[]},{"name":"attr.aria-labelledby","deprecated":false,"deprecationMessage":"","line":61,"type":"any","decorators":[]},{"name":"attr.id","deprecated":false,"deprecationMessage":"","line":59,"type":"any","decorators":[]},{"name":"attr.role","defaultValue":"\'region\'","deprecated":false,"deprecationMessage":"","line":60,"type":"string","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Renders the content part of an accordion, leveraging signals to control visibility and animation.\\nUtilizes element measurements for smooth height transitions during expand/collapse actions.</p>\\n","rawdescription":"\\n\\nRenders the content part of an accordion, leveraging signals to control visibility and animation.\\nUtilizes element measurements for smooth height transitions during expand/collapse actions.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  inject,\\n  ElementRef,\\n  AfterViewInit,\\n  OnDestroy,\\n  signal,\\n  effect,\\n  ViewChild,\\n  HostBinding,\\n  NgZone\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nimport { AccordionComponent } from \'../../accordion.component\';\\n\\n/**\\n * Renders the content part of an accordion, leveraging signals to control visibility and animation.\\n * Utilizes element measurements for smooth height transitions during expand/collapse actions.\\n */\\n@Component({\\n  selector: \'tgui-accordion-content\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div \\n      class=\\"body\\"\\n      #bodyElement\\n      [style.maxHeight]=\\"maxHeight()\\"\\n    >\\n      <ng-content></ng-content>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n      overflow: hidden;\\n      background: var(--tgui--bg_color);\\n    }\\n    \\n    .body {\\n      max-block-size: 0;\\n      transition: max-height 200ms ease-in-out;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class AccordionContentComponent implements AfterViewInit, OnDestroy {\\n  @ViewChild(\'bodyElement\') bodyElement!: ElementRef<HTMLDivElement>;\\n  \\n  protected accordion = inject(AccordionComponent);\\n  private ngZone = inject(NgZone);\\n  \\n  // Signal for dynamically setting max-height\\n  maxHeight = signal(\'0px\');\\n  \\n  // Bind aria attributes for accessibility\\n  @HostBinding(\'attr.id\') get contentId() { return this.accordion.contentId(); }\\n  @HostBinding(\'attr.role\') role = \'region\';\\n  @HostBinding(\'attr.aria-labelledby\') get labelId() { return this.accordion.labelId(); }\\n  @HostBinding(\'attr.aria-hidden\') get ariaHidden() { return !this.accordion.expanded; }\\n  \\n  // Track when component is initialized\\n  private initialized = signal(false);\\n  \\n  // Observer for changes in content height (like nested accordions expanding)\\n  private mutationObserver: MutationObserver | null = null;\\n  private resizeObserver: ResizeObserver | null = null;\\n  \\n  constructor() {\\n    // Effect to update max-height when expanded status changes\\n    effect(() => {\\n      this.updateMaxHeight(this.accordion._expanded(), this.initialized());\\n    });\\n  }\\n  \\n  ngAfterViewInit(): void {\\n    this.initialized.set(true);\\n    this.updateMaxHeight(this.accordion._expanded(), true);\\n    this.setupContentObservers();\\n  }\\n  \\n  ngOnDestroy(): void {\\n    this.disconnectObservers();\\n  }\\n  \\n  /**\\n   * Set up observers to detect changes in content size\\n   */\\n  private setupContentObservers(): void {\\n    if (!this.bodyElement?.nativeElement) return;\\n    \\n    // Run outside Angular zone for better performance\\n    this.ngZone.runOutsideAngular(() => {\\n      // Observer for attribute changes (like class changes on nested accordions)\\n      this.mutationObserver = new MutationObserver(() => {\\n        if (this.accordion._expanded()) {\\n          this.updateContentHeight();\\n        }\\n      });\\n      \\n      this.mutationObserver.observe(this.bodyElement.nativeElement, {\\n        attributes: true,\\n        childList: true,\\n        subtree: true\\n      });\\n      \\n      // Observer for size changes of child elements\\n      if (typeof ResizeObserver !== \'undefined\') {\\n        this.resizeObserver = new ResizeObserver(() => {\\n          if (this.accordion._expanded()) {\\n            this.updateContentHeight();\\n          }\\n        });\\n        \\n        this.resizeObserver.observe(this.bodyElement.nativeElement);\\n      }\\n    });\\n  }\\n  \\n  /**\\n   * Disconnect all observers during component destruction\\n   */\\n  private disconnectObservers(): void {\\n    if (this.mutationObserver) {\\n      this.mutationObserver.disconnect();\\n      this.mutationObserver = null;\\n    }\\n    \\n    if (this.resizeObserver) {\\n      this.resizeObserver.disconnect();\\n      this.resizeObserver = null;\\n    }\\n  }\\n  \\n  /**\\n   * Update height based on current content\\n   */\\n  private updateContentHeight(): void {\\n    if (!this.bodyElement?.nativeElement) return;\\n    \\n    // Need to run this inside Angular zone to update the UI\\n    this.ngZone.run(() => {\\n      const scrollHeight = this.bodyElement.nativeElement.scrollHeight;\\n      this.maxHeight.set(`${scrollHeight}px`);\\n    });\\n  }\\n  \\n  /**\\n   * Calculates and sets the appropriate max-height based on content\\n   */\\n  private updateMaxHeight(expanded: boolean, initialized: boolean): void {\\n    if (!expanded) {\\n      this.maxHeight.set(\'0px\');\\n      return;\\n    }\\n    \\n    // We don\'t know the height of the element in the first render\\n    if (!initialized || !this.bodyElement) {\\n      this.maxHeight.set(\'inherit\');\\n      return;\\n    }\\n    \\n    const scrollHeight = this.bodyElement.nativeElement.scrollHeight;\\n    this.maxHeight.set(`${scrollHeight}px`);\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n      overflow: hidden;\\n      background: var(--tgui--bg_color);\\n    }\\n    \\n    .body {\\n      max-block-size: 0;\\n      transition: max-height 200ms ease-in-out;\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":69},"extends":[],"implements":["AfterViewInit","OnDestroy"],"accessors":{"contentId":{"name":"contentId","getSignature":{"name":"contentId","type":"","returnType":"","line":59}},"labelId":{"name":"labelId","getSignature":{"name":"labelId","type":"","returnType":"","line":61}},"ariaHidden":{"name":"ariaHidden","getSignature":{"name":"ariaHidden","type":"","returnType":"","line":62}}}},{"name":"AccordionSummaryComponent","id":"component-AccordionSummaryComponent-58974da84ec955ff83afc97707fb9ea5c4ddc1205dbd8738611e4ae503a124ddad1ce0b768f6ee5e6cf164c3a829b1091cdae921f59ddb876d275a2da2b9b08f","file":"projects/tgui/src/lib/components/blocks/accordion/components/accordion-summary/accordion-summary.component.ts","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-accordion-summary","styleUrls":[],"styles":["\\n    .chevron {\\n      transition: transform .15s ease-out;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    .chevron--expanded {\\n      transform: rotate(180deg);\\n    }\\n  "],"template":"<tgui-cell\\n  [id]=\\"accordion.labelId()\\"\\n  [attr.aria-expanded]=\\"accordion.expanded\\"\\n  [attr.aria-controls]=\\"accordion.contentId()\\"\\n>\\n  <ng-content></ng-content>\\n  <div\\n    content-slot=\\"after\\"\\n    *ngIf=\\"!hasCustomAfter()\\"\\n  >\\n    <tgui-icon24-chevron-down\\n      class=\\"chevron\\"\\n      [class.chevron--expanded]=\\"isExpanded\\"\\n    ></tgui-icon24-chevron-down>\\n  </div>\\n  <ng-content select=\\"[content-slot=after]\\"></ng-content>\\n</tgui-cell>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"hasCustomAfter","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Enables using a custom after element</p>\\n","line":58,"rawdescription":"\\nEnables using a custom after element","required":false}],"outputsClass":[],"propertiesClass":[{"name":"accordion","defaultValue":"inject(AccordionComponent)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60,"modifierKind":[124]},{"name":"hasCustomAfter","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Enables using a custom after element</p>\\n","line":58,"rawdescription":"\\nEnables using a custom after element","required":false},{"name":"isExpanded","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":63}],"methodsClass":[{"name":"onClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\'"}],"modifierKind":[170]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","line":73}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"CellComponent","type":"component"},{"name":"TguiIcon24ChevronDown"},{"name":"ContentSlotDirective","type":"directive"}],"description":"<p><code>AccordionSummary</code> serves as the clickable header for an accordion section, toggling the visibility of the content.\\nIt incorporates an expand/collapse icon to visually indicate state. This component extends <code>Cell</code> to provide\\na consistent UI and accessibility features.</p>\\n","rawdescription":"\\n\\n`AccordionSummary` serves as the clickable header for an accordion section, toggling the visibility of the content.\\nIt incorporates an expand/collapse icon to visually indicate state. This component extends `Cell` to provide\\na consistent UI and accessibility features.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  HostListener,\\n  inject,\\n  input,\\n  effect\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nimport { CellComponent } from \'../../../cell/cell.component\';\\nimport { AccordionComponent } from \'../../accordion.component\';\\nimport { TguiIcon24ChevronDown } from \'../../../../../icons/icon24/tgui-icon24-chevron-down\';\\nimport { ContentSlotDirective } from \'../../../../../directives/content-slot.directive\';\\n\\n/**\\n * `AccordionSummary` serves as the clickable header for an accordion section, toggling the visibility of the content.\\n * It incorporates an expand/collapse icon to visually indicate state. This component extends `Cell` to provide\\n * a consistent UI and accessibility features.\\n */\\n@Component({\\n  selector: \'tgui-accordion-summary\',\\n  standalone: true,\\n  imports: [CommonModule, CellComponent, TguiIcon24ChevronDown, ContentSlotDirective],\\n  template: `\\n    <tgui-cell\\n      [id]=\\"accordion.labelId()\\"\\n      [attr.aria-expanded]=\\"accordion.expanded\\"\\n      [attr.aria-controls]=\\"accordion.contentId()\\"\\n    >\\n      <ng-content></ng-content>\\n      <div \\n        content-slot=\\"after\\" \\n        *ngIf=\\"!hasCustomAfter()\\"\\n      >\\n        <tgui-icon24-chevron-down \\n          class=\\"chevron\\"\\n          [class.chevron--expanded]=\\"isExpanded\\"\\n        ></tgui-icon24-chevron-down>\\n      </div>\\n      <ng-content select=\\"[content-slot=after]\\"></ng-content>\\n    </tgui-cell>\\n  `,\\n  styles: [`\\n    .chevron {\\n      transition: transform .15s ease-out;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    .chevron--expanded {\\n      transform: rotate(180deg);\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class AccordionSummaryComponent {\\n  /** Enables using a custom after element */\\n  hasCustomAfter = input<boolean>(false);\\n  \\n  protected accordion = inject(AccordionComponent);\\n  \\n  // Property to track expanded state instead of calling the function in template\\n  isExpanded = false;\\n  \\n  constructor() {\\n    // Use effect to respond to changes in the expanded signal\\n    effect(() => {\\n      this.isExpanded = this.accordion._expanded();\\n    });\\n  }\\n\\n  @HostListener(\'click\')\\n  onClick(): void {\\n    this.accordion.toggleExpanded();\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .chevron {\\n      transition: transform .15s ease-out;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    .chevron--expanded {\\n      transform: rotate(180deg);\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":63},"extends":[]},{"name":"AvatarAcronymComponent","id":"component-AvatarAcronymComponent-0cbe633adc4bb83e70024d02e162bc2f0d4bf5b3bb3a269effb0893ae9ceea3137a531a22645b74ba1d8b8b9f1f0f5492844701a609f734f4d1dcf9efb67cc31","file":"projects/tgui/src/lib/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-avatar-acronym","styleUrls":[],"styles":["\\n    :host {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 100%;\\n      height: 100%;\\n      color: var(--tgui--link_color);\\n    }\\n  "],"template":"<ng-container [ngSwitch]=\\"getTypographyComponent()\\">\\n  <tgui-caption\\n    *ngSwitchCase=\\"\'caption\'\\"\\n    [level]=\\"getCaptionLevel()\\"\\n    weight=\\"1\\"\\n    [caps]=\\"true\\"\\n  >{{ formatInitials() }}</tgui-caption>\\n\\n  <tgui-headline\\n    *ngSwitchCase=\\"\'headline\'\\"\\n    weight=\\"2\\"\\n    [caps]=\\"true\\"\\n  >{{ formatInitials() }}</tgui-headline>\\n\\n  <tgui-title\\n    *ngSwitchCase=\\"\'title\'\\"\\n    level=\\"3\\"\\n    weight=\\"1\\"\\n    [caps]=\\"true\\"\\n  >{{ formatInitials() }}</tgui-title>\\n\\n  <tgui-large-title\\n    *ngSwitchCase=\\"\'large-title\'\\"\\n    weight=\\"1\\"\\n    [caps]=\\"true\\"\\n  >{{ formatInitials() }}</tgui-large-title>\\n</ng-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"initials","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nТекст, из которого будут сформированы инициалы\\n","description":"<p>Текст, из которого будут сформированы инициалы</p>\\n","line":73,"type":"string","decorators":[]},{"name":"size","defaultValue":"\'m\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nРазмер аватара, который определяет размер отображаемых инициалов\\n","description":"<p>Размер аватара, который определяет размер отображаемых инициалов</p>\\n","line":68,"type":"AvatarSize","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[{"name":"formatInitials","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nФорматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\\n","description":"<p>Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)</p>\\n"},{"name":"getCaptionLevel","args":[],"optional":false,"returnType":"\\"1\\" | \\"2\\"","typeParameters":[],"line":111,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОпределяет уровень Caption в зависимости от размера аватара\\n","description":"<p>Определяет уровень Caption в зависимости от размера аватара</p>\\n"},{"name":"getTypographyComponent","args":[],"optional":false,"returnType":"\\"caption\\" | \\"headline\\" | \\"title\\" | \\"large-title\\"","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОпределяет, какой компонент типографики использовать в зависимости от размера аватара\\n","description":"<p>Определяет, какой компонент типографики использовать в зависимости от размера аватара</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"CaptionComponent","type":"component"},{"name":"HeadlineComponent","type":"component"},{"name":"TitleComponent","type":"component"},{"name":"LargeTitleComponent","type":"component"}],"description":"<p>Компонент AvatarAcronym отображает инициалы для аватара,\\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.</p>\\n","rawdescription":"\\n\\nКомпонент AvatarAcronym отображает инициалы для аватара,\\nавтоматически подбирая соответствующий размер шрифта и компонент типографики.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { CaptionComponent } from \'@typography/caption/caption.component\';\\nimport { HeadlineComponent } from \'@typography/headline/headline.component\';\\nimport { TitleComponent } from \'@typography/title/title.component\';\\nimport { LargeTitleComponent } from \'@typography/large-title/large-title.component\';\\nimport { AvatarSize } from \'@components/blocks/avatar/avatar.component\';\\n\\n/**\\n * Компонент AvatarAcronym отображает инициалы для аватара,\\n * автоматически подбирая соответствующий размер шрифта и компонент типографики.\\n */\\n@Component({\\n  selector: \'tgui-avatar-acronym\',\\n  standalone: true,\\n  imports: [\\n    CommonModule, \\n    CaptionComponent, \\n    HeadlineComponent, \\n    TitleComponent, \\n    LargeTitleComponent\\n  ],\\n  template: `\\n    <ng-container [ngSwitch]=\\"getTypographyComponent()\\">\\n      <tgui-caption \\n        *ngSwitchCase=\\"\'caption\'\\" \\n        [level]=\\"getCaptionLevel()\\" \\n        weight=\\"1\\" \\n        [caps]=\\"true\\"\\n      >{{ formatInitials() }}</tgui-caption>\\n      \\n      <tgui-headline \\n        *ngSwitchCase=\\"\'headline\'\\" \\n        weight=\\"2\\" \\n        [caps]=\\"true\\"\\n      >{{ formatInitials() }}</tgui-headline>\\n      \\n      <tgui-title \\n        *ngSwitchCase=\\"\'title\'\\" \\n        level=\\"3\\" \\n        weight=\\"1\\" \\n        [caps]=\\"true\\"\\n      >{{ formatInitials() }}</tgui-title>\\n      \\n      <tgui-large-title \\n        *ngSwitchCase=\\"\'large-title\'\\" \\n        weight=\\"1\\" \\n        [caps]=\\"true\\"\\n      >{{ formatInitials() }}</tgui-large-title>\\n    </ng-container>\\n  `,\\n  styles: [`\\n    :host {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 100%;\\n      height: 100%;\\n      color: var(--tgui--link_color);\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class AvatarAcronymComponent {\\n  /**\\n   * Размер аватара, который определяет размер отображаемых инициалов\\n   */\\n  @Input() size: AvatarSize = \'m\';\\n  \\n  /**\\n   * Текст, из которого будут сформированы инициалы\\n   */\\n  @Input() initials: string = \'\';\\n  \\n  /**\\n   * Форматирует переданный текст в инициалы, извлекая первые буквы каждого слова (до 2 букв)\\n   */\\n  formatInitials(): string {\\n    if (!this.initials) return \'\';\\n    \\n    return this.initials\\n      .split(\' \')\\n      .map(part => part.charAt(0))\\n      .slice(0, 2)\\n      .join(\'\')\\n      .toUpperCase();\\n  }\\n  \\n  /**\\n   * Определяет, какой компонент типографики использовать в зависимости от размера аватара\\n   */\\n  getTypographyComponent(): \'caption\' | \'headline\' | \'title\' | \'large-title\' {\\n    if (this.size === \'xxs\' || this.size === \'xs\' || this.size === \'s\') {\\n      return \'caption\';\\n    }\\n    \\n    if (this.size === \'m\') {\\n      return \'headline\';\\n    }\\n    \\n    if (this.size === \'l\') {\\n      return \'title\';\\n    }\\n    \\n    return \'large-title\';\\n  }\\n  \\n  /**\\n   * Определяет уровень Caption в зависимости от размера аватара\\n   */\\n  getCaptionLevel(): \'1\' | \'2\' {\\n    return this.size === \'xs\' ? \'2\' : \'1\';\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      width: 100%;\\n      height: 100%;\\n      color: var(--tgui--link_color);\\n    }\\n  \\n","extends":[]},{"name":"AvatarBadgeComponent","id":"component-AvatarBadgeComponent-52bc247c69ee1135189b7a72b8616bb96a5b3cd14b435f73e9301a50c64e4a1a51b57de34e2421d0ca0db51c1bd3a65ba6ca4299a0b61b8d5de68810af92e8aa","file":"projects/tgui/src/lib/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-avatar-badge","styleUrls":[],"styles":["\\n    :host {\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      z-index: 10;\\n      pointer-events: none;\\n    }\\n    \\n    .avatar-badge {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      min-width: 18px;\\n      height: 18px;\\n      padding: 0 5px;\\n      border-radius: 10px;\\n      background-color: var(--tgui--destructive_text_color);\\n      color: white;\\n      font-size: 11px;\\n      font-weight: var(--tgui--font_weight--accent1);\\n      box-sizing: border-box;\\n      transform: translate(50%, -50%);\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n      pointer-events: auto;\\n    }\\n    \\n    .badge-content {\\n      display: flex;\\n      line-height: 1;\\n    }\\n    \\n    /* Специальные стили для больших и маленьких бейджей */\\n    :host-context(.size-xs) .avatar-badge,\\n    :host-context(.size-s) .avatar-badge {\\n      min-width: 14px;\\n      height: 14px;\\n      font-size: 10px;\\n      padding: 0 4px;\\n    }\\n    \\n    :host-context(.size-l) .avatar-badge,\\n    :host-context(.size-xl) .avatar-badge {\\n      min-width: 20px;\\n      height: 20px;\\n      font-size: 12px;\\n      padding: 0 6px;\\n    }\\n  "],"template":"<div class=\\"avatar-badge\\">\\n  <span class=\\"badge-content\\">{{ count > 99 ? \'99+\' : count }}</span>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"count","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNumeric value to display in the badge\\n","description":"<p>Numeric value to display in the badge</p>\\n","line":72,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The AvatarBadge component displays a numeric badge on the avatar,\\nallowing to show the number of unread messages, notifications, etc.</p>\\n","rawdescription":"\\n\\nThe AvatarBadge component displays a numeric badge on the avatar,\\nallowing to show the number of unread messages, notifications, etc.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * The AvatarBadge component displays a numeric badge on the avatar,\\n * allowing to show the number of unread messages, notifications, etc.\\n */\\n@Component({\\n  selector: \'tgui-avatar-badge\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div class=\\"avatar-badge\\">\\n      <span class=\\"badge-content\\">{{ count > 99 ? \'99+\' : count }}</span>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      z-index: 10;\\n      pointer-events: none;\\n    }\\n    \\n    .avatar-badge {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      min-width: 18px;\\n      height: 18px;\\n      padding: 0 5px;\\n      border-radius: 10px;\\n      background-color: var(--tgui--destructive_text_color);\\n      color: white;\\n      font-size: 11px;\\n      font-weight: var(--tgui--font_weight--accent1);\\n      box-sizing: border-box;\\n      transform: translate(50%, -50%);\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n      pointer-events: auto;\\n    }\\n    \\n    .badge-content {\\n      display: flex;\\n      line-height: 1;\\n    }\\n    \\n    /* Специальные стили для больших и маленьких бейджей */\\n    :host-context(.size-xs) .avatar-badge,\\n    :host-context(.size-s) .avatar-badge {\\n      min-width: 14px;\\n      height: 14px;\\n      font-size: 10px;\\n      padding: 0 4px;\\n    }\\n    \\n    :host-context(.size-l) .avatar-badge,\\n    :host-context(.size-xl) .avatar-badge {\\n      min-width: 20px;\\n      height: 20px;\\n      font-size: 12px;\\n      padding: 0 6px;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class AvatarBadgeComponent {\\n  /**\\n   * Numeric value to display in the badge\\n   */\\n  @Input() count: number = 0;\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      z-index: 10;\\n      pointer-events: none;\\n    }\\n    \\n    .avatar-badge {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      min-width: 18px;\\n      height: 18px;\\n      padding: 0 5px;\\n      border-radius: 10px;\\n      background-color: var(--tgui--destructive_text_color);\\n      color: white;\\n      font-size: 11px;\\n      font-weight: var(--tgui--font_weight--accent1);\\n      box-sizing: border-box;\\n      transform: translate(50%, -50%);\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n      pointer-events: auto;\\n    }\\n    \\n    .badge-content {\\n      display: flex;\\n      line-height: 1;\\n    }\\n    \\n    /* Специальные стили для больших и маленьких бейджей */\\n    :host-context(.size-xs) .avatar-badge,\\n    :host-context(.size-s) .avatar-badge {\\n      min-width: 14px;\\n      height: 14px;\\n      font-size: 10px;\\n      padding: 0 4px;\\n    }\\n    \\n    :host-context(.size-l) .avatar-badge,\\n    :host-context(.size-xl) .avatar-badge {\\n      min-width: 20px;\\n      height: 20px;\\n      font-size: 12px;\\n      padding: 0 6px;\\n    }\\n  \\n","extends":[]},{"name":"AvatarComponent","id":"component-AvatarComponent-074e1d05db08da0bc012bb0e8acc119d88c7e0d333e343baaabecd07e91410f3e457121bd85b945c41341edfdf6cc7a3a85b7bbc55bee79771b72f8fb97a2533","file":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-avatar","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      position: relative;\\n    }\\n    \\n    .avatar-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      overflow: hidden;\\n      background-color: var(--tgui--secondary_fill);\\n      position: relative;\\n      border-radius: inherit;\\n      z-index: 1;\\n    }\\n    \\n    .avatar-content {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      pointer-events: none;\\n      z-index: 2;\\n    }\\n    \\n    .avatar-content ::ng-deep > * {\\n      pointer-events: auto;\\n    }\\n    \\n    .avatar-image {\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n    }\\n    \\n    .avatar-online-badge {\\n      position: absolute;\\n      bottom: 0;\\n      right: 0;\\n      width: 25%;\\n      height: 25%;\\n      min-width: 8px;\\n      min-height: 8px;\\n      background-color: var(--tgui--green);\\n      border: 2px solid var(--tgui--bg_color);\\n      border-radius: 50%;\\n      box-sizing: border-box;\\n      transform: translate(0, 0);\\n      z-index: 3;\\n    }\\n    \\n    /* Size Variants */\\n    :host.size-xxs {\\n      width: 20px;\\n      height: 20px;\\n    }\\n    \\n    :host.size-xs {\\n      width: 24px;\\n      height: 24px;\\n    }\\n    \\n    :host.size-s {\\n      width: 28px;\\n      height: 28px;\\n    }\\n    \\n    :host.size-m {\\n      width: 40px;\\n      height: 40px;\\n    }\\n    \\n    :host.size-l {\\n      width: 48px;\\n      height: 48px;\\n    }\\n    \\n    :host.size-xl {\\n      width: 96px;\\n      height: 96px;\\n    }\\n    \\n    /* Shape Variants */\\n    :host.shape-circle {\\n      border-radius: 50%;\\n    }\\n    \\n    :host.shape-rounded {\\n      border-radius: 8px;\\n    }\\n    \\n    :host.shape-square {\\n      border-radius: 0;\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\\n      border-radius: 10px;\\n    }\\n    \\n    /* Badge size adjustments */\\n    :host.size-xxs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-xs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-s .avatar-online-badge {\\n      min-width: 8px;\\n      min-height: 8px;\\n      border-width: 1.5px;\\n    }\\n    \\n    :host.size-l .avatar-online-badge {\\n      min-width: 10px;\\n      min-height: 10px;\\n      border-width: 2px;\\n    }\\n    \\n    :host.size-xl .avatar-online-badge {\\n      min-width: 16px;\\n      min-height: 16px;\\n      border-width: 3px;\\n    }\\n  "],"template":"<div\\n  class=\\"avatar-container\\"\\n  [ngStyle]=\\"{ \'background-color\': getBackgroundColor() }\\"\\n>\\n  <img\\n    *ngIf=\\"src\\"\\n    [src]=\\"src\\"\\n    [alt]=\\"alt || \'Avatar\'\\"\\n    class=\\"avatar-image\\"\\n  />\\n\\n  <tgui-avatar-acronym\\n    *ngIf=\\"!src && initials\\"\\n    [size]=\\"size\\"\\n    [initials]=\\"initials\\"\\n  ></tgui-avatar-acronym>\\n</div>\\n\\n\x3c!-- Контент выведен за пределы avatar-container,\\n     чтобы не попадать под overflow: hidden --\x3e\\n<div class=\\"avatar-content\\">\\n  <div\\n    *ngIf=\\"online\\"\\n    class=\\"avatar-online-badge\\"\\n  ></div>\\n  <ng-content></ng-content>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"alt","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAlternative text for the image\\n","description":"<p>Alternative text for the image</p>\\n","line":214,"type":"string","decorators":[]},{"name":"color","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nBackground color for avatar with initials\\n","description":"<p>Background color for avatar with initials</p>\\n","line":219,"type":"string","decorators":[]},{"name":"initials","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nText for initials if image is absent\\n","description":"<p>Text for initials if image is absent</p>\\n","line":199,"type":"string","decorators":[]},{"name":"online","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOnline status indicator\\n","description":"<p>Online status indicator</p>\\n","line":224,"type":"boolean","decorators":[]},{"name":"shape","defaultValue":"\'circle\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAvatar shape (\'circle\', \'rounded\', \'square\')\\n","description":"<p>Avatar shape (&#39;circle&#39;, &#39;rounded&#39;, &#39;square&#39;)</p>\\n","line":209,"type":"AvatarShape","decorators":[]},{"name":"size","defaultValue":"\'m\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAvatar size (\'xxs\', \'xs\', \'s\', \'m\', \'l\', \'xl\')\\n","description":"<p>Avatar size (&#39;xxs&#39;, &#39;xs&#39;, &#39;s&#39;, &#39;m&#39;, &#39;l&#39;, &#39;xl&#39;)</p>\\n","line":204,"type":"AvatarSize","decorators":[]},{"name":"src","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAvatar image URL\\n","description":"<p>Avatar image URL</p>\\n","line":194,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[{"name":"getBackgroundColor","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":241,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns background color for avatar with initials\\n","description":"<p>Returns background color for avatar with initials</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.shape-circle","deprecated":false,"deprecationMessage":"","line":234,"type":"boolean","decorators":[]},{"name":"class.shape-rounded","deprecated":false,"deprecationMessage":"","line":235,"type":"boolean","decorators":[]},{"name":"class.shape-square","deprecated":false,"deprecationMessage":"","line":236,"type":"boolean","decorators":[]},{"name":"class.size-l","deprecated":false,"deprecationMessage":"","line":231,"type":"boolean","decorators":[]},{"name":"class.size-m","deprecated":false,"deprecationMessage":"","line":230,"type":"boolean","decorators":[]},{"name":"class.size-s","deprecated":false,"deprecationMessage":"","line":229,"type":"boolean","decorators":[]},{"name":"class.size-xl","deprecated":false,"deprecationMessage":"","line":232,"type":"boolean","decorators":[]},{"name":"class.size-xs","deprecated":false,"deprecationMessage":"","line":228,"type":"boolean","decorators":[]},{"name":"class.size-xxs","deprecated":false,"deprecationMessage":"","line":227,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"NgStyle"},{"name":"AvatarAcronymComponent","type":"component"}],"description":"<p>The Avatar component displays an avatar with optional initials or image.\\nThe component supports various sizes and shapes, as well as an online status indicator.</p>\\n","rawdescription":"\\n\\nThe Avatar component displays an avatar with optional initials or image.\\nThe component supports various sizes and shapes, as well as an online status indicator.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding, \\n  OnInit\\n} from \'@angular/core\';\\nimport { CommonModule, NgStyle } from \'@angular/common\';\\nimport { AvatarAcronymComponent } from \'./components/avatar-acronym/avatar-acronym.component\';\\nimport { AvatarBadgeComponent } from \'./components/avatar-badge/avatar-badge.component\';\\n\\nexport type AvatarSize = \'xxs\' | \'xs\' | \'s\' | \'m\' | \'l\' | \'xl\';\\nexport type AvatarShape = \'circle\' | \'rounded\' | \'square\';\\n\\n/**\\n * The Avatar component displays an avatar with optional initials or image.\\n * The component supports various sizes and shapes, as well as an online status indicator.\\n */\\n@Component({\\n  selector: \'tgui-avatar\',\\n  standalone: true,\\n  imports: [CommonModule, NgStyle, AvatarAcronymComponent],\\n  template: `\\n    <div \\n      class=\\"avatar-container\\"\\n      [ngStyle]=\\"{ \'background-color\': getBackgroundColor() }\\"\\n    >\\n      <img \\n        *ngIf=\\"src\\" \\n        [src]=\\"src\\" \\n        [alt]=\\"alt || \'Avatar\'\\" \\n        class=\\"avatar-image\\"\\n      />\\n      \\n      <tgui-avatar-acronym \\n        *ngIf=\\"!src && initials\\" \\n        [size]=\\"size\\" \\n        [initials]=\\"initials\\"\\n      ></tgui-avatar-acronym>\\n    </div>\\n    \\n    \x3c!-- Контент выведен за пределы avatar-container,\\n         чтобы не попадать под overflow: hidden --\x3e\\n    <div class=\\"avatar-content\\">\\n      <div \\n        *ngIf=\\"online\\" \\n        class=\\"avatar-online-badge\\"\\n      ></div>\\n      <ng-content></ng-content>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      position: relative;\\n    }\\n    \\n    .avatar-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      overflow: hidden;\\n      background-color: var(--tgui--secondary_fill);\\n      position: relative;\\n      border-radius: inherit;\\n      z-index: 1;\\n    }\\n    \\n    .avatar-content {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      pointer-events: none;\\n      z-index: 2;\\n    }\\n    \\n    .avatar-content ::ng-deep > * {\\n      pointer-events: auto;\\n    }\\n    \\n    .avatar-image {\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n    }\\n    \\n    .avatar-online-badge {\\n      position: absolute;\\n      bottom: 0;\\n      right: 0;\\n      width: 25%;\\n      height: 25%;\\n      min-width: 8px;\\n      min-height: 8px;\\n      background-color: var(--tgui--green);\\n      border: 2px solid var(--tgui--bg_color);\\n      border-radius: 50%;\\n      box-sizing: border-box;\\n      transform: translate(0, 0);\\n      z-index: 3;\\n    }\\n    \\n    /* Size Variants */\\n    :host.size-xxs {\\n      width: 20px;\\n      height: 20px;\\n    }\\n    \\n    :host.size-xs {\\n      width: 24px;\\n      height: 24px;\\n    }\\n    \\n    :host.size-s {\\n      width: 28px;\\n      height: 28px;\\n    }\\n    \\n    :host.size-m {\\n      width: 40px;\\n      height: 40px;\\n    }\\n    \\n    :host.size-l {\\n      width: 48px;\\n      height: 48px;\\n    }\\n    \\n    :host.size-xl {\\n      width: 96px;\\n      height: 96px;\\n    }\\n    \\n    /* Shape Variants */\\n    :host.shape-circle {\\n      border-radius: 50%;\\n    }\\n    \\n    :host.shape-rounded {\\n      border-radius: 8px;\\n    }\\n    \\n    :host.shape-square {\\n      border-radius: 0;\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\\n      border-radius: 10px;\\n    }\\n    \\n    /* Badge size adjustments */\\n    :host.size-xxs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-xs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-s .avatar-online-badge {\\n      min-width: 8px;\\n      min-height: 8px;\\n      border-width: 1.5px;\\n    }\\n    \\n    :host.size-l .avatar-online-badge {\\n      min-width: 10px;\\n      min-height: 10px;\\n      border-width: 2px;\\n    }\\n    \\n    :host.size-xl .avatar-online-badge {\\n      min-width: 16px;\\n      min-height: 16px;\\n      border-width: 3px;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class AvatarComponent {\\n  /**\\n   * Avatar image URL\\n   */\\n  @Input() src?: string;\\n  \\n  /**\\n   * Text for initials if image is absent\\n   */\\n  @Input() initials?: string;\\n  \\n  /**\\n   * Avatar size (\'xxs\', \'xs\', \'s\', \'m\', \'l\', \'xl\')\\n   */\\n  @Input() size: AvatarSize = \'m\';\\n  \\n  /**\\n   * Avatar shape (\'circle\', \'rounded\', \'square\')\\n   */\\n  @Input() shape: AvatarShape = \'circle\';\\n  \\n  /**\\n   * Alternative text for the image\\n   */\\n  @Input() alt?: string;\\n  \\n  /**\\n   * Background color for avatar with initials\\n   */\\n  @Input() color?: string;\\n  \\n  /**\\n   * Online status indicator\\n   */\\n  @Input() online = false;\\n  \\n  // Host bindings для CSS классов\\n  @HostBinding(\'class.size-xxs\') get isSizeXXS() { return this.size === \'xxs\'; }\\n  @HostBinding(\'class.size-xs\') get isSizeXS() { return this.size === \'xs\'; }\\n  @HostBinding(\'class.size-s\') get isSizeS() { return this.size === \'s\'; }\\n  @HostBinding(\'class.size-m\') get isSizeM() { return this.size === \'m\'; }\\n  @HostBinding(\'class.size-l\') get isSizeL() { return this.size === \'l\'; }\\n  @HostBinding(\'class.size-xl\') get isSizeXL() { return this.size === \'xl\'; }\\n  \\n  @HostBinding(\'class.shape-circle\') get isShapeCircle() { return this.shape === \'circle\'; }\\n  @HostBinding(\'class.shape-rounded\') get isShapeRounded() { return this.shape === \'rounded\'; }\\n  @HostBinding(\'class.shape-square\') get isShapeSquare() { return this.shape === \'square\'; }\\n  \\n  /**\\n   * Returns background color for avatar with initials\\n   */\\n  getBackgroundColor(): string {\\n    if (this.src) {\\n      return \'transparent\';\\n    }\\n    \\n    if (this.color) {\\n      return this.color;\\n    }\\n    \\n    // Если нет изображения и не задан цвет явно\\n    return \'var(--tgui--secondary_fill)\';\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      position: relative;\\n    }\\n    \\n    .avatar-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      overflow: hidden;\\n      background-color: var(--tgui--secondary_fill);\\n      position: relative;\\n      border-radius: inherit;\\n      z-index: 1;\\n    }\\n    \\n    .avatar-content {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      pointer-events: none;\\n      z-index: 2;\\n    }\\n    \\n    .avatar-content ::ng-deep > * {\\n      pointer-events: auto;\\n    }\\n    \\n    .avatar-image {\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n    }\\n    \\n    .avatar-online-badge {\\n      position: absolute;\\n      bottom: 0;\\n      right: 0;\\n      width: 25%;\\n      height: 25%;\\n      min-width: 8px;\\n      min-height: 8px;\\n      background-color: var(--tgui--green);\\n      border: 2px solid var(--tgui--bg_color);\\n      border-radius: 50%;\\n      box-sizing: border-box;\\n      transform: translate(0, 0);\\n      z-index: 3;\\n    }\\n    \\n    /* Size Variants */\\n    :host.size-xxs {\\n      width: 20px;\\n      height: 20px;\\n    }\\n    \\n    :host.size-xs {\\n      width: 24px;\\n      height: 24px;\\n    }\\n    \\n    :host.size-s {\\n      width: 28px;\\n      height: 28px;\\n    }\\n    \\n    :host.size-m {\\n      width: 40px;\\n      height: 40px;\\n    }\\n    \\n    :host.size-l {\\n      width: 48px;\\n      height: 48px;\\n    }\\n    \\n    :host.size-xl {\\n      width: 96px;\\n      height: 96px;\\n    }\\n    \\n    /* Shape Variants */\\n    :host.shape-circle {\\n      border-radius: 50%;\\n    }\\n    \\n    :host.shape-rounded {\\n      border-radius: 8px;\\n    }\\n    \\n    :host.shape-square {\\n      border-radius: 0;\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host.shape-rounded {\\n      border-radius: 10px;\\n    }\\n    \\n    /* Badge size adjustments */\\n    :host.size-xxs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-xs .avatar-online-badge {\\n      min-width: 6px;\\n      min-height: 6px;\\n      border-width: 1px;\\n    }\\n    \\n    :host.size-s .avatar-online-badge {\\n      min-width: 8px;\\n      min-height: 8px;\\n      border-width: 1.5px;\\n    }\\n    \\n    :host.size-l .avatar-online-badge {\\n      min-width: 10px;\\n      min-height: 10px;\\n      border-width: 2px;\\n    }\\n    \\n    :host.size-xl .avatar-online-badge {\\n      min-width: 16px;\\n      min-height: 16px;\\n      border-width: 3px;\\n    }\\n  \\n","extends":[],"accessors":{"isSizeXXS":{"name":"isSizeXXS","getSignature":{"name":"isSizeXXS","type":"","returnType":"","line":227}},"isSizeXS":{"name":"isSizeXS","getSignature":{"name":"isSizeXS","type":"","returnType":"","line":228}},"isSizeS":{"name":"isSizeS","getSignature":{"name":"isSizeS","type":"","returnType":"","line":229}},"isSizeM":{"name":"isSizeM","getSignature":{"name":"isSizeM","type":"","returnType":"","line":230}},"isSizeL":{"name":"isSizeL","getSignature":{"name":"isSizeL","type":"","returnType":"","line":231}},"isSizeXL":{"name":"isSizeXL","getSignature":{"name":"isSizeXL","type":"","returnType":"","line":232}},"isShapeCircle":{"name":"isShapeCircle","getSignature":{"name":"isShapeCircle","type":"","returnType":"","line":234}},"isShapeRounded":{"name":"isShapeRounded","getSignature":{"name":"isShapeRounded","type":"","returnType":"","line":235}},"isShapeSquare":{"name":"isShapeSquare","getSignature":{"name":"isShapeSquare","type":"","returnType":"","line":236}}}},{"name":"AvatarStackComponent","id":"component-AvatarStackComponent-d11571f6efd1c8ff4418b5260805abd284843a770b5728b41c9b68ecab9e39628c30490ef592a63bbf720e9cc1e6aab89a6c44266c8d18ee269f43da1aa08d92","file":"projects/tgui/src/lib/components/blocks/avatar-stack/avatar-stack.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-avatar-stack","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n    }\\n    \\n    .avatar-stack-container {\\n      display: flex;\\n      --tgui-avatar-stack-offset: -12px;\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\\n      margin-left: var(--tgui-avatar-stack-offset);\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n    }\\n  "],"template":"<div class=\\"avatar-stack-container\\" [style.--tgui-avatar-stack-offset.px]=\\"_offset\\">\\n  <ng-content></ng-content>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"offset","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOffset between avatars in pixels (default -12px).\\nNegative value determines the degree of overlap between avatars.\\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\\nThe larger the value (e.g., -6px), the less the overlap between avatars.\\n","description":"<p>Offset between avatars in pixels (default -12px).\\nNegative value determines the degree of overlap between avatars.\\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\\nThe larger the value (e.g., -6px), the less the overlap between avatars.</p>\\n","line":69,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_offset","defaultValue":"-12","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":75},{"name":"avatars","deprecated":false,"deprecationMessage":"","type":"QueryList<AvatarComponent>","indexKey":"","optional":false,"description":"<p>List of avatars inside the stack</p>\\n","line":80,"rawdescription":"\\n\\nList of avatars inside the stack\\n","decorators":[{"name":"ContentChildren","stringifiedArguments":"AvatarComponent"}],"modifierKind":[170]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The AvatarStack component displays a container for avatars in a stack format.\\nIt allows to visually group avatars, often used to represent\\nmultiple users or participants.</p>\\n<p>Avatars are displayed with overlap, which is adjusted through the offset property.</p>\\n","rawdescription":"\\n\\nThe AvatarStack component displays a container for avatars in a stack format.\\nIt allows to visually group avatars, often used to represent\\nmultiple users or participants.\\n\\nAvatars are displayed with overlap, which is adjusted through the offset property.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  ContentChildren,\\n  QueryList,\\n  AfterContentInit,\\n  Input,\\n  HostBinding,\\n  OnInit,\\n  inject,\\n  ElementRef,\\n  Renderer2\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { AvatarComponent } from \'@components/blocks/avatar/avatar.component\';\\n\\n/**\\n * The AvatarStack component displays a container for avatars in a stack format.\\n * It allows to visually group avatars, often used to represent\\n * multiple users or participants.\\n * \\n * Avatars are displayed with overlap, which is adjusted through the offset property.\\n */\\n@Component({\\n  selector: \'tgui-avatar-stack\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div class=\\"avatar-stack-container\\" [style.--tgui-avatar-stack-offset.px]=\\"_offset\\">\\n      <ng-content></ng-content>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n    }\\n    \\n    .avatar-stack-container {\\n      display: flex;\\n      --tgui-avatar-stack-offset: -12px;\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\\n      margin-left: var(--tgui-avatar-stack-offset);\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n    }\\n  `],\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  },\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class AvatarStackComponent {\\n  /**\\n   * Offset between avatars in pixels (default -12px).\\n   * Negative value determines the degree of overlap between avatars.\\n   * The smaller the value (e.g., -18px), the greater the overlap between avatars.\\n   * The larger the value (e.g., -6px), the less the overlap between avatars.\\n   */\\n  @Input() set offset(value: number) {\\n    this._offset = value;\\n  }\\n  get offset(): number {\\n    return this._offset;\\n  }\\n  _offset = -12;\\n  \\n  /**\\n   * List of avatars inside the stack\\n   */\\n  @ContentChildren(AvatarComponent) avatars!: QueryList<AvatarComponent>;\\n  \\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n    }\\n    \\n    .avatar-stack-container {\\n      display: flex;\\n      --tgui-avatar-stack-offset: -12px;\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar:not(:first-child) {\\n      margin-left: var(--tgui-avatar-stack-offset);\\n    }\\n    \\n    .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 3px var(--tgui--bg_color);\\n    }\\n    \\n    /* Platform Specific */\\n    :host-context(.tgui-platform-ios) :host .avatar-stack-container > ::ng-deep tgui-avatar {\\n      box-shadow: 0 0 0 2px var(--tgui--bg_color);\\n    }\\n  \\n","extends":[],"accessors":{"offset":{"name":"offset","setSignature":{"name":"offset","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":69,"rawdescription":"\\n\\nOffset between avatars in pixels (default -12px).\\nNegative value determines the degree of overlap between avatars.\\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\\nThe larger the value (e.g., -6px), the less the overlap between avatars.\\n","description":"<p>Offset between avatars in pixels (default -12px).\\nNegative value determines the degree of overlap between avatars.\\nThe smaller the value (e.g., -18px), the greater the overlap between avatars.\\nThe larger the value (e.g., -6px), the less the overlap between avatars.</p>\\n","jsdoctags":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"offset","type":"number","returnType":"number","line":72}}}},{"name":"BadgeComponent","id":"component-BadgeComponent-41a3aea38864e4583f29f59a0915ed167e29ca5cd95b731444cea172fb6d68cffd889f4233345810bc691e13c3767cdebc4bd4461f088b20f4603ce27aeaf003","file":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-badge","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      box-sizing: border-box;\\n      border-radius: 20px;\\n      overflow: hidden;\\n    }\\n\\n    /* Number type styles */\\n    :host.type-number {\\n      height: 20px;\\n      min-width: 20px;\\n      margin: 0 6px;\\n      padding: 0 5px;\\n    }\\n\\n    /* Large number badge */\\n    :host.type-number.large {\\n      height: 24px;\\n      padding: 0 6px;\\n      /* min-width не увеличиваем, оставляем 20px как в React */\\n    }\\n\\n    /* Dot type styles */\\n    :host.type-dot {\\n      display: inline-block;\\n      width: 6px;\\n      height: 6px;\\n      margin: 7px;\\n      border-radius: 50%;\\n    }\\n\\n    /* Цветовые режимы */\\n    :host.mode-primary {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--button_color);\\n    }\\n\\n    :host.mode-critical {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host.mode-secondary {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    :host.mode-white {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--white);\\n    }\\n  "],"template":"<ng-container *ngIf=\\"isNumber\\">\\n  <ng-template #contentTemplate>\\n    <ng-content></ng-content>\\n  </ng-template>\\n\\n  <tgui-subheadline tag=\\"span\\" level=\\"2\\" weight=\\"2\\" *ngIf=\\"large\\">\\n    <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n  </tgui-subheadline>\\n\\n  <tgui-caption weight=\\"2\\" level=\\"1\\" *ngIf=\\"!large\\">\\n    <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n  </tgui-caption>\\n</ng-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"large","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nУвеличивает размер бейджа. Применяется только при type=\'number\'.","description":"<p>Увеличивает размер бейджа. Применяется только при type=&#39;number&#39;.</p>\\n","line":110,"type":"boolean","decorators":[]},{"name":"mode","defaultValue":"\'primary\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nЦветовая схема бейджа, влияющая на его фон и цвет текста.","description":"<p>Цветовая схема бейджа, влияющая на его фон и цвет текста.</p>\\n","line":107,"type":"BadgeMode","decorators":[]},{"name":"type","defaultValue":"\'number\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nВизуальный стиль бейджа: \'number\' отображает содержимое, \'dot\' показывает простую точку.","description":"<p>Визуальный стиль бейджа: &#39;number&#39; отображает содержимое, &#39;dot&#39; показывает простую точку.</p>\\n","line":104,"type":"BadgeType","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.large","deprecated":false,"deprecationMessage":"","line":124,"type":"boolean","decorators":[]},{"name":"class.mode-critical","deprecated":false,"deprecationMessage":"","line":118,"type":"boolean","decorators":[]},{"name":"class.mode-gray","deprecated":false,"deprecationMessage":"","line":120,"type":"boolean","decorators":[]},{"name":"class.mode-primary","deprecated":false,"deprecationMessage":"","line":117,"type":"boolean","decorators":[]},{"name":"class.mode-secondary","deprecated":false,"deprecationMessage":"","line":119,"type":"boolean","decorators":[]},{"name":"class.mode-white","deprecated":false,"deprecationMessage":"","line":121,"type":"boolean","decorators":[]},{"name":"class.type-dot","deprecated":false,"deprecationMessage":"","line":114,"type":"boolean","decorators":[]},{"name":"class.type-number","deprecated":false,"deprecationMessage":"","line":113,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"CaptionComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"}],"description":"<p>Компонент Badge отображает небольшой числовой или точечный индикатор,\\nобычно используемый для уведомлений, статусов или счетчиков.\\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\\nи может быть обычного или увеличенного размера.</p>\\n","rawdescription":"\\n\\nКомпонент Badge отображает небольшой числовой или точечный индикатор,\\nобычно используемый для уведомлений, статусов или счетчиков.\\nПоддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\\nи может быть обычного или увеличенного размера.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { CaptionComponent } from \'@typography/caption/caption.component\';\\nimport { SubheadlineComponent } from \'@typography/subheadline/subheadline.component\';\\n\\nexport type BadgeType = \'number\' | \'dot\';\\nexport type BadgeMode = \'primary\' | \'critical\' | \'secondary\' | \'gray\' | \'white\';\\n\\n/**\\n * Компонент Badge отображает небольшой числовой или точечный индикатор,\\n * обычно используемый для уведомлений, статусов или счетчиков.\\n * Поддерживает несколько визуальных режимов для разных контекстов (например, critical, primary),\\n * и может быть обычного или увеличенного размера.\\n */\\n@Component({\\n  selector: \'tgui-badge\',\\n  standalone: true,\\n  imports: [CommonModule, CaptionComponent, SubheadlineComponent],\\n  template: `\\n    <ng-container *ngIf=\\"isNumber\\">\\n      <ng-template #contentTemplate>\\n        <ng-content></ng-content>\\n      </ng-template>\\n\\n      <tgui-subheadline tag=\\"span\\" level=\\"2\\" weight=\\"2\\" *ngIf=\\"large\\">\\n        <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n      </tgui-subheadline>\\n\\n      <tgui-caption weight=\\"2\\" level=\\"1\\" *ngIf=\\"!large\\">\\n        <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n      </tgui-caption>\\n    </ng-container>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      box-sizing: border-box;\\n      border-radius: 20px;\\n      overflow: hidden;\\n    }\\n\\n    /* Number type styles */\\n    :host.type-number {\\n      height: 20px;\\n      min-width: 20px;\\n      margin: 0 6px;\\n      padding: 0 5px;\\n    }\\n\\n    /* Large number badge */\\n    :host.type-number.large {\\n      height: 24px;\\n      padding: 0 6px;\\n      /* min-width не увеличиваем, оставляем 20px как в React */\\n    }\\n\\n    /* Dot type styles */\\n    :host.type-dot {\\n      display: inline-block;\\n      width: 6px;\\n      height: 6px;\\n      margin: 7px;\\n      border-radius: 50%;\\n    }\\n\\n    /* Цветовые режимы */\\n    :host.mode-primary {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--button_color);\\n    }\\n\\n    :host.mode-critical {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host.mode-secondary {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    :host.mode-white {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--white);\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class BadgeComponent {\\n  /** Визуальный стиль бейджа: \'number\' отображает содержимое, \'dot\' показывает простую точку. */\\n  @Input() type: BadgeType = \'number\';\\n\\n  /** Цветовая схема бейджа, влияющая на его фон и цвет текста. */\\n  @Input() mode: BadgeMode = \'primary\';\\n\\n  /** Увеличивает размер бейджа. Применяется только при type=\'number\'. */\\n  @Input() large = false;\\n\\n  // Host bindings для типа\\n  @HostBinding(\'class.type-number\') get isNumber() { return this.type === \'number\'; }\\n  @HostBinding(\'class.type-dot\') get isDot() { return this.type === \'dot\'; }\\n\\n  // Host bindings для режимов\\n  @HostBinding(\'class.mode-primary\') get isPrimary() { return this.mode === \'primary\'; }\\n  @HostBinding(\'class.mode-critical\') get isCritical() { return this.mode === \'critical\'; }\\n  @HostBinding(\'class.mode-secondary\') get isSecondary() { return this.mode === \'secondary\'; }\\n  @HostBinding(\'class.mode-gray\') get isGray() { return this.mode === \'gray\'; }\\n  @HostBinding(\'class.mode-white\') get isWhite() { return this.mode === \'white\'; }\\n\\n  // Host binding для размера\\n  @HostBinding(\'class.large\') get isLarge() { return this.large && this.type === \'number\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      box-sizing: border-box;\\n      border-radius: 20px;\\n      overflow: hidden;\\n    }\\n\\n    /* Number type styles */\\n    :host.type-number {\\n      height: 20px;\\n      min-width: 20px;\\n      margin: 0 6px;\\n      padding: 0 5px;\\n    }\\n\\n    /* Large number badge */\\n    :host.type-number.large {\\n      height: 24px;\\n      padding: 0 6px;\\n      /* min-width не увеличиваем, оставляем 20px как в React */\\n    }\\n\\n    /* Dot type styles */\\n    :host.type-dot {\\n      display: inline-block;\\n      width: 6px;\\n      height: 6px;\\n      margin: 7px;\\n      border-radius: 50%;\\n    }\\n\\n    /* Цветовые режимы */\\n    :host.mode-primary {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--button_color);\\n    }\\n\\n    :host.mode-critical {\\n      color: var(--tgui--button_text_color);\\n      background: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host.mode-secondary {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    :host.mode-white {\\n      color: var(--tgui--link_color);\\n      background: var(--tgui--white);\\n    }\\n  \\n","extends":[],"accessors":{"isNumber":{"name":"isNumber","getSignature":{"name":"isNumber","type":"","returnType":"","line":113}},"isDot":{"name":"isDot","getSignature":{"name":"isDot","type":"","returnType":"","line":114}},"isPrimary":{"name":"isPrimary","getSignature":{"name":"isPrimary","type":"","returnType":"","line":117}},"isCritical":{"name":"isCritical","getSignature":{"name":"isCritical","type":"","returnType":"","line":118}},"isSecondary":{"name":"isSecondary","getSignature":{"name":"isSecondary","type":"","returnType":"","line":119}},"isGray":{"name":"isGray","getSignature":{"name":"isGray","type":"","returnType":"","line":120}},"isWhite":{"name":"isWhite","getSignature":{"name":"isWhite","type":"","returnType":"","line":121}},"isLarge":{"name":"isLarge","getSignature":{"name":"isLarge","type":"","returnType":"","line":124}}}},{"name":"BannerComponent","id":"component-BannerComponent-a2e67a0ea07ee2a3816e57e9086be5fe5cccd2a45857182e098273a1f134ccdd635c8d58424b33b7be36781a3fa767f07c9d16407a0ac9edb672747550a1c109","file":"projects/tgui/src/lib/components/blocks/banner/banner.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-banner","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n\\n    .wrapper {\\n      overflow: hidden;\\n      position: relative;\\n      display: flex;\\n      gap: 20px;\\n      padding: 16px 20px;\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base:not(.wrapper--withBackground) {\\n      box-shadow: var(--tgui--base--section--box_shadow);\\n    }\\n\\n    .wrapper--ios {\\n      border-radius: 16px;\\n    }\\n\\n    .wrapper--withBackground {\\n      padding: 20px;\\n    }\\n\\n    .wrapper--withBackground .title {\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--withBackground .subheader {\\n      opacity: .8;\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--inline {\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base.wrapper--inline {\\n      margin: 8px 20px;\\n      border-radius: 16px;\\n      border: 1px solid var(--tgui--outline);\\n      box-shadow: none;\\n    }\\n\\n    .wrapper--ios.wrapper--inline {\\n      margin: 8px 16px;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n\\n    .background {\\n      position: absolute;\\n      inset: 0;\\n    }\\n\\n    .middle {\\n      flex: 1 1 0;\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      z-index: var(--tgui--z-index--simple);\\n    }\\n\\n    .subheader {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .buttons {\\n      display: flex;\\n      gap: 4px;\\n      margin-top: 10px;\\n    }\\n\\n    .close {\\n      height: 28px;\\n      border-radius: 50%;\\n    }\\n  "],"template":"<section\\n  class=\\"wrapper\\"\\n  [class.wrapper--ios]=\\"platformService.isIOS()\\"\\n  [class.wrapper--base]=\\"!platformService.isIOS()\\"\\n  [class.wrapper--withBackground]=\\"hasBackgroundContent\\"\\n  [class.wrapper--inline]=\\"type() === \'inline\'\\"\\n>\\n  <div *ngIf=\\"hasBackgroundContent\\" class=\\"background\\">\\n    <ng-content select=\\"[content-slot=background]\\"></ng-content>\\n  </div>\\n\\n  <ng-content select=\\"[content-slot=before]\\"></ng-content>\\n\\n  <div class=\\"middle\\">\\n    <tgui-subheadline *ngIf=\\"hasCalloutContent\\" class=\\"subheader\\" level=\\"2\\">\\n      <ng-content select=\\"[content-slot=callout]\\"></ng-content>\\n    </tgui-subheadline>\\n\\n    <tgui-text *ngIf=\\"hasHeaderContent\\" class=\\"title\\" weight=\\"2\\">\\n      <ng-content select=\\"[content-slot=header]\\"></ng-content>\\n    </tgui-text>\\n\\n    <tgui-subheadline *ngIf=\\"hasSubheaderContent\\" class=\\"subheader\\" level=\\"2\\">\\n      <ng-content select=\\"[content-slot=subheader]\\"></ng-content>\\n    </tgui-subheadline>\\n\\n    <ng-container *ngIf=\\"hasDescriptionContent\\">\\n      <ng-container *ngIf=\\"platformService.isIOS(); else baseDescription\\">\\n        <tgui-caption class=\\"description\\" level=\\"1\\">\\n          <ng-content select=\\"[content-slot=description]\\"></ng-content>\\n        </tgui-caption>\\n      </ng-container>\\n      <ng-template #baseDescription>\\n        <tgui-subheadline class=\\"description\\" level=\\"2\\">\\n          <ng-content select=\\"[content-slot=description]\\"></ng-content>\\n        </tgui-subheadline>\\n      </ng-template>\\n    </ng-container>\\n\\n    <div *ngIf=\\"hasButtonsContent\\" class=\\"buttons\\">\\n      <ng-content select=\\"[content-slot=buttons]\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <tgui-tappable *ngIf=\\"onCloseIcon.observers?.length\\"\\n    (click)=\\"onCloseIcon.emit($event)\\"\\n    class=\\"close\\"\\n  >\\n    <tgui-dynamic-icon [icon]=\\"getCloseIconName()\\"></tgui-dynamic-icon>\\n  </tgui-tappable>\\n</section>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[{"name":"onCloseIcon","defaultValue":"new EventEmitter<MouseEvent>()","deprecated":false,"deprecationMessage":"","line":208,"type":"EventEmitter"}],"propertiesClass":[{"name":"_hasBackgroundContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":231,"modifierKind":[123]},{"name":"_hasBeforeContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":226,"modifierKind":[123]},{"name":"_hasButtonsContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":232,"modifierKind":[123]},{"name":"_hasCalloutContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":227,"modifierKind":[123]},{"name":"_hasDescriptionContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":230,"modifierKind":[123]},{"name":"_hasHeaderContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":228,"modifierKind":[123]},{"name":"_hasSubheaderContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":229,"modifierKind":[123]},{"name":"closeIcon","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The close icon to use. Can be overridden by input</p>\\n","line":221,"rawdescription":"\\nThe close icon to use. Can be overridden by input","modifierKind":[125]},{"name":"contentSlots","deprecated":false,"deprecationMessage":"","type":"QueryList<ContentSlotDirective>","indexKey":"","optional":false,"description":"","line":215,"decorators":[{"name":"ContentChildren","stringifiedArguments":"ContentSlotDirective"}],"modifierKind":[170]},{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":212,"modifierKind":[123]},{"name":"isIOS","defaultValue":"this.platformService.isIOS()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":223,"modifierKind":[125]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":211,"modifierKind":[124]},{"name":"type","defaultValue":"input<\'section\' | \'inline\'>(\'section\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Specifies the banner&#39;s layout style, which can affect its positioning and styling.</p>\\n","line":218,"rawdescription":"\\nSpecifies the banner\'s layout style, which can affect its positioning and styling.","modifierKind":[125]}],"methodsClass":[{"name":"getCloseIconName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":296,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetermines which close icon to use based on platform and background\\n","description":"<p>Determines which close icon to use based on platform and background</p>\\n"},{"name":"hasSlot","args":[{"name":"slotName","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":289,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if a slot exists in the content\\n","description":"<p>Check if a slot exists in the content</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"slotName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":264,"deprecated":false,"deprecationMessage":""},{"name":"updateContentFlags","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":276,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates content flags based on available slots\\n","description":"<p>Updates content flags based on available slots</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"},{"name":"TextComponent","type":"component"},{"name":"CaptionComponent","type":"component"},{"name":"TguiDynamicIconComponent","type":"component"},{"name":"ContentSlotDirective","type":"directive"}],"description":"<p>The <code>Banner</code> component renders a prominent graphical element, typically displayed at the top of a page or section,\\ndesigned to grab the user&#39;s attention and convey important information.\\nIt is a versatile tool used for various purposes such as branding, promotion, announcements, or navigation.</p>\\n<h2>Usage</h2>\\n<b>Example :</b><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;tgui-banner type=&quot;inline&quot; (onCloseIcon)=&quot;onCloseIcon($event)&quot;&gt;\\n  &lt;div content-slot=&quot;before&quot; class=&quot;...&quot;&gt;&lt;tgui-icon24-qr&gt;&lt;/tgui-icon24-qr&gt;&lt;/div&gt;\\n  &lt;div content-slot=&quot;callout&quot;&gt;Urgent notification&lt;/div&gt;\\n  &lt;div content-slot=&quot;header&quot;&gt;Introducing TON Space&lt;/div&gt;\\n  &lt;div content-slot=&quot;description&quot;&gt;Start exploring TON in a new, better way&lt;/div&gt;\\n  &lt;div content-slot=&quot;buttons&quot;&gt;\\n    &lt;tgui-button size=&quot;s&quot;&gt;Try it out&lt;/tgui-button&gt;\\n    &lt;tgui-button size=&quot;s&quot; mode=&quot;plain&quot;&gt;Maybe later&lt;/tgui-button&gt;\\n  &lt;/div&gt;\\n&lt;/tgui-banner&gt;</code></pre></div><h2>Content Slots</h2>\\n<p>The component accepts the following content slots:</p>\\n<ul>\\n<li><code>before</code>: Optional content displayed at the start of the banner, useful for icons</li>\\n<li><code>callout</code>: Optional callout text displayed above the header</li>\\n<li><code>header</code>: Main header/title of the banner</li>\\n<li><code>subheader</code>: Optional text displayed below the header</li>\\n<li><code>description</code>: Optional descriptive text</li>\\n<li><code>background</code>: Optional background content</li>\\n<li><code>buttons</code>: Optional action buttons</li>\\n</ul>\\n","rawdescription":"\\n\\nThe `Banner` component renders a prominent graphical element, typically displayed at the top of a page or section,\\ndesigned to grab the user\'s attention and convey important information.\\nIt is a versatile tool used for various purposes such as branding, promotion, announcements, or navigation.\\n\\n## Usage\\n\\n```html\\n<tgui-banner type=\\"inline\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n  <div content-slot=\\"before\\" class=\\"...\\"><tgui-icon24-qr></tgui-icon24-qr></div>\\n  <div content-slot=\\"callout\\">Urgent notification</div>\\n  <div content-slot=\\"header\\">Introducing TON Space</div>\\n  <div content-slot=\\"description\\">Start exploring TON in a new, better way</div>\\n  <div content-slot=\\"buttons\\">\\n    <tgui-button size=\\"s\\">Try it out</tgui-button>\\n    <tgui-button size=\\"s\\" mode=\\"plain\\">Maybe later</tgui-button>\\n  </div>\\n</tgui-banner>\\n```\\n\\n## Content Slots\\n\\nThe component accepts the following content slots:\\n\\n- `before`: Optional content displayed at the start of the banner, useful for icons\\n- `callout`: Optional callout text displayed above the header\\n- `header`: Main header/title of the banner\\n- `subheader`: Optional text displayed below the header\\n- `description`: Optional descriptive text\\n- `background`: Optional background content\\n- `buttons`: Optional action buttons\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  EventEmitter,\\n  inject,\\n  input,\\n  Output,\\n  ElementRef,\\n  AfterContentInit,\\n  ContentChildren,\\n  QueryList\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../services/platform.service\';\\nimport { TappableComponent } from \'../../utils/tappable/tappable.component\';\\nimport { SubheadlineComponent } from \'../../typography/subheadline/subheadline.component\';\\nimport { TextComponent } from \'../../typography/text/text.component\';\\nimport { CaptionComponent } from \'../../typography/caption/caption.component\';\\nimport { TguiDynamicIconComponent } from \'../../../icons/dynamic-icon.component\';\\nimport { ContentSlotDirective } from \'../../../directives/content-slot.directive\';\\n\\n/**\\n * The `Banner` component renders a prominent graphical element, typically displayed at the top of a page or section, \\n * designed to grab the user\'s attention and convey important information. \\n * It is a versatile tool used for various purposes such as branding, promotion, announcements, or navigation.\\n * \\n * ## Usage\\n * \\n * ```html\\n * <tgui-banner type=\\"inline\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n *   <div content-slot=\\"before\\" class=\\"...\\"><tgui-icon24-qr></tgui-icon24-qr></div>\\n *   <div content-slot=\\"callout\\">Urgent notification</div>\\n *   <div content-slot=\\"header\\">Introducing TON Space</div>\\n *   <div content-slot=\\"description\\">Start exploring TON in a new, better way</div>\\n *   <div content-slot=\\"buttons\\">\\n *     <tgui-button size=\\"s\\">Try it out</tgui-button>\\n *     <tgui-button size=\\"s\\" mode=\\"plain\\">Maybe later</tgui-button>\\n *   </div>\\n * </tgui-banner>\\n * ```\\n * \\n * ## Content Slots\\n * \\n * The component accepts the following content slots:\\n * \\n * - `before`: Optional content displayed at the start of the banner, useful for icons\\n * - `callout`: Optional callout text displayed above the header\\n * - `header`: Main header/title of the banner\\n * - `subheader`: Optional text displayed below the header\\n * - `description`: Optional descriptive text\\n * - `background`: Optional background content\\n * - `buttons`: Optional action buttons\\n */\\n@Component({\\n  selector: \'tgui-banner\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    TappableComponent,\\n    SubheadlineComponent,\\n    TextComponent,\\n    CaptionComponent,\\n    TguiDynamicIconComponent,\\n    ContentSlotDirective\\n  ],\\n  template: `\\n    <section \\n      class=\\"wrapper\\"\\n      [class.wrapper--ios]=\\"platformService.isIOS()\\"\\n      [class.wrapper--base]=\\"!platformService.isIOS()\\"\\n      [class.wrapper--withBackground]=\\"hasBackgroundContent\\"\\n      [class.wrapper--inline]=\\"type() === \'inline\'\\"\\n    >\\n      <div *ngIf=\\"hasBackgroundContent\\" class=\\"background\\">\\n        <ng-content select=\\"[content-slot=background]\\"></ng-content>\\n      </div>\\n\\n      <ng-content select=\\"[content-slot=before]\\"></ng-content>\\n\\n      <div class=\\"middle\\">\\n        <tgui-subheadline *ngIf=\\"hasCalloutContent\\" class=\\"subheader\\" level=\\"2\\">\\n          <ng-content select=\\"[content-slot=callout]\\"></ng-content>\\n        </tgui-subheadline>\\n\\n        <tgui-text *ngIf=\\"hasHeaderContent\\" class=\\"title\\" weight=\\"2\\">\\n          <ng-content select=\\"[content-slot=header]\\"></ng-content>\\n        </tgui-text>\\n\\n        <tgui-subheadline *ngIf=\\"hasSubheaderContent\\" class=\\"subheader\\" level=\\"2\\">\\n          <ng-content select=\\"[content-slot=subheader]\\"></ng-content>\\n        </tgui-subheadline>\\n\\n        <ng-container *ngIf=\\"hasDescriptionContent\\">\\n          <ng-container *ngIf=\\"platformService.isIOS(); else baseDescription\\">\\n            <tgui-caption class=\\"description\\" level=\\"1\\">\\n              <ng-content select=\\"[content-slot=description]\\"></ng-content>\\n            </tgui-caption>\\n          </ng-container>\\n          <ng-template #baseDescription>\\n            <tgui-subheadline class=\\"description\\" level=\\"2\\">\\n              <ng-content select=\\"[content-slot=description]\\"></ng-content>\\n            </tgui-subheadline>\\n          </ng-template>\\n        </ng-container>\\n\\n        <div *ngIf=\\"hasButtonsContent\\" class=\\"buttons\\">\\n          <ng-content select=\\"[content-slot=buttons]\\"></ng-content>\\n        </div>\\n      </div>\\n\\n      <tgui-tappable *ngIf=\\"onCloseIcon.observers?.length\\" \\n        (click)=\\"onCloseIcon.emit($event)\\" \\n        class=\\"close\\"\\n      >\\n        <tgui-dynamic-icon [icon]=\\"getCloseIconName()\\"></tgui-dynamic-icon>\\n      </tgui-tappable>\\n    </section>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n\\n    .wrapper {\\n      overflow: hidden;\\n      position: relative;\\n      display: flex;\\n      gap: 20px;\\n      padding: 16px 20px;\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base:not(.wrapper--withBackground) {\\n      box-shadow: var(--tgui--base--section--box_shadow);\\n    }\\n\\n    .wrapper--ios {\\n      border-radius: 16px;\\n    }\\n\\n    .wrapper--withBackground {\\n      padding: 20px;\\n    }\\n\\n    .wrapper--withBackground .title {\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--withBackground .subheader {\\n      opacity: .8;\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--inline {\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base.wrapper--inline {\\n      margin: 8px 20px;\\n      border-radius: 16px;\\n      border: 1px solid var(--tgui--outline);\\n      box-shadow: none;\\n    }\\n\\n    .wrapper--ios.wrapper--inline {\\n      margin: 8px 16px;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n\\n    .background {\\n      position: absolute;\\n      inset: 0;\\n    }\\n\\n    .middle {\\n      flex: 1 1 0;\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      z-index: var(--tgui--z-index--simple);\\n    }\\n\\n    .subheader {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .buttons {\\n      display: flex;\\n      gap: 4px;\\n      margin-top: 10px;\\n    }\\n\\n    .close {\\n      height: 28px;\\n      border-radius: 50%;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class BannerComponent implements AfterContentInit {\\n  // Event emitter for close icon clicks\\n  @Output() onCloseIcon = new EventEmitter<MouseEvent>();\\n\\n  // Service injections\\n  protected platformService = inject(PlatformService);\\n  private elementRef = inject(ElementRef);\\n  \\n  // Query for content slot directives\\n  @ContentChildren(ContentSlotDirective) contentSlots!: QueryList<ContentSlotDirective>;\\n  \\n  /** Specifies the banner\'s layout style, which can affect its positioning and styling. */\\n  public type = input<\'section\' | \'inline\'>(\'section\');\\n  \\n  /** The close icon to use. Can be overridden by input */\\n  public closeIcon = input<string | undefined>(undefined);\\n\\n  public isIOS = this.platformService.isIOS();\\n\\n  // Properties to track content presence\\n  private _hasBeforeContent = false;\\n  private _hasCalloutContent = false;\\n  private _hasHeaderContent = false;\\n  private _hasSubheaderContent = false;\\n  private _hasDescriptionContent = false;\\n  private _hasBackgroundContent = false;\\n  private _hasButtonsContent = false;\\n\\n  // Getters for content presence\\n  get hasBeforeContent(): boolean {\\n    return this._hasBeforeContent;\\n  }\\n\\n  get hasCalloutContent(): boolean {\\n    return this._hasCalloutContent;\\n  }\\n\\n  get hasHeaderContent(): boolean {\\n    return this._hasHeaderContent;\\n  }\\n\\n  get hasSubheaderContent(): boolean {\\n    return this._hasSubheaderContent;\\n  }\\n\\n  get hasDescriptionContent(): boolean {\\n    return this._hasDescriptionContent;\\n  }\\n\\n  get hasBackgroundContent(): boolean {\\n    return this._hasBackgroundContent;\\n  }\\n\\n  get hasButtonsContent(): boolean {\\n    return this._hasButtonsContent;\\n  }\\n\\n  // Check for content after view initialization\\n  ngAfterContentInit(): void {\\n    this.updateContentFlags();\\n    \\n    // Listen for changes to content slots\\n    this.contentSlots.changes.subscribe(() => {\\n      this.updateContentFlags();\\n    });\\n  }\\n  \\n  /**\\n   * Updates content flags based on available slots\\n   */\\n  private updateContentFlags(): void {\\n    this._hasBeforeContent = this.hasSlot(\'before\');\\n    this._hasCalloutContent = this.hasSlot(\'callout\');\\n    this._hasHeaderContent = this.hasSlot(\'header\');\\n    this._hasSubheaderContent = this.hasSlot(\'subheader\');\\n    this._hasDescriptionContent = this.hasSlot(\'description\');\\n    this._hasBackgroundContent = this.hasSlot(\'background\');\\n    this._hasButtonsContent = this.hasSlot(\'buttons\');\\n  }\\n\\n  /**\\n   * Check if a slot exists in the content\\n   */\\n  private hasSlot(slotName: string): boolean {\\n    return this.contentSlots.some(slot => slot.slotName === slotName);\\n  }\\n\\n  /**\\n   * Determines which close icon to use based on platform and background\\n   */\\n  getCloseIconName(): string {\\n    // If user provided a specific icon, use that\\n    if (this.closeIcon()) {\\n      return this.closeIcon()!;\\n    }\\n    \\n    // Otherwise select icon based on platform and background\\n    if (this.hasBackgroundContent) {\\n      return \'tgui-icon28-close-ambient\';\\n    }\\n    \\n    return this.platformService.isIOS() ? \'tgui-icon24-cancel\' : \'tgui-icon28-close\';\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n\\n    .wrapper {\\n      overflow: hidden;\\n      position: relative;\\n      display: flex;\\n      gap: 20px;\\n      padding: 16px 20px;\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base:not(.wrapper--withBackground) {\\n      box-shadow: var(--tgui--base--section--box_shadow);\\n    }\\n\\n    .wrapper--ios {\\n      border-radius: 16px;\\n    }\\n\\n    .wrapper--withBackground {\\n      padding: 20px;\\n    }\\n\\n    .wrapper--withBackground .title {\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--withBackground .subheader {\\n      opacity: .8;\\n      color: var(--tgui--white);\\n    }\\n\\n    .wrapper--inline {\\n      background: var(--tgui--bg_color);\\n    }\\n\\n    .wrapper--base.wrapper--inline {\\n      margin: 8px 20px;\\n      border-radius: 16px;\\n      border: 1px solid var(--tgui--outline);\\n      box-shadow: none;\\n    }\\n\\n    .wrapper--ios.wrapper--inline {\\n      margin: 8px 16px;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n\\n    .background {\\n      position: absolute;\\n      inset: 0;\\n    }\\n\\n    .middle {\\n      flex: 1 1 0;\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      z-index: var(--tgui--z-index--simple);\\n    }\\n\\n    .subheader {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .buttons {\\n      display: flex;\\n      gap: 4px;\\n      margin-top: 10px;\\n    }\\n\\n    .close {\\n      height: 28px;\\n      border-radius: 50%;\\n    }\\n  \\n","extends":[],"implements":["AfterContentInit"],"accessors":{"hasBeforeContent":{"name":"hasBeforeContent","getSignature":{"name":"hasBeforeContent","type":"boolean","returnType":"boolean","line":235}},"hasCalloutContent":{"name":"hasCalloutContent","getSignature":{"name":"hasCalloutContent","type":"boolean","returnType":"boolean","line":239}},"hasHeaderContent":{"name":"hasHeaderContent","getSignature":{"name":"hasHeaderContent","type":"boolean","returnType":"boolean","line":243}},"hasSubheaderContent":{"name":"hasSubheaderContent","getSignature":{"name":"hasSubheaderContent","type":"boolean","returnType":"boolean","line":247}},"hasDescriptionContent":{"name":"hasDescriptionContent","getSignature":{"name":"hasDescriptionContent","type":"boolean","returnType":"boolean","line":251}},"hasBackgroundContent":{"name":"hasBackgroundContent","getSignature":{"name":"hasBackgroundContent","type":"boolean","returnType":"boolean","line":255}},"hasButtonsContent":{"name":"hasButtonsContent","getSignature":{"name":"hasButtonsContent","type":"boolean","returnType":"boolean","line":259}}}},{"name":"BaseSpinnerComponent","id":"component-BaseSpinnerComponent-3abcb1423ffb77296ca88d5a742d0ba3662bc6dc36626b353caa7cd6b0bd7bf5b8b9ae990ea6b2e61c741dc85fd04907f7c1a8ba7bddfb2247fe9eeffc7ea85a","file":"projects/tgui/src/lib/components/feedback/spinner/components/base-spinner/base-spinner.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-base-spinner","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    .spinner-path {\\n      stroke-linecap: round;\\n      animation: spinner-dash 1.4s ease-in-out infinite;\\n    }\\n    \\n    @keyframes spinner-dash {\\n      0% {\\n        stroke-dasharray: 1, 150;\\n        stroke-dashoffset: 0;\\n      }\\n      50% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -35;\\n      }\\n      100% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -124;\\n      }\\n    }\\n  "],"template":"<ng-container [ngSwitch]=\\"size()\\">\\n  <svg *ngSwitchCase=\\"\'l\'\\" width=\\"44\\" height=\\"44\\" viewBox=\\"0 0 44 44\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <circle class=\\"spinner-path\\" cx=\\"22\\" cy=\\"22\\" r=\\"20\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n    <animateTransform\\n      attributeName=\\"transform\\"\\n      attributeType=\\"XML\\"\\n      type=\\"rotate\\"\\n      from=\\"0 22 22\\"\\n      to=\\"360 22 22\\"\\n      dur=\\"0.7s\\"\\n      repeatCount=\\"indefinite\\"\\n    />\\n  </svg>\\n  <svg *ngSwitchCase=\\"\'m\'\\" width=\\"36\\" height=\\"36\\" viewBox=\\"0 0 36 36\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <circle class=\\"spinner-path\\" cx=\\"18\\" cy=\\"18\\" r=\\"16\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n    <animateTransform\\n      attributeName=\\"transform\\"\\n      attributeType=\\"XML\\"\\n      type=\\"rotate\\"\\n      from=\\"0 18 18\\"\\n      to=\\"360 18 18\\"\\n      dur=\\"0.7s\\"\\n      repeatCount=\\"indefinite\\"\\n    />\\n  </svg>\\n  <svg *ngSwitchDefault width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <circle class=\\"spinner-path\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n    <animateTransform\\n      attributeName=\\"transform\\"\\n      attributeType=\\"XML\\"\\n      type=\\"rotate\\"\\n      from=\\"0 12 12\\"\\n      to=\\"360 12 12\\"\\n      dur=\\"0.7s\\"\\n      repeatCount=\\"indefinite\\"\\n    />\\n  </svg>\\n</ng-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"size","defaultValue":"input<\'s\' | \'m\' | \'l\'>(\'s\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":84}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  input,\\n  computed\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n@Component({\\n  selector: \'tgui-base-spinner\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-container [ngSwitch]=\\"size()\\">\\n      <svg *ngSwitchCase=\\"\'l\'\\" width=\\"44\\" height=\\"44\\" viewBox=\\"0 0 44 44\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <circle class=\\"spinner-path\\" cx=\\"22\\" cy=\\"22\\" r=\\"20\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n        <animateTransform\\n          attributeName=\\"transform\\"\\n          attributeType=\\"XML\\"\\n          type=\\"rotate\\"\\n          from=\\"0 22 22\\"\\n          to=\\"360 22 22\\"\\n          dur=\\"0.7s\\"\\n          repeatCount=\\"indefinite\\"\\n        />\\n      </svg>\\n      <svg *ngSwitchCase=\\"\'m\'\\" width=\\"36\\" height=\\"36\\" viewBox=\\"0 0 36 36\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <circle class=\\"spinner-path\\" cx=\\"18\\" cy=\\"18\\" r=\\"16\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n        <animateTransform\\n          attributeName=\\"transform\\"\\n          attributeType=\\"XML\\"\\n          type=\\"rotate\\"\\n          from=\\"0 18 18\\"\\n          to=\\"360 18 18\\"\\n          dur=\\"0.7s\\"\\n          repeatCount=\\"indefinite\\"\\n        />\\n      </svg>\\n      <svg *ngSwitchDefault width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <circle class=\\"spinner-path\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\" fill=\\"none\\"/>\\n        <animateTransform\\n          attributeName=\\"transform\\"\\n          attributeType=\\"XML\\"\\n          type=\\"rotate\\"\\n          from=\\"0 12 12\\"\\n          to=\\"360 12 12\\"\\n          dur=\\"0.7s\\"\\n          repeatCount=\\"indefinite\\"\\n        />\\n      </svg>\\n    </ng-container>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    .spinner-path {\\n      stroke-linecap: round;\\n      animation: spinner-dash 1.4s ease-in-out infinite;\\n    }\\n    \\n    @keyframes spinner-dash {\\n      0% {\\n        stroke-dasharray: 1, 150;\\n        stroke-dashoffset: 0;\\n      }\\n      50% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -35;\\n      }\\n      100% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -124;\\n      }\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class BaseSpinnerComponent {\\n  size = input<\'s\' | \'m\' | \'l\'>(\'s\');\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    .spinner-path {\\n      stroke-linecap: round;\\n      animation: spinner-dash 1.4s ease-in-out infinite;\\n    }\\n    \\n    @keyframes spinner-dash {\\n      0% {\\n        stroke-dasharray: 1, 150;\\n        stroke-dashoffset: 0;\\n      }\\n      50% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -35;\\n      }\\n      100% {\\n        stroke-dasharray: 90, 150;\\n        stroke-dashoffset: -124;\\n      }\\n    }\\n  \\n","extends":[]},{"name":"BlockquoteComponent","id":"component-BlockquoteComponent-bd8e0a5019715356f7ef345c9145264019f2eb52de9fa9933c6fb09cdb45b75f6cdf3816a157b8efd0b1e264bdd6ff6982380096037491466a647f05042d45fb","file":"projects/tgui/src/lib/components/blocks/blockquote/blockquote.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-blockquote","styleUrls":[],"styles":["\\n    :host {\\n      position: relative;\\n      padding: 6px 28px 8px 12px;\\n      display: block;\\n      border-left: 3px solid var(--tgui--link_color);\\n      border-radius: 4px;\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    .top-right-icon {\\n      position: absolute;\\n      top: 4px;\\n      right: 6px;\\n      display: block;\\n    }\\n  "],"template":"\x3c!-- Text displayed as subheadline if provided --\x3e\\n<tgui-subheadline *ngIf=\\"text()\\">\\n  {{ text() }}\\n</tgui-subheadline>\\n\\n\x3c!-- Main content --\x3e\\n<ng-content></ng-content>\\n\\n\x3c!-- Icon --\x3e\\n<tgui-icon-container class=\\"top-right-icon\\">\\n  <tgui-dynamic-icon [icon]=\\"icon()\\"></tgui-dynamic-icon>\\n</tgui-icon-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"icon","defaultValue":"input<string>(\'quote\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The icon to display in the top right corner. Default is &quot;quote&quot;.</p>\\n","line":77,"rawdescription":"\\nThe icon to display in the top right corner. Default is \\"quote\\"."},{"name":"text","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Optional text to display as a headline above the content.</p>\\n","line":80,"rawdescription":"\\nOptional text to display as a headline above the content."}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"IconContainerComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"},{"name":"TguiDynamicIconComponent","type":"component"}],"description":"<p>Renders a stylized blockquote element, typically used for quotations or special text.\\nThe component can display a text in the subheadline and content below it.\\nThe component can include a customizable icon in the top right corner.</p>\\n<h2>Usage</h2>\\n<b>Example :</b><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;tgui-blockquote icon=&quot;quote&quot; text=&quot;Optional headline text&quot;&gt;\\n  Content of the blockquote\\n&lt;/tgui-blockquote&gt;</code></pre></div><h3>Properties</h3>\\n<ul>\\n<li><p><code>icon</code>: Optional input to specify which icon to display in the top-right corner.\\nDefault is &quot;quote&quot; icon. Uses the dynamic icon component.</p>\\n</li>\\n<li><p><code>text</code>: Optional text to be displayed as a headline above the content.\\nIf provided, it will be wrapped in the subheadline component.</p>\\n</li>\\n</ul>\\n","rawdescription":"\\n\\nRenders a stylized blockquote element, typically used for quotations or special text.\\nThe component can display a text in the subheadline and content below it.\\nThe component can include a customizable icon in the top right corner.\\n\\n## Usage\\n\\n```html\\n<tgui-blockquote icon=\\"quote\\" text=\\"Optional headline text\\">\\n  Content of the blockquote\\n</tgui-blockquote>\\n```\\n\\n### Properties\\n\\n- `icon`: Optional input to specify which icon to display in the top-right corner.\\n  Default is \\"quote\\" icon. Uses the dynamic icon component.\\n\\n- `text`: Optional text to be displayed as a headline above the content.\\n  If provided, it will be wrapped in the subheadline component.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  input,\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { IconContainerComponent } from \'../icon-container/icon-container.component\';\\nimport { SubheadlineComponent } from \'../../typography/subheadline/subheadline.component\';\\nimport { TguiDynamicIconComponent } from \'../../../icons/dynamic-icon.component\';\\n/**\\n * Renders a stylized blockquote element, typically used for quotations or special text.\\n * The component can display a text in the subheadline and content below it.\\n * The component can include a customizable icon in the top right corner.\\n * \\n * ## Usage\\n * \\n * ```html\\n * <tgui-blockquote icon=\\"quote\\" text=\\"Optional headline text\\">\\n *   Content of the blockquote\\n * </tgui-blockquote>\\n * ```\\n * \\n * ### Properties\\n * \\n * - `icon`: Optional input to specify which icon to display in the top-right corner.\\n *   Default is \\"quote\\" icon. Uses the dynamic icon component.\\n *   \\n * - `text`: Optional text to be displayed as a headline above the content.\\n *   If provided, it will be wrapped in the subheadline component.\\n */\\n@Component({\\n  selector: \'tgui-blockquote\',\\n  standalone: true,\\n  imports: [\\n    CommonModule, \\n    IconContainerComponent, \\n    SubheadlineComponent,\\n    TguiDynamicIconComponent\\n  ],\\n  template: `\\n    \x3c!-- Text displayed as subheadline if provided --\x3e\\n    <tgui-subheadline *ngIf=\\"text()\\">\\n      {{ text() }}\\n    </tgui-subheadline>\\n    \\n    \x3c!-- Main content --\x3e\\n    <ng-content></ng-content>\\n    \\n    \x3c!-- Icon --\x3e\\n    <tgui-icon-container class=\\"top-right-icon\\">\\n      <tgui-dynamic-icon [icon]=\\"icon()\\"></tgui-dynamic-icon>\\n    </tgui-icon-container>\\n  `,\\n  styles: [`\\n    :host {\\n      position: relative;\\n      padding: 6px 28px 8px 12px;\\n      display: block;\\n      border-left: 3px solid var(--tgui--link_color);\\n      border-radius: 4px;\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    .top-right-icon {\\n      position: absolute;\\n      top: 4px;\\n      right: 6px;\\n      display: block;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class BlockquoteComponent {\\n  /** The icon to display in the top right corner. Default is \\"quote\\". */\\n  icon = input<string>(\'quote\');\\n  \\n  /** Optional text to display as a headline above the content. */\\n  text = input<string | undefined>(undefined);\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: relative;\\n      padding: 6px 28px 8px 12px;\\n      display: block;\\n      border-left: 3px solid var(--tgui--link_color);\\n      border-radius: 4px;\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    .top-right-icon {\\n      position: absolute;\\n      top: 4px;\\n      right: 6px;\\n      display: block;\\n    }\\n  \\n","extends":[]},{"name":"ButtonCellComponent","id":"component-ButtonCellComponent-a0ac14a0426b2b0694dfe2f2e83c30fe3fceea3e7441c4838a4f7d30fae93092536167e6af0804dc177de6871bb7b1a46fddb8c7b6ec36431b0e5cafd9231c47","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/button-cell.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-button-cell","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n      position: relative;\\n      box-sizing: border-box;\\n      -webkit-tap-highlight-color: transparent;\\n    }\\n\\n    :host.button-cell-destructive {\\n        color: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) {\\n      --tgui--ripple-color: rgba(0, 0, 0, 0.2);\\n    }\\n\\n    .wrapper {\\n      width: 100%;\\n      display: flex;\\n      align-items: center;\\n      \\n\\n        gap: 24px;\\n        height: 48px;\\n        padding: 10px 24px;\\n        box-sizing: border-box;\\n\\n        color: var(--tgui--link_color);\\n        border: none;\\n        background: transparent;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .wrapper {\\n        gap: 18px;\\n  height: 44px;\\n  padding: 8px 18px;\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n    }\\n  "],"template":"<tgui-tappable\\n  [disabled]=\\"disabled()\\"\\n  [interactiveAnimation]=\\"\'background\'\\"\\n  class=\\"wrapper\\"\\n>\\n  <ng-content select=\\"[content-slot=\'before\']\\"></ng-content>\\n\\n  <ng-container *ngIf=\\"platformService.isIOS(); else androidContent\\">\\n    <tgui-text>\\n      <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n    </tgui-text>\\n  </ng-container>\\n  <ng-template #androidContent>\\n    <tgui-subheadline>\\n      <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n    </tgui-subheadline>\\n  </ng-template>\\n\\n  <ng-content select=\\"[content-slot=\'after\']\\"></ng-content>\\n</tgui-tappable>\\n\\n\x3c!-- Template for main content --\x3e\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Disables button interaction</p>\\n","line":112,"rawdescription":"\\nDisables button interaction","required":false}],"outputsClass":[],"propertiesClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Disables button interaction</p>\\n","line":112,"rawdescription":"\\nDisables button interaction","required":false},{"name":"mode","defaultValue":"input<\'default\' | \'destructive\'>(\'default\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Determines the button cell&#39;s visual theme, influencing color and style.</p>\\n","line":109,"rawdescription":"\\nDetermines the button cell\'s visual theme, influencing color and style."},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Inject the platform service</p>\\n","line":115,"rawdescription":"\\nInject the platform service","modifierKind":[124]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.button-cell-destructive","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApply destructive mode class","description":"<p>Apply destructive mode class</p>\\n","line":119,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"},{"name":"TextComponent","type":"component"},{"name":"ContentSlotDirective","type":"directive"}],"description":"<p>Renders an interactive cell component with optional leading and trailing elements.\\nDesigned to be flexible, supporting various content structures and interaction models within UI designs.</p>\\n","rawdescription":"\\n\\nRenders an interactive cell component with optional leading and trailing elements.\\nDesigned to be flexible, supporting various content structures and interaction models within UI designs.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  HostBinding,\\n  ElementRef,\\n  inject,\\n  ContentChild,\\n  TemplateRef,\\n  computed,\\n  input\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TappableComponent } from \'../../../../utils/tappable/tappable.component\';\\nimport { SubheadlineComponent } from \'../../../../typography/subheadline/subheadline.component\';\\nimport { TextComponent } from \'../../../../typography/text/text.component\';\\nimport { PlatformService } from \'../../../../../services/platform.service\';\\nimport { ContentSlotDirective } from \'../../../../../directives/content-slot.directive\';\\n\\n/**\\n * Renders an interactive cell component with optional leading and trailing elements.\\n * Designed to be flexible, supporting various content structures and interaction models within UI designs.\\n */\\n@Component({\\n  selector: \'tgui-button-cell\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    TappableComponent,\\n    SubheadlineComponent,\\n    TextComponent,\\n    ContentSlotDirective\\n  ],\\n  template: `\\n    <tgui-tappable\\n      [disabled]=\\"disabled()\\"\\n      [interactiveAnimation]=\\"\'background\'\\"\\n      class=\\"wrapper\\"\\n    >\\n      <ng-content select=\\"[content-slot=\'before\']\\"></ng-content>\\n\\n      <ng-container *ngIf=\\"platformService.isIOS(); else androidContent\\">\\n        <tgui-text>\\n          <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n        </tgui-text>\\n      </ng-container>\\n      <ng-template #androidContent>\\n        <tgui-subheadline>\\n          <ng-container *ngTemplateOutlet=\\"contentTemplate\\"></ng-container>\\n        </tgui-subheadline>\\n      </ng-template>\\n\\n      <ng-content select=\\"[content-slot=\'after\']\\"></ng-content>\\n    </tgui-tappable>\\n\\n    \x3c!-- Template for main content --\x3e\\n    <ng-template #contentTemplate>\\n      <ng-content></ng-content>\\n    </ng-template>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n      box-sizing: border-box;\\n      -webkit-tap-highlight-color: transparent;\\n    }\\n\\n    :host.button-cell-destructive {\\n        color: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) {\\n      --tgui--ripple-color: rgba(0, 0, 0, 0.2);\\n    }\\n\\n    .wrapper {\\n      width: 100%;\\n      display: flex;\\n      align-items: center;\\n      \\n\\n        gap: 24px;\\n        height: 48px;\\n        padding: 10px 24px;\\n        box-sizing: border-box;\\n\\n        color: var(--tgui--link_color);\\n        border: none;\\n        background: transparent;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .wrapper {\\n        gap: 18px;\\n  height: 44px;\\n  padding: 8px 18px;\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class ButtonCellComponent {\\n  /** Determines the button cell\'s visual theme, influencing color and style. */\\n  mode = input<\'default\' | \'destructive\'>(\'default\');\\n  \\n  /** Disables button interaction */\\n  disabled = input<boolean>(false);\\n\\n  /** Inject the platform service */\\n  protected platformService = inject(PlatformService);\\n\\n  /** Apply destructive mode class */\\n  @HostBinding(\'class.button-cell-destructive\')\\n  get isDestructive(): boolean {\\n    return this.mode() === \'destructive\';\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n      position: relative;\\n      box-sizing: border-box;\\n      -webkit-tap-highlight-color: transparent;\\n    }\\n\\n    :host.button-cell-destructive {\\n        color: var(--tgui--destructive_text_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) {\\n      --tgui--ripple-color: rgba(0, 0, 0, 0.2);\\n    }\\n\\n    .wrapper {\\n      width: 100%;\\n      display: flex;\\n      align-items: center;\\n      \\n\\n        gap: 24px;\\n        height: 48px;\\n        padding: 10px 24px;\\n        box-sizing: border-box;\\n\\n        color: var(--tgui--link_color);\\n        border: none;\\n        background: transparent;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .wrapper {\\n        gap: 18px;\\n  height: 44px;\\n  padding: 8px 18px;\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n    }\\n  \\n","extends":[],"accessors":{"isDestructive":{"name":"isDestructive","getSignature":{"name":"isDestructive","type":"boolean","returnType":"boolean","line":119,"rawdescription":"\\nApply destructive mode class","description":"<p>Apply destructive mode class</p>\\n"}}}},{"name":"ButtonComponent","id":"component-ButtonComponent-a4d04330993ae0facce0faaaf41088c622c0a0fba005f127dc3a524bc3b88985cdd3c5a592a364220530a7d286216c75be08772dc33fd7c6d8817bcabb5e89fc","file":"projects/tgui/src/lib/components/blocks/button/button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-button","styleUrls":[],"styles":["\\n      :host {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        border: none;\\n        border-radius: 8px;\\n        text-decoration: none;\\n        box-sizing: border-box;\\n        max-inline-size: 100%;\\n        min-inline-size: 80px;\\n        position: relative;\\n        cursor: pointer;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        user-select: none;\\n        -webkit-tap-highlight-color: transparent;\\n        touch-action: manipulation; /* Optimization for mobile devices */\\n      }\\n  \\n      :host.stretched {\\n        inline-size: 100%;\\n        flex-grow: 1;\\n      }\\n  \\n      :host::after {\\n        content: \'\';\\n        position: absolute;\\n        inset: 0;\\n        opacity: 0;\\n        transition: opacity .15s ease-out;\\n        background: var(--tgui--bg_color);\\n        border-radius: inherit;\\n        pointer-events: none;\\n\\n      }\\n  \\n      .button-tappable {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        width: 100%;\\n        height: 100%;\\n        border-radius: inherit;\\n      }\\n  \\n      /* Wrapper for all button content */\\n      .button-content-wrapper {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        gap: inherit; /* Inherit gap from host element */\\n        position: relative;\\n        z-index: 1;\\n        width: 100%;\\n        height: 100%;\\n        padding: var(--tgui--button--padding, 0);\\n        box-sizing: border-box;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .before,\\n      .after {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        position: relative;\\n        z-index: 1;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .content {\\n        white-space: nowrap;\\n        text-overflow: ellipsis;\\n        overflow: hidden;\\n        z-index: var(--tgui--z-index--simple);\\n        position: relative; /* To be above ripple */\\n        user-select: none;\\n        -webkit-user-select: none;\\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\\n      }\\n  \\n      .spinner {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: auto;\\n        background: inherit;\\n        border-radius: inherit;\\n        color: var(--tgui--button--spinner-color);\\n        z-index: 2; /* Raised above content */\\n      }\\n  \\n      /* Size Variants */\\n      :host.size-s {\\n        height: 36px;\\n        min-width: 34px;\\n        gap: 6px;\\n        border-radius: 20px;\\n        --tgui--button--padding: 8px 12px;\\n      }\\n  \\n      :host.size-m {\\n        height: 42px;\\n        min-width: 42px;\\n        gap: 8px;\\n        border-radius: 8px;\\n        --tgui--button--padding: 8px 14px;\\n      }\\n  \\n      :host.size-l {\\n        height: 50px;\\n        gap: 10px;\\n        --tgui--button--padding: 10px 20px;\\n      }\\n  \\n      /* Mode Variants */\\n      :host.mode-filled {\\n        --tgui--button--hovered-opacity: .15;\\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\\n        color: var(--tgui--button_text_color);\\n        background: var(--tgui--button_color);\\n      }\\n  \\n      :host.mode-bezeled {\\n        --tgui--button--hovered-opacity: .07;\\n        --tgui--button--spinner-color: var(--tgui--link_color);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: var(--tgui--secondary_fill);\\n      }\\n  \\n      :host.mode-plain {\\n        --tgui--button--hovered-opacity: .03;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: transparent;\\n      }\\n  \\n      :host.mode-gray {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\\n        color: var(--tgui--plain_foreground);\\n        background: var(--tgui--plain_background);\\n      }\\n  \\n      :host.mode-outline {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        color: var(--tgui--plain_foreground);\\n        background: inherit;\\n        box-shadow: 0 0 0 1px var(--tgui--outline);\\n      }\\n  \\n      :host.mode-white {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        background: var(--tgui--white);\\n        color: var(--tgui--black);\\n      }\\n  \\n      /* Platform Specific */\\n      :host-context(.tgui-platform-ios) :host.size-m {\\n        border-radius: 12px;\\n      }\\n  \\n      :host-context(.tgui-platform-ios) :host::after {\\n        content: unset;\\n      }\\n  \\n      /* Loading State */\\n      :host.loading .before,\\n      :host.loading .after,\\n      :host.loading .content {\\n        opacity: 0;\\n      }\\n  \\n      /* Disabled State */\\n      :host.disabled {\\n        opacity: 0.6;\\n        cursor: default;\\n        pointer-events: none;\\n      }\\n  \\n      /* Hover Effects */\\n      @media (hover: hover) and (pointer: fine) {\\n        :host:hover::after {\\n          opacity: var(--tgui--button--hovered-opacity);\\n        }\\n      }\\n  \\n      /* Button Typography Sizing */\\n      :host.size-l .content {\\n        font-size: var(--tgui--text--font_size);\\n        line-height: var(--tgui--text--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n  \\n      :host.size-m .content,\\n      :host.size-s .content {\\n        font-size: var(--tgui--subheadline2--font_size);\\n        line-height: var(--tgui--subheadline2--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n    "],"template":"<tgui-tappable\\n  [interactiveAnimation]=\\"interactiveAnimation\\"\\n  [readonly]=\\"loading\\"\\n  [disabled]=\\"disabled\\"\\n  class=\\"button-tappable\\"\\n>\\n  \x3c!-- Spinner is absolutely positioned over the content --\x3e\\n  <div *ngIf=\\"loading\\" class=\\"spinner\\">\\n    <tgui-spinner size=\\"s\\"></tgui-spinner>\\n  </div>\\n\\n  \x3c!-- Button content in wrapper for correct positioning --\x3e\\n  <div class=\\"button-content-wrapper\\">\\n    <ng-content select=\\"[tguiButtonBefore]\\"></ng-content>\\n    <div *ngIf=\\"beforeTemplate\\" class=\\"before\\">\\n      <ng-container *ngTemplateOutlet=\\"beforeTemplate\\"></ng-container>\\n    </div>\\n\\n    <div class=\\"content\\">\\n      <ng-content></ng-content>\\n    </div>\\n\\n    <ng-content select=\\"[tguiButtonAfter]\\"></ng-content>\\n    <div *ngIf=\\"afterTemplate\\" class=\\"after\\">\\n      <ng-container *ngTemplateOutlet=\\"afterTemplate\\"></ng-container>\\n    </div>\\n  </div>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIf true, the button will be disabled\\n","description":"<p>If true, the button will be disabled</p>\\n","line":305,"type":"boolean","decorators":[]},{"name":"interactiveAnimation","defaultValue":"\'background\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nType of interactive animation (\'opacity\' | \'background\')\\n","description":"<p>Type of interactive animation (&#39;opacity&#39; | &#39;background&#39;)</p>\\n","line":315,"type":"\\"opacity\\" | \\"background\\"","decorators":[]},{"name":"loading","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIf true, shows a loading indicator instead of button content\\n","description":"<p>If true, shows a loading indicator instead of button content</p>\\n","line":300,"type":"boolean","decorators":[]},{"name":"mode","defaultValue":"\'filled\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nVisual style of the button\\n","description":"<p>Visual style of the button</p>\\n","line":290,"type":"\\"filled\\" | \\"bezeled\\" | \\"plain\\" | \\"gray\\" | \\"outline\\" | \\"white\\"","decorators":[]},{"name":"size","defaultValue":"\'m\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nButton size (\'s\', \'m\', \'l\')\\n","description":"<p>Button size (&#39;s&#39;, &#39;m&#39;, &#39;l&#39;)</p>\\n","line":285,"type":"\\"s\\" | \\"m\\" | \\"l\\"","decorators":[]},{"name":"stretched","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIf true, the button will stretch to the width of its container\\n","description":"<p>If true, the button will stretch to the width of its container</p>\\n","line":295,"type":"boolean","decorators":[]},{"name":"type","defaultValue":"\'button\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nButton type (for HTML type attribute)\\n","description":"<p>Button type (for HTML type attribute)</p>\\n","line":310,"type":"\\"button\\" | \\"submit\\" | \\"reset\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"afterTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"<p>Template for content after the main button text</p>\\n","line":325,"rawdescription":"\\n\\nTemplate for content after the main button text\\n","decorators":[{"name":"ContentChild","stringifiedArguments":"\'afterContent\'"}],"modifierKind":[170]},{"name":"beforeTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"<p>Template for content before the main button text</p>\\n","line":320,"rawdescription":"\\n\\nTemplate for content before the main button text\\n","decorators":[{"name":"ContentChild","stringifiedArguments":"\'beforeContent\'"}],"modifierKind":[170]},{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":346,"modifierKind":[123]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":345,"modifierKind":[123]}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":355,"deprecated":false,"deprecationMessage":""},{"name":"onSelectStart","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":349,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'selectstart\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"transformToButton","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":363,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTransforms the host element into a real HTML button for better accessibility and semantics\\n","description":"<p>Transforms the host element into a real HTML button for better accessibility and semantics</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.disabled","deprecated":false,"deprecationMessage":"","line":343,"type":"boolean","decorators":[]},{"name":"attr.type","deprecated":false,"deprecationMessage":"","line":342,"type":"\\"button\\" | \\"submit\\" | \\"reset\\"","decorators":[]},{"name":"class.disabled","deprecated":false,"deprecationMessage":"","line":340,"type":"boolean","decorators":[]},{"name":"class.loading","deprecated":false,"deprecationMessage":"","line":339,"type":"boolean","decorators":[]},{"name":"class.mode-bezeled","deprecated":false,"deprecationMessage":"","line":332,"type":"boolean","decorators":[]},{"name":"class.mode-filled","deprecated":false,"deprecationMessage":"","line":331,"type":"boolean","decorators":[]},{"name":"class.mode-gray","deprecated":false,"deprecationMessage":"","line":334,"type":"boolean","decorators":[]},{"name":"class.mode-outline","deprecated":false,"deprecationMessage":"","line":335,"type":"boolean","decorators":[]},{"name":"class.mode-plain","deprecated":false,"deprecationMessage":"","line":333,"type":"boolean","decorators":[]},{"name":"class.mode-white","deprecated":false,"deprecationMessage":"","line":336,"type":"boolean","decorators":[]},{"name":"class.size-l","deprecated":false,"deprecationMessage":"","line":329,"type":"boolean","decorators":[]},{"name":"class.size-m","deprecated":false,"deprecationMessage":"","line":328,"type":"boolean","decorators":[]},{"name":"class.size-s","deprecated":false,"deprecationMessage":"","line":327,"type":"boolean","decorators":[]},{"name":"class.stretched","deprecated":false,"deprecationMessage":"","line":338,"type":"boolean","decorators":[]}],"hostListeners":[{"name":"selectstart","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":349}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"SpinnerComponent","type":"component"},{"name":"TappableComponent","type":"component"}],"description":"<p>The Button component provides a customizable button with various styles and states.\\nSupports different sizes, display modes, loading state, etc.</p>\\n","rawdescription":"\\n\\nThe Button component provides a customizable button with various styles and states.\\nSupports different sizes, display modes, loading state, etc.\\n","type":"component","sourceCode":"import { \\n    Component, \\n    ViewEncapsulation, \\n    ChangeDetectionStrategy, \\n    Input, \\n    HostBinding, \\n    OnInit,\\n    ElementRef, \\n    ContentChild, \\n    TemplateRef,\\n    HostListener,\\n    inject\\n  } from \'@angular/core\';\\n  import { CommonModule } from \'@angular/common\';\\nimport { SpinnerComponent } from \'../../feedback\';\\nimport { TappableComponent } from \'../../utils\';\\nimport { PlatformService } from \'@services/platform.service\';\\n  // import { PlatformService } from \'@services/platform.service\';\\n  // import { SpinnerComponent } from \'@feedback/spinner/spinner.component\';\\n  // import { TappableComponent } from \'@utils/tappable/tappable.component\';\\n  \\n  /**\\n   * The Button component provides a customizable button with various styles and states.\\n   * Supports different sizes, display modes, loading state, etc.\\n   */\\n  @Component({\\n    selector: \'tgui-button\',\\n    standalone: true,\\n    imports: [CommonModule, SpinnerComponent, TappableComponent],\\n    template: `\\n      <tgui-tappable \\n        [interactiveAnimation]=\\"interactiveAnimation\\" \\n        [readonly]=\\"loading\\"\\n        [disabled]=\\"disabled\\"\\n        class=\\"button-tappable\\"\\n      >\\n        \x3c!-- Spinner is absolutely positioned over the content --\x3e\\n        <div *ngIf=\\"loading\\" class=\\"spinner\\">\\n          <tgui-spinner size=\\"s\\"></tgui-spinner>\\n        </div>\\n  \\n        \x3c!-- Button content in wrapper for correct positioning --\x3e\\n        <div class=\\"button-content-wrapper\\">\\n          <ng-content select=\\"[tguiButtonBefore]\\"></ng-content>\\n          <div *ngIf=\\"beforeTemplate\\" class=\\"before\\">\\n            <ng-container *ngTemplateOutlet=\\"beforeTemplate\\"></ng-container>\\n          </div>\\n  \\n          <div class=\\"content\\">\\n            <ng-content></ng-content>\\n          </div>\\n  \\n          <ng-content select=\\"[tguiButtonAfter]\\"></ng-content>\\n          <div *ngIf=\\"afterTemplate\\" class=\\"after\\">\\n            <ng-container *ngTemplateOutlet=\\"afterTemplate\\"></ng-container>\\n          </div>\\n        </div>\\n      </tgui-tappable>\\n    `,\\n    host: {\\n      \'attr.data-refresh-platform\': \'true\'\\n    },\\n    styles: [`\\n      :host {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        border: none;\\n        border-radius: 8px;\\n        text-decoration: none;\\n        box-sizing: border-box;\\n        max-inline-size: 100%;\\n        min-inline-size: 80px;\\n        position: relative;\\n        cursor: pointer;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        user-select: none;\\n        -webkit-tap-highlight-color: transparent;\\n        touch-action: manipulation; /* Optimization for mobile devices */\\n      }\\n  \\n      :host.stretched {\\n        inline-size: 100%;\\n        flex-grow: 1;\\n      }\\n  \\n      :host::after {\\n        content: \'\';\\n        position: absolute;\\n        inset: 0;\\n        opacity: 0;\\n        transition: opacity .15s ease-out;\\n        background: var(--tgui--bg_color);\\n        border-radius: inherit;\\n        pointer-events: none;\\n\\n      }\\n  \\n      .button-tappable {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        width: 100%;\\n        height: 100%;\\n        border-radius: inherit;\\n      }\\n  \\n      /* Wrapper for all button content */\\n      .button-content-wrapper {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        gap: inherit; /* Inherit gap from host element */\\n        position: relative;\\n        z-index: 1;\\n        width: 100%;\\n        height: 100%;\\n        padding: var(--tgui--button--padding, 0);\\n        box-sizing: border-box;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .before,\\n      .after {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        position: relative;\\n        z-index: 1;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .content {\\n        white-space: nowrap;\\n        text-overflow: ellipsis;\\n        overflow: hidden;\\n        z-index: var(--tgui--z-index--simple);\\n        position: relative; /* To be above ripple */\\n        user-select: none;\\n        -webkit-user-select: none;\\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\\n      }\\n  \\n      .spinner {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: auto;\\n        background: inherit;\\n        border-radius: inherit;\\n        color: var(--tgui--button--spinner-color);\\n        z-index: 2; /* Raised above content */\\n      }\\n  \\n      /* Size Variants */\\n      :host.size-s {\\n        height: 36px;\\n        min-width: 34px;\\n        gap: 6px;\\n        border-radius: 20px;\\n        --tgui--button--padding: 8px 12px;\\n      }\\n  \\n      :host.size-m {\\n        height: 42px;\\n        min-width: 42px;\\n        gap: 8px;\\n        border-radius: 8px;\\n        --tgui--button--padding: 8px 14px;\\n      }\\n  \\n      :host.size-l {\\n        height: 50px;\\n        gap: 10px;\\n        --tgui--button--padding: 10px 20px;\\n      }\\n  \\n      /* Mode Variants */\\n      :host.mode-filled {\\n        --tgui--button--hovered-opacity: .15;\\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\\n        color: var(--tgui--button_text_color);\\n        background: var(--tgui--button_color);\\n      }\\n  \\n      :host.mode-bezeled {\\n        --tgui--button--hovered-opacity: .07;\\n        --tgui--button--spinner-color: var(--tgui--link_color);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: var(--tgui--secondary_fill);\\n      }\\n  \\n      :host.mode-plain {\\n        --tgui--button--hovered-opacity: .03;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: transparent;\\n      }\\n  \\n      :host.mode-gray {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\\n        color: var(--tgui--plain_foreground);\\n        background: var(--tgui--plain_background);\\n      }\\n  \\n      :host.mode-outline {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        color: var(--tgui--plain_foreground);\\n        background: inherit;\\n        box-shadow: 0 0 0 1px var(--tgui--outline);\\n      }\\n  \\n      :host.mode-white {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        background: var(--tgui--white);\\n        color: var(--tgui--black);\\n      }\\n  \\n      /* Platform Specific */\\n      :host-context(.tgui-platform-ios) :host.size-m {\\n        border-radius: 12px;\\n      }\\n  \\n      :host-context(.tgui-platform-ios) :host::after {\\n        content: unset;\\n      }\\n  \\n      /* Loading State */\\n      :host.loading .before,\\n      :host.loading .after,\\n      :host.loading .content {\\n        opacity: 0;\\n      }\\n  \\n      /* Disabled State */\\n      :host.disabled {\\n        opacity: 0.6;\\n        cursor: default;\\n        pointer-events: none;\\n      }\\n  \\n      /* Hover Effects */\\n      @media (hover: hover) and (pointer: fine) {\\n        :host:hover::after {\\n          opacity: var(--tgui--button--hovered-opacity);\\n        }\\n      }\\n  \\n      /* Button Typography Sizing */\\n      :host.size-l .content {\\n        font-size: var(--tgui--text--font_size);\\n        line-height: var(--tgui--text--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n  \\n      :host.size-m .content,\\n      :host.size-s .content {\\n        font-size: var(--tgui--subheadline2--font_size);\\n        line-height: var(--tgui--subheadline2--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n    `],\\n    changeDetection: ChangeDetectionStrategy.OnPush\\n  })\\n  export class ButtonComponent implements OnInit {\\n    /**\\n     * Button size (\'s\', \'m\', \'l\')\\n     */\\n    @Input() size: \'s\' | \'m\' | \'l\' = \'m\';\\n  \\n    /**\\n     * Visual style of the button\\n     */\\n    @Input() mode: \'filled\' | \'bezeled\' | \'plain\' | \'gray\' | \'outline\' | \'white\' = \'filled\';\\n  \\n    /**\\n     * If true, the button will stretch to the width of its container\\n     */\\n    @Input() stretched = false;\\n  \\n    /**\\n     * If true, shows a loading indicator instead of button content\\n     */\\n    @Input() loading = false;\\n  \\n    /**\\n     * If true, the button will be disabled\\n     */\\n    @Input() disabled = false;\\n  \\n    /**\\n     * Button type (for HTML type attribute)\\n     */\\n    @Input() type: \'button\' | \'submit\' | \'reset\' = \'button\';\\n  \\n    /**\\n     * Type of interactive animation (\'opacity\' | \'background\')\\n     */\\n    @Input() interactiveAnimation: \'opacity\' | \'background\' = \'background\';\\n  \\n    /**\\n     * Template for content before the main button text\\n     */\\n    @ContentChild(\'beforeContent\') beforeTemplate?: TemplateRef<any>;\\n  \\n    /**\\n     * Template for content after the main button text\\n     */\\n    @ContentChild(\'afterContent\') afterTemplate?: TemplateRef<any>;\\n  \\n    @HostBinding(\'class.size-s\') get isSizeS() { return this.size === \'s\'; }\\n    @HostBinding(\'class.size-m\') get isSizeM() { return this.size === \'m\'; }\\n    @HostBinding(\'class.size-l\') get isSizeL() { return this.size === \'l\'; }\\n  \\n    @HostBinding(\'class.mode-filled\') get isModeFilled() { return this.mode === \'filled\'; }\\n    @HostBinding(\'class.mode-bezeled\') get isModeBezeled() { return this.mode === \'bezeled\'; }\\n    @HostBinding(\'class.mode-plain\') get isModePlain() { return this.mode === \'plain\'; }\\n    @HostBinding(\'class.mode-gray\') get isModeGray() { return this.mode === \'gray\'; }\\n    @HostBinding(\'class.mode-outline\') get isModeOutline() { return this.mode === \'outline\'; }\\n    @HostBinding(\'class.mode-white\') get isModeWhite() { return this.mode === \'white\'; }\\n  \\n    @HostBinding(\'class.stretched\') get isStretched() { return this.stretched; }\\n    @HostBinding(\'class.loading\') get isLoading() { return this.loading; }\\n    @HostBinding(\'class.disabled\') get isDisabled() { return this.disabled; }\\n  \\n    @HostBinding(\'attr.type\') get buttonType() { return this.type; }\\n    @HostBinding(\'attr.disabled\') get buttonDisabled() { return this.disabled ? true : null; }\\n    \\n    private platformService = inject(PlatformService);\\n    private elementRef = inject(ElementRef);\\n  \\n    @HostListener(\'selectstart\', [\'$event\'])\\n    onSelectStart(event: Event): boolean {\\n      // Prevent text selection\\n      event.preventDefault();\\n      return false;\\n    }\\n  \\n    ngOnInit(): void {      \\n      // Transform component into a real button for better accessibility\\n      this.transformToButton();\\n    }\\n    \\n    /**\\n     * Transforms the host element into a real HTML button for better accessibility and semantics\\n     */\\n    private transformToButton(): void {\\n      const element = this.elementRef.nativeElement;\\n      \\n      // Add attributes to improve accessibility\\n      if (!element.hasAttribute(\'role\')) {\\n        element.setAttribute(\'role\', \'button\');\\n      }\\n      \\n      if (!element.hasAttribute(\'tabindex\') && !this.disabled) {\\n        element.setAttribute(\'tabindex\', \'0\');\\n      }\\n      \\n      // Add CSS to prevent text selection (for older browsers)\\n      element.style.webkitUserSelect = \'none\';\\n      element.style.userSelect = \'none\';\\n      \\n      // Add keyboard event handlers for accessibility\\n      element.addEventListener(\'keydown\', (event: KeyboardEvent) => {\\n        if ((event.key === \'Enter\' || event.key === \' \') && !this.disabled) {\\n          event.preventDefault();\\n          element.click();\\n        }\\n      });\\n      \\n      // Additional listener to prevent text selection\\n      element.addEventListener(\'selectstart\', (event: Event) => {\\n        event.preventDefault();\\n        return false;\\n      });\\n    }\\n  } ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      :host {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        border: none;\\n        border-radius: 8px;\\n        text-decoration: none;\\n        box-sizing: border-box;\\n        max-inline-size: 100%;\\n        min-inline-size: 80px;\\n        position: relative;\\n        cursor: pointer;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        user-select: none;\\n        -webkit-tap-highlight-color: transparent;\\n        touch-action: manipulation; /* Optimization for mobile devices */\\n      }\\n  \\n      :host.stretched {\\n        inline-size: 100%;\\n        flex-grow: 1;\\n      }\\n  \\n      :host::after {\\n        content: \'\';\\n        position: absolute;\\n        inset: 0;\\n        opacity: 0;\\n        transition: opacity .15s ease-out;\\n        background: var(--tgui--bg_color);\\n        border-radius: inherit;\\n        pointer-events: none;\\n\\n      }\\n  \\n      .button-tappable {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        width: 100%;\\n        height: 100%;\\n        border-radius: inherit;\\n      }\\n  \\n      /* Wrapper for all button content */\\n      .button-content-wrapper {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        gap: inherit; /* Inherit gap from host element */\\n        position: relative;\\n        z-index: 1;\\n        width: 100%;\\n        height: 100%;\\n        padding: var(--tgui--button--padding, 0);\\n        box-sizing: border-box;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .before,\\n      .after {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        position: relative;\\n        z-index: 1;\\n        user-select: none;\\n        -webkit-user-select: none;\\n      }\\n  \\n      .content {\\n        white-space: nowrap;\\n        text-overflow: ellipsis;\\n        overflow: hidden;\\n        z-index: var(--tgui--z-index--simple);\\n        position: relative; /* To be above ripple */\\n        user-select: none;\\n        -webkit-user-select: none;\\n        -webkit-touch-callout: none; /* Prevents context menu on iOS with long press */\\n      }\\n  \\n      .spinner {\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: auto;\\n        background: inherit;\\n        border-radius: inherit;\\n        color: var(--tgui--button--spinner-color);\\n        z-index: 2; /* Raised above content */\\n      }\\n  \\n      /* Size Variants */\\n      :host.size-s {\\n        height: 36px;\\n        min-width: 34px;\\n        gap: 6px;\\n        border-radius: 20px;\\n        --tgui--button--padding: 8px 12px;\\n      }\\n  \\n      :host.size-m {\\n        height: 42px;\\n        min-width: 42px;\\n        gap: 8px;\\n        border-radius: 8px;\\n        --tgui--button--padding: 8px 14px;\\n      }\\n  \\n      :host.size-l {\\n        height: 50px;\\n        gap: 10px;\\n        --tgui--button--padding: 10px 20px;\\n      }\\n  \\n      /* Mode Variants */\\n      :host.mode-filled {\\n        --tgui--button--hovered-opacity: .15;\\n        --tgui--button--spinner-color: var(--tgui--button_text_color);\\n        --tgui--ripple-color: rgba(255, 255, 255, 0.5);\\n        color: var(--tgui--button_text_color);\\n        background: var(--tgui--button_color);\\n      }\\n  \\n      :host.mode-bezeled {\\n        --tgui--button--hovered-opacity: .07;\\n        --tgui--button--spinner-color: var(--tgui--link_color);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: var(--tgui--secondary_fill);\\n      }\\n  \\n      :host.mode-plain {\\n        --tgui--button--hovered-opacity: .03;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n        color: var(--tgui--link_color);\\n        background: transparent;\\n      }\\n  \\n      :host.mode-gray {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.4);\\n        color: var(--tgui--plain_foreground);\\n        background: var(--tgui--plain_background);\\n      }\\n  \\n      :host.mode-outline {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        color: var(--tgui--plain_foreground);\\n        background: inherit;\\n        box-shadow: 0 0 0 1px var(--tgui--outline);\\n      }\\n  \\n      :host.mode-white {\\n        --tgui--button--hovered-opacity: .5;\\n        --tgui--button--spinner-color: var(--tgui--surface_dark);\\n        --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n        background: var(--tgui--white);\\n        color: var(--tgui--black);\\n      }\\n  \\n      /* Platform Specific */\\n      :host-context(.tgui-platform-ios) :host.size-m {\\n        border-radius: 12px;\\n      }\\n  \\n      :host-context(.tgui-platform-ios) :host::after {\\n        content: unset;\\n      }\\n  \\n      /* Loading State */\\n      :host.loading .before,\\n      :host.loading .after,\\n      :host.loading .content {\\n        opacity: 0;\\n      }\\n  \\n      /* Disabled State */\\n      :host.disabled {\\n        opacity: 0.6;\\n        cursor: default;\\n        pointer-events: none;\\n      }\\n  \\n      /* Hover Effects */\\n      @media (hover: hover) and (pointer: fine) {\\n        :host:hover::after {\\n          opacity: var(--tgui--button--hovered-opacity);\\n        }\\n      }\\n  \\n      /* Button Typography Sizing */\\n      :host.size-l .content {\\n        font-size: var(--tgui--text--font_size);\\n        line-height: var(--tgui--text--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n  \\n      :host.size-m .content,\\n      :host.size-s .content {\\n        font-size: var(--tgui--subheadline2--font_size);\\n        line-height: var(--tgui--subheadline2--line_height);\\n        font-weight: var(--tgui--font_weight--accent2);\\n      }\\n    \\n","extends":[],"implements":["OnInit"],"accessors":{"isSizeS":{"name":"isSizeS","getSignature":{"name":"isSizeS","type":"","returnType":"","line":327}},"isSizeM":{"name":"isSizeM","getSignature":{"name":"isSizeM","type":"","returnType":"","line":328}},"isSizeL":{"name":"isSizeL","getSignature":{"name":"isSizeL","type":"","returnType":"","line":329}},"isModeFilled":{"name":"isModeFilled","getSignature":{"name":"isModeFilled","type":"","returnType":"","line":331}},"isModeBezeled":{"name":"isModeBezeled","getSignature":{"name":"isModeBezeled","type":"","returnType":"","line":332}},"isModePlain":{"name":"isModePlain","getSignature":{"name":"isModePlain","type":"","returnType":"","line":333}},"isModeGray":{"name":"isModeGray","getSignature":{"name":"isModeGray","type":"","returnType":"","line":334}},"isModeOutline":{"name":"isModeOutline","getSignature":{"name":"isModeOutline","type":"","returnType":"","line":335}},"isModeWhite":{"name":"isModeWhite","getSignature":{"name":"isModeWhite","type":"","returnType":"","line":336}},"isStretched":{"name":"isStretched","getSignature":{"name":"isStretched","type":"","returnType":"","line":338}},"isLoading":{"name":"isLoading","getSignature":{"name":"isLoading","type":"","returnType":"","line":339}},"isDisabled":{"name":"isDisabled","getSignature":{"name":"isDisabled","type":"","returnType":"","line":340}},"buttonType":{"name":"buttonType","getSignature":{"name":"buttonType","type":"","returnType":"","line":342}},"buttonDisabled":{"name":"buttonDisabled","getSignature":{"name":"buttonDisabled","type":"","returnType":"","line":343}}}},{"name":"CaptionComponent","id":"component-CaptionComponent-175a7bfa4f80001098980e831851daaf9d46223ceaee3e08662a4349034147bbd66f8094dfb88178c4cef2f2989ba4911957cb3bb198490050370d3dbf52d797","file":"projects/tgui/src/lib/components/typography/caption/caption.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-caption","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--caption1--font_size);\\n      line-height: var(--tgui--caption1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--caption2--font_size);\\n      line-height: var(--tgui--caption2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<span><ng-content></ng-content></span>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'1\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe size level of the caption, influencing its styling and typography size.\\n","description":"<p>The size level of the caption, influencing its styling and typography size.</p>\\n","line":53,"type":"\\"1\\" | \\"2\\"","decorators":[]},{"name":"tag","defaultValue":"\'span\'","deprecated":false,"deprecationMessage":"","line":56,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":64,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":59,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":63,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":65,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":66,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":67,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The Caption component is a text wrapper that applies specific typographic styles,\\nbased on the provided <code>level</code> prop. It&#39;s built on top of the Typography component,\\nensuring consistent text styling across the application. It primarily serves for text\\nthat acts as a small, descriptive label or annotation.</p>\\n","rawdescription":"\\n\\nThe Caption component is a text wrapper that applies specific typographic styles,\\nbased on the provided `level` prop. It\'s built on top of the Typography component,\\nensuring consistent text styling across the application. It primarily serves for text\\nthat acts as a small, descriptive label or annotation.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * The Caption component is a text wrapper that applies specific typographic styles,\\n * based on the provided `level` prop. It\'s built on top of the Typography component,\\n * ensuring consistent text styling across the application. It primarily serves for text\\n * that acts as a small, descriptive label or annotation.\\n */\\n@Component({\\n  selector: \'tgui-caption\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<span><ng-content></ng-content></span>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--caption1--font_size);\\n      line-height: var(--tgui--caption1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--caption2--font_size);\\n      line-height: var(--tgui--caption2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class CaptionComponent extends TypographyComponent {\\n  /**\\n   * The size level of the caption, influencing its styling and typography size.\\n   */\\n  @Input() level: \'1\' | \'2\' = \'1\';\\n  \\n  // Host bindings for CSS classes\\n  @Input() override tag = \'span\';\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--caption1--font_size);\\n      line-height: var(--tgui--caption1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--caption2--font_size);\\n      line-height: var(--tgui--caption2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":59}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":60}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":63}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":64}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":65}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":66}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":67}}}},{"name":"CardCellComponent","id":"component-CardCellComponent-d4c639b4f48f626e00409dca50107fcf5dc73198eda6639ffa045483c9d5c5e2a0f30a738dc7a2cec0213ee60778ab4378028cbdecd923d4ccdcd42e7d73c77f","file":"projects/tgui/src/lib/components/blocks/card/components/card-cell/card-cell.component.ts","encapsulation":[],"entryComponents":[],"exportAs":"tguiCardCell","inputs":[],"outputs":[],"providers":[],"selector":"tgui-card-cell","styleUrls":["./card-cell.component.css"],"styles":[],"templateUrl":["./card-cell.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"header","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional header text for the cell\\n","description":"<p>Optional header text for the cell</p>\\n","line":24,"type":"string","decorators":[]},{"name":"isImage","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWhether the cell contains image content\\n","description":"<p>Whether the cell contains image content</p>\\n","line":19,"type":"boolean","decorators":[]},{"name":"subtitle","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional subtitle text for the cell\\n","description":"<p>Optional subtitle text for the cell</p>\\n","line":29,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApply appropriate class based on the cell type","description":"<p>Apply appropriate class based on the cell type</p>\\n","line":32,"type":"string","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>CardCell component that represents a content section within a Card.</p>\\n","rawdescription":"\\n\\nCardCell component that represents a content section within a Card.\\n","type":"component","sourceCode":"import { Component, Input, HostBinding, ViewEncapsulation } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * CardCell component that represents a content section within a Card.\\n */\\n@Component({\\n  selector: \'tgui-card-cell\',\\n  templateUrl: \'./card-cell.component.html\',\\n  styleUrls: [\'./card-cell.component.css\'],\\n  standalone: true,\\n  imports: [CommonModule],\\n  exportAs: \'tguiCardCell\'\\n})\\nexport class CardCellComponent {\\n  /**\\n   * Whether the cell contains image content\\n   */\\n  @Input() isImage = false;\\n\\n  /**\\n   * Optional header text for the cell\\n   */\\n  @Input() header?: string;\\n\\n  /**\\n   * Optional subtitle text for the cell\\n   */\\n  @Input() subtitle?: string;\\n\\n  /** Apply appropriate class based on the cell type */\\n  @HostBinding(\'class\') get className(): string {\\n    const baseClass = \'tgui-card-cell\';\\n    return this.isImage ? `${baseClass} ${baseClass}--image` : baseClass;\\n  }\\n} ","assetsDirs":[],"styleUrlsData":[{"data":".tgui-card-cell {\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n}\\n\\n.tgui-card-cell__content {\\n  padding: 16px 20px 20px;\\n  gap: 12px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: flex-start;\\n  width: 100%;\\n  box-sizing: border-box;\\n}\\n\\n.tgui-card-cell--image .tgui-card-cell__content {\\n  padding: 0;\\n  height: 100%;\\n}\\n\\n.tgui-card__wrapper .tgui-card-cell--image:first-child .tgui-card-cell__content {\\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\\n  overflow: hidden;\\n}\\n\\n.tgui-card-cell__text {\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  gap: 4px;\\n  margin-bottom: 8px;\\n}\\n\\n.tgui-card-cell__header {\\n  margin: 0;\\n  font-family: var(--tgui--font_family, \'SF Pro\', sans-serif);\\n  font-weight: var(--tgui--font_weight--accent2, 590);\\n  font-size: 17px;\\n  line-height: 22px;\\n  letter-spacing: -0.4px;\\n  color: var(--tgui--plain_foreground, #000000);\\n}\\n\\n.tgui-card--ambient .tgui-card-cell__header {\\n  color: #FFFFFF;\\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\\n}\\n\\n.tgui-card-cell__subtitle {\\n  margin: 0;\\n  font-family: var(--tgui--font_family, \'SF Pro\', sans-serif);\\n  font-weight: 400;\\n  font-size: 15px;\\n  line-height: 20px;\\n  letter-spacing: -0.23px;\\n  color: var(--tgui--secondary_hint_color, #707579);\\n}\\n\\n.tgui-card--ambient .tgui-card-cell__subtitle {\\n  color: rgba(255, 255, 255, 0.75);\\n  text-shadow: 0px 4px 16px rgba(0, 0, 0, 0.75);\\n}\\n\\n.tgui-card-cell--image {\\n  background: #F4F4F7;\\n  height: 200px;\\n  flex-grow: 1;\\n  align-self: stretch;\\n  padding: 0;\\n}\\n\\n.tgui-card__wrapper .tgui-card-cell--image:first-child {\\n  border-top-left-radius: var(--tgui-card-border-radius, 24px);\\n  border-top-right-radius: var(--tgui-card-border-radius, 24px);\\n  overflow: hidden;\\n} ","styleUrl":"./card-cell.component.css"}],"stylesData":"","extends":[],"accessors":{"className":{"name":"className","getSignature":{"name":"className","type":"string","returnType":"string","line":32,"rawdescription":"\\nApply appropriate class based on the cell type","description":"<p>Apply appropriate class based on the cell type</p>\\n"}}},"templateData":"<div class=\\"tgui-card-cell__content\\">\\n  <div *ngIf=\\"header || subtitle\\" class=\\"tgui-card-cell__text\\">\\n    <h3 *ngIf=\\"header\\" class=\\"tgui-card-cell__header\\">{{ header }}</h3>\\n    <p *ngIf=\\"subtitle\\" class=\\"tgui-card-cell__subtitle\\">{{ subtitle }}</p>\\n  </div>\\n  <ng-content></ng-content>\\n</div> "},{"name":"CardChipComponent","id":"component-CardChipComponent-b234c2354cbda36b4cd06139777a9eb1c8b9c8a2017b298ef51191e7780c4abc03d075f50511074b0aac19285b07175d47be952d1f259ef675f5dabe7cd7c396","file":"projects/tgui/src/lib/components/blocks/card/components/card-chip/card-chip.component.ts","encapsulation":[],"entryComponents":[],"exportAs":"tguiCardChip","inputs":[],"outputs":[],"providers":[],"selector":"tgui-card-chip","styleUrls":[],"styles":["\\n    .tgui-card-chip__container {\\n      position: absolute;\\n      right: 16px;\\n      top: 16px;\\n      z-index: 1;\\n    }\\n  "],"template":"<div class=\\"tgui-card-chip__container\\">\\n  <tgui-chip [mode]=\\"mode\\" [before]=\\"before\\" [after]=\\"after\\" [className]=\\"chipClassName\\">\\n    <ng-content></ng-content>\\n  </tgui-chip>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"after","deprecated":false,"deprecationMessage":"","rawdescription":"\\nContent to be placed after the main text","description":"<p>Content to be placed after the main text</p>\\n","line":38,"type":"any","decorators":[]},{"name":"before","deprecated":false,"deprecationMessage":"","rawdescription":"\\nContent to be placed before the main text","description":"<p>Content to be placed before the main text</p>\\n","line":35,"type":"any","decorators":[]},{"name":"chipClassName","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nCustom class name for the chip component","description":"<p>Custom class name for the chip component</p>\\n","line":41,"type":"string","decorators":[]},{"name":"mode","defaultValue":"\'elevated\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDefines the visual style of the chip, inherits from the ChipComponent","description":"<p>Defines the visual style of the chip, inherits from the ChipComponent</p>\\n","line":32,"type":"\\"elevated\\" | \\"mono\\" | \\"outline\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"className","defaultValue":"\'tgui-card-chip\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Apply base class</p>\\n","line":44,"rawdescription":"\\nApply base class","decorators":[{"name":"HostBinding","stringifiedArguments":"\'class\'"}],"modifierKind":[170]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class","defaultValue":"\'tgui-card-chip\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApply base class","description":"<p>Apply base class</p>\\n","line":44,"type":"string","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"ChipComponent","type":"component"}],"description":"<p>CardChip component that displays a small actionable or informational element on the Card\\nLeverages the ChipComponent with fixed positioning for use within cards</p>\\n","rawdescription":"\\n\\nCardChip component that displays a small actionable or informational element on the Card\\nLeverages the ChipComponent with fixed positioning for use within cards\\n","type":"component","sourceCode":"import { Component, ViewEncapsulation, HostBinding, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { ChipComponent } from \'@components/form/chip/chip.component\';\\n\\n/**\\n * CardChip component that displays a small actionable or informational element on the Card\\n * Leverages the ChipComponent with fixed positioning for use within cards\\n */\\n@Component({\\n  selector: \'tgui-card-chip\',\\n  template: `\\n    <div class=\\"tgui-card-chip__container\\">\\n      <tgui-chip [mode]=\\"mode\\" [before]=\\"before\\" [after]=\\"after\\" [className]=\\"chipClassName\\">\\n        <ng-content></ng-content>\\n      </tgui-chip>\\n    </div>\\n  `,\\n  styles: [`\\n    .tgui-card-chip__container {\\n      position: absolute;\\n      right: 16px;\\n      top: 16px;\\n      z-index: 1;\\n    }\\n  `],\\n  standalone: true,\\n  imports: [CommonModule, ChipComponent],\\n  exportAs: \'tguiCardChip\'\\n})\\nexport class CardChipComponent {\\n  /** Defines the visual style of the chip, inherits from the ChipComponent */\\n  @Input() mode: \'elevated\' | \'mono\' | \'outline\' = \'elevated\';\\n  \\n  /** Content to be placed before the main text */\\n  @Input() before: any;\\n  \\n  /** Content to be placed after the main text */\\n  @Input() after: any;\\n  \\n  /** Custom class name for the chip component */\\n  @Input() chipClassName: string = \'\';\\n  \\n  /** Apply base class */\\n  @HostBinding(\'class\') className = \'tgui-card-chip\';\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .tgui-card-chip__container {\\n      position: absolute;\\n      right: 16px;\\n      top: 16px;\\n      z-index: 1;\\n    }\\n  \\n","extends":[]},{"name":"CardComponent","id":"component-CardComponent-9d7643191cc6f7b19a84f0746a2351818fcea1b01ea4d3f43bf012dd4c1d8c0a779af81aff1cf7a776871b44084960f1f06bdccc38c4696aca5c4af22e63e271","file":"projects/tgui/src/lib/components/blocks/card/card.component.ts","encapsulation":[],"entryComponents":[],"exportAs":"tguiCard","inputs":[],"outputs":[],"providers":[],"selector":"tgui-card","styleUrls":["./card.component.css"],"styles":[],"templateUrl":["./card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"borderRadius","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDefines the border radius of the card. Default is 24px.\\n","description":"<p>Defines the border radius of the card. Default is 24px.</p>\\n","line":32,"type":"string","decorators":[]},{"name":"image","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nURL of the image to display at the top of the card\\n","description":"<p>URL of the image to display at the top of the card</p>\\n","line":44,"type":"string","decorators":[]},{"name":"imageAlt","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAlt text for the image\\n","description":"<p>Alt text for the image</p>\\n","line":49,"type":"string","decorators":[]},{"name":"imageHeight","defaultValue":"\'200px\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHeight of the image block\\n","description":"<p>Height of the image block</p>\\n","line":54,"type":"string","decorators":[]},{"name":"type","defaultValue":"\'plain\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDefines the visual style of the card, influencing background, shadow, and border.\\n","description":"<p>Defines the visual style of the card, influencing background, shadow, and border.</p>\\n","line":27,"type":"CardType","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_borderRadius","defaultValue":"\'24px\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":69,"modifierKind":[123]},{"name":"cardCells","deprecated":false,"deprecationMessage":"","type":"QueryList<CardCellComponent>","indexKey":"","optional":false,"description":"<p>Get all child cells</p>\\n","line":67,"rawdescription":"\\nGet all child cells","decorators":[{"name":"ContentChildren","stringifiedArguments":"CardCellComponent"}],"modifierKind":[170]},{"name":"customStyle","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Custom style for card wrapper</p>\\n","line":59,"rawdescription":"\\n\\nCustom style for card wrapper\\n"},{"name":"imageStyle","defaultValue":"{}","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Styles for the image block</p>\\n","line":64,"rawdescription":"\\n\\nStyles for the image block\\n"}],"methodsClass":[{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":75,"deprecated":false,"deprecationMessage":""},{"name":"updateCustomStyle","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates custom style object when properties change\\n","description":"<p>Updates custom style object when properties change</p>\\n","modifierKind":[123]},{"name":"updateImageStyle","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":103,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates styles for the image block\\n","description":"<p>Updates styles for the image block</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApply appropriate class based on the type","description":"<p>Apply appropriate class based on the type</p>\\n","line":81,"type":"string","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Serves as a container for card-styled UI elements, providing context for its child components.\\nIt supports different visual styles and can encapsulate various content types.</p>\\n","rawdescription":"\\n\\nServes as a container for card-styled UI elements, providing context for its child components.\\nIt supports different visual styles and can encapsulate various content types.\\n","type":"component","sourceCode":"import { Component, Input, HostBinding, ViewEncapsulation, ElementRef, ContentChildren, QueryList, AfterContentInit } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { CardCellComponent } from \'./components/card-cell/card-cell.component\';\\nimport { CardChipComponent } from \'./components/card-chip/card-chip.component\';\\n\\n/**\\n * Card types that define the visual style of the card\\n */\\nexport type CardType = \'plain\' | \'ambient\';\\n\\n/**\\n * Serves as a container for card-styled UI elements, providing context for its child components.\\n * It supports different visual styles and can encapsulate various content types.\\n */\\n@Component({\\n  selector: \'tgui-card\',\\n  templateUrl: \'./card.component.html\',\\n  styleUrls: [\'./card.component.css\'],\\n  standalone: true,\\n  imports: [CommonModule],\\n  exportAs: \'tguiCard\'\\n})\\nexport class CardComponent implements AfterContentInit {\\n  /**\\n   * Defines the visual style of the card, influencing background, shadow, and border.\\n   */\\n  @Input() type: CardType = \'plain\';\\n\\n  /**\\n   * Defines the border radius of the card. Default is 24px.\\n   */\\n  @Input() set borderRadius(value: string) {\\n    this._borderRadius = value;\\n    this.updateCustomStyle();\\n  }\\n  \\n  get borderRadius(): string {\\n    return this._borderRadius;\\n  }\\n\\n  /**\\n   * URL of the image to display at the top of the card\\n   */\\n  @Input() image?: string;\\n\\n  /**\\n   * Alt text for the image\\n   */\\n  @Input() imageAlt = \'\';\\n\\n  /**\\n   * Height of the image block\\n   */\\n  @Input() imageHeight = \'200px\';\\n\\n  /** \\n   * Custom style for card wrapper \\n   */\\n  customStyle: { [key: string]: string } = {};\\n\\n  /**\\n   * Styles for the image block\\n   */\\n  imageStyle: { [key: string]: string } = {};\\n\\n  /** Get all child cells */\\n  @ContentChildren(CardCellComponent) cardCells!: QueryList<CardCellComponent>;\\n\\n  private _borderRadius = \'24px\';\\n\\n  constructor(private elementRef: ElementRef) {\\n    this.updateCustomStyle();\\n  }\\n\\n  ngAfterContentInit() {\\n    // Update styles for the image\\n    this.updateImageStyle();\\n  }\\n\\n  /** Apply appropriate class based on the type */\\n  @HostBinding(\'class\') get className(): string {\\n    return `tgui-card tgui-card--${this.type}`;\\n  }\\n  \\n  /**\\n   * Updates custom style object when properties change\\n   */\\n  private updateCustomStyle(): void {\\n    this.customStyle = {\\n      \'border-radius\': this._borderRadius\\n    };\\n    \\n    // Update CSS variable for use in child components\\n    this.elementRef.nativeElement.style.setProperty(\'--tgui-card-border-radius\', this._borderRadius);\\n    \\n    // Also update styles for the image if it\'s set\\n    this.updateImageStyle();\\n  }\\n\\n  /**\\n   * Updates styles for the image block\\n   */\\n  private updateImageStyle(): void {\\n    if (this.image) {\\n      this.imageStyle = {\\n        \'height\': this.imageHeight,\\n        \'background-image\': `url(${this.image})`,\\n        \'background-size\': \'cover\',\\n        \'background-position\': \'center\',\\n        \'border-top-left-radius\': this._borderRadius,\\n        \'border-top-right-radius\': this._borderRadius,\\n        \'overflow\': \'hidden\'\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Checks if the card has an image\\n   */\\n  get hasImage(): boolean {\\n    return !!this.image;\\n  }\\n} ","assetsDirs":[],"styleUrlsData":[{"data":".tgui-card {\\n  display: block;\\n  --tgui-card-border-radius: 24px;\\n  border-radius: var(--tgui-card-border-radius);\\n}\\n\\n.tgui-card__wrapper {\\n  position: relative;\\n  height: 100%;\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  padding: 0;\\n  isolation: isolate;\\n  background: #FFFFFF;\\n  /* Card Shadow */\\n  box-shadow: 0px 0px 2px 1px rgba(0, 0, 0, 0.02), 0px 32px 64px rgba(0, 0, 0, 0.04);\\n  border-radius: var(--tgui-card-border-radius);\\n  width: 100%;\\n  overflow: hidden;\\n}\\n\\n.tgui-card__image {\\n  width: 100%;\\n  background-color: #F4F4F7;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.tgui-card--plain .tgui-card__wrapper {\\n  background: #FFFFFF;\\n}\\n\\n.tgui-card--ambient .tgui-card__wrapper {\\n  background: linear-gradient(0deg, #212121, #212121), rgba(0, 0, 0, 0.8);\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: flex-end;\\n  align-items: center;\\n} ","styleUrl":"./card.component.css"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"elementRef","type":"ElementRef","deprecated":false,"deprecationMessage":""}],"line":69,"jsdoctags":[{"name":"elementRef","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["AfterContentInit"],"accessors":{"borderRadius":{"name":"borderRadius","setSignature":{"name":"borderRadius","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":32,"rawdescription":"\\n\\nDefines the border radius of the card. Default is 24px.\\n","description":"<p>Defines the border radius of the card. Default is 24px.</p>\\n","jsdoctags":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"borderRadius","type":"string","returnType":"string","line":37}},"className":{"name":"className","getSignature":{"name":"className","type":"string","returnType":"string","line":81,"rawdescription":"\\nApply appropriate class based on the type","description":"<p>Apply appropriate class based on the type</p>\\n"}},"hasImage":{"name":"hasImage","getSignature":{"name":"hasImage","type":"boolean","returnType":"boolean","line":120,"rawdescription":"\\n\\nChecks if the card has an image\\n","description":"<p>Checks if the card has an image</p>\\n"}}},"templateData":"<article class=\\"tgui-card__wrapper\\" [ngStyle]=\\"customStyle\\">\\n  \x3c!-- Image, if provided --\x3e\\n  <div *ngIf=\\"hasImage\\" class=\\"tgui-card__image\\" [ngStyle]=\\"imageStyle\\">\\n    <img *ngIf=\\"false\\" [src]=\\"image\\" [alt]=\\"imageAlt\\"> \x3c!-- Hidden for accessibility --\x3e\\n  </div>\\n  \\n  \x3c!-- Card content --\x3e\\n  <ng-content></ng-content>\\n</article> "},{"name":"CellComponent","id":"component-CellComponent-de447ed7daa7a7dbdf965d7f7253f0228cf6790d857688dc13c7e8207cf3bd48d02fd23fe5bf07270cca3e1c9d0c0088eca01e071f19fa4d6b27e139d6615ad4","file":"projects/tgui/src/lib/components/blocks/cell/cell.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-cell","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n      position: relative;\\n    }\\n\\n    .wrapper {\\n      --tgui--cell--middle--padding: 16px 0;\\n\\n      display: flex;\\n      align-items: center;\\n      gap: 24px;\\n      padding: 0 24px;\\n    }\\n\\n    .wrapper--ios {\\n      --tgui--cell--middle--padding: 12px 0;\\n      gap: 16px;\\n      padding: 0 16px;\\n    }\\n\\n    .wrapper--hovered {\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    .middle {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      \\n      flex-grow: 1;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n      \\n      padding: var(--tgui--cell--middle--padding);\\n    }\\n\\n    .middle > *,\\n    .title {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n\\n    .wrapper:not(.wrapper--multiline) .middle > *,\\n    .wrapper:not(.wrapper--multiline) .title {\\n      white-space: nowrap;\\n    }\\n\\n    .subhead {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .head {\\n      display: inline-flex;\\n      align-items: center;\\n      gap: 4px;\\n    }\\n\\n    .hint {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .subtitle {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      .wrapper:hover {\\n        background: var(--tgui--tertiary_bg_color);\\n      }\\n    }\\n  "],"template":"<tgui-tappable\\n  [interactiveAnimation]=\\"interactiveAnimation()\\"\\n  [disabled]=\\"disabled()\\"\\n  [readonly]=\\"readonly()\\"\\n  [class.wrapper--hovered]=\\"hovered()\\"\\n  class=\\"wrapper\\"\\n  [class.wrapper--multiline]=\\"multiline()\\"\\n  [class.wrapper--ios]=\\"isIOS\\"\\n>\\n  <div *ngIf=\\"hasBeforeContent\\" class=\\"before\\">\\n    <ng-content select=\\"[content-slot=before]\\"></ng-content>\\n  </div>\\n\\n  <div class=\\"middle\\">\\n    <ng-content></ng-content>\\n    <tgui-subheadline\\n      *ngIf=\\"subhead()\\"\\n      level=\\"2\\"\\n      weight=\\"3\\"\\n      class=\\"subhead\\"\\n    >\\n      {{ subhead() }}\\n    </tgui-subheadline>\\n\\n    <ng-container *ngIf=\\"title() || hint() || titleBadge()\\">\\n      \x3c!-- iOS: TextComponent --\x3e\\n      <tgui-text *ngIf=\\"isIOS\\" class=\\"head\\">\\n        <span *ngIf=\\"title()\\" class=\\"title\\">\\n          {{ title() }}\\n        </span>\\n        <span *ngIf=\\"hint()\\" class=\\"hint\\">\\n          {{ hint() }}\\n        </span>\\n        <ng-container *ngIf=\\"titleBadge()\\">\\n          <ng-container *ngTemplateOutlet=\\"titleBadge() || null\\"></ng-container>\\n        </ng-container>\\n      </tgui-text>\\n\\n      \x3c!-- Android/Web: SubheadlineComponent --\x3e\\n      <tgui-subheadline *ngIf=\\"!isIOS\\" level=\\"1\\" class=\\"head\\">\\n        <span *ngIf=\\"title()\\" class=\\"title\\">\\n          {{ title() }}\\n        </span>\\n        <span *ngIf=\\"hint()\\" class=\\"hint\\">\\n          {{ hint() }}\\n        </span>\\n        <ng-container *ngIf=\\"titleBadge()\\">\\n          <ng-container *ngTemplateOutlet=\\"titleBadge() || null\\"></ng-container>\\n        </ng-container>\\n      </tgui-subheadline>\\n    </ng-container>\\n\\n    <tgui-subheadline\\n      *ngIf=\\"subtitle()\\"\\n      level=\\"2\\"\\n      weight=\\"3\\"\\n      class=\\"subtitle\\"\\n    >\\n      {{ subtitle() }}\\n    </tgui-subheadline>\\n\\n    <ng-container *ngIf=\\"description()\\">\\n      \x3c!-- iOS: CaptionComponent --\x3e\\n      <tgui-caption\\n        *ngIf=\\"isIOS\\"\\n        class=\\"description\\"\\n      >\\n        {{ description() }}\\n      </tgui-caption>\\n\\n      \x3c!-- Android/Web: SubheadlineComponent --\x3e\\n      <tgui-subheadline\\n        *ngIf=\\"!isIOS\\"\\n        level=\\"2\\"\\n        class=\\"description\\"\\n      >\\n        {{ description() }}\\n      </tgui-subheadline>\\n    </ng-container>\\n  </div>\\n\\n  <div *ngIf=\\"hasAfterContent\\" class=\\"after\\">\\n    <ng-content select=\\"[content-slot=after]\\"></ng-content>\\n  </div>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Disabled state</p>\\n","line":263,"rawdescription":"\\nDisabled state","required":false},{"name":"hovered","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Controls the hover state of the component externally, useful for keyboard navigation</p>\\n","line":251,"rawdescription":"\\nControls the hover state of the component externally, useful for keyboard navigation","required":false},{"name":"multiline","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Allows for multiline content without truncation</p>\\n","line":254,"rawdescription":"\\nAllows for multiline content without truncation","required":false},{"name":"readonly","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Readonly state</p>\\n","line":260,"rawdescription":"\\nReadonly state","required":false}],"outputsClass":[],"propertiesClass":[{"name":"_hasAfterContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":294,"modifierKind":[123]},{"name":"_hasBeforeContent","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":293,"modifierKind":[123]},{"name":"contentSlots","deprecated":false,"deprecationMessage":"","type":"QueryList<ContentSlotDirective>","indexKey":"","optional":false,"description":"<p>Query for content slot directives</p>\\n","line":290,"rawdescription":"\\nQuery for content slot directives","decorators":[{"name":"ContentChildren","stringifiedArguments":"ContentSlotDirective"}],"modifierKind":[170]},{"name":"description","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Additional description displayed below the subtitle</p>\\n","line":278,"rawdescription":"\\nAdditional description displayed below the subtitle"},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Disabled state</p>\\n","line":263,"rawdescription":"\\nDisabled state","required":false},{"name":"hint","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Content displayed alongside the header as a hint</p>\\n","line":272,"rawdescription":"\\nContent displayed alongside the header as a hint"},{"name":"hovered","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Controls the hover state of the component externally, useful for keyboard navigation</p>\\n","line":251,"rawdescription":"\\nControls the hover state of the component externally, useful for keyboard navigation","required":false},{"name":"interactiveAnimation","defaultValue":"input<\'opacity\' | \'background\'>(\'background\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Interactive animation type</p>\\n","line":257,"rawdescription":"\\nInteractive animation type"},{"name":"multiline","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Allows for multiline content without truncation</p>\\n","line":254,"rawdescription":"\\nAllows for multiline content without truncation","required":false},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Platform service injection</p>\\n","line":284,"rawdescription":"\\nPlatform service injection","modifierKind":[124]},{"name":"readonly","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Readonly state</p>\\n","line":260,"rawdescription":"\\nReadonly state","required":false},{"name":"subhead","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Content displayed above the main content as a subheading</p>\\n","line":266,"rawdescription":"\\nContent displayed above the main content as a subheading"},{"name":"subtitle","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Content displayed below the header as a subtitle</p>\\n","line":275,"rawdescription":"\\nContent displayed below the header as a subtitle"},{"name":"title","defaultValue":"input<string | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Main content displayed as a header</p>\\n","line":269,"rawdescription":"\\nMain content displayed as a header"},{"name":"titleBadge","defaultValue":"input<TemplateRef<any> | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Badge component to be displayed next to the title</p>\\n","line":281,"rawdescription":"\\nBadge component to be displayed next to the title"},{"name":"typographyCellService","defaultValue":"inject(TypographyCellService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Typography service for component selection</p>\\n","line":287,"rawdescription":"\\nTypography service for component selection","modifierKind":[124]}],"methodsClass":[{"name":"hasSlot","args":[{"name":"slotName","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":337,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if a slot exists in the content\\n","description":"<p>Check if a slot exists in the content</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"slotName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":317,"deprecated":false,"deprecationMessage":""},{"name":"updateContentFlags","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":329,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates content flags based on available slots\\n","description":"<p>Updates content flags based on available slots</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.ios","deprecated":false,"deprecationMessage":"","rawdescription":"\\nAdd iOS specific class","description":"<p>Add iOS specific class</p>\\n","line":303,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"},{"name":"TitleComponent","type":"component"},{"name":"TextComponent","type":"component"},{"name":"CaptionComponent","type":"component"},{"name":"ContentSlotDirective","type":"directive"}],"description":"<p><code>Cell</code> component acts as a flexible and interactive container for various types of content,\\nenabling the creation of complex list items, form fields, and more. It leverages the <code>Tappable</code>\\ncomponent for interaction and is designed to be flexible and extensible.</p>\\n<h2>Usage</h2>\\n<b>Example :</b><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">&lt;!-- Using input properties --&gt;\\n&lt;tgui-cell\\n  subhead=&quot;Subhead text&quot;\\n  title=&quot;Title text&quot;\\n  hint=&quot;Hint text&quot;\\n  subtitle=&quot;Subtitle text&quot;\\n  description=&quot;Description text&quot;\\n  [titleBadge]=&quot;badgeTemplate&quot;&gt;\\n  &lt;div content-slot=&quot;before&quot;&gt;Before content&lt;/div&gt;\\n  &lt;div content-slot=&quot;after&quot;&gt;After content&lt;/div&gt;\\n&lt;/tgui-cell&gt;</code></pre></div><h2>Content Slots</h2>\\n<p>The component now only accepts the following content slots:</p>\\n<ul>\\n<li><code>before</code>: Optional content displayed on the left side of the cell</li>\\n<li><code>after</code>: Optional content displayed on the right side of the cell</li>\\n</ul>\\n<p>All other content should be provided via input properties:</p>\\n<ul>\\n<li><code>subhead</code>: Optional content displayed above the main title</li>\\n<li><code>title</code>: Main title/header content</li>\\n<li><code>hint</code>: Optional content displayed next to the title</li>\\n<li><code>titleBadge</code>: Badge component displayed next to the title</li>\\n<li><code>subtitle</code>: Optional content displayed below the title</li>\\n<li><code>description</code>: Optional descriptive text below the subtitle</li>\\n</ul>\\n","rawdescription":"\\n\\n`Cell` component acts as a flexible and interactive container for various types of content,\\nenabling the creation of complex list items, form fields, and more. It leverages the `Tappable`\\ncomponent for interaction and is designed to be flexible and extensible.\\n\\n## Usage\\n\\n```html\\n\x3c!-- Using input properties --\x3e\\n<tgui-cell\\n  subhead=\\"Subhead text\\"\\n  title=\\"Title text\\"\\n  hint=\\"Hint text\\"\\n  subtitle=\\"Subtitle text\\"\\n  description=\\"Description text\\"\\n  [titleBadge]=\\"badgeTemplate\\">\\n  <div content-slot=\\"before\\">Before content</div>\\n  <div content-slot=\\"after\\">After content</div>\\n</tgui-cell>\\n```\\n\\n## Content Slots\\n\\nThe component now only accepts the following content slots:\\n\\n- `before`: Optional content displayed on the left side of the cell\\n- `after`: Optional content displayed on the right side of the cell\\n\\nAll other content should be provided via input properties:\\n- `subhead`: Optional content displayed above the main title\\n- `title`: Main title/header content\\n- `hint`: Optional content displayed next to the title\\n- `titleBadge`: Badge component displayed next to the title\\n- `subtitle`: Optional content displayed below the title\\n- `description`: Optional descriptive text below the subtitle\\n","type":"component","sourceCode":"import {\\n  Component,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  Input,\\n  HostBinding,\\n  inject,\\n  AfterContentInit,\\n  ContentChildren,\\n  QueryList,\\n  Type,\\n  ComponentRef,\\n  TemplateRef,\\n  input,\\n  Signal,\\n  computed\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nimport { TappableComponent } from \'../../utils/tappable/tappable.component\';\\nimport { SubheadlineComponent } from \'../../typography/subheadline/subheadline.component\';\\nimport { TitleComponent } from \'../../typography/title/title.component\';\\nimport { TextComponent } from \'../../typography/text/text.component\';\\nimport { CaptionComponent } from \'../../typography/caption/caption.component\';\\nimport { PlatformService } from \'../../../services/platform.service\';\\nimport { ContentSlotDirective } from \'../../../directives/content-slot.directive\';\\nimport { TypographyCellService } from \'./services/typography-cell.service\';\\n\\n/**\\n * `Cell` component acts as a flexible and interactive container for various types of content,\\n * enabling the creation of complex list items, form fields, and more. It leverages the `Tappable`\\n * component for interaction and is designed to be flexible and extensible.\\n * \\n * ## Usage\\n * \\n * ```html\\n * \x3c!-- Using input properties --\x3e\\n * <tgui-cell\\n *   subhead=\\"Subhead text\\"\\n *   title=\\"Title text\\"\\n *   hint=\\"Hint text\\"\\n *   subtitle=\\"Subtitle text\\"\\n *   description=\\"Description text\\"\\n *   [titleBadge]=\\"badgeTemplate\\">\\n *   <div content-slot=\\"before\\">Before content</div>\\n *   <div content-slot=\\"after\\">After content</div>\\n * </tgui-cell>\\n * ```\\n * \\n * ## Content Slots\\n * \\n * The component now only accepts the following content slots:\\n * \\n * - `before`: Optional content displayed on the left side of the cell\\n * - `after`: Optional content displayed on the right side of the cell\\n * \\n * All other content should be provided via input properties:\\n * - `subhead`: Optional content displayed above the main title\\n * - `title`: Main title/header content\\n * - `hint`: Optional content displayed next to the title\\n * - `titleBadge`: Badge component displayed next to the title\\n * - `subtitle`: Optional content displayed below the title\\n * - `description`: Optional descriptive text below the subtitle\\n */\\n@Component({\\n  selector: \'tgui-cell\',\\n  standalone: true,\\n  imports: [\\n    CommonModule, \\n    TappableComponent, \\n    SubheadlineComponent, \\n    TitleComponent, \\n    TextComponent, \\n    CaptionComponent,\\n    ContentSlotDirective\\n  ],\\n  template: `\\n    <tgui-tappable\\n      [interactiveAnimation]=\\"interactiveAnimation()\\"\\n      [disabled]=\\"disabled()\\"\\n      [readonly]=\\"readonly()\\"\\n      [class.wrapper--hovered]=\\"hovered()\\"\\n      class=\\"wrapper\\"\\n      [class.wrapper--multiline]=\\"multiline()\\"\\n      [class.wrapper--ios]=\\"isIOS\\"\\n    >\\n      <div *ngIf=\\"hasBeforeContent\\" class=\\"before\\">\\n        <ng-content select=\\"[content-slot=before]\\"></ng-content>\\n      </div>\\n\\n      <div class=\\"middle\\">\\n        <ng-content></ng-content>\\n        <tgui-subheadline \\n          *ngIf=\\"subhead()\\" \\n          level=\\"2\\" \\n          weight=\\"3\\" \\n          class=\\"subhead\\"\\n        >\\n          {{ subhead() }}\\n        </tgui-subheadline>\\n\\n        <ng-container *ngIf=\\"title() || hint() || titleBadge()\\">\\n          \x3c!-- iOS: TextComponent --\x3e\\n          <tgui-text *ngIf=\\"isIOS\\" class=\\"head\\">\\n            <span *ngIf=\\"title()\\" class=\\"title\\">\\n              {{ title() }}\\n            </span>\\n            <span *ngIf=\\"hint()\\" class=\\"hint\\">\\n              {{ hint() }}\\n            </span>\\n            <ng-container *ngIf=\\"titleBadge()\\">\\n              <ng-container *ngTemplateOutlet=\\"titleBadge() || null\\"></ng-container>\\n            </ng-container>\\n          </tgui-text>\\n\\n          \x3c!-- Android/Web: SubheadlineComponent --\x3e\\n          <tgui-subheadline *ngIf=\\"!isIOS\\" level=\\"1\\" class=\\"head\\">\\n            <span *ngIf=\\"title()\\" class=\\"title\\">\\n              {{ title() }}\\n            </span>\\n            <span *ngIf=\\"hint()\\" class=\\"hint\\">\\n              {{ hint() }}\\n            </span>\\n            <ng-container *ngIf=\\"titleBadge()\\">\\n              <ng-container *ngTemplateOutlet=\\"titleBadge() || null\\"></ng-container>\\n            </ng-container>\\n          </tgui-subheadline>\\n        </ng-container>\\n\\n        <tgui-subheadline \\n          *ngIf=\\"subtitle()\\" \\n          level=\\"2\\" \\n          weight=\\"3\\" \\n          class=\\"subtitle\\"\\n        >\\n          {{ subtitle() }}\\n        </tgui-subheadline>\\n\\n        <ng-container *ngIf=\\"description()\\">\\n          \x3c!-- iOS: CaptionComponent --\x3e\\n          <tgui-caption \\n            *ngIf=\\"isIOS\\" \\n            class=\\"description\\"\\n          >\\n            {{ description() }}\\n          </tgui-caption>\\n\\n          \x3c!-- Android/Web: SubheadlineComponent --\x3e\\n          <tgui-subheadline \\n            *ngIf=\\"!isIOS\\" \\n            level=\\"2\\" \\n            class=\\"description\\"\\n          >\\n            {{ description() }}\\n          </tgui-subheadline>\\n        </ng-container>\\n      </div>\\n\\n      <div *ngIf=\\"hasAfterContent\\" class=\\"after\\">\\n        <ng-content select=\\"[content-slot=after]\\"></ng-content>\\n      </div>\\n    </tgui-tappable>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n    }\\n\\n    .wrapper {\\n      --tgui--cell--middle--padding: 16px 0;\\n\\n      display: flex;\\n      align-items: center;\\n      gap: 24px;\\n      padding: 0 24px;\\n    }\\n\\n    .wrapper--ios {\\n      --tgui--cell--middle--padding: 12px 0;\\n      gap: 16px;\\n      padding: 0 16px;\\n    }\\n\\n    .wrapper--hovered {\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    .middle {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      \\n      flex-grow: 1;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n      \\n      padding: var(--tgui--cell--middle--padding);\\n    }\\n\\n    .middle > *,\\n    .title {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n\\n    .wrapper:not(.wrapper--multiline) .middle > *,\\n    .wrapper:not(.wrapper--multiline) .title {\\n      white-space: nowrap;\\n    }\\n\\n    .subhead {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .head {\\n      display: inline-flex;\\n      align-items: center;\\n      gap: 4px;\\n    }\\n\\n    .hint {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .subtitle {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      .wrapper:hover {\\n        background: var(--tgui--tertiary_bg_color);\\n      }\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class CellComponent implements AfterContentInit {\\n  /** Controls the hover state of the component externally, useful for keyboard navigation */\\n  hovered = input<boolean>(false);\\n\\n  /** Allows for multiline content without truncation */\\n  multiline = input<boolean>(false);\\n\\n  /** Interactive animation type */\\n  interactiveAnimation = input<\'opacity\' | \'background\'>(\'background\');\\n\\n  /** Readonly state */\\n  readonly = input<boolean>(false);\\n\\n  /** Disabled state */\\n  disabled = input<boolean>(false);\\n\\n  /** Content displayed above the main content as a subheading */\\n  subhead = input<string | undefined>(undefined);\\n\\n  /** Main content displayed as a header */\\n  title = input<string | undefined>(undefined);\\n\\n  /** Content displayed alongside the header as a hint */\\n  hint = input<string | undefined>(undefined);\\n\\n  /** Content displayed below the header as a subtitle */\\n  subtitle = input<string | undefined>(undefined);\\n\\n  /** Additional description displayed below the subtitle */\\n  description = input<string | undefined>(undefined);\\n\\n  /** Badge component to be displayed next to the title */\\n  titleBadge = input<TemplateRef<any> | undefined>(undefined);\\n\\n  /** Platform service injection */\\n  protected platformService = inject(PlatformService);\\n\\n  /** Typography service for component selection */\\n  protected typographyCellService = inject(TypographyCellService);\\n\\n  /** Query for content slot directives */\\n  @ContentChildren(ContentSlotDirective) contentSlots!: QueryList<ContentSlotDirective>;\\n\\n  // Properties to track content presence\\n  private _hasBeforeContent = false;\\n  private _hasAfterContent = false;\\n\\n  /** Is the platform iOS */\\n  get isIOS(): boolean {\\n    return this.platformService.isIOS();\\n  }\\n\\n  /** Add iOS specific class */\\n  @HostBinding(\'class.ios\')\\n  get isiOS(): boolean {\\n    return this.isIOS;\\n  }\\n\\n  // Getters for content presence\\n  get hasBeforeContent(): boolean {\\n    return this._hasBeforeContent;\\n  }\\n\\n  get hasAfterContent(): boolean {\\n    return this._hasAfterContent;\\n  }\\n\\n  // Check for content after view initialization\\n  ngAfterContentInit(): void {\\n    this.updateContentFlags();\\n    \\n    // Listen for changes to content slots\\n    this.contentSlots.changes.subscribe(() => {\\n      this.updateContentFlags();\\n    });\\n  }\\n  \\n  /**\\n   * Updates content flags based on available slots\\n   */\\n  private updateContentFlags(): void {\\n    this._hasBeforeContent = this.hasSlot(\'before\');\\n    this._hasAfterContent = this.hasSlot(\'after\');\\n  }\\n\\n  /**\\n   * Check if a slot exists in the content\\n   */\\n  private hasSlot(slotName: string): boolean {\\n    return this.contentSlots.some(slot => slot.slotName === slotName);\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n      position: relative;\\n    }\\n\\n    .wrapper {\\n      --tgui--cell--middle--padding: 16px 0;\\n\\n      display: flex;\\n      align-items: center;\\n      gap: 24px;\\n      padding: 0 24px;\\n    }\\n\\n    .wrapper--ios {\\n      --tgui--cell--middle--padding: 12px 0;\\n      gap: 16px;\\n      padding: 0 16px;\\n    }\\n\\n    .wrapper--hovered {\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n\\n    .before, .after {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    .middle {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 2px;\\n      \\n      flex-grow: 1;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n      \\n      padding: var(--tgui--cell--middle--padding);\\n    }\\n\\n    .middle > *,\\n    .title {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n\\n    .wrapper:not(.wrapper--multiline) .middle > *,\\n    .wrapper:not(.wrapper--multiline) .title {\\n      white-space: nowrap;\\n    }\\n\\n    .subhead {\\n      color: var(--tgui--subtitle_text_color);\\n    }\\n\\n    .head {\\n      display: inline-flex;\\n      align-items: center;\\n      gap: 4px;\\n    }\\n\\n    .hint {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .subtitle {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      .wrapper:hover {\\n        background: var(--tgui--tertiary_bg_color);\\n      }\\n    }\\n  \\n","extends":[],"implements":["AfterContentInit"],"accessors":{"isIOS":{"name":"isIOS","getSignature":{"name":"isIOS","type":"boolean","returnType":"boolean","line":297,"rawdescription":"\\nIs the platform iOS","description":"<p>Is the platform iOS</p>\\n"}},"isiOS":{"name":"isiOS","getSignature":{"name":"isiOS","type":"boolean","returnType":"boolean","line":303,"rawdescription":"\\nAdd iOS specific class","description":"<p>Add iOS specific class</p>\\n"}},"hasBeforeContent":{"name":"hasBeforeContent","getSignature":{"name":"hasBeforeContent","type":"boolean","returnType":"boolean","line":308}},"hasAfterContent":{"name":"hasAfterContent","getSignature":{"name":"hasAfterContent","type":"boolean","returnType":"boolean","line":312}}}},{"name":"ChipComponent","id":"component-ChipComponent-26d6c9c5665f7c5886f668658d2dfda9da316fbb59b7af28cff8f599d3031b20120852cfd301b7021a23534aff4ff25173a2d0f5b4eb517cd04fd28ceb48f61c","file":"projects/tgui/src/lib/components/form/chip/chip.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-chip","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n\\n    .tgui-chip {\\n      user-select: none;\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      gap: 8px;\\n      box-sizing: border-box;\\n      padding: 8px 12px;\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-chip--elevated {\\n      background: var(--tgui--surface_primary);\\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\\n    }\\n\\n    .tgui-chip--mono {\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    .tgui-chip--outline {\\n      border-radius: 12px;\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .tgui-chip__text {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      flex: 1 1 0;\\n      color: var(--tgui--plain_foreground);\\n    }\\n\\n    .tgui-chip__before {\\n      margin-right: 2px;\\n    }\\n\\n    .tgui-chip__after {\\n      display: flex;\\n      align-items: center;\\n      margin-top: 1.5px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n  "],"template":"<tgui-tappable\\n  interactiveAnimation=\\"background\\"\\n  [class]=\\"\'tgui-chip tgui-chip--\' + mode\\"\\n  [ngClass]=\\"className\\">\\n  <div *ngIf=\\"before\\" class=\\"tgui-chip__before\\">\\n    <ng-container *ngTemplateOutlet=\\"before\\"></ng-container>\\n  </div>\\n  <tgui-subheadline\\n    class=\\"tgui-chip__text\\"\\n    tag=\\"span\\"\\n    [level]=\\"platformService.isIOS() ? \'2\' : \'1\'\\"\\n    weight=\\"2\\">\\n    <ng-content></ng-content>\\n  </tgui-subheadline>\\n  <div *ngIf=\\"after\\" class=\\"tgui-chip__after\\">\\n    <ng-container *ngTemplateOutlet=\\"after\\"></ng-container>\\n  </div>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"after","deprecated":false,"deprecationMessage":"","rawdescription":"\\nContent or component to be placed after the main text, such as an icon indicating an action.","description":"<p>Content or component to be placed after the main text, such as an icon indicating an action.</p>\\n","line":95,"type":"any","decorators":[]},{"name":"before","deprecated":false,"deprecationMessage":"","rawdescription":"\\nContent or component to be placed before the main text, typically an icon or avatar.","description":"<p>Content or component to be placed before the main text, typically an icon or avatar.</p>\\n","line":92,"type":"any","decorators":[]},{"name":"className","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nCustom class name","description":"<p>Custom class name</p>\\n","line":98,"type":"string","decorators":[]},{"name":"mode","defaultValue":"\'elevated\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDefines the visual style of the chip, affecting its background, border, and shadow.","description":"<p>Defines the visual style of the chip, affecting its background, border, and shadow.</p>\\n","line":89,"type":"\\"elevated\\" | \\"mono\\" | \\"outline\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":100,"modifierKind":[124]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"}],"description":"<p>Renders a compact element representing an input, attribute, or action.\\nChips can include icons, text, or both, and are used to trigger actions,\\ninput information, or represent a complex piece of information in a compact form.</p>\\n","rawdescription":"\\n\\nRenders a compact element representing an input, attribute, or action.\\nChips can include icons, text, or both, and are used to trigger actions,\\ninput information, or represent a complex piece of information in a compact form.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, inject } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nimport { PlatformService } from \'@services/platform.service\';\\nimport { TappableComponent } from \'@components/utils/tappable\';\\nimport { SubheadlineComponent } from \'@components/typography/subheadline/subheadline.component\';\\n\\n/**\\n * Renders a compact element representing an input, attribute, or action. \\n * Chips can include icons, text, or both, and are used to trigger actions, \\n * input information, or represent a complex piece of information in a compact form.\\n */\\n@Component({\\n  selector: \'tgui-chip\',\\n  standalone: true,\\n  imports: [CommonModule, TappableComponent, SubheadlineComponent],\\n  template: `\\n    <tgui-tappable \\n      interactiveAnimation=\\"background\\"\\n      [class]=\\"\'tgui-chip tgui-chip--\' + mode\\" \\n      [ngClass]=\\"className\\">\\n      <div *ngIf=\\"before\\" class=\\"tgui-chip__before\\">\\n        <ng-container *ngTemplateOutlet=\\"before\\"></ng-container>\\n      </div>\\n      <tgui-subheadline \\n        class=\\"tgui-chip__text\\"\\n        tag=\\"span\\"\\n        [level]=\\"platformService.isIOS() ? \'2\' : \'1\'\\"\\n        weight=\\"2\\">\\n        <ng-content></ng-content>\\n      </tgui-subheadline>\\n      <div *ngIf=\\"after\\" class=\\"tgui-chip__after\\">\\n        <ng-container *ngTemplateOutlet=\\"after\\"></ng-container>\\n      </div>\\n    </tgui-tappable>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n\\n    .tgui-chip {\\n      user-select: none;\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      gap: 8px;\\n      box-sizing: border-box;\\n      padding: 8px 12px;\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-chip--elevated {\\n      background: var(--tgui--surface_primary);\\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\\n    }\\n\\n    .tgui-chip--mono {\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    .tgui-chip--outline {\\n      border-radius: 12px;\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .tgui-chip__text {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      flex: 1 1 0;\\n      color: var(--tgui--plain_foreground);\\n    }\\n\\n    .tgui-chip__before {\\n      margin-right: 2px;\\n    }\\n\\n    .tgui-chip__after {\\n      display: flex;\\n      align-items: center;\\n      margin-top: 1.5px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class ChipComponent {\\n  /** Defines the visual style of the chip, affecting its background, border, and shadow. */\\n  @Input() mode: \'elevated\' | \'mono\' | \'outline\' = \'elevated\';\\n  \\n  /** Content or component to be placed before the main text, typically an icon or avatar. */\\n  @Input() before: any;\\n  \\n  /** Content or component to be placed after the main text, such as an icon indicating an action. */\\n  @Input() after: any;\\n  \\n  /** Custom class name */\\n  @Input() className: string = \'\';\\n  \\n  protected platformService = inject(PlatformService);\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n\\n    .tgui-chip {\\n      user-select: none;\\n      display: inline-flex;\\n      align-items: center;\\n      justify-content: center;\\n      gap: 8px;\\n      box-sizing: border-box;\\n      padding: 8px 12px;\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-chip--elevated {\\n      background: var(--tgui--surface_primary);\\n      box-shadow: 0 12px 24px 0 rgba(0, 0, 0, .05);\\n    }\\n\\n    .tgui-chip--mono {\\n      background: var(--tgui--plain_background);\\n    }\\n\\n    .tgui-chip--outline {\\n      border-radius: 12px;\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .tgui-chip__text {\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      flex: 1 1 0;\\n      color: var(--tgui--plain_foreground);\\n    }\\n\\n    .tgui-chip__before {\\n      margin-right: 2px;\\n    }\\n\\n    .tgui-chip__after {\\n      display: flex;\\n      align-items: center;\\n      margin-top: 1.5px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n  \\n","extends":[]},{"name":"DemoSnackbarComponent","id":"component-DemoSnackbarComponent-39b0b4adfc4cc91cf35767fd8dab8e3f874ad5dd8a6af03e69fddb0908881ef8839f4be6d8c25aeb653c442ff4a2dba647367d523c602331d301c4c4ca270764","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"demo-snackbar","styleUrls":[],"styles":[],"template":"<tgui-button (click)=\\"showDeleteSnackbar()\\">Показать уведомление</tgui-button>\\n\\n<tgui-snackbar\\n  *ngIf=\\"isDeleteSnackbarShown\\"\\n  [description]=\\"description\\"\\n  [duration]=\\"duration\\"\\n  [onClose]=\\"closeDeleteSnackbar\\">\\n  {{ mainMessage }}\\n  <ng-template #before>\\n    <div style=\\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\\">\\n      <svg width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <path fill=\\"currentColor\\" d=\\"M18.59,14l6.7-6.7c0.39-0.39,0.39-1.02,0-1.42l-2.17-2.17c-0.39-0.39-1.02-0.39-1.42,0L14,10.41l-6.7-6.7  c-0.39-0.39-1.02-0.39-1.42,0L3.71,5.88c-0.39,0.39-0.39,1.02,0,1.42L10.41,14l-6.7,6.7c-0.39,0.39-0.39,1.02,0,1.42l2.17,2.17  c0.39,0.39,1.02,0.39,1.42,0l6.7-6.7l6.7,6.7c0.39,0.39,1.02,0.39,1.42,0l2.17-2.17c0.39-0.39,0.39-1.02,0-1.42L18.59,14z\\"/>\\n      </svg>\\n    </div>\\n  </ng-template>\\n  <ng-template #after>\\n    <tgui-snackbar-button (click)=\\"showUndoSnackbar()\\">\\n      Отменить\\n    </tgui-snackbar-button>\\n  </ng-template>\\n</tgui-snackbar>\\n\\n<tgui-snackbar\\n  *ngIf=\\"isUndoSnackbarShown\\"\\n  [description]=\\"\'Сообщение возвращено в список\'\\"\\n  [duration]=\\"duration\\"\\n  [onClose]=\\"closeUndoSnackbar\\">\\n  Сообщение восстановлено\\n  <ng-template #before>\\n    <div style=\\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\\">\\n      <svg width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <path fill=\\"currentColor\\" d=\\"M14,2C7.37,2,2,7.37,2,14s5.37,12,12,12s12-5.37,12-12S20.63,2,14,2z M10.5,16.87l-4.13-4.13l1.4-1.4l2.73,2.73 l7.23-7.23l1.4,1.4L10.5,16.87z\\"/>\\n      </svg>\\n    </div>\\n  </ng-template>\\n  <ng-template #link>\\n    <a href=\\"https://telegram.org\\" target=\\"_blank\\" style=\\"color: inherit; text-decoration: underline;\\">Открыть</a>\\n  </ng-template>\\n</tgui-snackbar>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"closeDeleteSnackbar","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":71},{"name":"closeUndoSnackbar","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":80},{"name":"description","defaultValue":"\'Восстановите сообщение в течение 4 секунд\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":64},{"name":"duration","defaultValue":"40000","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":65},{"name":"isDeleteSnackbarShown","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60},{"name":"isUndoSnackbarShown","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":61},{"name":"mainMessage","defaultValue":"\'Сообщение удалено\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":63}],"methodsClass":[{"name":"showDeleteSnackbar","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":67,"deprecated":false,"deprecationMessage":""},{"name":"showUndoSnackbar","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":75,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"SnackbarComponent","type":"component"},{"name":"SnackbarButtonComponent","type":"component"},{"name":"ButtonComponent","type":"component"},{"name":"RootComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj, moduleMetadata } from \'@storybook/angular\';\\nimport { Component } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { SnackbarComponent } from \'../snackbar.component\';\\nimport { SnackbarButtonComponent } from \'../components/snackbar-button/snackbar-button.component\';\\nimport { RootPortalComponent } from \'../../../utils/portal/root-portal.component\';\\nimport { TappableComponent } from \'../../../utils/tappable/tappable.component\';\\nimport { RootComponent } from \'../../../utils/tgui-root/tgui-root.component\';\\nimport { ButtonComponent } from \'../../../blocks/button/button.component\';\\nimport { PlatformService } from \'../../../../services\';\\n\\n// Компонент для интерактивной демонстрации\\n@Component({\\n  selector: \'demo-snackbar\',\\n  standalone: true,\\n  imports: [CommonModule, SnackbarComponent, SnackbarButtonComponent, ButtonComponent, RootComponent],\\n  template: `\\n        <tgui-button (click)=\\"showDeleteSnackbar()\\">Показать уведомление</tgui-button>\\n        \\n        <tgui-snackbar \\n          *ngIf=\\"isDeleteSnackbarShown\\"\\n          [description]=\\"description\\"\\n          [duration]=\\"duration\\" \\n          [onClose]=\\"closeDeleteSnackbar\\">\\n          {{ mainMessage }}\\n          <ng-template #before>\\n            <div style=\\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\\">\\n              <svg width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                <path fill=\\"currentColor\\" d=\\"M18.59,14l6.7-6.7c0.39-0.39,0.39-1.02,0-1.42l-2.17-2.17c-0.39-0.39-1.02-0.39-1.42,0L14,10.41l-6.7-6.7  c-0.39-0.39-1.02-0.39-1.42,0L3.71,5.88c-0.39,0.39-0.39,1.02,0,1.42L10.41,14l-6.7,6.7c-0.39,0.39-0.39,1.02,0,1.42l2.17,2.17  c0.39,0.39,1.02,0.39,1.42,0l6.7-6.7l6.7,6.7c0.39,0.39,1.02,0.39,1.42,0l2.17-2.17c0.39-0.39,0.39-1.02,0-1.42L18.59,14z\\"/>\\n              </svg>\\n            </div>\\n          </ng-template>\\n          <ng-template #after>\\n            <tgui-snackbar-button (click)=\\"showUndoSnackbar()\\">\\n              Отменить\\n            </tgui-snackbar-button>\\n          </ng-template>\\n        </tgui-snackbar>\\n        \\n        <tgui-snackbar \\n          *ngIf=\\"isUndoSnackbarShown\\"\\n          [description]=\\"\'Сообщение возвращено в список\'\\"\\n          [duration]=\\"duration\\" \\n          [onClose]=\\"closeUndoSnackbar\\">\\n          Сообщение восстановлено\\n          <ng-template #before>\\n            <div style=\\"width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;\\">\\n              <svg width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                <path fill=\\"currentColor\\" d=\\"M14,2C7.37,2,2,7.37,2,14s5.37,12,12,12s12-5.37,12-12S20.63,2,14,2z M10.5,16.87l-4.13-4.13l1.4-1.4l2.73,2.73 l7.23-7.23l1.4,1.4L10.5,16.87z\\"/>\\n              </svg>\\n            </div>\\n          </ng-template>\\n          <ng-template #link>\\n            <a href=\\"https://telegram.org\\" target=\\"_blank\\" style=\\"color: inherit; text-decoration: underline;\\">Открыть</a>\\n          </ng-template>\\n        </tgui-snackbar>\\n  `\\n})\\nclass DemoSnackbarComponent {\\n  isDeleteSnackbarShown = false;\\n  isUndoSnackbarShown = false;\\n  \\n  mainMessage = \'Сообщение удалено\';\\n  description = \'Восстановите сообщение в течение 4 секунд\';\\n  duration = 40000;\\n  \\n  showDeleteSnackbar() {\\n    this.isDeleteSnackbarShown = true;\\n  }\\n  \\n  closeDeleteSnackbar = () => {\\n    this.isDeleteSnackbarShown = false;\\n  }\\n  \\n  showUndoSnackbar() {\\n    this.isDeleteSnackbarShown = false;\\n    this.isUndoSnackbarShown = true;\\n  }\\n  \\n  closeUndoSnackbar = () => {\\n    this.isUndoSnackbarShown = false;\\n  }\\n}\\n\\nconst meta: Meta<SnackbarComponent> = {\\n  title: \'Feedback/Snackbar\',\\n  component: SnackbarComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        SnackbarComponent,\\n        SnackbarButtonComponent,\\n        RootPortalComponent,\\n        TappableComponent,\\n        RootComponent,\\n        ButtonComponent,\\n        DemoSnackbarComponent\\n      ],\\n      providers: [PlatformService]\\n    })\\n  ],\\n  parameters: {\\n    layout: \'fullscreen\'\\n  },\\n  argTypes: {\\n    description: {\\n      control: \'text\',\\n      description: \'Additional text description shown below the main message\'\\n    },\\n    duration: {\\n      control: {\\n        type: \'number\',\\n        min: 1000,\\n        max: 10000,\\n        step: 1000\\n      },\\n      description: \'Duration in milliseconds before the snackbar is automatically closed\'\\n    },\\n    beforeTemplate: { control: false },\\n    afterTemplate: { control: false },\\n    linkTemplate: { control: false },\\n    onClose: { control: false }\\n  }\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<SnackbarComponent>;\\n\\nexport const Playground: Story = {\\n  parameters: {\\n    controls: { hideNoControlsWarning: true }\\n  },\\n  render: () => ({\\n    template: `<demo-snackbar></demo-snackbar>`\\n  })\\n};\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"DividerComponent","id":"component-DividerComponent-c40014d9d2ffce3309b2a27d5daf2e44481f15daeadf5eb2171df50b95c7b0ece05d190e94b317d04dba159fd6193a2971385bff8490fc11136542eac6cd2fb3","file":"projects/tgui/src/lib/components/misc/divider/divider.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-divider","styleUrls":[],"styles":["\\n    .tgui-divider {\\n      margin: 0;\\n      border-top: none;\\n      border-width: var(--tgui--border--width, 1px);\\n      border-color: var(--tgui--outline);\\n      width: 100%;\\n    }\\n  "],"template":"<hr class=\\"tgui-divider\\">","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Represents a horizontal line used to separate content within a layout or component.\\nThe component allows customization through custom CSS classes.</p>\\n","rawdescription":"\\n\\nRepresents a horizontal line used to separate content within a layout or component.\\nThe component allows customization through custom CSS classes.\\n","type":"component","sourceCode":"import { Component, ChangeDetectionStrategy, ViewEncapsulation, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Represents a horizontal line used to separate content within a layout or component.\\n * The component allows customization through custom CSS classes.\\n */\\n@Component({\\n  selector: \'tgui-divider\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  template: `<hr class=\\"tgui-divider\\">`,\\n  styles: [`\\n    .tgui-divider {\\n      margin: 0;\\n      border-top: none;\\n      border-width: var(--tgui--border--width, 1px);\\n      border-color: var(--tgui--outline);\\n      width: 100%;\\n    }\\n  `]\\n})\\nexport class DividerComponent {} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .tgui-divider {\\n      margin: 0;\\n      border-top: none;\\n      border-width: var(--tgui--border--width, 1px);\\n      border-color: var(--tgui--outline);\\n      width: 100%;\\n    }\\n  \\n","extends":[]},{"name":"FixedLayoutComponent","id":"component-FixedLayoutComponent-11fb61b8898ec148527fb510be1ca8749432770579ea7e5f42e03de1ca314ced663c7faab204b627eae9c28a9fc15f8a96386100c6ec29d97305e8ced6c58903","file":"projects/tgui/src/lib/components/layout/fixed-layout/fixed-layout.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-fixed-layout","styleUrls":[],"styles":["\\n    :host {\\n      position: fixed;\\n      left: 0;\\n      right: 0;\\n      display: block;\\n    }\\n\\n    :host.vertical-top {\\n      top: 0;\\n    }\\n\\n    :host.vertical-bottom {\\n      padding-bottom: var(--tgui--safe_area_inset_bottom);\\n      bottom: 0;\\n    }\\n  "],"template":"<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"vertical","defaultValue":"input<\'top\' | \'bottom\'>(\'bottom\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":51}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.vertical-bottom","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.vertical-top","deprecated":false,"deprecationMessage":"","line":55,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>This component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\\nIt&#39;s useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.</p>\\n","rawdescription":"\\n\\nThis component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\\nIt\'s useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  input, \\n  computed, \\n  HostBinding,\\n  inject,\\n  ElementRef\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'@services/platform.service\';\\n\\n/**\\n * This component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\\n * It\'s useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.\\n */\\n@Component({\\n  selector: \'tgui-fixed-layout\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-content></ng-content>\\n  `,\\n  styles: [`\\n    :host {\\n      position: fixed;\\n      left: 0;\\n      right: 0;\\n      display: block;\\n    }\\n\\n    :host.vertical-top {\\n      top: 0;\\n    }\\n\\n    :host.vertical-bottom {\\n      padding-bottom: var(--tgui--safe_area_inset_bottom);\\n      bottom: 0;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class FixedLayoutComponent {\\n\\n  // Inputs\\n  vertical = input<\'top\' | \'bottom\'>(\'bottom\');\\n\\n  // Host bindings for vertical position\\n  @HostBinding(\'class.vertical-top\')\\n  get isTopPosition(): boolean {\\n    return this.vertical() === \'top\';\\n  }\\n\\n  @HostBinding(\'class.vertical-bottom\')\\n  get isBottomPosition(): boolean {\\n    return this.vertical() === \'bottom\';\\n  }\\n\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: fixed;\\n      left: 0;\\n      right: 0;\\n      display: block;\\n    }\\n\\n    :host.vertical-top {\\n      top: 0;\\n    }\\n\\n    :host.vertical-bottom {\\n      padding-bottom: var(--tgui--safe_area_inset_bottom);\\n      bottom: 0;\\n    }\\n  \\n","extends":[],"accessors":{"isTopPosition":{"name":"isTopPosition","getSignature":{"name":"isTopPosition","type":"boolean","returnType":"boolean","line":55}},"isBottomPosition":{"name":"isBottomPosition","getSignature":{"name":"isBottomPosition","type":"boolean","returnType":"boolean","line":60}}}},{"name":"HeadlineComponent","id":"component-HeadlineComponent-2b00b431869a06dad51a68baf8d8dd32cd4499291e073136554c9cbcd20a30e2619205778faecc68d2f1c38702fdbe3f544f6713c064b9974f4b33beaac59d9c","file":"projects/tgui/src/lib/components/typography/headline/headline.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-headline","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--headline--font_size);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'1\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe size level of the headline, influencing its styling.\\n","description":"<p>The size level of the headline, influencing its styling.</p>\\n","line":54,"type":"\\"1\\" | \\"2\\"","decorators":[]},{"name":"tag","defaultValue":"\'h5\'","deprecated":false,"deprecationMessage":"","line":57,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":65,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":61,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":64,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":66,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":67,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":68,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The Headline component serves as a wrapper for text that is intended to be displayed prominently,\\ntypically used for section headings or important titles within the application. It leverages the Typography\\ncomponent for consistent typographic styling, offering a range of customization options through its props.\\nThe component defaults to an <code>&lt;h5&gt;</code> HTML tag, providing semantic meaning and ensuring good SEO practices,\\nbut can be customized as needed.</p>\\n","rawdescription":"\\n\\nThe Headline component serves as a wrapper for text that is intended to be displayed prominently,\\ntypically used for section headings or important titles within the application. It leverages the Typography\\ncomponent for consistent typographic styling, offering a range of customization options through its props.\\nThe component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\\nbut can be customized as needed.\\n","type":"component","sourceCode":"import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * The Headline component serves as a wrapper for text that is intended to be displayed prominently,\\n * typically used for section headings or important titles within the application. It leverages the Typography\\n * component for consistent typographic styling, offering a range of customization options through its props.\\n * The component defaults to an `<h5>` HTML tag, providing semantic meaning and ensuring good SEO practices,\\n * but can be customized as needed.\\n */\\n@Component({\\n  selector: \'tgui-headline\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--headline--font_size);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class HeadlineComponent extends TypographyComponent {\\n  /**\\n   * The size level of the headline, influencing its styling.\\n   */\\n  @Input() level: \'1\' | \'2\' = \'1\';\\n  \\n  // Override tag to use h5 by default\\n  @Input() override tag = \'h5\';\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--headline--font_size);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--headline--font_size) * 0.95);\\n      line-height: var(--tgui--headline--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":60}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":61}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":64}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":65}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":66}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":67}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":68}}}},{"name":"IconButtonComponent","id":"component-IconButtonComponent-b0b9399ec39c5839bad2229bbb321956240e5ff8c2a068fb1a6e640b6ca46853b8fa0e8fef2dcea36928fd1a3a977b8ca0210797909d435ee405762731ee06dc","file":"projects/tgui/src/lib/components/blocks/icon-button/icon-button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon-button","styleUrls":["./icon-button.component.css"],"styles":[],"template":"<tgui-tappable\\n  [interactiveAnimation]=\\"interactiveAnimation\\"\\n  [readonly]=\\"disabled\\"\\n  [disabled]=\\"disabled\\"\\n  class=\\"icon-button-tappable\\"\\n>\\n  <ng-content></ng-content>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDisables the button","description":"<p>Disables the button</p>\\n","line":42,"type":"boolean","decorators":[]},{"name":"interactiveAnimation","defaultValue":"\'background\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nType of interactive animation","description":"<p>Type of interactive animation</p>\\n","line":45,"type":"\\"opacity\\" | \\"background\\"","decorators":[]},{"name":"mode","defaultValue":"\'bezeled\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDefines the button\'s visual style, affecting its color and background.","description":"<p>Defines the button&#39;s visual style, affecting its color and background.</p>\\n","line":39,"type":"\\"bezeled\\" | \\"plain\\" | \\"gray\\" | \\"outline\\"","decorators":[]},{"name":"size","defaultValue":"\'m\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSpecifies the button size, affecting icon scaling. Recommended icon sizes are 20px for \'s\', 24px for \'m\', and 28px for \'l\'.","description":"<p>Specifies the button size, affecting icon scaling. Recommended icon sizes are 20px for &#39;s&#39;, 24px for &#39;m&#39;, and 28px for &#39;l&#39;.</p>\\n","line":36,"type":"\\"s\\" | \\"m\\" | \\"l\\"","decorators":[]},{"name":"type","defaultValue":"\'button\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nType of button","description":"<p>Type of button</p>\\n","line":48,"type":"\\"button\\" | \\"submit\\" | \\"reset\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":50,"modifierKind":[123]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.disabled","deprecated":false,"deprecationMessage":"","line":68,"type":"boolean","decorators":[]},{"name":"attr.type","deprecated":false,"deprecationMessage":"","line":67,"type":"\\"button\\" | \\"submit\\" | \\"reset\\"","decorators":[]},{"name":"class.disabled","deprecated":false,"deprecationMessage":"","line":64,"type":"boolean","decorators":[]},{"name":"class.mode-bezeled","deprecated":false,"deprecationMessage":"","line":58,"type":"boolean","decorators":[]},{"name":"class.mode-gray","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.mode-outline","deprecated":false,"deprecationMessage":"","line":61,"type":"boolean","decorators":[]},{"name":"class.mode-plain","deprecated":false,"deprecationMessage":"","line":59,"type":"boolean","decorators":[]},{"name":"class.size-l","deprecated":false,"deprecationMessage":"","line":55,"type":"boolean","decorators":[]},{"name":"class.size-m","deprecated":false,"deprecationMessage":"","line":54,"type":"boolean","decorators":[]},{"name":"class.size-s","deprecated":false,"deprecationMessage":"","line":53,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"}],"description":"<p>Renders an icon button with customizable size and mode. It utilizes the <code>Tappable</code> component for enhanced\\ntouch interaction, allowing it to serve various UI actions efficiently.</p>\\n","rawdescription":"\\n\\nRenders an icon button with customizable size and mode. It utilizes the `Tappable` component for enhanced\\ntouch interaction, allowing it to serve various UI actions efficiently.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding,\\n  ElementRef,\\n  inject\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TappableComponent } from \'../../utils\';\\n\\n/**\\n * Renders an icon button with customizable size and mode. It utilizes the `Tappable` component for enhanced\\n * touch interaction, allowing it to serve various UI actions efficiently.\\n */\\n@Component({\\n  selector: \'tgui-icon-button\',\\n  standalone: true,\\n  imports: [CommonModule, TappableComponent],\\n  template: `\\n    <tgui-tappable \\n      [interactiveAnimation]=\\"interactiveAnimation\\" \\n      [readonly]=\\"disabled\\"\\n      [disabled]=\\"disabled\\"\\n      class=\\"icon-button-tappable\\"\\n    >\\n      <ng-content></ng-content>\\n    </tgui-tappable>\\n  `,\\n  styleUrls: [\'./icon-button.component.css\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class IconButtonComponent {\\n  /** Specifies the button size, affecting icon scaling. Recommended icon sizes are 20px for \'s\', 24px for \'m\', and 28px for \'l\'. */\\n  @Input() size: \'s\' | \'m\' | \'l\' = \'m\';\\n  \\n  /** Defines the button\'s visual style, affecting its color and background. */\\n  @Input() mode: \'bezeled\' | \'plain\' | \'gray\' | \'outline\' = \'bezeled\';\\n  \\n  /** Disables the button */\\n  @Input() disabled = false;\\n  \\n  /** Type of interactive animation */\\n  @Input() interactiveAnimation: \'opacity\' | \'background\' = \'background\';\\n  \\n  /** Type of button */\\n  @Input() type: \'button\' | \'submit\' | \'reset\' = \'button\';\\n  \\n  private elementRef = inject(ElementRef);\\n  \\n  // Host bindings for size classes\\n  @HostBinding(\'class.size-s\') get isSizeS() { return this.size === \'s\'; }\\n  @HostBinding(\'class.size-m\') get isSizeM() { return this.size === \'m\'; }\\n  @HostBinding(\'class.size-l\') get isSizeL() { return this.size === \'l\'; }\\n  \\n  // Host bindings for mode classes\\n  @HostBinding(\'class.mode-bezeled\') get isModeBezeled() { return this.mode === \'bezeled\'; }\\n  @HostBinding(\'class.mode-plain\') get isModePlain() { return this.mode === \'plain\'; }\\n  @HostBinding(\'class.mode-gray\') get isModeGray() { return this.mode === \'gray\'; }\\n  @HostBinding(\'class.mode-outline\') get isModeOutline() { return this.mode === \'outline\'; }\\n  \\n  // Host bindings for state classes\\n  @HostBinding(\'class.disabled\') get isDisabled() { return this.disabled; }\\n  \\n  // Host bindings for attributes\\n  @HostBinding(\'attr.type\') get buttonType() { return this.type; }\\n  @HostBinding(\'attr.disabled\') get buttonDisabled() { return this.disabled ? true : null; }\\n} ","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: inline-flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: none;\\n  border-radius: 8px;\\n  text-decoration: none;\\n  box-sizing: border-box;\\n  position: relative;\\n  cursor: pointer;\\n  -webkit-user-select: none;\\n  user-select: none;\\n  -webkit-tap-highlight-color: transparent;\\n  touch-action: manipulation;\\n}\\n\\n:host::after {\\n  content: \'\';\\n  position: absolute;\\n  inset: 0;\\n  opacity: 0;\\n  transition: opacity .15s ease-out;\\n  background: var(--tgui--bg_color);\\n  border-radius: inherit;\\n  pointer-events: none;\\n}\\n\\n.icon-button-tappable {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  width: 100%;\\n  height: 100%;\\n  border-radius: inherit;\\n}\\n\\n/* Size Variants */\\n:host.size-s {\\n  width: 36px;\\n  height: 36px;\\n  border-radius: 20px;\\n}\\n\\n:host.size-m {\\n  width: 42px;\\n  height: 42px;\\n  border-radius: 8px;\\n}\\n\\n:host.size-l {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 8px;\\n}\\n\\n/* Mode Variants */\\n:host.mode-filled {\\n  --tgui--button--hovered-opacity: .15;\\n  --tgui--button--spinner-color: var(--tgui--button_text_color);\\n  --tgui--ripple-color: rgba(255, 255, 255, 0.5);\\n  color: var(--tgui--button_text_color);\\n  background: var(--tgui--button_color);\\n}\\n\\n:host.mode-bezeled {\\n  --tgui--button--hovered-opacity: .07;\\n  --tgui--button--spinner-color: var(--tgui--link_color);\\n  --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n  color: var(--tgui--link_color);\\n  background: var(--tgui--secondary_fill);\\n}\\n\\n:host.mode-plain {\\n  --tgui--button--hovered-opacity: .03;\\n  --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n  --tgui--ripple-color: rgba(0, 120, 255, 0.5);\\n  color: var(--tgui--link_color);\\n  background: transparent;\\n}\\n\\n:host.mode-gray {\\n  --tgui--button--hovered-opacity: .5;\\n  --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n  --tgui--ripple-color: rgba(0, 0, 0, 0.4);\\n  color: var(--tgui--plain_foreground);\\n  background: var(--tgui--plain_background);\\n}\\n\\n:host.mode-outline {\\n  --tgui--button--hovered-opacity: .5;\\n  --tgui--button--spinner-color: var(--tgui--plain_foreground);\\n  --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n  color: var(--tgui--plain_foreground);\\n  background: inherit;\\n  box-shadow: 0 0 0 1px var(--tgui--outline);\\n}\\n\\n:host.mode-white {\\n  --tgui--button--hovered-opacity: .5;\\n  --tgui--button--spinner-color: var(--tgui--surface_dark);\\n  --tgui--ripple-color: rgba(0, 0, 0, 0.3);\\n  background: var(--tgui--white);\\n  color: var(--tgui--black);\\n}\\n\\n/* Platform Specific */\\n:host-context(.tgui-platform-ios) :host.size-m {\\n  border-radius: 12px;\\n}\\n\\n:host-context(.tgui-platform-ios) :host::after {\\n  content: unset;\\n}\\n\\n/* Disabled State */\\n:host.disabled {\\n  opacity: 0.6;\\n  cursor: default;\\n  pointer-events: none;\\n}","styleUrl":"./icon-button.component.css"}],"stylesData":"","extends":[],"accessors":{"isSizeS":{"name":"isSizeS","getSignature":{"name":"isSizeS","type":"","returnType":"","line":53}},"isSizeM":{"name":"isSizeM","getSignature":{"name":"isSizeM","type":"","returnType":"","line":54}},"isSizeL":{"name":"isSizeL","getSignature":{"name":"isSizeL","type":"","returnType":"","line":55}},"isModeBezeled":{"name":"isModeBezeled","getSignature":{"name":"isModeBezeled","type":"","returnType":"","line":58}},"isModePlain":{"name":"isModePlain","getSignature":{"name":"isModePlain","type":"","returnType":"","line":59}},"isModeGray":{"name":"isModeGray","getSignature":{"name":"isModeGray","type":"","returnType":"","line":60}},"isModeOutline":{"name":"isModeOutline","getSignature":{"name":"isModeOutline","type":"","returnType":"","line":61}},"isDisabled":{"name":"isDisabled","getSignature":{"name":"isDisabled","type":"","returnType":"","line":64}},"buttonType":{"name":"buttonType","getSignature":{"name":"buttonType","type":"","returnType":"","line":67}},"buttonDisabled":{"name":"buttonDisabled","getSignature":{"name":"buttonDisabled","type":"","returnType":"","line":68}}}},{"name":"IconContainerComponent","id":"component-IconContainerComponent-ec8dd292badc8343eefcd514aea5dbe48262f73661fbff511a0c33729ce7cc08aae44cc59e71037806fca8e44d37fe0b6c624263050a5553bb503c6de6aed340","file":"projects/tgui/src/lib/components/blocks/icon-container/icon-container.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon-container","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      color: var(--tgui--link_color);\\n    }\\n  "],"template":"<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Icon container component provides a wrapper for icons with proper styling</p>\\n","rawdescription":"\\n\\nIcon container component provides a wrapper for icons with proper styling\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  HostBinding,\\n  Input\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Icon container component provides a wrapper for icons with proper styling\\n */\\n@Component({\\n  selector: \'tgui-icon-container\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-content></ng-content>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      color: var(--tgui--link_color);\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class IconContainerComponent {\\n  // Additional functionality can be added here if needed\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      color: var(--tgui--link_color);\\n    }\\n  \\n","extends":[]},{"name":"IconsShowcaseComponent","id":"component-IconsShowcaseComponent-1e456cf6e75df3bc88b746ef94c4fe0b4899f75dbf2e5518816396eb6fd9e2a086bd8bae474936528689650748dd54afe56919ae2bf844248e65c62141f1ab4e","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icons-showcase","styleUrls":[],"styles":["\\n    :host {\\n      /* Temporary define variable for demo purposes */\\n      --tgui-link_color: #2196f3;\\n    }\\n\\n    .icon-container {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      padding: 12px;\\n    }\\n  "],"template":"<div style=\\"display: flex; color: var(--tgui-link_color); flex-direction: column; gap: 24px; padding: 16px;\\">\\n  \x3c!-- 12x12 Icons --\x3e\\n  <div>\\n    <h2>12×12 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon12-quote></tgui-icon12-quote>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Quote</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 16x16 Icons --\x3e\\n  <div>\\n    <h2>16×16 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon16-cancel></tgui-icon16-cancel>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Cancel</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon16-chevron></tgui-icon16-chevron>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Chevron</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 20x20 Icons --\x3e\\n  <div>\\n    <h2>20×20 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-chevron-down></tgui-icon20-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">ChevronDown</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-copy></tgui-icon20-copy>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Copy</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n        <tgui-caption style=\\"margin-top: 8px;\\">QuestionMark</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-select></tgui-icon20-select>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Select</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-select-ios></tgui-icon20-select-ios>\\n        <tgui-caption style=\\"margin-top: 8px;\\">SelectIos</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 24x24 Icons --\x3e\\n  <div>\\n    <h2>24×24 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-cancel></tgui-icon24-cancel>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Cancel</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-channel></tgui-icon24-channel>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Channel</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-chat></tgui-icon24-chat>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Chat</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-chevron-down></tgui-icon24-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">ChevronDown</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-chevron-left></tgui-icon24-chevron-left>\\n        <tgui-caption style=\\"margin-top: 8px;\\">ChevronLeft</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-chevron-right></tgui-icon24-chevron-right>\\n        <tgui-caption style=\\"margin-top: 8px;\\">ChevronRight</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-close></tgui-icon24-close>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Close</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-notifications></tgui-icon24-notifications>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Notifications</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-person-remove></tgui-icon24-person-remove>\\n        <tgui-caption style=\\"margin-top: 8px;\\">PersonRemove</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-qr></tgui-icon24-qr>\\n        <tgui-caption style=\\"margin-top: 8px;\\">QR</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon24-sun-low></tgui-icon24-sun-low>\\n        <tgui-caption style=\\"margin-top: 8px;\\">SunLow</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 28x28 Icons --\x3e\\n  <div>\\n    <h2>28×28 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-add-circle></tgui-icon28-add-circle>\\n        <tgui-caption style=\\"margin-top: 8px;\\">AddCircle</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-archive></tgui-icon28-archive>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Archive</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-attach></tgui-icon28-attach>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Attach</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-chat></tgui-icon28-chat>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Chat</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-close></tgui-icon28-close>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Close</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-close-ambient></tgui-icon28-close-ambient>\\n        <tgui-caption style=\\"margin-top: 8px;\\">CloseAmbient</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-devices></tgui-icon28-devices>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Devices</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-edit></tgui-icon28-edit>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Edit</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-heart></tgui-icon28-heart>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Heart</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon28-stats></tgui-icon28-stats>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Stats</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 32x32 Icons --\x3e\\n  <div>\\n    <h2>32×32 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\\n        <tgui-caption style=\\"margin-top: 8px;\\">ProfileColoredSquare</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- 36x36 Icons --\x3e\\n  <div>\\n    <h2>36×36 Icons</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon36-backspace></tgui-icon36-backspace>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Backspace</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- Custom Colors --\x3e\\n  <div>\\n    <h2>Custom Colors</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-chevron-down style=\\"color: #ff5722;\\"></tgui-icon20-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Orange</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-copy style=\\"color: #4caf50;\\"></tgui-icon20-copy>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Green</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-question-mark style=\\"color: #9c27b0;\\"></tgui-icon20-question-mark>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Purple</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon16-cancel style=\\"color: #f44336;\\"></tgui-icon16-cancel>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Red</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\\n        <tgui-caption style=\\"margin-top: 8px;\\">Original colors</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n\\n  \x3c!-- Different Sizes --\x3e\\n  <div>\\n    <h2>Different Sizes</h2>\\n    <div style=\\"display: flex; gap: 16px; flex-wrap: wrap; align-items: center;\\">\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-chevron-down [props]=\\"{ width: 16, height: 16 }\\"></tgui-icon20-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">16px</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-chevron-down [props]=\\"{ width: 24, height: 24 }\\"></tgui-icon20-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">24px</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon20-chevron-down [props]=\\"{ width: 32, height: 32 }\\"></tgui-icon20-chevron-down>\\n        <tgui-caption style=\\"margin-top: 8px;\\">32px</tgui-caption>\\n      </div>\\n      <div class=\\"icon-container\\">\\n        <tgui-icon36-backspace [props]=\\"{ width: 48, height: 48 }\\"></tgui-icon36-backspace>\\n        <tgui-caption style=\\"margin-top: 8px;\\">48px</tgui-caption>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CaptionComponent","type":"component"},{"name":"TguiIcon12Quote"},{"name":"TguiIcon16Cancel"},{"name":"TguiIcon16Chevron"},{"name":"TguiIcon20ChevronDown"},{"name":"TguiIcon20Copy"},{"name":"TguiIcon20QuestionMark"},{"name":"TguiIcon20Select"},{"name":"TguiIcon20SelectIos"},{"name":"TguiIcon24Cancel"},{"name":"TguiIcon24Channel"},{"name":"TguiIcon24Chat"},{"name":"TguiIcon24ChevronDown"},{"name":"TguiIcon24ChevronLeft"},{"name":"TguiIcon24ChevronRight"},{"name":"TguiIcon24Close"},{"name":"TguiIcon24Notifications"},{"name":"TguiIcon24PersonRemove"},{"name":"TguiIcon24Qr"},{"name":"TguiIcon24SunLow"},{"name":"TguiIcon28AddCircle"},{"name":"TguiIcon28Archive"},{"name":"TguiIcon28Attach"},{"name":"TguiIcon28Chat"},{"name":"TguiIcon28Close"},{"name":"TguiIcon28CloseAmbient"},{"name":"TguiIcon28Devices"},{"name":"TguiIcon28Edit"},{"name":"TguiIcon28Heart"},{"name":"TguiIcon28Stats"},{"name":"TguiIcon32ProfileColoredSquare"},{"name":"TguiIcon36Backspace"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj } from \'@storybook/angular\';\\nimport { Component } from \'@angular/core\';\\nimport { CaptionComponent } from \'../../components/typography/caption/caption.component\';\\n\\n// 12x12 icons\\nimport { TguiIcon12Quote } from \'../icon12/tgui-icon12-quote\';\\n\\n// 16x16 icons\\nimport { TguiIcon16Cancel } from \'../icon16/tgui-icon16-cancel\';\\nimport { TguiIcon16Chevron } from \'../icon16/tgui-icon16-chevron\';\\n\\n// 20x20 icons\\nimport { TguiIcon20ChevronDown } from \'../icon20/tgui-icon20-chevron-down\';\\nimport { TguiIcon20Copy } from \'../icon20/tgui-icon20-copy\';\\nimport { TguiIcon20QuestionMark } from \'../icon20/tgui-icon20-question-mark\';\\nimport { TguiIcon20Select } from \'../icon20/tgui-icon20-select\';\\nimport { TguiIcon20SelectIos } from \'../icon20/tgui-icon20-select-ios\';\\n\\n// 24x24 icons\\nimport { TguiIcon24Cancel } from \'../icon24/tgui-icon24-cancel\';\\nimport { TguiIcon24Channel } from \'../icon24/tgui-icon24-channel\';\\nimport { TguiIcon24Chat } from \'../icon24/tgui-icon24-chat\';\\nimport { TguiIcon24ChevronDown } from \'../icon24/tgui-icon24-chevron-down\';\\nimport { TguiIcon24ChevronLeft } from \'../icon24/tgui-icon24-chevron-left\';\\nimport { TguiIcon24ChevronRight } from \'../icon24/tgui-icon24-chevron-right\';\\nimport { TguiIcon24Close } from \'../icon24/tgui-icon24-close\';\\nimport { TguiIcon24Notifications } from \'../icon24/tgui-icon24-notifications\';\\nimport { TguiIcon24PersonRemove } from \'../icon24/tgui-icon24-person-remove\';\\nimport { TguiIcon24Qr } from \'../icon24/tgui-icon24-qr\';\\nimport { TguiIcon24SunLow } from \'../icon24/tgui-icon24-sun-low\';\\n\\n// 28x28 icons\\nimport { TguiIcon28AddCircle } from \'../icon28/tgui-icon28-add-circle\';\\nimport { TguiIcon28Archive } from \'../icon28/tgui-icon28-archive\';\\nimport { TguiIcon28Attach } from \'../icon28/tgui-icon28-attach\';\\nimport { TguiIcon28Chat } from \'../icon28/tgui-icon28-chat\';\\nimport { TguiIcon28Close } from \'../icon28/tgui-icon28-close\';\\nimport { TguiIcon28CloseAmbient } from \'../icon28/tgui-icon28-close-ambient\';\\nimport { TguiIcon28Devices } from \'../icon28/tgui-icon28-devices\';\\nimport { TguiIcon28Edit } from \'../icon28/tgui-icon28-edit\';\\nimport { TguiIcon28Heart } from \'../icon28/tgui-icon28-heart\';\\nimport { TguiIcon28Stats } from \'../icon28/tgui-icon28-stats\';\\n\\n// 32x32 icons\\nimport { TguiIcon32ProfileColoredSquare } from \'../icon32/tgui-icon32-profile-colored-square\';\\n\\n// 36x36 icons\\nimport { TguiIcon36Backspace } from \'../icon36/tgui-icon36-backspace\';\\n\\n@Component({\\n  selector: \'tgui-icons-showcase\',\\n  standalone: true,\\n  imports: [\\n    // Typography\\n    CaptionComponent,\\n    \\n    // 12x12 icons\\n    TguiIcon12Quote,\\n    \\n    // 16x16 icons\\n    TguiIcon16Cancel,\\n    TguiIcon16Chevron,\\n    \\n    // 20x20 icons\\n    TguiIcon20ChevronDown, \\n    TguiIcon20Copy, \\n    TguiIcon20QuestionMark, \\n    TguiIcon20Select, \\n    TguiIcon20SelectIos,\\n    \\n    // 24x24 icons\\n    TguiIcon24Cancel,\\n    TguiIcon24Channel,\\n    TguiIcon24Chat,\\n    TguiIcon24ChevronDown,\\n    TguiIcon24ChevronLeft,\\n    TguiIcon24ChevronRight,\\n    TguiIcon24Close,\\n    TguiIcon24Notifications,\\n    TguiIcon24PersonRemove,\\n    TguiIcon24Qr,\\n    TguiIcon24SunLow,\\n    \\n    // 28x28 icons\\n    TguiIcon28AddCircle,\\n    TguiIcon28Archive,\\n    TguiIcon28Attach,\\n    TguiIcon28Chat,\\n    TguiIcon28Close,\\n    TguiIcon28CloseAmbient,\\n    TguiIcon28Devices,\\n    TguiIcon28Edit,\\n    TguiIcon28Heart,\\n    TguiIcon28Stats,\\n    \\n    // 32x32 icons\\n    TguiIcon32ProfileColoredSquare,\\n    \\n    // 36x36 icons\\n    TguiIcon36Backspace\\n  ],\\n  template: `\\n    <div style=\\"display: flex; color: var(--tgui-link_color); flex-direction: column; gap: 24px; padding: 16px;\\">\\n      \x3c!-- 12x12 Icons --\x3e\\n      <div>\\n        <h2>12×12 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon12-quote></tgui-icon12-quote>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Quote</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n\\n      \x3c!-- 16x16 Icons --\x3e\\n      <div>\\n        <h2>16×16 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon16-cancel></tgui-icon16-cancel>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Cancel</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon16-chevron></tgui-icon16-chevron>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Chevron</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n\\n      \x3c!-- 20x20 Icons --\x3e\\n      <div>\\n        <h2>20×20 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-chevron-down></tgui-icon20-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">ChevronDown</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-copy></tgui-icon20-copy>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Copy</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n            <tgui-caption style=\\"margin-top: 8px;\\">QuestionMark</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-select></tgui-icon20-select>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Select</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-select-ios></tgui-icon20-select-ios>\\n            <tgui-caption style=\\"margin-top: 8px;\\">SelectIos</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      \x3c!-- 24x24 Icons --\x3e\\n      <div>\\n        <h2>24×24 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-cancel></tgui-icon24-cancel>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Cancel</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-channel></tgui-icon24-channel>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Channel</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-chat></tgui-icon24-chat>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Chat</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-chevron-down></tgui-icon24-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">ChevronDown</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-chevron-left></tgui-icon24-chevron-left>\\n            <tgui-caption style=\\"margin-top: 8px;\\">ChevronLeft</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-chevron-right></tgui-icon24-chevron-right>\\n            <tgui-caption style=\\"margin-top: 8px;\\">ChevronRight</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-close></tgui-icon24-close>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Close</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-notifications></tgui-icon24-notifications>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Notifications</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-person-remove></tgui-icon24-person-remove>\\n            <tgui-caption style=\\"margin-top: 8px;\\">PersonRemove</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n            <tgui-caption style=\\"margin-top: 8px;\\">QR</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon24-sun-low></tgui-icon24-sun-low>\\n            <tgui-caption style=\\"margin-top: 8px;\\">SunLow</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      \x3c!-- 28x28 Icons --\x3e\\n      <div>\\n        <h2>28×28 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-add-circle></tgui-icon28-add-circle>\\n            <tgui-caption style=\\"margin-top: 8px;\\">AddCircle</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-archive></tgui-icon28-archive>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Archive</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-attach></tgui-icon28-attach>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Attach</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-chat></tgui-icon28-chat>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Chat</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-close></tgui-icon28-close>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Close</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-close-ambient></tgui-icon28-close-ambient>\\n            <tgui-caption style=\\"margin-top: 8px;\\">CloseAmbient</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-devices></tgui-icon28-devices>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Devices</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-edit></tgui-icon28-edit>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Edit</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-heart></tgui-icon28-heart>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Heart</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon28-stats></tgui-icon28-stats>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Stats</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      \x3c!-- 32x32 Icons --\x3e\\n      <div>\\n        <h2>32×32 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\\n            <tgui-caption style=\\"margin-top: 8px;\\">ProfileColoredSquare</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      \x3c!-- 36x36 Icons --\x3e\\n      <div>\\n        <h2>36×36 Icons</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon36-backspace></tgui-icon36-backspace>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Backspace</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n\\n      \x3c!-- Custom Colors --\x3e\\n      <div>\\n        <h2>Custom Colors</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-chevron-down style=\\"color: #ff5722;\\"></tgui-icon20-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Orange</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-copy style=\\"color: #4caf50;\\"></tgui-icon20-copy>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Green</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-question-mark style=\\"color: #9c27b0;\\"></tgui-icon20-question-mark>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Purple</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon16-cancel style=\\"color: #f44336;\\"></tgui-icon16-cancel>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Red</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon32-profile-colored-square></tgui-icon32-profile-colored-square>\\n            <tgui-caption style=\\"margin-top: 8px;\\">Original colors</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n\\n      \x3c!-- Different Sizes --\x3e\\n      <div>\\n        <h2>Different Sizes</h2>\\n        <div style=\\"display: flex; gap: 16px; flex-wrap: wrap; align-items: center;\\">\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-chevron-down [props]=\\"{ width: 16, height: 16 }\\"></tgui-icon20-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">16px</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-chevron-down [props]=\\"{ width: 24, height: 24 }\\"></tgui-icon20-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">24px</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon20-chevron-down [props]=\\"{ width: 32, height: 32 }\\"></tgui-icon20-chevron-down>\\n            <tgui-caption style=\\"margin-top: 8px;\\">32px</tgui-caption>\\n          </div>\\n          <div class=\\"icon-container\\">\\n            <tgui-icon36-backspace [props]=\\"{ width: 48, height: 48 }\\"></tgui-icon36-backspace>\\n            <tgui-caption style=\\"margin-top: 8px;\\">48px</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      /* Temporary define variable for demo purposes */\\n      --tgui-link_color: #2196f3;\\n    }\\n\\n    .icon-container {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      padding: 12px;\\n    }\\n  `]\\n})\\nclass IconsShowcaseComponent {}\\n\\nconst meta: Meta<IconsShowcaseComponent> = {\\n  title: \'Icons/Overview\',\\n  component: IconsShowcaseComponent,\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<IconsShowcaseComponent>;\\n\\nexport const Overview: Story = {\\n  args: {},\\n}; ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      /* Temporary define variable for demo purposes */\\n      --tgui-link_color: #2196f3;\\n    }\\n\\n    .icon-container {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      padding: 12px;\\n    }\\n  \\n","extends":[]},{"name":"ImageBadgeComponent","id":"component-ImageBadgeComponent-be99ff4eb984d6cc2e3d0c68bbce2637eae37aaa11e7184532bdd1dbcfbf922e297df12c7ca9d815302eb87c248abe02e17edc8a751e47d8c6866fa216d12a26","file":"projects/tgui/src/lib/components/blocks/image/components/image-badge/image-badge.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-image-badge","styleUrls":[],"styles":["\\n    :host {\\n      position: absolute;\\n      bottom: -4px;\\n      right: -4px;\\n      z-index: 1;\\n    }\\n    \\n    .image-badge {\\n      min-width: 18px;\\n      height: 18px;\\n    }\\n  "],"template":"<tgui-badge\\n  type=\\"number\\"\\n  class=\\"image-badge\\"\\n>\\n  {{ displayValue }}\\n</tgui-badge>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"count","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\nBadge count number","description":"<p>Badge count number</p>\\n","line":44,"type":"number","decorators":[]},{"name":"maxCount","defaultValue":"99","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMaximum count to display before showing \\"maxCount+\\"","description":"<p>Maximum count to display before showing &quot;maxCount+&quot;</p>\\n","line":47,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"BadgeComponent","type":"component"}],"description":"<p>Badge component specifically designed to be used with Image component.\\nOnly supports number type badges.</p>\\n","rawdescription":"\\n\\nBadge component specifically designed to be used with Image component.\\nOnly supports number type badges.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input \\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { BadgeComponent } from \'../../../badge/badge.component\';\\n\\n/**\\n * Badge component specifically designed to be used with Image component.\\n * Only supports number type badges.\\n */\\n@Component({\\n  selector: \'tgui-image-badge\',\\n  standalone: true,\\n  imports: [CommonModule, BadgeComponent],\\n  template: `\\n    <tgui-badge \\n      type=\\"number\\" \\n      class=\\"image-badge\\"\\n    >\\n      {{ displayValue }}\\n    </tgui-badge>\\n  `,\\n  styles: [`\\n    :host {\\n      position: absolute;\\n      bottom: -4px;\\n      right: -4px;\\n      z-index: 1;\\n    }\\n    \\n    .image-badge {\\n      min-width: 18px;\\n      height: 18px;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class ImageBadgeComponent {\\n  /** Badge count number */\\n  @Input() count = 0;\\n  \\n  /** Maximum count to display before showing \\"maxCount+\\" */\\n  @Input() maxCount = 99;\\n  \\n  constructor() {\\n    console.assert(true, \'ImageBadge: Component supports only type=\\"number\\"\');\\n  }\\n  \\n  /** Compute display value with limit applied */\\n  get displayValue(): string {\\n    if (this.count <= this.maxCount) {\\n      return this.count.toString();\\n    }\\n    return `${this.maxCount}+`;\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: absolute;\\n      bottom: -4px;\\n      right: -4px;\\n      z-index: 1;\\n    }\\n    \\n    .image-badge {\\n      min-width: 18px;\\n      height: 18px;\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":47},"extends":[],"accessors":{"displayValue":{"name":"displayValue","getSignature":{"name":"displayValue","type":"string","returnType":"string","line":54,"rawdescription":"\\nCompute display value with limit applied","description":"<p>Compute display value with limit applied</p>\\n"}}}},{"name":"ImageComponent","id":"component-ImageComponent-9faf55c9af2564d97566a064cd5b106205e7c289bee1ea3fb2f8c4c21f61ed2e00c646fca0a34a80aa305a0adc6d63e2c510537b93d38b8106adc1138c3413d7","file":"projects/tgui/src/lib/components/blocks/image/image.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-image","styleUrls":[],"styles":["\\n    :host {\\n      position: relative;\\n      display: inline-flex;\\n      background-color: var(--tgui--tertiary_bg_color);\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .image-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      position: relative;\\n      border-radius: inherit;\\n    }\\n\\n    .image {\\n      position: absolute;\\n      display: block;\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n      opacity: 0.5;\\n      transition: opacity 0.2s ease-in-out;\\n      border-radius: inherit;\\n    }\\n\\n    .image.loaded {\\n      opacity: 1;\\n    }\\n\\n    .fallback {\\n      position: absolute;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n  "],"template":"<div class=\\"image-container\\">\\n  <img\\n    *ngIf=\\"hasSrc\\"\\n    [src]=\\"src\\"\\n    [attr.alt]=\\"alt || null\\"\\n    class=\\"image\\"\\n    [attr.crossOrigin]=\\"crossOrigin || null\\"\\n    [attr.decoding]=\\"decoding || null\\"\\n    [attr.loading]=\\"loading || null\\"\\n    [attr.referrerPolicy]=\\"referrerPolicy || null\\"\\n    [attr.sizes]=\\"sizes || null\\"\\n    [attr.srcset]=\\"srcSet || null\\"\\n    [class.loaded]=\\"loaded()\\"\\n    (load)=\\"handleImageLoad($event)\\"\\n    (error)=\\"handleImageError($event)\\"\\n  />\\n  <div *ngIf=\\"shouldShowFallbackIcon()\\" class=\\"fallback\\">\\n    <ng-container *ngTemplateOutlet=\\"fallbackIconTemplate || null\\"></ng-container>\\n  </div>\\n  <ng-content></ng-content>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"alt","deprecated":false,"deprecationMessage":"","rawdescription":"\\nAlternative text for the image","description":"<p>Alternative text for the image</p>\\n","line":112,"type":"string","decorators":[]},{"name":"crossOrigin","deprecated":false,"deprecationMessage":"","rawdescription":"\\nCross-origin setting","description":"<p>Cross-origin setting</p>\\n","line":115,"type":"string","decorators":[]},{"name":"decoding","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage decoding hint","description":"<p>Image decoding hint</p>\\n","line":118,"type":"\\"sync\\" | \\"async\\" | \\"auto\\"","decorators":[]},{"name":"loading","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLoading strategy","description":"<p>Loading strategy</p>\\n","line":121,"type":"\\"eager\\" | \\"lazy\\"","decorators":[]},{"name":"referrerPolicy","deprecated":false,"deprecationMessage":"","rawdescription":"\\nReferrer policy","description":"<p>Referrer policy</p>\\n","line":124,"type":"string","decorators":[]},{"name":"size","defaultValue":"40","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSpecifies the size of the image, with a default of 40. Sizes are defined in pixels.","description":"<p>Specifies the size of the image, with a default of 40. Sizes are defined in pixels.</p>\\n","line":103,"type":"ImageSize","decorators":[]},{"name":"sizes","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSizes attribute","description":"<p>Sizes attribute</p>\\n","line":127,"type":"string","decorators":[]},{"name":"src","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage source URL","description":"<p>Image source URL</p>\\n","line":109,"type":"string","decorators":[]},{"name":"srcSet","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSource set attribute","description":"<p>Source set attribute</p>\\n","line":130,"type":"string","decorators":[]},{"name":"useMap","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage map reference","description":"<p>Image map reference</p>\\n","line":133,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"borderRadius","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":179,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.borderRadius.px\'"}],"modifierKind":[170]},{"name":"failed","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>State to track if image failed to load</p>\\n","line":139,"rawdescription":"\\nState to track if image failed to load"},{"name":"fallbackIconTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"<p>An element (often an icon) displayed when the image fails to load or the <code>src</code> attribute is not provided.</p>\\n","line":106,"rawdescription":"\\nAn element (often an icon) displayed when the image fails to load or the `src` attribute is not provided.","decorators":[{"name":"ContentChild","stringifiedArguments":"\'fallbackIcon\'"}],"modifierKind":[170]},{"name":"height","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":178,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.height.px\'"}],"modifierKind":[170]},{"name":"loaded","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>State to track if image has loaded</p>\\n","line":136,"rawdescription":"\\nState to track if image has loaded"},{"name":"minWidth","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":177,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.minWidth.px\'"}],"modifierKind":[170]},{"name":"width","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":176,"decorators":[{"name":"HostBinding","stringifiedArguments":"\'style.width.px\'"}],"modifierKind":[170]}],"methodsClass":[{"name":"getBorderRadius","args":[{"name":"size","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nCalculate border radius based on image size","description":"<p>Calculate border radius based on image size</p>\\n","modifierKind":[125],"jsdoctags":[{"name":"size","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleImageError","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nHandle image error event","description":"<p>Handle image error event</p>\\n","jsdoctags":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleImageLoad","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nHandle image load event","description":"<p>Handle image load event</p>\\n","jsdoctags":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":169,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nApply size and border radius to host element","description":"<p>Apply size and border radius to host element</p>\\n"},{"name":"shouldShowFallbackIcon","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":148,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nDetermine if fallback icon should be shown","description":"<p>Determine if fallback icon should be shown</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"style.borderRadius.px","deprecated":false,"deprecationMessage":"","line":179,"type":"number","decorators":[]},{"name":"style.height.px","deprecated":false,"deprecationMessage":"","line":178,"type":"number","decorators":[]},{"name":"style.minWidth.px","deprecated":false,"deprecationMessage":"","line":177,"type":"number","decorators":[]},{"name":"style.width.px","deprecated":false,"deprecationMessage":"","line":176,"type":"number","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Renders an image with optional fallback content. It supports custom sizing and will automatically\\nhandle loading states and errors by optionally displaying a fallback icon. This component can also\\ninclude additional content, such as badges or overlays, as children.</p>\\n","rawdescription":"\\n\\nRenders an image with optional fallback content. It supports custom sizing and will automatically\\nhandle loading states and errors by optionally displaying a fallback icon. This component can also\\ninclude additional content, such as badges or overlays, as children.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding,\\n  ElementRef,\\n  ContentChild,\\n  TemplateRef,\\n  signal,\\n  computed,\\n  inject,\\n  OnInit\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nexport type ImageSize = 20 | 24 | 28 | 40 | 48 | 96;\\n\\n/**\\n * Renders an image with optional fallback content. It supports custom sizing and will automatically\\n * handle loading states and errors by optionally displaying a fallback icon. This component can also\\n * include additional content, such as badges or overlays, as children.\\n */\\n\\n// [decoding]=\\"decoding\\"\\n// [loading]=\\"loading\\"\\n// [referrerPolicy]=\\"referrerPolicy\\"\\n// [sizes]=\\"sizes\\"\\n// [srcset]=\\"srcSet\\"\\n// [useMap]=\\"useMap\\"\\n@Component({\\n  selector: \'tgui-image\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div class=\\"image-container\\">\\n      <img\\n        *ngIf=\\"hasSrc\\"\\n        [src]=\\"src\\"\\n        [attr.alt]=\\"alt || null\\"\\n        class=\\"image\\"\\n        [attr.crossOrigin]=\\"crossOrigin || null\\"\\n        [attr.decoding]=\\"decoding || null\\"\\n        [attr.loading]=\\"loading || null\\"\\n        [attr.referrerPolicy]=\\"referrerPolicy || null\\"\\n        [attr.sizes]=\\"sizes || null\\"\\n        [attr.srcset]=\\"srcSet || null\\"\\n        [class.loaded]=\\"loaded()\\"\\n        (load)=\\"handleImageLoad($event)\\"\\n        (error)=\\"handleImageError($event)\\"\\n      />\\n      <div *ngIf=\\"shouldShowFallbackIcon()\\" class=\\"fallback\\">\\n        <ng-container *ngTemplateOutlet=\\"fallbackIconTemplate || null\\"></ng-container>\\n      </div>\\n      <ng-content></ng-content>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      position: relative;\\n      display: inline-flex;\\n      background-color: var(--tgui--tertiary_bg_color);\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .image-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      position: relative;\\n      border-radius: inherit;\\n    }\\n\\n    .image {\\n      position: absolute;\\n      display: block;\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n      opacity: 0.5;\\n      transition: opacity 0.2s ease-in-out;\\n      border-radius: inherit;\\n    }\\n\\n    .image.loaded {\\n      opacity: 1;\\n    }\\n\\n    .fallback {\\n      position: absolute;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class ImageComponent implements OnInit {\\n  /** Specifies the size of the image, with a default of 40. Sizes are defined in pixels. */\\n  @Input() size: ImageSize = 40;\\n  \\n  /** An element (often an icon) displayed when the image fails to load or the `src` attribute is not provided. */\\n  @ContentChild(\'fallbackIcon\') fallbackIconTemplate?: TemplateRef<any>;\\n  \\n  /** Image source URL */\\n  @Input() src?: string;\\n  \\n  /** Alternative text for the image */\\n  @Input() alt?: string;\\n  \\n  /** Cross-origin setting */\\n  @Input() crossOrigin?: string;\\n  \\n  /** Image decoding hint */\\n  @Input() decoding?: \'sync\' | \'async\' | \'auto\';\\n  \\n  /** Loading strategy */\\n  @Input() loading?: \'eager\' | \'lazy\';\\n  \\n  /** Referrer policy */\\n  @Input() referrerPolicy?: string;\\n  \\n  /** Sizes attribute */\\n  @Input() sizes?: string;\\n  \\n  /** Source set attribute */\\n  @Input() srcSet?: string;\\n  \\n  /** Image map reference */\\n  @Input() useMap?: string;\\n\\n  /** State to track if image has loaded */\\n  loaded = signal(false);\\n  \\n  /** State to track if image failed to load */\\n  failed = signal(false);\\n  \\n\\n  /** Check if source is provided */\\n  get hasSrc(): boolean {\\n    return !!this.src || !!this.srcSet;\\n  }\\n\\n  /** Determine if fallback icon should be shown */\\n  shouldShowFallbackIcon(): boolean {\\n    return (this.failed() || !this.hasSrc) && !!this.fallbackIconTemplate;\\n  }\\n\\n  /** Handle image load event */\\n  handleImageLoad(event: Event): void {\\n    if (this.loaded()) {\\n      return;\\n    }\\n\\n    this.loaded.set(true);\\n    this.failed.set(false);\\n  }\\n\\n  /** Handle image error event */\\n  handleImageError(event: Event): void {\\n    this.loaded.set(false);\\n    this.failed.set(true);\\n  }\\n\\n  /** Apply size and border radius to host element */\\n  ngOnInit(): void {\\n    this.width = this.size;\\n    this.minWidth = this.size;\\n    this.height = this.size;\\n    this.borderRadius = this.getBorderRadius(this.size);\\n  }\\n\\n    @HostBinding(\'style.width.px\') width!: number;\\n    @HostBinding(\'style.minWidth.px\') minWidth!: number;\\n    @HostBinding(\'style.height.px\') height!: number;\\n    @HostBinding(\'style.borderRadius.px\') borderRadius!: number;\\n\\n  /** Calculate border radius based on image size */\\n  public getBorderRadius(size: number): number {\\n    if (size < 40) {\\n      return 4;\\n    }\\n\\n    if (size < 96) {\\n      return 8;\\n    }\\n\\n    return 12;\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: relative;\\n      display: inline-flex;\\n      background-color: var(--tgui--tertiary_bg_color);\\n      box-shadow: 0 0 0 1px var(--tgui--outline);\\n    }\\n\\n    .image-container {\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      position: relative;\\n      border-radius: inherit;\\n    }\\n\\n    .image {\\n      position: absolute;\\n      display: block;\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n      opacity: 0.5;\\n      transition: opacity 0.2s ease-in-out;\\n      border-radius: inherit;\\n    }\\n\\n    .image.loaded {\\n      opacity: 1;\\n    }\\n\\n    .fallback {\\n      position: absolute;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n  \\n","extends":[],"implements":["OnInit"],"accessors":{"hasSrc":{"name":"hasSrc","getSignature":{"name":"hasSrc","type":"boolean","returnType":"boolean","line":143,"rawdescription":"\\nCheck if source is provided","description":"<p>Check if source is provided</p>\\n"}}}},{"name":"InlineButtonsComponent","id":"component-InlineButtonsComponent-e522ab8e243efe7c570bc7098912fee1ed24cf665775640801131463008688fe67710b4658af55852da7629c0d9512bd6aa8a48439863d4c57f01e7a6dcd0798","file":"projects/tgui/src/lib/components/blocks/inline-buttons/inline-buttons.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-inline-buttons","styleUrls":[],"styles":["\\n      :host {\\n        display: flex;\\n        gap: 12px;\\n      }\\n\\n      :host-context(.tgui-platform-ios) {\\n        gap: 8px;\\n      }\\n    "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"mode","defaultValue":"\'plain\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDictates the styling mode for the inline buttons, affecting color and background.","description":"<p>Dictates the styling mode for the inline buttons, affecting color and background.</p>\\n","line":40,"type":"\\"bezeled\\" | \\"plain\\" | \\"gray\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.mode-bezeled","deprecated":false,"deprecationMessage":"","line":42,"type":"boolean","decorators":[]},{"name":"class.mode-gray","deprecated":false,"deprecationMessage":"","line":44,"type":"boolean","decorators":[]},{"name":"class.mode-plain","deprecated":false,"deprecationMessage":"","line":43,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p><code>InlineButtons</code> acts as a container for <code>InlineButtonsItem</code> components.\\nThis component provides a unified context for styling and interaction,\\nleveraging the <code>mode</code> to apply consistent styling across all child components.\\nIt ensures visual consistency across different platforms and supports custom styling modes.</p>\\n","rawdescription":"\\n\\n`InlineButtons` acts as a container for `InlineButtonsItem` components.\\nThis component provides a unified context for styling and interaction,\\nleveraging the `mode` to apply consistent styling across all child components.\\nIt ensures visual consistency across different platforms and supports custom styling modes.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ChangeDetectionStrategy, \\n  Input,\\n  HostBinding,\\n  inject\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * `InlineButtons` acts as a container for `InlineButtonsItem` components.\\n * This component provides a unified context for styling and interaction,\\n * leveraging the `mode` to apply consistent styling across all child components.\\n * It ensures visual consistency across different platforms and supports custom styling modes.\\n */\\n@Component({\\n  selector: \'tgui-inline-buttons\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [\\n    `\\n      :host {\\n        display: flex;\\n        gap: 12px;\\n      }\\n\\n      :host-context(.tgui-platform-ios) {\\n        gap: 8px;\\n      }\\n    `\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class InlineButtonsComponent {\\n  /** Dictates the styling mode for the inline buttons, affecting color and background. */\\n  @Input() mode:  \'bezeled\' | \'plain\' | \'gray\' = \'plain\';\\n\\n  @HostBinding(\'class.mode-bezeled\') get isModeBezeled() { return this.mode === \'bezeled\'; }\\n  @HostBinding(\'class.mode-plain\') get isModePlain() { return this.mode === \'plain\'; }\\n  @HostBinding(\'class.mode-gray\') get isModeGray() { return this.mode === \'gray\'; }\\n\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      :host {\\n        display: flex;\\n        gap: 12px;\\n      }\\n\\n      :host-context(.tgui-platform-ios) {\\n        gap: 8px;\\n      }\\n    \\n","extends":[],"accessors":{"isModeBezeled":{"name":"isModeBezeled","getSignature":{"name":"isModeBezeled","type":"","returnType":"","line":42}},"isModePlain":{"name":"isModePlain","getSignature":{"name":"isModePlain","type":"","returnType":"","line":43}},"isModeGray":{"name":"isModeGray","getSignature":{"name":"isModeGray","type":"","returnType":"","line":44}}}},{"name":"InlineButtonsItemComponent","id":"component-InlineButtonsItemComponent-debd83bc99c8e4ad485743a45f943cfead651aa818f44140fdffcb09c3b2590612445c59650434d02860f56d36af6e07d4fef991db5164462842d998aebe8f3e","file":"projects/tgui/src/lib/components/blocks/inline-buttons/components/inline-buttons-item.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-inline-buttons-item","styleUrls":[],"styles":["\\n    :host {\\n      border-radius: 12px;\\n      background: transparent;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    :host.mode-bezeled {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    .inline-button-tappable {\\n      flex: 1 0 0;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 3px;\\n      min-height: 60px;\\n      min-width: 64px;\\n      padding: 0 12px;\\n      max-inline-size: 100%;\\n      border: none;\\n      border-radius: 12px;\\n      box-sizing: border-box;\\n      user-select: none;\\n    } \\n\\n    :host-context(.tgui-platform-ios) {\\n      min-height: 64px;\\n      min-width: 72px;\\n      gap: 4px;\\n    }\\n \\n"],"template":"<tgui-tappable\\n  [interactiveAnimation]=\\"interactiveAnimation\\"\\n  [disabled]=\\"disabled\\"\\n  class=\\"inline-button-tappable\\"\\n>\\n    <ng-content></ng-content>\\n    <tgui-caption *ngIf=\\"text\\" class=\\"text\\" level=\\"1\\" weight=\\"2\\">{{ text }}</tgui-caption>\\n\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDisables the button","description":"<p>Disables the button</p>\\n","line":93,"type":"boolean","decorators":[]},{"name":"interactiveAnimation","defaultValue":"\'background\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nType of interactive animation","description":"<p>Type of interactive animation</p>\\n","line":96,"type":"\\"opacity\\" | \\"background\\"","decorators":[]},{"name":"mode","defaultValue":"\'plain\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nOptional mode for styling the button, with \'plain\' as the default.","description":"<p>Optional mode for styling the button, with &#39;plain&#39; as the default.</p>\\n","line":90,"type":"\\"bezeled\\" | \\"plain\\" | \\"gray\\"","decorators":[]},{"name":"text","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText displayed inside the button.","description":"<p>Text displayed inside the button.</p>\\n","line":87,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.mode-bezeled","deprecated":false,"deprecationMessage":"","line":99,"type":"boolean","decorators":[]},{"name":"class.mode-gray","deprecated":false,"deprecationMessage":"","line":101,"type":"boolean","decorators":[]},{"name":"class.mode-plain","deprecated":false,"deprecationMessage":"","line":100,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"CaptionComponent","type":"component"}],"description":"<p><code>InlineButtonsItem</code> is designed for use within an InlineButtons container but can also serve\\nas a standalone button if used by itself. It supports displaying optional text and can inherit\\na styling mode from its parent InlineButtons context or utilize a locally defined mode.</p>\\n","rawdescription":"\\n\\n`InlineButtonsItem` is designed for use within an InlineButtons container but can also serve\\nas a standalone button if used by itself. It supports displaying optional text and can inherit\\na styling mode from its parent InlineButtons context or utilize a locally defined mode.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding,\\n  ViewEncapsulation,\\n  inject,\\n  OnInit\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TappableComponent } from \'@components/utils\';\\nimport { CaptionComponent } from \'@components/typography/caption/caption.component\';\\n\\n/**\\n * `InlineButtonsItem` is designed for use within an InlineButtons container but can also serve \\n * as a standalone button if used by itself. It supports displaying optional text and can inherit \\n * a styling mode from its parent InlineButtons context or utilize a locally defined mode.\\n */\\n@Component({\\n  selector: \'tgui-inline-buttons-item\',\\n  standalone: true,\\n  imports: [CommonModule, TappableComponent, CaptionComponent],\\n  template: `\\n    <tgui-tappable \\n      [interactiveAnimation]=\\"interactiveAnimation\\" \\n      [disabled]=\\"disabled\\"\\n      class=\\"inline-button-tappable\\"\\n    >\\n        <ng-content></ng-content>\\n        <tgui-caption *ngIf=\\"text\\" class=\\"text\\" level=\\"1\\" weight=\\"2\\">{{ text }}</tgui-caption>\\n\\n    </tgui-tappable>\\n  `,\\n  styles: [`\\n    :host {\\n      border-radius: 12px;\\n      background: transparent;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    :host.mode-bezeled {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    .inline-button-tappable {\\n      flex: 1 0 0;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 3px;\\n      min-height: 60px;\\n      min-width: 64px;\\n      padding: 0 12px;\\n      max-inline-size: 100%;\\n      border: none;\\n      border-radius: 12px;\\n      box-sizing: border-box;\\n      user-select: none;\\n    } \\n\\n    :host-context(.tgui-platform-ios) {\\n      min-height: 64px;\\n      min-width: 72px;\\n      gap: 4px;\\n    }\\n \\n`],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class InlineButtonsItemComponent {\\n  /** Text displayed inside the button. */\\n  @Input() text?: string;\\n  \\n  /** Optional mode for styling the button, with \'plain\' as the default. */\\n  @Input() mode:  \'bezeled\' | \'plain\' | \'gray\' = \'plain\';\\n  \\n  /** Disables the button */\\n  @Input() disabled = false;\\n  \\n  /** Type of interactive animation */\\n  @Input() interactiveAnimation: \'opacity\' | \'background\' = \'background\';\\n  \\n\\n  @HostBinding(\'class.mode-bezeled\') get isModeBezeled() { return this.mode === \'bezeled\'; }\\n  @HostBinding(\'class.mode-plain\') get isModePlain() { return this.mode === \'plain\'; }\\n  @HostBinding(\'class.mode-gray\') get isModeGray() { return this.mode === \'gray\'; }\\n\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      border-radius: 12px;\\n      background: transparent;\\n      color: var(--tgui--link_color);\\n    }\\n    \\n    :host.mode-bezeled {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host.mode-gray {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    :host-context(.mode-bezeled):not(.mode-bezeled):not(.mode-gray) {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.mode-gray):not(.mode-bezeled):not(.mode-gray) {\\n      color: var(--tgui--plain_foreground);\\n      background: var(--tgui--plain_background);\\n    }\\n    \\n    .inline-button-tappable {\\n      flex: 1 0 0;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 3px;\\n      min-height: 60px;\\n      min-width: 64px;\\n      padding: 0 12px;\\n      max-inline-size: 100%;\\n      border: none;\\n      border-radius: 12px;\\n      box-sizing: border-box;\\n      user-select: none;\\n    } \\n\\n    :host-context(.tgui-platform-ios) {\\n      min-height: 64px;\\n      min-width: 72px;\\n      gap: 4px;\\n    }\\n \\n\\n","extends":[],"accessors":{"isModeBezeled":{"name":"isModeBezeled","getSignature":{"name":"isModeBezeled","type":"","returnType":"","line":99}},"isModePlain":{"name":"isModePlain","getSignature":{"name":"isModePlain","type":"","returnType":"","line":100}},"isModeGray":{"name":"isModeGray","getSignature":{"name":"isModeGray","type":"","returnType":"","line":101}}}},{"name":"IOSSpinnerComponent","id":"component-IOSSpinnerComponent-08615cfd5d61f1eb435444cc4d654b1c0f68c0433e1f54364a5eba4c3b1d8e36463867a59b02846d9d64952acd5b9622fc324badcb3b8605b03dbdf66d8789bd","file":"projects/tgui/src/lib/components/feedback/spinner/components/ios-spinner/ios-spinner.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-ios-spinner","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    svg {\\n      animation: spinner-rotate 1s linear infinite;\\n    }\\n    \\n    @keyframes spinner-rotate {\\n      100% {\\n        transform: rotate(360deg);\\n      }\\n    }\\n  "],"template":"<ng-container [ngSwitch]=\\"size()\\">\\n  <svg *ngSwitchCase=\\"\'l\'\\" width=\\"36\\" height=\\"36\\" viewBox=\\"0 0 36 36\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <path d=\\"M34.2 18.9C33.5 18.9 33 18.4 33 17.7C33 15.7 32.6 13.6 31.8 11.8C31 9.9 29.9 8.2 28.5 6.8C27.1 5.4 25.4 4.3 23.5 3.5C21.7 2.7 19.7 2.3 17.7 2.3C17 2.3 16.5 1.8 16.5 1.1C16.5 0.4 17 -0.1 17.7 -0.1C20 -0.1 22.3 0.4 24.5 1.3C26.7 2.2 28.6 3.5 30.2 5.1C31.8 6.7 33.1 8.6 34 10.8C34.9 13 35.4 15.3 35.4 17.6C35.4 18.3 34.9 18.9 34.2 18.9Z\\" fill=\\"currentColor\\"/>\\n  </svg>\\n  <svg *ngSwitchCase=\\"\'m\'\\" width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <path d=\\"M26.6 14.7C26.1 14.7 25.7 14.3 25.7 13.8C25.7 12.2 25.4 10.6 24.8 9.2C24.2 7.7 23.3 6.4 22.2 5.3C21.1 4.2 19.8 3.3 18.3 2.7C16.9 2.1 15.3 1.8 13.7 1.8C13.2 1.8 12.8 1.4 12.8 0.9C12.8 0.4 13.2 0 13.7 0C15.5 0 17.3 0.3 19 1C20.7 1.7 22.2 2.7 23.5 4C24.8 5.3 25.8 6.8 26.5 8.5C27.2 10.2 27.5 12 27.5 13.8C27.5 14.3 27.1 14.7 26.6 14.7Z\\" fill=\\"currentColor\\"/>\\n  </svg>\\n  <svg *ngSwitchDefault width=\\"20\\" height=\\"20\\" viewBox=\\"0 0 20 20\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n    <path d=\\"M19 10.5C18.7 10.5 18.4 10.2 18.4 9.9C18.4 8.7 18.2 7.6 17.7 6.6C17.3 5.5 16.6 4.6 15.8 3.8C15 3 14.1 2.4 13 1.9C12 1.5 10.9 1.3 9.7 1.3C9.4 1.3 9.1 1 9.1 0.7C9.1 0.4 9.4 0.1 9.7 0.1C11.1 0.1 12.4 0.4 13.6 0.9C14.8 1.4 15.9 2.1 16.8 3C17.7 3.9 18.4 5 18.9 6.2C19.4 7.4 19.7 8.7 19.7 10.1C19.9 10.2 19.5 10.5 19 10.5Z\\" fill=\\"currentColor\\"/>\\n  </svg>\\n</ng-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"size","defaultValue":"input<\'s\' | \'m\' | \'l\'>(\'s\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":47}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  input, \\n  computed\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n@Component({\\n  selector: \'tgui-ios-spinner\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-container [ngSwitch]=\\"size()\\">\\n      <svg *ngSwitchCase=\\"\'l\'\\" width=\\"36\\" height=\\"36\\" viewBox=\\"0 0 36 36\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <path d=\\"M34.2 18.9C33.5 18.9 33 18.4 33 17.7C33 15.7 32.6 13.6 31.8 11.8C31 9.9 29.9 8.2 28.5 6.8C27.1 5.4 25.4 4.3 23.5 3.5C21.7 2.7 19.7 2.3 17.7 2.3C17 2.3 16.5 1.8 16.5 1.1C16.5 0.4 17 -0.1 17.7 -0.1C20 -0.1 22.3 0.4 24.5 1.3C26.7 2.2 28.6 3.5 30.2 5.1C31.8 6.7 33.1 8.6 34 10.8C34.9 13 35.4 15.3 35.4 17.6C35.4 18.3 34.9 18.9 34.2 18.9Z\\" fill=\\"currentColor\\"/>\\n      </svg>\\n      <svg *ngSwitchCase=\\"\'m\'\\" width=\\"28\\" height=\\"28\\" viewBox=\\"0 0 28 28\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <path d=\\"M26.6 14.7C26.1 14.7 25.7 14.3 25.7 13.8C25.7 12.2 25.4 10.6 24.8 9.2C24.2 7.7 23.3 6.4 22.2 5.3C21.1 4.2 19.8 3.3 18.3 2.7C16.9 2.1 15.3 1.8 13.7 1.8C13.2 1.8 12.8 1.4 12.8 0.9C12.8 0.4 13.2 0 13.7 0C15.5 0 17.3 0.3 19 1C20.7 1.7 22.2 2.7 23.5 4C24.8 5.3 25.8 6.8 26.5 8.5C27.2 10.2 27.5 12 27.5 13.8C27.5 14.3 27.1 14.7 26.6 14.7Z\\" fill=\\"currentColor\\"/>\\n      </svg>\\n      <svg *ngSwitchDefault width=\\"20\\" height=\\"20\\" viewBox=\\"0 0 20 20\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n        <path d=\\"M19 10.5C18.7 10.5 18.4 10.2 18.4 9.9C18.4 8.7 18.2 7.6 17.7 6.6C17.3 5.5 16.6 4.6 15.8 3.8C15 3 14.1 2.4 13 1.9C12 1.5 10.9 1.3 9.7 1.3C9.4 1.3 9.1 1 9.1 0.7C9.1 0.4 9.4 0.1 9.7 0.1C11.1 0.1 12.4 0.4 13.6 0.9C14.8 1.4 15.9 2.1 16.8 3C17.7 3.9 18.4 5 18.9 6.2C19.4 7.4 19.7 8.7 19.7 10.1C19.9 10.2 19.5 10.5 19 10.5Z\\" fill=\\"currentColor\\"/>\\n      </svg>\\n    </ng-container>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    svg {\\n      animation: spinner-rotate 1s linear infinite;\\n    }\\n    \\n    @keyframes spinner-rotate {\\n      100% {\\n        transform: rotate(360deg);\\n      }\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class IOSSpinnerComponent {\\n  size = input<\'s\' | \'m\' | \'l\'>(\'s\');\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n    \\n    svg {\\n      animation: spinner-rotate 1s linear infinite;\\n    }\\n    \\n    @keyframes spinner-rotate {\\n      100% {\\n        transform: rotate(360deg);\\n      }\\n    }\\n  \\n","extends":[]},{"name":"LargeTitleComponent","id":"component-LargeTitleComponent-040021a34992bd97c1c092ef63f9bc43fd2e63d09652cdf20d736265406a8929e546a83ab6b4f2835ec074ef84566aa76c46e252a5b68e87fad230e4deb17bc9","file":"projects/tgui/src/lib/components/typography/large-title/large-title.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-large-title","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--large_title--font_size);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'1\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe size level of the large title, influencing its styling.\\n","description":"<p>The size level of the large title, influencing its styling.</p>\\n","line":54,"type":"\\"1\\" | \\"2\\"","decorators":[]},{"name":"tag","defaultValue":"\'h1\'","deprecated":false,"deprecationMessage":"","line":57,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":65,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":61,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":64,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":66,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":67,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":68,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The LargeTitle component is designed for prominent display text, typically used for major headings\\nor titles within an application. It encapsulates the Typography component&#39;s features, offering\\nextensive styling and semantic customization options while defaulting to an <code>&lt;h1&gt;</code> HTML element.\\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\\nmaking it suitable for primary page titles or significant headings.</p>\\n","rawdescription":"\\n\\nThe LargeTitle component is designed for prominent display text, typically used for major headings\\nor titles within an application. It encapsulates the Typography component\'s features, offering\\nextensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\\nThis choice of default component underscores the importance and hierarchy of the text it encapsulates,\\nmaking it suitable for primary page titles or significant headings.\\n","type":"component","sourceCode":"import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * The LargeTitle component is designed for prominent display text, typically used for major headings\\n * or titles within an application. It encapsulates the Typography component\'s features, offering\\n * extensive styling and semantic customization options while defaulting to an `<h1>` HTML element.\\n * This choice of default component underscores the importance and hierarchy of the text it encapsulates,\\n * making it suitable for primary page titles or significant headings.\\n */\\n@Component({\\n  selector: \'tgui-large-title\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--large_title--font_size);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class LargeTitleComponent extends TypographyComponent {\\n  /**\\n   * The size level of the large title, influencing its styling.\\n   */\\n  @Input() level: \'1\' | \'2\' = \'1\';\\n  \\n  // Override tag to use h1 by default\\n  @Input() override tag = \'h1\';\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--large_title--font_size);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: calc(var(--tgui--large_title--font_size) * 0.92);\\n      line-height: var(--tgui--large_title--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":60}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":61}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":64}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":65}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":66}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":67}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":68}}}},{"name":"ListComponent","id":"component-ListComponent-53fadec6d2c0131ab9e7506b65d77e97503bd6af4358c1e52a92e439fc5922eed224fd68d462b878d88506629677a2981e672c4627cb8f7502fbd9ea32db1b13","file":"projects/tgui/src/lib/components/blocks/list/list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-list","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n    \\n    :host ::ng-deep > :not(:last-child) {\\n      margin-bottom: 12px;\\n    }\\n    \\n    :host-context(.tgui-platform-ios) {\\n      padding: 10px 18px;\\n      box-sizing: border-box;\\n    }\\n  "],"template":"<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":43,"modifierKind":[124]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Renders a container for list items, applying platform-specific styles for consistency\\nacross different operating systems. This component serves as a foundational element\\nfor creating lists in a user interface.</p>\\n","rawdescription":"\\n\\nRenders a container for list items, applying platform-specific styles for consistency\\nacross different operating systems. This component serves as a foundational element\\nfor creating lists in a user interface.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  HostBinding,\\n  inject,\\n  Input,\\n  ElementRef\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../services/platform.service\';\\n\\n/**\\n * Renders a container for list items, applying platform-specific styles for consistency \\n * across different operating systems. This component serves as a foundational element \\n * for creating lists in a user interface.\\n */\\n@Component({\\n  selector: \'tgui-list\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-content></ng-content>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n    \\n    :host ::ng-deep > :not(:last-child) {\\n      margin-bottom: 12px;\\n    }\\n    \\n    :host-context(.tgui-platform-ios) {\\n      padding: 10px 18px;\\n      box-sizing: border-box;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class ListComponent {\\n  protected platformService = inject(PlatformService);\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n    \\n    :host ::ng-deep > :not(:last-child) {\\n      margin-bottom: 12px;\\n    }\\n    \\n    :host-context(.tgui-platform-ios) {\\n      padding: 10px 18px;\\n      box-sizing: border-box;\\n    }\\n  \\n","extends":[]},{"name":"PlaceholderComponent","id":"component-PlaceholderComponent-11719908d9ce91dd1cfcc2ae0e29db330970671e0c90c9fb815bb252f8d960956fca117fd4133419ff215898f839cb38f5c0b95be6e68f7f5f97e43a66b2c3c8","file":"projects/tgui/src/lib/components/blocks/placeholder/placeholder.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-placeholder","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-placeholder {\\n      overflow: hidden;\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n      padding: 32px;\\n      gap: 24px;\\n    }\\n    \\n    .fields {\\n      overflow-wrap: anywhere;\\n      text-align: center;\\n      margin: 0;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    .description:not(:first-child) {\\n      margin-top: 8px;\\n    }\\n  "],"template":"<section class=\\"tgui-placeholder\\">\\n  <ng-content select=\\"[image]\\"></ng-content>\\n  <dl *ngIf=\\"header || description\\" class=\\"fields\\">\\n    <tgui-title *ngIf=\\"header\\" level=\\"3\\" weight=\\"2\\" tag=\\"dt\\">{{header}}</tgui-title>\\n    <tgui-text *ngIf=\\"description\\" class=\\"description\\" tag=\\"dd\\">{{description}}</tgui-text>\\n  </dl>\\n  <ng-content select=\\"[action]\\"></ng-content>\\n</section>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","deprecated":false,"deprecationMessage":"","rawdescription":"\\nAdditional descriptive text to provide more details or context.","description":"<p>Additional descriptive text to provide more details or context.</p>\\n","line":60,"type":"string","decorators":[]},{"name":"header","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThe primary text, usually a title or a header, for the placeholder.","description":"<p>The primary text, usually a title or a header, for the placeholder.</p>\\n","line":57,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TextComponent","type":"component"},{"name":"TitleComponent","type":"component"}],"description":"<p>A versatile component designed to display a placeholder with optional text, images, and actions.</p>\\n","rawdescription":"\\n\\nA versatile component designed to display a placeholder with optional text, images, and actions.\\n","type":"component","sourceCode":"import { Component, Input, HostBinding, ViewEncapsulation, ChangeDetectionStrategy } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TextComponent } from \'@typography/text/text.component\';\\nimport { TitleComponent } from \'@typography/title/title.component\';\\n\\n/**\\n * A versatile component designed to display a placeholder with optional text, images, and actions.\\n */\\n@Component({\\n  selector: \'tgui-placeholder\',\\n  standalone: true,\\n  imports: [CommonModule, TextComponent, TitleComponent],\\n  template: `\\n    <section class=\\"tgui-placeholder\\">\\n      <ng-content select=\\"[image]\\"></ng-content>\\n      <dl *ngIf=\\"header || description\\" class=\\"fields\\">\\n        <tgui-title *ngIf=\\"header\\" level=\\"3\\" weight=\\"2\\" tag=\\"dt\\">{{header}}</tgui-title>\\n        <tgui-text *ngIf=\\"description\\" class=\\"description\\" tag=\\"dd\\">{{description}}</tgui-text>\\n      </dl>\\n      <ng-content select=\\"[action]\\"></ng-content>\\n    </section>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-placeholder {\\n      overflow: hidden;\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n      padding: 32px;\\n      gap: 24px;\\n    }\\n    \\n    .fields {\\n      overflow-wrap: anywhere;\\n      text-align: center;\\n      margin: 0;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    .description:not(:first-child) {\\n      margin-top: 8px;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class PlaceholderComponent {\\n  /** The primary text, usually a title or a header, for the placeholder. */\\n  @Input() header?: string;\\n  \\n  /** Additional descriptive text to provide more details or context. */\\n  @Input() description?: string;\\n  \\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-placeholder {\\n      overflow: hidden;\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      justify-content: center;\\n      text-align: center;\\n      padding: 32px;\\n      gap: 24px;\\n    }\\n    \\n    .fields {\\n      overflow-wrap: anywhere;\\n      text-align: center;\\n      margin: 0;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    .description:not(:first-child) {\\n      margin-top: 8px;\\n    }\\n  \\n","extends":[]},{"name":"PopperComponent","id":"component-PopperComponent-96b2162f828cd82e3b1ba55a071054f0cb7c29ccb27d9f027cb64f096a77078f5400dbe0a6d3a9a7a82d924a9050e8860d28c99609763e7441f2e40152896118","file":"projects/tgui/src/lib/components/overlays/popper/popper.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-popper","styleUrls":[],"styles":["\\n    .tgui-popper {\\n      z-index: 100;\\n      box-sizing: border-box;\\n    }\\n    \\n    .tgui-popper-body {\\n      background-color: var(--tgui-color-background);\\n      color: var(--tgui-color-text);\\n      border-radius: 12px;\\n      box-shadow: 0 1px 2px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08);\\n      overflow: auto;\\n      max-width: 100%;\\n      max-height: 100%;\\n    }\\n    \\n    .tgui-popper--ios .tgui-popper-body {\\n      border-radius: 14px;\\n    }\\n  "],"template":"<tgui-root-portal *ngIf=\\"visible()\\">\\n  <div\\n    #popperElement\\n    class=\\"tgui-popper\\"\\n    [class.tgui-popper--ios]=\\"platformService.isIOS()\\"\\n    [style.position]=\\"\'absolute\'\\"\\n    [style.top]=\\"position().top + \'px\'\\"\\n    [style.left]=\\"position().left + \'px\'\\"\\n    [style.width]=\\"sameWidth() ? position().targetWidth + \'px\' : \'auto\'\\"\\n    [style.visibility]=\\"isHidden() ? \'hidden\' : \'visible\'\\"\\n    [style.maxWidth]=\\"\'calc(100vw - 16px)\'\\"\\n    [style.maxHeight]=\\"\'calc(100vh - 16px)\'\\">\\n    <div class=\\"tgui-popper-body\\">\\n      <ng-content></ng-content>\\n      <ng-container *ngIf=\\"contentTemplate\\" [ngTemplateOutlet]=\\"contentTemplate\\"></ng-container>\\n    </div>\\n  </div>\\n</tgui-root-portal>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"autoPlacement","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":106,"required":false},{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":104,"required":false},{"name":"hide","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":107,"required":false},{"name":"offsetByCrossAxis","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":102,"required":false},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101,"required":false},{"name":"sameWidth","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"required":false},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":105,"required":false},{"name":"visible","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":108,"required":false}],"outputsClass":[],"propertiesClass":[{"name":"autoPlacement","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":106,"required":false},{"name":"contentTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":91,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'content\'"}],"modifierKind":[170]},{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":84,"modifierKind":[123]},{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":104,"required":false},{"name":"hide","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":107,"required":false},{"name":"isHidden","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":118},{"name":"middlewares","defaultValue":"computed(() => {\\n    const middlewares: Middleware[] = [];\\n    \\n    // Apply offset\\n    if (this.offsetByMainAxis() !== 0 || this.offsetByCrossAxis() !== 0) {\\n      middlewares.push(offset({\\n        mainAxis: this.offsetByMainAxis(),\\n        crossAxis: this.offsetByCrossAxis(),\\n      }));\\n    }\\n    \\n    // Auto placement\\n    if (this.autoPlacement()) {\\n      middlewares.push(autoPlacement());\\n    }\\n    \\n    // Flip placement if needed\\n    if (this.flip()) {\\n      middlewares.push(flip());\\n    }\\n    \\n    // Shift to keep in viewport\\n    if (this.shift()) {\\n      middlewares.push(shift({ padding: 8 }));\\n    }\\n    \\n    // Apply same width as target\\n    if (this.sameWidth()) {\\n      const self = this;\\n      middlewares.push(size({\\n        apply({ rects }) {\\n          const currentPosition = self.position();\\n          self.position.set({\\n            ...currentPosition,\\n            targetWidth: rects.reference.width,\\n          });\\n        },\\n      }));\\n    }\\n    \\n    // Hide when no space\\n    if (this.hide()) {\\n      middlewares.push(hide());\\n    }\\n    \\n    return middlewares;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":125},{"name":"offsetByCrossAxis","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":102,"required":false},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101,"required":false},{"name":"placement","defaultValue":"input<Placement>(\'bottom\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":99},{"name":"platformId","defaultValue":"inject(PLATFORM_ID)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":85,"modifierKind":[123]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":86,"modifierKind":[124]},{"name":"popperElement","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLElement>","indexKey":"","optional":true,"description":"","line":90,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'popperElement\'"}],"modifierKind":[170]},{"name":"portalService","defaultValue":"inject(PortalService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":87,"modifierKind":[123]},{"name":"position","defaultValue":"signal<{ \\n    top: number; \\n    left: number; \\n    middlewareData?: MiddlewareData;\\n    targetWidth?: number;\\n  }>({ top: 0, left: 0 })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":111},{"name":"sameWidth","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"required":false},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":105,"required":false},{"name":"strategy","defaultValue":"input<Strategy>(\'absolute\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":100},{"name":"strictPlacement","defaultValue":"computed(() => {\\n    return this.autoPlacement() ? \'auto-start\' as Placement : this.placement();\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":121},{"name":"targetRef","defaultValue":"input<HTMLElement | VirtualElement | null>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":98},{"name":"updatePositionHandler","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","indexKey":"","optional":false,"description":"","line":88,"modifierKind":[123]},{"name":"visible","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":108,"required":false}],"methodsClass":[{"name":"findPortalContainerAndSetupPopper","args":[{"name":"targetElement","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":""},{"name":"retryCount","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0"}],"optional":false,"returnType":"void","typeParameters":[],"line":191,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"targetElement","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"retryCount","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":93,"deprecated":false,"deprecationMessage":""},{"name":"setupPositioning","args":[{"name":"targetElement","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":""},{"name":"floating","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":232,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"targetElement","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"floating","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updatePosition","args":[{"name":"reference","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":""},{"name":"floating","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":246,"deprecated":false,"deprecationMessage":"","modifierKind":[123,134],"jsdoctags":[{"name":"reference","type":"HTMLElement | VirtualElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"floating","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"RootPortalComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  ElementRef,\\n  inject,\\n  input,\\n  signal,\\n  effect,\\n  computed,\\n  ContentChild,\\n  TemplateRef,\\n  PLATFORM_ID,\\n  ViewChild,\\n  AfterViewInit\\n} from \'@angular/core\';\\nimport { CommonModule, isPlatformBrowser } from \'@angular/common\';\\nimport { RootPortalComponent } from \'../../utils/portal/root-portal.component\';\\nimport { PlatformService, PortalService } from \'../../../services\';\\nimport { \\n  computePosition, \\n  autoPlacement, \\n  offset, \\n  flip, \\n  shift, \\n  size, \\n  arrow, \\n  hide,\\n  Middleware,\\n  Placement, \\n  Strategy, \\n  VirtualElement, \\n  MiddlewareData\\n} from \'@floating-ui/dom\';\\n\\n@Component({\\n  selector: \'tgui-popper\',\\n  standalone: true,\\n  imports: [CommonModule, RootPortalComponent],\\n  template: `\\n    <tgui-root-portal *ngIf=\\"visible()\\">\\n      <div \\n        #popperElement\\n        class=\\"tgui-popper\\"\\n        [class.tgui-popper--ios]=\\"platformService.isIOS()\\"\\n        [style.position]=\\"\'absolute\'\\"\\n        [style.top]=\\"position().top + \'px\'\\"\\n        [style.left]=\\"position().left + \'px\'\\"\\n        [style.width]=\\"sameWidth() ? position().targetWidth + \'px\' : \'auto\'\\"\\n        [style.visibility]=\\"isHidden() ? \'hidden\' : \'visible\'\\"\\n        [style.maxWidth]=\\"\'calc(100vw - 16px)\'\\"\\n        [style.maxHeight]=\\"\'calc(100vh - 16px)\'\\">\\n        <div class=\\"tgui-popper-body\\">\\n          <ng-content></ng-content>\\n          <ng-container *ngIf=\\"contentTemplate\\" [ngTemplateOutlet]=\\"contentTemplate\\"></ng-container>\\n        </div>\\n      </div>\\n    </tgui-root-portal>\\n  `,\\n  styles: [`\\n    .tgui-popper {\\n      z-index: 100;\\n      box-sizing: border-box;\\n    }\\n    \\n    .tgui-popper-body {\\n      background-color: var(--tgui-color-background);\\n      color: var(--tgui-color-text);\\n      border-radius: 12px;\\n      box-shadow: 0 1px 2px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08);\\n      overflow: auto;\\n      max-width: 100%;\\n      max-height: 100%;\\n    }\\n    \\n    .tgui-popper--ios .tgui-popper-body {\\n      border-radius: 14px;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class PopperComponent implements AfterViewInit {\\n  private elementRef = inject(ElementRef);\\n  private platformId = inject(PLATFORM_ID);\\n  protected platformService = inject(PlatformService);\\n  private portalService = inject(PortalService);\\n  private updatePositionHandler: () => void = () => {};\\n\\n  @ViewChild(\'popperElement\') popperElement?: ElementRef<HTMLElement>;\\n  @ContentChild(\'content\') contentTemplate?: TemplateRef<any>;\\n  \\n  ngAfterViewInit(): void {\\n    // Initialization will be handled in the effect\\n  }\\n\\n  // Inputs\\n  targetRef = input<HTMLElement | VirtualElement | null>(null);\\n  placement = input<Placement>(\'bottom\');\\n  strategy = input<Strategy>(\'absolute\');\\n  offsetByMainAxis = input<number>(8);\\n  offsetByCrossAxis = input<number>(0);\\n  sameWidth = input<boolean>(false);\\n  flip = input<boolean>(true);\\n  shift = input<boolean>(true);\\n  autoPlacement = input<boolean>(false);\\n  hide = input<boolean>(false);\\n  visible = input<boolean>(true); // Control overall visibility\\n  \\n  // Internal state\\n  position = signal<{ \\n    top: number; \\n    left: number; \\n    middlewareData?: MiddlewareData;\\n    targetWidth?: number;\\n  }>({ top: 0, left: 0 });\\n  \\n  isHidden = signal(false);\\n  \\n  // Computed values\\n  strictPlacement = computed(() => {\\n    return this.autoPlacement() ? \'auto-start\' as Placement : this.placement();\\n  });\\n\\n  middlewares = computed(() => {\\n    const middlewares: Middleware[] = [];\\n    \\n    // Apply offset\\n    if (this.offsetByMainAxis() !== 0 || this.offsetByCrossAxis() !== 0) {\\n      middlewares.push(offset({\\n        mainAxis: this.offsetByMainAxis(),\\n        crossAxis: this.offsetByCrossAxis(),\\n      }));\\n    }\\n    \\n    // Auto placement\\n    if (this.autoPlacement()) {\\n      middlewares.push(autoPlacement());\\n    }\\n    \\n    // Flip placement if needed\\n    if (this.flip()) {\\n      middlewares.push(flip());\\n    }\\n    \\n    // Shift to keep in viewport\\n    if (this.shift()) {\\n      middlewares.push(shift({ padding: 8 }));\\n    }\\n    \\n    // Apply same width as target\\n    if (this.sameWidth()) {\\n      const self = this;\\n      middlewares.push(size({\\n        apply({ rects }) {\\n          const currentPosition = self.position();\\n          self.position.set({\\n            ...currentPosition,\\n            targetWidth: rects.reference.width,\\n          });\\n        },\\n      }));\\n    }\\n    \\n    // Hide when no space\\n    if (this.hide()) {\\n      middlewares.push(hide());\\n    }\\n    \\n    return middlewares;\\n  });\\n  \\n  constructor() {\\n    effect(() => {\\n      if (!isPlatformBrowser(this.platformId)) return;\\n      if (!this.visible()) return; // Skip positioning if not visible\\n      \\n      const targetElement = this.targetRef();\\n      if (!targetElement) return;\\n      \\n      // Добавляем повторные попытки найти контейнер портала\\n      this.findPortalContainerAndSetupPopper(targetElement);\\n      \\n      return () => {\\n        window.removeEventListener(\'scroll\', this.updatePositionHandler);\\n        window.removeEventListener(\'resize\', this.updatePositionHandler);\\n      };\\n    });\\n  }\\n  \\n  private findPortalContainerAndSetupPopper(targetElement: HTMLElement | VirtualElement, retryCount = 0): void {\\n    const portalContainer = this.portalService.getPortalContainerElement();\\n\\n    if (!portalContainer) {\\n      // Если контейнер портала не доступен, повторяем попытку несколько раз\\n      if (retryCount < 5) {\\n        console.log(`Portal container not available, retrying (${retryCount + 1}/5)...`);\\n        setTimeout(() => {\\n          this.findPortalContainerAndSetupPopper(targetElement, retryCount + 1);\\n        }, 100);\\n      } else {\\n        console.error(\'Portal container not available after multiple attempts\');\\n      }\\n      return;\\n    }\\n    \\n    // Ищем элемент поппера в контейнере портала\\n    setTimeout(() => {\\n      const poppers = portalContainer.querySelectorAll(\'.tgui-popper\');\\n      console.log(\'Found popper elements in portal:\', poppers.length);\\n      \\n      if (poppers.length === 0) {\\n        // Если элементы поппера не найдены, повторяем попытку\\n        if (retryCount < 5) {\\n          console.log(`No popper elements found, retrying (${retryCount + 1}/5)...`);\\n          setTimeout(() => {\\n            this.findPortalContainerAndSetupPopper(targetElement, retryCount + 1);\\n          }, 100);\\n        } else {\\n          console.error(\'No popper elements found after multiple attempts\');\\n        }\\n        return;\\n      }\\n      \\n      // Используем последний элемент поппера, чтобы избежать проблем с несколькими попперами\\n      const popperElement = poppers[poppers.length - 1] as HTMLElement;\\n      \\n      this.setupPositioning(targetElement, popperElement);\\n    }, 50);\\n  }\\n  \\n  private setupPositioning(targetElement: HTMLElement | VirtualElement, floating: HTMLElement): void {\\n    console.log(\'setupPositioning with floating element:\', floating);\\n    this.updatePosition(targetElement, floating);\\n    \\n    // Clean up previous listeners\\n    window.removeEventListener(\'scroll\', this.updatePositionHandler);\\n    window.removeEventListener(\'resize\', this.updatePositionHandler);\\n    \\n    // Set up auto-update with proper binding\\n    this.updatePositionHandler = () => this.updatePosition(targetElement, floating);\\n    window.addEventListener(\'scroll\', this.updatePositionHandler, { passive: true });\\n    window.addEventListener(\'resize\', this.updatePositionHandler, { passive: true });\\n  }\\n  \\n  private async updatePosition(reference: HTMLElement | VirtualElement, floating: HTMLElement) {\\n    if (!reference || !floating) return;\\n    \\n    try {\\n      // Ensure the floating element is properly styled before computation\\n      floating.style.position = this.strategy();\\n\\n      const { x, y, middlewareData } = await computePosition(reference, floating, {\\n        placement: this.strictPlacement(),\\n        strategy: this.strategy(),\\n        middleware: this.middlewares(),\\n      });\\n      \\n      // Force a layout reflow to ensure position changes are applied immediately\\n      document.body.offsetHeight;\\n      \\n      this.position.set({ \\n        top: y, \\n        left: x, \\n        middlewareData,\\n        targetWidth: this.position().targetWidth\\n      });\\n      \\n      this.isHidden.set(!!middlewareData.hide?.referenceHidden);\\n    } catch (error) {\\n      console.error(\'Failed to compute position:\', error);\\n    }\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .tgui-popper {\\n      z-index: 100;\\n      box-sizing: border-box;\\n    }\\n    \\n    .tgui-popper-body {\\n      background-color: var(--tgui-color-background);\\n      color: var(--tgui-color-text);\\n      border-radius: 12px;\\n      box-shadow: 0 1px 2px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08);\\n      overflow: auto;\\n      max-width: 100%;\\n      max-height: 100%;\\n    }\\n    \\n    .tgui-popper--ios .tgui-popper-body {\\n      border-radius: 14px;\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":171},"extends":[],"implements":["AfterViewInit"]},{"name":"PopperDemoComponent","id":"component-PopperDemoComponent-a5483c34b4a2292283c7a4c116259fb6fcfd5319e7e7bc63abb6f794478a24b6323d25179d80518b5e2c6e3aefd11dca173cb925a3748049e49825ad4e27457a","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-popper-demo","styleUrls":[],"styles":[],"template":"<div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n  <div>\\n    <div #targetBtnWrapper>\\n      <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n        {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n      </tgui-button>\\n    </div>\\n\\n    <tgui-popper\\n      [targetRef]=\\"targetElement\\"\\n      [placement]=\\"placement\\"\\n      [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n      [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n      [sameWidth]=\\"sameWidth\\"\\n      [flip]=\\"flip\\"\\n      [shift]=\\"shift\\"\\n      [hide]=\\"hide\\"\\n      [visible]=\\"isPopperVisible\\"\\n      [autoPlacement]=\\"autoPlacement\\">\\n      <div style=\\"padding: 16px;\\">\\n        <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n        <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n      </div>\\n    </tgui-popper>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"autoPlacement","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":72},{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":69},{"name":"hide","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":71},{"name":"isPopperVisible","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":47},{"name":"offsetByCrossAxis","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":67},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":66},{"name":"placement","defaultValue":"\'bottom\'","deprecated":false,"deprecationMessage":"","type":"\\"top\\" | \\"bottom\\" | \\"left\\" | \\"right\\"","indexKey":"","optional":false,"description":"","line":45},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":43},{"name":"sameWidth","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":68},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":70},{"name":"targetBtnWrapper","deprecated":false,"deprecationMessage":"","type":"ElementRef","indexKey":"","optional":false,"description":"","line":41,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'targetBtnWrapper\'"}],"modifierKind":[170]},{"name":"targetElement","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"HTMLElement | null","indexKey":"","optional":false,"description":"","line":46}],"methodsClass":[{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":49,"deprecated":false,"deprecationMessage":""},{"name":"togglePopper","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"PopperComponent","type":"component"},{"name":"ButtonComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj, moduleMetadata } from \'@storybook/angular\';\\nimport { PopperComponent } from \'../popper.component\';\\nimport { Component, ViewChild, ElementRef, inject, PLATFORM_ID, AfterViewInit } from \'@angular/core\';\\nimport { PlatformService } from \'../../../../services\';\\nimport { ButtonComponent } from \'../../../blocks/button/button.component\';\\n\\n@Component({\\n  selector: \'tgui-popper-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-toggle-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperToggleDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-with-close-button-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"openPopper()\\">\\n            Open Popper\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\\">\\n              <p style=\\"margin: 0; padding: 0; font-weight: bold;\\">Popper Title</p>\\n              <tgui-button mode=\\"text\\" size=\\"s\\" (click)=\\"closePopper()\\">✕</tgui-button>\\n            </div>\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper with a close button</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `,\\n  host: {\\n    \'(document:click)\': \'onDocumentClick($event)\'\\n  }\\n})\\nclass PopperWithCloseButtonDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  openPopper() {\\n    this.isPopperVisible = true;\\n    \\n    // Force update after opening to ensure proper positioning\\n    setTimeout(() => {\\n      const event = new Event(\'resize\');\\n      window.dispatchEvent(event);\\n    }, 50);\\n  }\\n  \\n  closePopper() {\\n    this.isPopperVisible = false;\\n  }\\n  \\n  onDocumentClick(event: MouseEvent) {\\n    // Close popper when clicking outside of it and outside the target button\\n    if (this.isPopperVisible) {\\n      const target = event.target as HTMLElement;\\n      const isClickInsidePopper = !!target.closest(\'.tgui-popper-body\');\\n      const isClickOnTargetButton = this.targetElement?.contains(target);\\n      \\n      if (!isClickInsidePopper && !isClickOnTargetButton) {\\n        this.closePopper();\\n      }\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\nconst meta: Meta<PopperDemoComponent> = {\\n  title: \'Components/Overlays/Popper\',\\n  component: PopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, ButtonComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'bottom\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    offsetByCrossAxis: {\\n      control: { type: \'number\', min: -32, max: 32, step: 2 },\\n      description: \'Offset along the cross axis (in pixels)\',\\n      defaultValue: 0,\\n    },\\n    sameWidth: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should have the same width as the target element\',\\n      defaultValue: false,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    },\\n    hide: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should hide when there is no space for it\',\\n      defaultValue: false,\\n    },\\n    autoPlacement: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should auto-place in the available space\',\\n      defaultValue: false,\\n    },\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Popper component provides a way to position floating elements relative to a reference element.\'\\n      }\\n    }\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<PopperDemoComponent>;\\ntype ToggleStory = StoryObj<PopperToggleDemoComponent>;\\ntype CloseButtonStory = StoryObj<PopperWithCloseButtonDemoComponent>;\\n\\nexport const Default: Story = {};\\n\\nexport const TogglePopper: ToggleStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperToggleDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper that can be toggled on and off with a button click.\'\\n      }\\n    }\\n  }\\n};\\n\\nexport const PopperWithCloseButton: CloseButtonStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperWithCloseButtonDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper with a close button inside and click-outside functionality to dismiss it.\'\\n      }\\n    }\\n  }\\n};\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"implements":["AfterViewInit"]},{"name":"PopperToggleDemoComponent","id":"component-PopperToggleDemoComponent-a5483c34b4a2292283c7a4c116259fb6fcfd5319e7e7bc63abb6f794478a24b6323d25179d80518b5e2c6e3aefd11dca173cb925a3748049e49825ad4e27457a","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-popper-toggle-demo","styleUrls":[],"styles":[],"template":"<div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n  <div>\\n    <div #targetBtnWrapper>\\n      <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n        {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n      </tgui-button>\\n    </div>\\n\\n    <tgui-popper\\n      [targetRef]=\\"targetElement\\"\\n      [placement]=\\"placement\\"\\n      [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n      [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n      [sameWidth]=\\"sameWidth\\"\\n      [flip]=\\"flip\\"\\n      [shift]=\\"shift\\"\\n      [hide]=\\"hide\\"\\n      [visible]=\\"isPopperVisible\\"\\n      [autoPlacement]=\\"autoPlacement\\">\\n      <div style=\\"padding: 16px;\\">\\n        <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n        <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n      </div>\\n    </tgui-popper>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"autoPlacement","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":140},{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":137},{"name":"hide","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":139},{"name":"isPopperVisible","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":115},{"name":"offsetByCrossAxis","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":135},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":134},{"name":"placement","defaultValue":"\'bottom\'","deprecated":false,"deprecationMessage":"","type":"\\"top\\" | \\"bottom\\" | \\"left\\" | \\"right\\"","indexKey":"","optional":false,"description":"","line":113},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":111},{"name":"sameWidth","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":136},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":138},{"name":"targetBtnWrapper","deprecated":false,"deprecationMessage":"","type":"ElementRef","indexKey":"","optional":false,"description":"","line":109,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'targetBtnWrapper\'"}],"modifierKind":[170]},{"name":"targetElement","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"HTMLElement | null","indexKey":"","optional":false,"description":"","line":114}],"methodsClass":[{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":117,"deprecated":false,"deprecationMessage":""},{"name":"togglePopper","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":122,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"PopperComponent","type":"component"},{"name":"ButtonComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj, moduleMetadata } from \'@storybook/angular\';\\nimport { PopperComponent } from \'../popper.component\';\\nimport { Component, ViewChild, ElementRef, inject, PLATFORM_ID, AfterViewInit } from \'@angular/core\';\\nimport { PlatformService } from \'../../../../services\';\\nimport { ButtonComponent } from \'../../../blocks/button/button.component\';\\n\\n@Component({\\n  selector: \'tgui-popper-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-toggle-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperToggleDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-with-close-button-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"openPopper()\\">\\n            Open Popper\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\\">\\n              <p style=\\"margin: 0; padding: 0; font-weight: bold;\\">Popper Title</p>\\n              <tgui-button mode=\\"text\\" size=\\"s\\" (click)=\\"closePopper()\\">✕</tgui-button>\\n            </div>\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper with a close button</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `,\\n  host: {\\n    \'(document:click)\': \'onDocumentClick($event)\'\\n  }\\n})\\nclass PopperWithCloseButtonDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  openPopper() {\\n    this.isPopperVisible = true;\\n    \\n    // Force update after opening to ensure proper positioning\\n    setTimeout(() => {\\n      const event = new Event(\'resize\');\\n      window.dispatchEvent(event);\\n    }, 50);\\n  }\\n  \\n  closePopper() {\\n    this.isPopperVisible = false;\\n  }\\n  \\n  onDocumentClick(event: MouseEvent) {\\n    // Close popper when clicking outside of it and outside the target button\\n    if (this.isPopperVisible) {\\n      const target = event.target as HTMLElement;\\n      const isClickInsidePopper = !!target.closest(\'.tgui-popper-body\');\\n      const isClickOnTargetButton = this.targetElement?.contains(target);\\n      \\n      if (!isClickInsidePopper && !isClickOnTargetButton) {\\n        this.closePopper();\\n      }\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\nconst meta: Meta<PopperDemoComponent> = {\\n  title: \'Components/Overlays/Popper\',\\n  component: PopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, ButtonComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'bottom\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    offsetByCrossAxis: {\\n      control: { type: \'number\', min: -32, max: 32, step: 2 },\\n      description: \'Offset along the cross axis (in pixels)\',\\n      defaultValue: 0,\\n    },\\n    sameWidth: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should have the same width as the target element\',\\n      defaultValue: false,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    },\\n    hide: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should hide when there is no space for it\',\\n      defaultValue: false,\\n    },\\n    autoPlacement: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should auto-place in the available space\',\\n      defaultValue: false,\\n    },\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Popper component provides a way to position floating elements relative to a reference element.\'\\n      }\\n    }\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<PopperDemoComponent>;\\ntype ToggleStory = StoryObj<PopperToggleDemoComponent>;\\ntype CloseButtonStory = StoryObj<PopperWithCloseButtonDemoComponent>;\\n\\nexport const Default: Story = {};\\n\\nexport const TogglePopper: ToggleStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperToggleDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper that can be toggled on and off with a button click.\'\\n      }\\n    }\\n  }\\n};\\n\\nexport const PopperWithCloseButton: CloseButtonStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperWithCloseButtonDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper with a close button inside and click-outside functionality to dismiss it.\'\\n      }\\n    }\\n  }\\n};\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"implements":["AfterViewInit"]},{"name":"PopperWithCloseButtonDemoComponent","id":"component-PopperWithCloseButtonDemoComponent-a5483c34b4a2292283c7a4c116259fb6fcfd5319e7e7bc63abb6f794478a24b6323d25179d80518b5e2c6e3aefd11dca173cb925a3748049e49825ad4e27457a","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-popper-with-close-button-demo","styleUrls":[],"styles":[],"template":"<div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n  <div>\\n    <div #targetBtnWrapper>\\n      <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"openPopper()\\">\\n        Open Popper\\n      </tgui-button>\\n    </div>\\n\\n    <tgui-popper\\n      [targetRef]=\\"targetElement\\"\\n      [placement]=\\"placement\\"\\n      [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n      [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n      [sameWidth]=\\"sameWidth\\"\\n      [flip]=\\"flip\\"\\n      [shift]=\\"shift\\"\\n      [hide]=\\"hide\\"\\n      [visible]=\\"isPopperVisible\\"\\n      [autoPlacement]=\\"autoPlacement\\">\\n      <div style=\\"padding: 16px;\\">\\n        <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\\">\\n          <p style=\\"margin: 0; padding: 0; font-weight: bold;\\">Popper Title</p>\\n          <tgui-button mode=\\"text\\" size=\\"s\\" (click)=\\"closePopper()\\">✕</tgui-button>\\n        </div>\\n        <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n        <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper with a close button</p>\\n      </div>\\n    </tgui-popper>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"autoPlacement","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":230},{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":227},{"name":"hide","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":229},{"name":"isPopperVisible","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":190},{"name":"offsetByCrossAxis","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":225},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":224},{"name":"placement","defaultValue":"\'bottom\'","deprecated":false,"deprecationMessage":"","type":"\\"top\\" | \\"bottom\\" | \\"left\\" | \\"right\\"","indexKey":"","optional":false,"description":"","line":188},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":186},{"name":"sameWidth","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":226},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":228},{"name":"targetBtnWrapper","deprecated":false,"deprecationMessage":"","type":"ElementRef","indexKey":"","optional":false,"description":"","line":184,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'targetBtnWrapper\'"}],"modifierKind":[170]},{"name":"targetElement","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"HTMLElement | null","indexKey":"","optional":false,"description":"","line":189}],"methodsClass":[{"name":"closePopper","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":207,"deprecated":false,"deprecationMessage":""},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":192,"deprecated":false,"deprecationMessage":""},{"name":"onDocumentClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":211,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"openPopper","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":197,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"PopperComponent","type":"component"},{"name":"ButtonComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj, moduleMetadata } from \'@storybook/angular\';\\nimport { PopperComponent } from \'../popper.component\';\\nimport { Component, ViewChild, ElementRef, inject, PLATFORM_ID, AfterViewInit } from \'@angular/core\';\\nimport { PlatformService } from \'../../../../services\';\\nimport { ButtonComponent } from \'../../../blocks/button/button.component\';\\n\\n@Component({\\n  selector: \'tgui-popper-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-toggle-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"togglePopper()\\">\\n            {{ isPopperVisible ? \'Hide Popper\' : \'Show Popper\' }}\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `\\n})\\nclass PopperToggleDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  togglePopper() {\\n    this.isPopperVisible = !this.isPopperVisible;\\n    \\n    // Force update after toggling to ensure proper positioning\\n    if (this.isPopperVisible) {\\n      setTimeout(() => {\\n        const event = new Event(\'resize\');\\n        window.dispatchEvent(event);\\n      }, 50);\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\n@Component({\\n  selector: \'tgui-popper-with-close-button-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, ButtonComponent],\\n  template: `\\n    <div style=\\"padding: 100px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <div>\\n        <div #targetBtnWrapper>\\n          <tgui-button mode=\\"filled\\" size=\\"m\\" (click)=\\"openPopper()\\">\\n            Open Popper\\n          </tgui-button>\\n        </div>\\n        \\n        <tgui-popper\\n          [targetRef]=\\"targetElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [offsetByCrossAxis]=\\"offsetByCrossAxis\\"\\n          [sameWidth]=\\"sameWidth\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\"\\n          [hide]=\\"hide\\"\\n          [visible]=\\"isPopperVisible\\"\\n          [autoPlacement]=\\"autoPlacement\\">\\n          <div style=\\"padding: 16px;\\">\\n            <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\\">\\n              <p style=\\"margin: 0; padding: 0; font-weight: bold;\\">Popper Title</p>\\n              <tgui-button mode=\\"text\\" size=\\"s\\" (click)=\\"closePopper()\\">✕</tgui-button>\\n            </div>\\n            <p style=\\"margin: 0; padding: 0;\\">Popper Content</p>\\n            <p style=\\"margin: 8px 0 0; padding: 0;\\">This is some content inside the popper with a close button</p>\\n          </div>\\n        </tgui-popper>\\n      </div>\\n    </div>\\n  `,\\n  host: {\\n    \'(document:click)\': \'onDocumentClick($event)\'\\n  }\\n})\\nclass PopperWithCloseButtonDemoComponent implements AfterViewInit {\\n  @ViewChild(\'targetBtnWrapper\') targetBtnWrapper!: ElementRef;\\n  \\n  platformService = inject(PlatformService);\\n  \\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'bottom\';\\n  targetElement: HTMLElement | null = null;\\n  isPopperVisible = false;\\n  \\n  ngAfterViewInit() {\\n    // Set the target element after view initialization\\n    this.targetElement = this.targetBtnWrapper.nativeElement;\\n  }\\n  \\n  openPopper() {\\n    this.isPopperVisible = true;\\n    \\n    // Force update after opening to ensure proper positioning\\n    setTimeout(() => {\\n      const event = new Event(\'resize\');\\n      window.dispatchEvent(event);\\n    }, 50);\\n  }\\n  \\n  closePopper() {\\n    this.isPopperVisible = false;\\n  }\\n  \\n  onDocumentClick(event: MouseEvent) {\\n    // Close popper when clicking outside of it and outside the target button\\n    if (this.isPopperVisible) {\\n      const target = event.target as HTMLElement;\\n      const isClickInsidePopper = !!target.closest(\'.tgui-popper-body\');\\n      const isClickOnTargetButton = this.targetElement?.contains(target);\\n      \\n      if (!isClickInsidePopper && !isClickOnTargetButton) {\\n        this.closePopper();\\n      }\\n    }\\n  }\\n  \\n  offsetByMainAxis = 8;\\n  offsetByCrossAxis = 0;\\n  sameWidth = false;\\n  flip = true;\\n  shift = true;\\n  hide = false;\\n  autoPlacement = false;\\n}\\n\\nconst meta: Meta<PopperDemoComponent> = {\\n  title: \'Components/Overlays/Popper\',\\n  component: PopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, ButtonComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'bottom\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    offsetByCrossAxis: {\\n      control: { type: \'number\', min: -32, max: 32, step: 2 },\\n      description: \'Offset along the cross axis (in pixels)\',\\n      defaultValue: 0,\\n    },\\n    sameWidth: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should have the same width as the target element\',\\n      defaultValue: false,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    },\\n    hide: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should hide when there is no space for it\',\\n      defaultValue: false,\\n    },\\n    autoPlacement: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should auto-place in the available space\',\\n      defaultValue: false,\\n    },\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Popper component provides a way to position floating elements relative to a reference element.\'\\n      }\\n    }\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<PopperDemoComponent>;\\ntype ToggleStory = StoryObj<PopperToggleDemoComponent>;\\ntype CloseButtonStory = StoryObj<PopperWithCloseButtonDemoComponent>;\\n\\nexport const Default: Story = {};\\n\\nexport const TogglePopper: ToggleStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperToggleDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper that can be toggled on and off with a button click.\'\\n      }\\n    }\\n  }\\n};\\n\\nexport const PopperWithCloseButton: CloseButtonStory = {\\n  render: (args) => ({\\n    props: args,\\n    component: PopperWithCloseButtonDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper with a close button inside and click-outside functionality to dismiss it.\'\\n      }\\n    }\\n  }\\n};\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"implements":["AfterViewInit"]},{"name":"RippleComponent","id":"component-RippleComponent-cdbd958621a64170389eefdaf0747ff89ad89ee20a73a11fe1c7e8c049ee7091324bdf84b8c1bcd5a35d7181160d8625911fdc0b086d1beaa14940a54f7de0ee","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/ripple.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-ripple","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      top: 0;\\n      left: 0;\\n      pointer-events: none;\\n      overflow: hidden;\\n    }\\n    \\n    .ripple-wrapper {\\n      display: block;\\n      overflow: hidden;\\n      position: absolute;\\n      inset: 0;\\n      border-radius: inherit;\\n      transition: background-color .15s ease-out;\\n      pointer-events: none;\\n      width: 100%;\\n      height: 100%;\\n    }\\n\\n    .ripple-wave {\\n      content: \'\';\\n      position: absolute;\\n      height: 30px;\\n      width: 30px;\\n      margin: -15px 0;\\n      border-radius: 50%;\\n      background: var(--tgui--outline);\\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\\n      opacity: 0;\\n    }\\n\\n    @keyframes waveRise {\\n      0% {\\n        transform: scale(1);\\n        opacity: 1;\\n      }\\n\\n      30% {\\n        opacity: 1;\\n      }\\n\\n      100% {\\n        transform: scale(20);\\n        opacity: 0;\\n      }\\n    }\\n  "],"template":"<span\\n  class=\\"ripple-wrapper\\"\\n  aria-hidden=\\"true\\"\\n>\\n  <span\\n    *ngFor=\\"let wave of waves\\"\\n    class=\\"ripple-wave\\"\\n    [style.top.px]=\\"wave.y\\"\\n    [style.left.px]=\\"wave.x\\"\\n    [attr.data-id]=\\"wave.pointerId\\"\\n  ></span>\\n</span>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"waves","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe collection of active ripple waves\\n","description":"<p>The collection of active ripple waves</p>\\n","line":81,"type":"RippleWave[]","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { RippleWave } from \'@services/ripple.service\';\\n\\n@Component({\\n  selector: \'tgui-ripple\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <span \\n      class=\\"ripple-wrapper\\" \\n      aria-hidden=\\"true\\"\\n    >\\n      <span \\n        *ngFor=\\"let wave of waves\\" \\n        class=\\"ripple-wave\\"\\n        [style.top.px]=\\"wave.y\\"\\n        [style.left.px]=\\"wave.x\\"\\n        [attr.data-id]=\\"wave.pointerId\\"\\n      ></span>\\n    </span>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      top: 0;\\n      left: 0;\\n      pointer-events: none;\\n      overflow: hidden;\\n    }\\n    \\n    .ripple-wrapper {\\n      display: block;\\n      overflow: hidden;\\n      position: absolute;\\n      inset: 0;\\n      border-radius: inherit;\\n      transition: background-color .15s ease-out;\\n      pointer-events: none;\\n      width: 100%;\\n      height: 100%;\\n    }\\n\\n    .ripple-wave {\\n      content: \'\';\\n      position: absolute;\\n      height: 30px;\\n      width: 30px;\\n      margin: -15px 0;\\n      border-radius: 50%;\\n      background: var(--tgui--outline);\\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\\n      opacity: 0;\\n    }\\n\\n    @keyframes waveRise {\\n      0% {\\n        transform: scale(1);\\n        opacity: 1;\\n      }\\n\\n      30% {\\n        opacity: 1;\\n      }\\n\\n      100% {\\n        transform: scale(20);\\n        opacity: 0;\\n      }\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class RippleComponent {\\n  /**\\n   * The collection of active ripple waves\\n   */\\n  @Input() waves: RippleWave[] = [];\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      top: 0;\\n      left: 0;\\n      pointer-events: none;\\n      overflow: hidden;\\n    }\\n    \\n    .ripple-wrapper {\\n      display: block;\\n      overflow: hidden;\\n      position: absolute;\\n      inset: 0;\\n      border-radius: inherit;\\n      transition: background-color .15s ease-out;\\n      pointer-events: none;\\n      width: 100%;\\n      height: 100%;\\n    }\\n\\n    .ripple-wave {\\n      content: \'\';\\n      position: absolute;\\n      height: 30px;\\n      width: 30px;\\n      margin: -15px 0;\\n      border-radius: 50%;\\n      background: var(--tgui--outline);\\n      animation: waveRise .3s cubic-bezier(.3, .3, .5, 1);\\n      opacity: 0;\\n    }\\n\\n    @keyframes waveRise {\\n      0% {\\n        transform: scale(1);\\n        opacity: 1;\\n      }\\n\\n      30% {\\n        opacity: 1;\\n      }\\n\\n      100% {\\n        transform: scale(20);\\n        opacity: 0;\\n      }\\n    }\\n  \\n","extends":[]},{"name":"RootComponent","id":"component-RootComponent-5a92e05a94a8efd9b34e9cb4840f97c58aeed0687574ef3ed22ceb735efe87acaea782cc9f9de78fa00c2674f660055701de996067b792e85871c2674486be75","file":"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-root","styleUrls":["./tgui-root.component.css"],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"appearance","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApplication appearance, determined automatically if nothing passed","description":"<p>Application appearance, determined automatically if nothing passed</p>\\n","line":26,"type":"AppearanceType","decorators":[]},{"name":"followSystemTheme","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether to follow system theme changes when appearance is set manually","description":"<p>Whether to follow system theme changes when appearance is set manually</p>\\n","line":29,"type":"boolean","decorators":[]},{"name":"platform","deprecated":false,"deprecationMessage":"","rawdescription":"\\nApplication platform, determined automatically if nothing passed","description":"<p>Application platform, determined automatically if nothing passed</p>\\n","line":23,"type":"PlatformType","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"config","defaultValue":"inject(TGUI_CONFIG, { optional: true }) as { \\n    platform?: PlatformType;\\n    appearance?: AppearanceType;\\n    followSystemTheme?: boolean;\\n  } | null","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":38,"modifierKind":[123]},{"name":"document","defaultValue":"inject(DOCUMENT)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":37,"modifierKind":[123]},{"name":"elementRef","defaultValue":"inject(ElementRef<HTMLElement>)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":34,"modifierKind":[123]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":32,"modifierKind":[123]},{"name":"portalContainerEl","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"HTMLDivElement | null","indexKey":"","optional":false,"description":"","line":44,"modifierKind":[123]},{"name":"portalService","defaultValue":"inject(PortalService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":33,"modifierKind":[123]},{"name":"renderer","defaultValue":"inject(Renderer2)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":36,"modifierKind":[123]},{"name":"themeService","defaultValue":"inject(ThemeService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":35,"modifierKind":[123]}],"methodsClass":[{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":""},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":104,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":""},{"name":"setupPortalContainer","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":72,"deprecated":false,"deprecationMessage":"","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Root component for the TGUI library\\nProvides theming, platform detection, and portal container functionality\\nShould be used at the root of your application</p>\\n","rawdescription":"\\n\\nRoot component for the TGUI library\\nProvides theming, platform detection, and portal container functionality\\nShould be used at the root of your application\\n","type":"component","sourceCode":"import { Component, Input, OnInit, OnDestroy, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, inject, InjectionToken, OnChanges, SimpleChanges, Renderer2, AfterViewInit } from \'@angular/core\';\\n\\nimport { DOCUMENT } from \'@angular/common\';\\nimport { PortalService, PlatformService, ThemeService, PlatformType, AppearanceType  } from \'../../../services\';\\n\\n/**\\n * Root component for the TGUI library\\n * Provides theming, platform detection, and portal container functionality\\n * Should be used at the root of your application\\n */\\n@Component({\\n  selector: \'tgui-root\',\\n  template: \'<ng-content></ng-content>\',\\n  styleUrls: [\'./tgui-root.component.css\'],\\n  standalone: true,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'class\': \'tgui-root-wrapper\'\\n  }\\n})\\nexport class RootComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\\n  /** Application platform, determined automatically if nothing passed */\\n  @Input() platform?: PlatformType;\\n  \\n  /** Application appearance, determined automatically if nothing passed */\\n  @Input() appearance?: AppearanceType;\\n\\n  /** Whether to follow system theme changes when appearance is set manually */\\n  @Input() followSystemTheme?: boolean = false;\\n\\n  // Внедрение зависимостей через inject\\n  private platformService = inject(PlatformService);\\n  private portalService = inject(PortalService);\\n  private elementRef = inject(ElementRef<HTMLElement>);\\n  private themeService = inject(ThemeService);\\n  private renderer = inject(Renderer2);\\n  private document = inject(DOCUMENT);\\n  private config = inject(TGUI_CONFIG, { optional: true }) as { \\n    platform?: PlatformType;\\n    appearance?: AppearanceType;\\n    followSystemTheme?: boolean;\\n  } | null;\\n\\n  private portalContainerEl: HTMLDivElement | null = null;\\n\\n  ngOnInit(): void {\\n    // Apply configuration from inputs or module config\\n    const platformToUse = this.platform || this.config?.platform;\\n    const appearanceToUse = this.appearance || this.config?.appearance;\\n    const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\\n    \\n    // Initialize platform\\n    if (platformToUse) {\\n      this.platformService.setPlatform(platformToUse);\\n    }\\n    \\n    // Load global CSS variables\\n    this.themeService.loadGlobalStyles();\\n    \\n    // Initialize theme\\n    this.themeService.setupTheme(appearanceToUse, followSystem);\\n    \\n  }\\n  \\n  ngAfterViewInit(): void {\\n    // Wait for DOM to be ready before setting up portal container\\n    setTimeout(() => {\\n      this.setupPortalContainer();\\n    }, 0);\\n  }\\n\\n  private setupPortalContainer(): void {\\n    \\n    try {\\n      // Create a dedicated div for portal content if it doesn\'t exist\\n      if (!this.portalContainerEl) {\\n        this.portalContainerEl = this.document.createElement(\'div\');\\n        this.portalContainerEl.className = \'tgui-portal-container\';\\n        this.renderer.appendChild(this.elementRef.nativeElement, this.portalContainerEl);\\n      }\\n      \\n      // Create an ElementRef wrapping the portal container div\\n      const portalElementRef = new ElementRef(this.portalContainerEl);\\n      \\n      // Register as portal container\\n      this.portalService.setPortalContainer(portalElementRef);\\n    } catch (e) {\\n      console.error(\'Error setting up portal container:\', e);\\n    }\\n  }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    // Отслеживаем изменения входных свойств\\n    if (changes[\'appearance\'] || changes[\'followSystemTheme\']) {\\n      const followSystem = this.followSystemTheme ?? this.config?.followSystemTheme ?? true;\\n      this.themeService.setupTheme(changes[\'appearance\'].currentValue, followSystem);\\n    }\\n\\n    if (changes[\'platform\'] && !changes[\'platform\'].firstChange) {\\n      this.platformService.setPlatform(changes[\'platform\'].currentValue);\\n    }\\n  }\\n\\n  ngOnDestroy(): void {\\n    // Clean up portal container reference\\n    this.portalService.clearPortalContainer();\\n    \\n    // Remove the portal container element if it exists\\n    if (this.portalContainerEl && this.portalContainerEl.parentNode) {\\n      this.portalContainerEl.parentNode.removeChild(this.portalContainerEl);\\n    }\\n    \\n    console.log(\'TGUIRootComponent destroyed\');\\n  }\\n}\\n\\n// Токен для инъекции конфигурации\\nexport const TGUI_CONFIG = new InjectionToken<{\\n  platform?: PlatformType;\\n  appearance?: AppearanceType;\\n  followSystemTheme?: boolean;\\n}>(\'TGUI_CONFIG\');","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  font-family: var(--tgui--font-family, system-ui, -apple-system, BlinkMacSystemFont, \\"Roboto\\", \\"Apple Color Emoji\\", \\"Helvetica Neue\\", sans-serif);\\n  color: var(--tgui--text_color);\\n  -webkit-tap-highlight-color: transparent;\\n  -webkit-text-size-adjust: 100%;\\n  \\n  /* Base font definitions */\\n  --tgui--font-family: system-ui, -apple-system, BlinkMacSystemFont, \\"Roboto\\", \\"Apple Color Emoji\\", \\"Helvetica Neue\\", sans-serif;\\n\\n  --tgui--font_weight--accent1: 700;\\n  --tgui--font_weight--accent2: 600;\\n  --tgui--font_weight--accent3: 400;\\n\\n  --tgui--large_title--font_size: 34px;\\n  --tgui--large_title--line_height: 42px;\\n\\n  --tgui--title1--font_size: 28px;\\n  --tgui--title1--line_height: 36px;\\n  --tgui--title2--font_size: 24px;\\n  --tgui--title2--line_height: 32px;\\n  --tgui--title3--font_size: 20px;\\n  --tgui--title3--line_height: 24px;\\n\\n  --tgui--headline--font_size: 19px;\\n  --tgui--headline--line_height: 28px;\\n\\n  --tgui--text--font_size: 17px;\\n  --tgui--text--line_height: 26px;\\n\\n  --tgui--subheadline1--font_size: 16px;\\n  --tgui--subheadline1--line_height: 24px;\\n  --tgui--subheadline2--font_size: 15px;\\n  --tgui--subheadline2--line_height: 22px;\\n\\n  --tgui--caption1--font_size: 13px;\\n  --tgui--caption1--line_height: 20px;\\n  --tgui--caption2--font_size: 11px;\\n  --tgui--caption2--line_height: 16px;\\n\\n  --tgui--border--width: 1px;\\n  --tgui--base--section--box_shadow: 0 1px 2px 0 rgba(0, 0, 0, .10);\\n\\n  /** Native tokens */\\n  --tgui--bg_color: var(--tg-theme-bg-color, #FFFFFF);\\n  --tgui--text_color: var(--tg-theme-text-color, #000000);\\n  --tgui--hint_color: var(--tg-theme-hint-color, #707579);\\n  --tgui--link_color: var(--tg-theme-link-color, #007AFF);\\n  --tgui--button_color: var(--tg-theme-button-color, #007AFF);\\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #EFEFF4);\\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #FFFFFF);\\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #FFFFFF);\\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #707579);\\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #707579);\\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\\n  /** End of native tokens */\\n\\n  /* Custom lib tokens */\\n  --tgui--skeleton: rgba(255, 255, 255, .03);\\n  --tgui--divider: rgba(0, 0, 0, .15);\\n  --tgui--outline: rgba(0, 0, 0, .05);\\n  --tgui--surface_primary: rgba(255, 255, 255, .95);\\n  --tgui--tertiary_bg_color: #F4F4F7;\\n  --tgui--quartenary_bg_color: #F6F6FA;\\n  --tgui--segmented_control_active_bg: #FFFFFF;\\n  --tgui--card_bg_color: #FFFFFF;\\n  --tgui--secondary_hint_color: #A2ACB0;\\n  --tgui--secondary_fill: rgba(67, 120, 255, .10);\\n  --tgui--green: #31D158;\\n  --tgui--destructive_background: #E53935;\\n  --tgui--primary_code_highlight: #4378FF;\\n  --tgui--secondary_code_highlight: #B00FB4;\\n  --tgui--tertiary_code_highlight: #3A9F20;\\n  --tgui--plain_background: rgba(0, 0, 0, .04);\\n  --tgui--plain_foreground: rgba(0, 0, 0, .8);\\n  --tgui--toast_accent_color: #55A6FF;\\n  /* End of custom lib tokens */\\n\\n  /** Non-theme tokens */\\n  --tgui--surface_dark: rgba(56, 56, 56, .85);\\n  --tooltip_background_dark: rgba(0, 0, 0, .85);\\n  --tgui--white: #FFFFFF;\\n  --tgui--black: #000000;\\n\\n  --tgui--z-index--simple: 1;\\n  --tgui--z-index--skeleton: 2;\\n  --tgui--z-index--overlay: 3;\\n}\\n\\n:host-context(.tgui-platform-ios) {\\n  --tgui--large_title--line_height: 41px;\\n  --tgui--title1--line_height: 34px;\\n  --tgui--title2--line_height: 28px;\\n  --tgui--title3--line_height: 25px;\\n  --tgui--headline--line_height: 24px;\\n  --tgui--text--line_height: 22px;\\n  --tgui--subheadline1--line_height: 21px;\\n  --tgui--subheadline2--line_height: 20px;\\n  --tgui--caption1--line_height: 16px;\\n  --tgui--caption2--line_height: 13px;\\n}\\n\\n:host-context(.tgui-theme-dark) {\\n  /* Native tokens */\\n  --tgui--bg_color: var(--tg-theme-bg-color, #212121);\\n  --tgui--text_color: var(--tg-theme-text-color, #FFFFFF);\\n  --tgui--hint_color: var(--tg-theme-hint-color, #AAAAAA);\\n  --tgui--link_color: var(--tg-theme-link-color, #2990FF);\\n  --tgui--button_color: var(--tg-theme-button-color, #2990FF);\\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #0F0F0F);\\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #212121);\\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #212121);\\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #AAAAAA);\\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #AAAAAA);\\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\\n  /** End of native tokens */\\n\\n  /* Custom lib tokens */\\n  --tgui--skeleton: rgba(255, 255, 255, .03);\\n  --tgui--divider: rgba(255, 255, 255, .05);\\n  --tgui--outline: rgba(255, 255, 255, .10);\\n  --tgui--surface_primary: rgba(23, 23, 23, .95);\\n  --tgui--tertiary_bg_color: #2A2A2A;\\n  --tgui--quartenary_bg_color: #2F2F2F;\\n  --tgui--segmented_control_active_bg: #2F2F2F;\\n  --tgui--card_bg_color: #242424;\\n  --tgui--secondary_hint_color: #78797E;\\n  --tgui--secondary_fill: rgba(41, 144, 255, .15);\\n  --tgui--green: #32E55E;\\n  --tgui--destructive_background: rgba(255, 35, 35, .02);\\n  --tgui--primary_code_highlight: #2990FF;\\n  --tgui--secondary_code_highlight: #E937ED;\\n  --tgui--tertiary_code_highlight: #5AE536;\\n  --tgui--plain_background: rgba(255, 255, 255, .08);\\n  --tgui--plain_foreground: rgba(255, 255, 255, .95);\\n  /* End of custom lib tokens */\\n}\\n\\n@media (min-resolution: 2dppx) {\\n  :host {\\n    --tgui--border--width: .5px;\\n  }\\n}\\n\\n@supports (padding-top: constant(safe-area-inset-bottom)) {\\n  :host {\\n    --tgui--safe_area_inset_bottom: constant(safe-area-inset-bottom);\\n  }\\n}\\n\\n@supports (padding-top: env(safe-area-inset-bottom)) {\\n  :host {\\n    --tgui--safe_area_inset_bottom: env(safe-area-inset-bottom);\\n  }\\n}\\n\\n@supports (color: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent)) {\\n  :host {\\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent);\\n  }\\n\\n  :host-context(.tgui-theme-dark) {\\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 15%, transparent);\\n  }\\n} ","styleUrl":"./tgui-root.component.css"}],"stylesData":"","extends":[],"implements":["OnInit","OnDestroy","OnChanges","AfterViewInit"]},{"name":"RootPortalComponent","id":"component-RootPortalComponent-07a59bf06d5771ff8bb3e7dca777f882d9a8a918c8c7c1428d4b0ef0455a9f452e8ec0fd9a4847655b61fd24d81fad449f3f34f478e70ef069837a692f90db56","file":"projects/tgui/src/lib/components/utils/portal/root-portal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-root-portal","styleUrls":[],"styles":["\\n    :host {\\n      font-family: var(--tgui--font-family);\\n    }\\n    \\n    :host::ng-deep * {\\n      font-family: var(--tgui--font-family);\\n    }\\n  "],"template":"<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"cdr","defaultValue":"inject(ChangeDetectorRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":37,"modifierKind":[123]},{"name":"contentTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":false,"description":"","line":29,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'contentTemplate\', {static: true}"}],"modifierKind":[170]},{"name":"destroy$","defaultValue":"new Subject<void>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":31,"modifierKind":[123]},{"name":"portalService","defaultValue":"inject(PortalService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":35,"modifierKind":[123]},{"name":"templateReady","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":33,"modifierKind":[123]},{"name":"viewContainerRef","defaultValue":"inject(ViewContainerRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":36,"modifierKind":[123]},{"name":"viewRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"any","indexKey":"","optional":false,"description":"","line":32,"modifierKind":[123]}],"methodsClass":[{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":86,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Component for rendering content in the portal container\\nSimilar to RootRenderer in React version</p>\\n","rawdescription":"\\n\\nComponent for rendering content in the portal container\\nSimilar to RootRenderer in React version\\n","type":"component","sourceCode":"import { Component, Input, TemplateRef, ViewChild, ViewContainerRef, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ViewEncapsulation, effect, inject, ChangeDetectorRef } from \'@angular/core\';\\nimport { Subject } from \'rxjs\';\\nimport { PortalService } from \'../../../services\';\\n\\n/**\\n * Component for rendering content in the portal container\\n * Similar to RootRenderer in React version\\n */\\n@Component({\\n  selector: \'tgui-root-portal\',\\n  template: `\\n    <ng-template #contentTemplate>\\n      <ng-content></ng-content>\\n    </ng-template>\\n  `,\\n  standalone: true,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  styles: [`\\n    :host {\\n      font-family: var(--tgui--font-family);\\n    }\\n    \\n    :host::ng-deep * {\\n      font-family: var(--tgui--font-family);\\n    }\\n  `],\\n})\\nexport class RootPortalComponent implements AfterViewInit, OnDestroy {\\n  @ViewChild(\'contentTemplate\', {static: true}) contentTemplate!: TemplateRef<any>;\\n  \\n  private destroy$ = new Subject<void>();\\n  private viewRef: any = null;\\n  private templateReady = false;\\n  \\n  private portalService = inject(PortalService);\\n  private viewContainerRef = inject(ViewContainerRef);\\n  private cdr = inject(ChangeDetectorRef);\\n  \\n  constructor() {\\n    // Use effect to react to portal container changes\\n    effect(() => {\\n      const container = this.portalService.portalContainer();\\n      \\n      if (!this.templateReady || !this.contentTemplate) {\\n        return;\\n      }\\n      \\n      \\n      // Clear previous view if it exists\\n      if (this.viewRef) {\\n        try {\\n          this.viewContainerRef.remove(\\n            this.viewContainerRef.indexOf(this.viewRef)\\n          );\\n        } catch (e) {\\n          console.error(\'Error removing portal view:\', e);\\n        }\\n        this.viewRef = null;\\n      }\\n      \\n      if (container && container.nativeElement) {\\n        \\n        try {\\n          // Create and insert view\\n          this.viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate);\\n          this.cdr.detectChanges();\\n          \\n          // Move nodes to portal container\\n          this.viewRef.rootNodes.forEach((node: Node) => {\\n            // Apply font-family to top-level nodes if they\'re HTML elements\\n            if (node instanceof HTMLElement) {\\n              node.style.fontFamily = \'var(--tgui--font-family)\';\\n            }\\n            container.nativeElement.appendChild(node);\\n          });\\n          \\n        } catch (e) {\\n          console.error(\'Error creating portal view:\', e);\\n        }\\n      } else {\\n        console.warn(\'No portal container available\');\\n      }\\n    });\\n  }\\n  \\n  ngAfterViewInit(): void {\\n    \\n    // Force immediate check to ensure template detection\\n    this.cdr.detectChanges();\\n    \\n    // Mark template as ready to use in the effect\\n    this.templateReady = true;\\n    \\n    // Force the effect to run again now that template is ready\\n    setTimeout(() => {\\n      const container = this.portalService.portalContainer();\\n      // Even if container is the same object, this change\\n      // will trigger the effect to run again\\n      if (container) {\\n        this.portalService.clearPortalContainer();\\n        setTimeout(() => {\\n          this.portalService.setPortalContainer(container);\\n        }, 0);\\n      }\\n    }, 0);\\n  }\\n  \\n  ngOnDestroy(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    \\n    // Clean up view\\n    if (this.viewRef) {\\n      try {\\n        this.viewContainerRef.remove(\\n          this.viewContainerRef.indexOf(this.viewRef)\\n        );\\n      } catch (e) {\\n        console.error(\'Error cleaning up portal view:\', e);\\n      }\\n    }\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      font-family: var(--tgui--font-family);\\n    }\\n    \\n    :host::ng-deep * {\\n      font-family: var(--tgui--font-family);\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":37},"extends":[],"implements":["AfterViewInit","OnDestroy"]},{"name":"SectionComponent","id":"component-SectionComponent-d01767248bd9a58131cf23c27625d482f44b250ab612df1fdb04463fc81f727cfab8a99fb89c32249aff7e34dbb756d85f707a3b5f0788a1883679e9c8821197","file":"projects/tgui/src/lib/components/blocks/section/section.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-section","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n\\n    .tgui-section {\\n      display: block;\\n      width: 100%;\\n    }\\n\\n    /* Platform specific styles */\\n    .tgui-section-body-with-header {\\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body-with-header {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\\n      border-radius: 12px 12px 0 0;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\\n      border-radius: 0 0 12px 12px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-section-divider {\\n      display: block;\\n      width: 100%;\\n    }\\n  "],"template":"<section class=\\"tgui-section\\">\\n  <div class=\\"tgui-section-body-with-header\\">\\n    \x3c!-- Header with wrapper --\x3e\\n    <ng-container *ngIf=\\"headerContent || headerTemplate\\">\\n      <tgui-section-header *ngIf=\\"headerContent && isPrimitiveContent(headerContent)\\">\\n        {{headerContent}}\\n      </tgui-section-header>\\n      <ng-container *ngIf=\\"headerTemplate\\">\\n        <ng-container *ngTemplateOutlet=\\"headerTemplate\\"></ng-container>\\n      </ng-container>\\n    </ng-container>\\n\\n    \x3c!-- Custom header content projection --\x3e\\n    <ng-content select=\\"tgui-section-header\\"></ng-content>\\n\\n    \x3c!-- Body content --\x3e\\n    <div class=\\"tgui-section-body\\">\\n      <ng-container *ngFor=\\"let content of contentProjections; let last = last; let i = index\\">\\n        <ng-container *ngTemplateOutlet=\\"content\\"></ng-container>\\n        <tgui-divider *ngIf=\\"!last\\" class=\\"tgui-section-divider\\"></tgui-divider>\\n      </ng-container>\\n\\n      \x3c!-- Default content projection --\x3e\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n\\n  \x3c!-- Footer with wrapper --\x3e\\n  <ng-container *ngIf=\\"footerContent || footerTemplate\\">\\n    <tgui-section-footer *ngIf=\\"footerContent && isPrimitiveContent(footerContent)\\">\\n      {{footerContent}}\\n    </tgui-section-footer>\\n    <ng-container *ngIf=\\"footerTemplate\\">\\n      <ng-container *ngTemplateOutlet=\\"footerTemplate\\"></ng-container>\\n    </ng-container>\\n  </ng-container>\\n\\n  \x3c!-- Custom footer content projection --\x3e\\n  <ng-content select=\\"tgui-section-footer\\"></ng-content>\\n</section>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"footer","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nContent for the section footer. If a string is passed, SectionFooter is automatically used.\\nFor centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.\\n","description":"<p>Content for the section footer. If a string is passed, SectionFooter is automatically used.\\nFor centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.</p>\\n","line":132,"type":"string | number | TemplateRef<any>","decorators":[]},{"name":"header","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nContent for the section header. If a string is passed, SectionHeader is automatically used.\\nFor more control or a large header, use <tgui-section-header large>...</tgui-section-header>.\\n","description":"<p>Content for the section header. If a string is passed, SectionHeader is automatically used.\\nFor more control or a large header, use <tgui-section-header large>...</tgui-section-header>.</p>\\n","line":126,"type":"string | number | TemplateRef<any>","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"contentNodes","deprecated":false,"deprecationMessage":"","type":"QueryList<TemplateRef<any>>","indexKey":"","optional":false,"description":"","line":139,"decorators":[{"name":"ContentChildren","stringifiedArguments":"TemplateRef"}],"modifierKind":[170]},{"name":"contentProjections","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>[]","indexKey":"","optional":false,"description":"","line":140},{"name":"footerTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":136,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'footerContent\'"}],"modifierKind":[170]},{"name":"headerTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":135,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'headerContent\'"}],"modifierKind":[170]}],"methodsClass":[{"name":"isPrimitive","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":161,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks if the value is a primitive (string or number)\\n","description":"<p>Checks if the value is a primitive (string or number)</p>\\n","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isPrimitiveContent","args":[{"name":"content","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":168,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks if the content is a primitive\\n","description":"<p>Checks if the content is a primitive</p>\\n","jsdoctags":[{"name":"content","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":151,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"NgTemplateOutlet"},{"name":"DividerComponent","type":"component"},{"name":"SectionHeaderComponent","type":"component"},{"name":"SectionFooterComponent","type":"component"}],"description":"<p>The Section component organizes content into separate sections with optional\\nheaders and footers. It automatically wraps strings and numbers in appropriate\\nSectionHeader and SectionFooter components, and inserts dividers between\\nchild elements.</p>\\n","rawdescription":"\\n\\nThe Section component organizes content into separate sections with optional\\nheaders and footers. It automatically wraps strings and numbers in appropriate\\nSectionHeader and SectionFooter components, and inserts dividers between\\nchild elements.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  ContentChild,\\n  TemplateRef,\\n  ViewChild,\\n  ElementRef,\\n  inject,\\n  AfterContentInit,\\n  ContentChildren,\\n  QueryList\\n} from \'@angular/core\';\\nimport { CommonModule, NgClass, NgTemplateOutlet } from \'@angular/common\';\\nimport { PlatformService } from \'@services/platform.service\';\\nimport { DividerComponent } from \'@misc/divider/divider.component\';\\nimport { SectionHeaderComponent } from \'./components/section-header/section-header.component\';\\nimport { SectionFooterComponent } from \'./components/section-footer/section-footer.component\';\\n\\n/**\\n * The Section component organizes content into separate sections with optional\\n * headers and footers. It automatically wraps strings and numbers in appropriate\\n * SectionHeader and SectionFooter components, and inserts dividers between\\n * child elements.\\n */\\n@Component({\\n  selector: \'tgui-section\',\\n  standalone: true,\\n  imports: [CommonModule, NgTemplateOutlet, DividerComponent, SectionHeaderComponent, SectionFooterComponent],\\n  template: `\\n    <section class=\\"tgui-section\\">\\n      <div class=\\"tgui-section-body-with-header\\">\\n        \x3c!-- Header with wrapper --\x3e\\n        <ng-container *ngIf=\\"headerContent || headerTemplate\\">\\n          <tgui-section-header *ngIf=\\"headerContent && isPrimitiveContent(headerContent)\\">\\n            {{headerContent}}\\n          </tgui-section-header>\\n          <ng-container *ngIf=\\"headerTemplate\\">\\n            <ng-container *ngTemplateOutlet=\\"headerTemplate\\"></ng-container>\\n          </ng-container>\\n        </ng-container>\\n\\n        \x3c!-- Custom header content projection --\x3e\\n        <ng-content select=\\"tgui-section-header\\"></ng-content>\\n\\n        \x3c!-- Body content --\x3e\\n        <div class=\\"tgui-section-body\\">\\n          <ng-container *ngFor=\\"let content of contentProjections; let last = last; let i = index\\">\\n            <ng-container *ngTemplateOutlet=\\"content\\"></ng-container>\\n            <tgui-divider *ngIf=\\"!last\\" class=\\"tgui-section-divider\\"></tgui-divider>\\n          </ng-container>\\n          \\n          \x3c!-- Default content projection --\x3e\\n          <ng-content></ng-content>\\n        </div>\\n      </div>\\n\\n      \x3c!-- Footer with wrapper --\x3e\\n      <ng-container *ngIf=\\"footerContent || footerTemplate\\">\\n        <tgui-section-footer *ngIf=\\"footerContent && isPrimitiveContent(footerContent)\\">\\n          {{footerContent}}\\n        </tgui-section-footer>\\n        <ng-container *ngIf=\\"footerTemplate\\">\\n          <ng-container *ngTemplateOutlet=\\"footerTemplate\\"></ng-container>\\n        </ng-container>\\n      </ng-container>\\n\\n      \x3c!-- Custom footer content projection --\x3e\\n      <ng-content select=\\"tgui-section-footer\\"></ng-content>\\n    </section>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n\\n    .tgui-section {\\n      display: block;\\n      width: 100%;\\n    }\\n\\n    /* Platform specific styles */\\n    .tgui-section-body-with-header {\\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body-with-header {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\\n      border-radius: 12px 12px 0 0;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\\n      border-radius: 0 0 12px 12px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-section-divider {\\n      display: block;\\n      width: 100%;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class SectionComponent implements AfterContentInit {\\n  /**\\n   * Content for the section header. If a string is passed, SectionHeader is automatically used.\\n   * For more control or a large header, use <tgui-section-header large>...</tgui-section-header>.\\n   */\\n  @Input() header?: string | number | TemplateRef<any>;\\n\\n  /**\\n   * Content for the section footer. If a string is passed, SectionFooter is automatically used.\\n   * For centered footer, use <tgui-section-footer centered>...</tgui-section-footer>.\\n   */\\n  @Input() footer?: string | number | TemplateRef<any>;\\n\\n  // Шаблоны из проекции содержимого\\n  @ContentChild(\'headerContent\') headerTemplate?: TemplateRef<any>;\\n  @ContentChild(\'footerContent\') footerTemplate?: TemplateRef<any>;\\n\\n  // Для хранения контента между элементами\\n  @ContentChildren(TemplateRef) contentNodes!: QueryList<TemplateRef<any>>;\\n  contentProjections: TemplateRef<any>[] = [];\\n\\n  // Получаем контент для header и footer\\n  get headerContent(): string | number | null {\\n    return this.isPrimitive(this.header) ? this.header as string | number : null;\\n  }\\n\\n  get footerContent(): string | number | null {\\n    return this.isPrimitive(this.footer) ? this.footer as string | number : null;\\n  }\\n\\n  ngAfterContentInit(): void {\\n    // Получаем все проекции шаблонов между разделителями\\n    if (this.contentNodes) {\\n      this.contentProjections = this.contentNodes.toArray();\\n    }\\n  }\\n\\n  /**\\n   * Checks if the value is a primitive (string or number)\\n   */\\n  isPrimitive(value: any): boolean {\\n    return typeof value === \'string\' || typeof value === \'number\';\\n  }\\n\\n  /**\\n   * Checks if the content is a primitive\\n   */\\n  isPrimitiveContent(content: any): boolean {\\n    return this.isPrimitive(content);\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n\\n    .tgui-section {\\n      display: block;\\n      width: 100%;\\n    }\\n\\n    /* Platform specific styles */\\n    .tgui-section-body-with-header {\\n      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body-with-header {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body {\\n      border-radius: 12px;\\n      background: var(--tgui--section_bg_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :first-child {\\n      border-radius: 12px 12px 0 0;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :last-child {\\n      border-radius: 0 0 12px 12px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-body > :only-child {\\n      border-radius: 12px;\\n    }\\n\\n    .tgui-section-divider {\\n      display: block;\\n      width: 100%;\\n    }\\n  \\n","extends":[],"implements":["AfterContentInit"],"accessors":{"headerContent":{"name":"headerContent","getSignature":{"name":"headerContent","type":"","returnType":"string | number | null","line":143}},"footerContent":{"name":"footerContent","getSignature":{"name":"footerContent","type":"","returnType":"string | number | null","line":147}}}},{"name":"SectionFooterComponent","id":"component-SectionFooterComponent-b6807e9f2623dbe6de58db6008722ee48f1ce2a2b85e267c3aeac9137797c12da45c9ee7d26abd16d11eca69f93e6e36c71f397c02778d8375a4f31991bfddce","file":"projects/tgui/src/lib/components/blocks/section/components/section-footer/section-footer.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-section-footer","styleUrls":[],"styles":["\\n    .tgui-section-footer {\\n      padding: 12px 24px;\\n    }\\n\\n    .tgui-section-footer--centered {\\n      padding: 16px 24px 20px;\\n      text-align: center;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\\n      padding: 16px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\\n      padding: 8px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\\n      color: var(--tgui--section_header_text_color);\\n    }\\n  "],"template":"<footer class=\\"tgui-section-footer\\" [ngClass]=\\"footerClasses\\">\\n  <ng-container *ngIf=\\"_isPlatformIOS; else baseFooter\\">\\n    <tgui-caption class=\\"tgui-section-footer-text\\">\\n    <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n    </tgui-caption>\\n  </ng-container>\\n  <ng-template #baseFooter>\\n    <tgui-subheadline level=\\"2\\" class=\\"tgui-section-footer-text\\">\\n    <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n    </tgui-subheadline>\\n  </ng-template>\\n</footer>\\n<ng-template #contentTpl>\\n  <ng-content></ng-content>\\n</ng-template>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"centered","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText centering, adding additional padding","description":"<p>Text centering, adding additional padding</p>\\n","line":64,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_isPlatformIOS","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":68,"modifierKind":[125]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":66,"modifierKind":[123]},{"name":"platformSignal","defaultValue":"this.platformService.platform","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":67,"modifierKind":[123]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"NgClass"},{"name":"CaptionComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"}],"description":"<p>The SectionFooter component represents a footer for the Section component.\\nSupports centered mode for centered text.</p>\\n","rawdescription":"\\n\\nThe SectionFooter component represents a footer for the Section component.\\nSupports centered mode for centered text.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding,\\n  inject,\\n  effect\\n} from \'@angular/core\';\\nimport { CommonModule, NgClass } from \'@angular/common\';\\n// import { PlatformService } from \'@services/platform.service\';\\nimport { CaptionComponent } from \'@typography/caption/caption.component\';\\nimport { SubheadlineComponent } from \'@typography/subheadline/subheadline.component\';\\nimport { PlatformService } from \'@services/platform.service\';\\n/**\\n * The SectionFooter component represents a footer for the Section component.\\n * Supports centered mode for centered text.\\n */\\n@Component({\\n  selector: \'tgui-section-footer\',\\n  standalone: true,\\n  imports: [CommonModule, NgClass, CaptionComponent, SubheadlineComponent],\\n  template: `\\n    <footer class=\\"tgui-section-footer\\" [ngClass]=\\"footerClasses\\">\\n      <ng-container *ngIf=\\"_isPlatformIOS; else baseFooter\\">\\n        <tgui-caption class=\\"tgui-section-footer-text\\">\\n        <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n        </tgui-caption>\\n      </ng-container>\\n      <ng-template #baseFooter>\\n        <tgui-subheadline level=\\"2\\" class=\\"tgui-section-footer-text\\">\\n        <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n        </tgui-subheadline>\\n      </ng-template>\\n    </footer>\\n    <ng-template #contentTpl>\\n      <ng-content></ng-content>\\n    </ng-template>\\n  `,\\n  styles: [`\\n    .tgui-section-footer {\\n      padding: 12px 24px;\\n    }\\n\\n    .tgui-section-footer--centered {\\n      padding: 16px 24px 20px;\\n      text-align: center;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\\n      padding: 16px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\\n      padding: 8px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\\n      color: var(--tgui--section_header_text_color);\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SectionFooterComponent {\\n  /** Text centering, adding additional padding */\\n  @Input() centered = false;\\n\\n  private platformService = inject(PlatformService);\\n  private platformSignal = this.platformService.platform;\\n  public _isPlatformIOS: boolean = false\\n  constructor() {\\n    effect(() => {\\n      const platform = this.platformSignal()\\n      this._isPlatformIOS = platform === \'ios\';\\n    });\\n  }\\n\\n  get footerClasses(): Record<string, boolean> {\\n    return {\\n      \'tgui-section-footer--centered\': this.centered\\n    };\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .tgui-section-footer {\\n      padding: 12px 24px;\\n    }\\n\\n    .tgui-section-footer--centered {\\n      padding: 16px 24px 20px;\\n      text-align: center;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tgui-section-footer--centered {\\n      padding: 16px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer {\\n      padding: 8px 16px 0;\\n    }\\n    :host-context(.tgui-platform-ios) .tgui-section-footer-text {\\n      color: var(--tgui--section_header_text_color);\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":68},"extends":[],"accessors":{"footerClasses":{"name":"footerClasses","getSignature":{"name":"footerClasses","type":"","returnType":"Record<string, boolean>","line":76}}}},{"name":"SectionHeaderComponent","id":"component-SectionHeaderComponent-a792b6a608fe8c7ae2a87cabb77ec4de462793ee435c21d8074a40629619d17cae9c23cc172d0791cd6529c84c9a56461056afc1f695f61d75190f87e6bb8bcb","file":"projects/tgui/src/lib/components/blocks/section/components/section-header/section-header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-section-header","styleUrls":[],"styles":["\\n    .tgui-section-header {\\n      padding: 20px 24px 4px 22px;\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .tgui-section-header--large {\\n      padding-left: 24px;\\n      color: var(--tgui--text_color);\\n    }\\n\\n    .tgui-platform-ios .tgui-section-header {\\n      padding: 16px 16px 8px 16px;\\n      color: var(--tgui--section_header_text_color);\\n    }\\n\\n    .tgui-section-header--ios.tgui-section-header--large {\\n      padding: 0 0 12px;\\n      color: var(--tgui--text_color);\\n    }\\n  "],"template":"<header class=\\"tgui-section-header\\" [ngClass]=\\"headerClasses\\">\\n  <ng-container *ngIf=\\"large; else defaultHeader\\">\\n    <tgui-large-title>\\n    <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n    </tgui-large-title>\\n  </ng-container>\\n  <ng-template #defaultHeader>\\n    <tgui-headline>\\n    <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n    </tgui-headline>\\n  </ng-template>\\n</header>\\n<ng-template #contentTpl>\\n  <ng-content></ng-content>\\n</ng-template>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"large","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEnlarged header, changes font size, padding and color","description":"<p>Enlarged header, changes font size, padding and color</p>\\n","line":65,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"NgClass"},{"name":"HeadlineComponent","type":"component"},{"name":"LargeTitleComponent","type":"component"}],"description":"<p>The SectionHeader component represents a header for the Section component.\\nSupports large mode for an enlarged header.</p>\\n","rawdescription":"\\n\\nThe SectionHeader component represents a header for the Section component.\\nSupports large mode for an enlarged header.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  Input, \\n  HostBinding,\\n  inject,\\n  effect\\n} from \'@angular/core\';\\nimport { CommonModule, NgClass } from \'@angular/common\';\\nimport { PlatformService } from \'@services/platform.service\';\\nimport { HeadlineComponent } from \'@typography/headline/headline.component\';\\nimport { LargeTitleComponent } from \'@typography/large-title/large-title.component\';\\n\\n/**\\n * The SectionHeader component represents a header for the Section component.\\n * Supports large mode for an enlarged header.\\n */\\n@Component({\\n  selector: \'tgui-section-header\',\\n  standalone: true,\\n  imports: [CommonModule, NgClass, HeadlineComponent, LargeTitleComponent],\\n  template: `\\n    <header class=\\"tgui-section-header\\" [ngClass]=\\"headerClasses\\">\\n      <ng-container *ngIf=\\"large; else defaultHeader\\">\\n        <tgui-large-title>\\n        <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n        </tgui-large-title>\\n      </ng-container>\\n      <ng-template #defaultHeader>\\n        <tgui-headline>\\n        <ng-container *ngTemplateOutlet=\\"contentTpl\\"></ng-container>\\n        </tgui-headline>\\n      </ng-template>\\n    </header>\\n    <ng-template #contentTpl>\\n      <ng-content></ng-content>\\n    </ng-template>\\n  `,\\n  styles: [`\\n    .tgui-section-header {\\n      padding: 20px 24px 4px 22px;\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .tgui-section-header--large {\\n      padding-left: 24px;\\n      color: var(--tgui--text_color);\\n    }\\n\\n    .tgui-platform-ios .tgui-section-header {\\n      padding: 16px 16px 8px 16px;\\n      color: var(--tgui--section_header_text_color);\\n    }\\n\\n    .tgui-section-header--ios.tgui-section-header--large {\\n      padding: 0 0 12px;\\n      color: var(--tgui--text_color);\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SectionHeaderComponent {\\n  /** Enlarged header, changes font size, padding and color */\\n  @Input() large = false;\\n\\n\\n  get headerClasses(): Record<string, boolean> {\\n    return {\\n      \'tgui-section-header--large\': this.large\\n    };\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    .tgui-section-header {\\n      padding: 20px 24px 4px 22px;\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .tgui-section-header--large {\\n      padding-left: 24px;\\n      color: var(--tgui--text_color);\\n    }\\n\\n    .tgui-platform-ios .tgui-section-header {\\n      padding: 16px 16px 8px 16px;\\n      color: var(--tgui--section_header_text_color);\\n    }\\n\\n    .tgui-section-header--ios.tgui-section-header--large {\\n      padding: 0 0 12px;\\n      color: var(--tgui--text_color);\\n    }\\n  \\n","extends":[],"accessors":{"headerClasses":{"name":"headerClasses","getSignature":{"name":"headerClasses","type":"","returnType":"Record<string, boolean>","line":68}}}},{"name":"SnackbarButtonComponent","id":"component-SnackbarButtonComponent-709c118d903d84055021833427966a823174e2c3dc5d584103221a92fba9026a0806ff6cc75f7c7a914fd98d9de422551c96e387b1da3d62aee334ba9d40dfa2","file":"projects/tgui/src/lib/components/feedback/snackbar/components/snackbar-button/snackbar-button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-snackbar-button","styleUrls":["./snackbar-button.component.css"],"styles":[],"template":"<tgui-tappable>\\n  <ng-content></ng-content>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, ChangeDetectionStrategy } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TappableComponent } from \'../../../../utils/tappable/tappable.component\';\\n\\n@Component({\\n  selector: \'tgui-snackbar-button\',\\n  standalone: true,\\n  imports: [CommonModule, TappableComponent],\\n  template: `\\n    <tgui-tappable>\\n      <ng-content></ng-content>\\n    </tgui-tappable>\\n  `,\\n  styleUrls: [\'./snackbar-button.component.css\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class SnackbarButtonComponent {} ","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: inline-block;\\n}\\n\\n:host ::ng-deep tgui-tappable {\\n  border: none;\\n  padding: 0;\\n  color: var(--tgui--toast_accent_color);\\n  background: transparent;\\n} ","styleUrl":"./snackbar-button.component.css"}],"stylesData":"","extends":[]},{"name":"SnackbarComponent","id":"component-SnackbarComponent-5f31d46efd5ebac065797d72d4424f7a1d1f7d5e6c03749f8f98035efceaed546744dd33dbd75f8a558c63c5b5cc82d3c537fe262496c1bd3cff3bee37e47c08","file":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-snackbar","styleUrls":["./snackbar.component.css"],"styles":[],"template":"<tgui-root-portal>\\n  <div\\n    class=\\"tgui-snackbar-wrapper\\"\\n    [class.tgui-snackbar-wrapper--ios]=\\"isIOS()\\"\\n    [class.tgui-snackbar-wrapper--closing]=\\"closing()\\">\\n    <div class=\\"tgui-snackbar-body\\">\\n      <div *ngIf=\\"beforeTemplate\\" class=\\"tgui-snackbar-before\\">\\n        <ng-container *ngTemplateOutlet=\\"beforeTemplate\\"></ng-container>\\n      </div>\\n      <div class=\\"tgui-snackbar-middle\\">\\n        <tgui-caption weight=\\"2\\" *ngIf=\\"hasMainContent\\">\\n          <ng-content></ng-content>\\n        </tgui-caption>\\n        <tgui-caption *ngIf=\\"description\\">\\n            {{ description }}\\n        </tgui-caption>\\n        <tgui-caption *ngIf=\\"linkTemplate\\">\\n          <ng-container *ngTemplateOutlet=\\"linkTemplate\\"></ng-container>\\n        </tgui-caption>\\n      </div>\\n      <div *ngIf=\\"afterTemplate\\" class=\\"tgui-snackbar-after\\">\\n        <ng-container *ngTemplateOutlet=\\"afterTemplate\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n</tgui-root-portal>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","deprecated":false,"deprecationMessage":"","line":48,"type":"string","decorators":[]},{"name":"duration","defaultValue":"4000","deprecated":false,"deprecationMessage":"","line":49,"type":"number","decorators":[]},{"name":"onClose","deprecated":false,"deprecationMessage":"","line":50,"type":"function","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"afterTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":45,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'after\'"}],"modifierKind":[170]},{"name":"beforeTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":44,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'before\'"}],"modifierKind":[170]},{"name":"closeTimeout","deprecated":false,"deprecationMessage":"","type":"any","indexKey":"","optional":true,"description":"","line":53,"modifierKind":[123]},{"name":"closing","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":55},{"name":"hasMainContent","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":56},{"name":"isIOS","defaultValue":"this.platformService.isIOS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60},{"name":"linkTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<any>","indexKey":"","optional":true,"description":"","line":46,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'link\'"}],"modifierKind":[170]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":58,"modifierKind":[123]},{"name":"TRANSITION_FINISH_DURATION","defaultValue":"320","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":52,"modifierKind":[123,148]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":75,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":62,"deprecated":false,"deprecationMessage":""},{"name":"startCloseTimer","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":67,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"RootPortalComponent","type":"component"},{"name":"CaptionComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, signal, OnInit, OnDestroy, inject, ChangeDetectionStrategy, TemplateRef, ContentChild } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { RootPortalComponent } from \'../../utils/portal/root-portal.component\';\\nimport { CaptionComponent } from \'../../typography/caption/caption.component\';\\nimport { PlatformService } from \'../../../services\';\\n\\n@Component({\\n  selector: \'tgui-snackbar\',\\n  standalone: true,\\n  imports: [CommonModule, RootPortalComponent, CaptionComponent],\\n  template: `\\n    <tgui-root-portal>\\n      <div \\n        class=\\"tgui-snackbar-wrapper\\"\\n        [class.tgui-snackbar-wrapper--ios]=\\"isIOS()\\"\\n        [class.tgui-snackbar-wrapper--closing]=\\"closing()\\">\\n        <div class=\\"tgui-snackbar-body\\">\\n          <div *ngIf=\\"beforeTemplate\\" class=\\"tgui-snackbar-before\\">\\n            <ng-container *ngTemplateOutlet=\\"beforeTemplate\\"></ng-container>\\n          </div>\\n          <div class=\\"tgui-snackbar-middle\\">\\n            <tgui-caption weight=\\"2\\" *ngIf=\\"hasMainContent\\">\\n              <ng-content></ng-content>\\n            </tgui-caption>\\n            <tgui-caption *ngIf=\\"description\\">\\n                {{ description }}\\n            </tgui-caption>\\n            <tgui-caption *ngIf=\\"linkTemplate\\">\\n              <ng-container *ngTemplateOutlet=\\"linkTemplate\\"></ng-container>\\n            </tgui-caption>\\n          </div>\\n          <div *ngIf=\\"afterTemplate\\" class=\\"tgui-snackbar-after\\">\\n            <ng-container *ngTemplateOutlet=\\"afterTemplate\\"></ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </tgui-root-portal>\\n  `,\\n  styleUrls: [\'./snackbar.component.css\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class SnackbarComponent implements OnInit, OnDestroy {\\n\\n  @ContentChild(\'before\') beforeTemplate?: TemplateRef<any>;\\n  @ContentChild(\'after\') afterTemplate?: TemplateRef<any>;\\n  @ContentChild(\'link\') linkTemplate?: TemplateRef<any>;\\n\\n  @Input() description?: string;\\n  @Input() duration = 4000;\\n  @Input() onClose!: () => void;\\n  \\n  private readonly TRANSITION_FINISH_DURATION = 320;\\n  private closeTimeout?: any;\\n  \\n  closing = signal(false);\\n  hasMainContent = true;\\n  \\n  private platformService = inject(PlatformService);\\n  \\n  isIOS = this.platformService.isIOS;\\n  \\n  ngOnInit(): void {\\n    console.log(\'ngOnInit\',this.beforeTemplate, this.afterTemplate, this.description, this.linkTemplate);\\n    this.startCloseTimer();\\n  }\\n  \\n  startCloseTimer(): void {\\n    if (this.duration > 0) {\\n      this.closeTimeout = setTimeout(() => {\\n        this.close();\\n      }, this.duration);\\n    }\\n  }\\n  \\n  close(): void {\\n    this.closing.set(true);\\n    setTimeout(() => {\\n      if (this.onClose) {\\n        this.onClose();\\n      }\\n    }, this.TRANSITION_FINISH_DURATION);\\n  }\\n  \\n  ngOnDestroy(): void {\\n    if (this.closeTimeout) {\\n      clearTimeout(this.closeTimeout);\\n    }\\n  }\\n} ","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: contents;\\n}\\n\\n.tgui-snackbar-wrapper {\\n  position: fixed;\\n  user-select: none;\\n  left: 10px;\\n  right: 10px;\\n  bottom: 10px;\\n  box-sizing: border-box;\\n  max-inline-size: 460px;\\n  animation: verticalIntro 340ms cubic-bezier(.3, .3, .5, 1);\\n  transition: transform 320ms cubic-bezier(.3, .3, .5, 1);\\n  z-index: 9999;\\n  margin: 0 auto;\\n}\\n\\n.tgui-snackbar-wrapper--closing {\\n  transform: translate3d(0, 140%, 0);\\n}\\n\\n.tgui-snackbar-wrapper--ios {\\n  bottom: 16px;\\n}\\n\\n.tgui-snackbar-wrapper--ios .tgui-snackbar-body {\\n  border-radius: 14px;\\n}\\n\\n.tgui-snackbar-body {\\n  position: sticky;\\n  inset: 0;\\n  display: flex;\\n  align-items: center;\\n  gap: 12px;\\n  width: 100%;\\n  box-sizing: border-box;\\n  padding: 10px 16px 10px 10px;\\n  border-radius: 10px;\\n  -webkit-backdrop-filter: blur(28px);\\n  backdrop-filter: blur(28px);\\n  background: var(--tgui--surface_dark);\\n}\\n\\n.tgui-snackbar-before,\\n.tgui-snackbar-after {\\n  display: flex;\\n  align-items: center;\\n  color: var(--tgui--toast_accent_color);\\n}\\n\\n.tgui-snackbar-middle {\\n  flex: 1 1 0;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 1px;\\n  color: var(--tgui--white);\\n}\\n\\n@keyframes verticalIntro {\\n  from {\\n    transform: translate3d(0, 140%, 0);\\n  }\\n  to {\\n    transform: translate3d(0, 0, 0);\\n  }\\n} ","styleUrl":"./snackbar.component.css"}],"stylesData":"","extends":[],"implements":["OnInit","OnDestroy"]},{"name":"SpinnerComponent","id":"component-SpinnerComponent-8ff12406535b31121d6425a43bd82bfc85b06d13188b2a96241769d2ac64910bf604e8745ea3295e129f2677a0218abd7099b6824ba2c51c8251c083ccd6f8cf","file":"projects/tgui/src/lib/components/feedback/spinner/spinner.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-spinner","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n\\n    .wrapper {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    :host.size-s .wrapper {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    :host.size-m .wrapper {\\n      width: 28px;\\n      height: 28px;\\n    }\\n\\n    :host.size-l .wrapper {\\n      width: 36px;\\n      height: 36px;\\n    }\\n  "],"template":"<div role=\\"status\\" class=\\"wrapper\\" [class.wrapper--ios]=\\"isIOS\\">\\n  <ng-container *ngIf=\\"isIOS; else baseSpinner\\">\\n    <tgui-ios-spinner [size]=\\"size()\\"></tgui-ios-spinner>\\n  </ng-container>\\n  <ng-template #baseSpinner>\\n    <tgui-base-spinner [size]=\\"size()\\"></tgui-base-spinner>\\n  </ng-template>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"isIOS","defaultValue":"this.platformService.isIOS()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flag indicating whether the current platform is iOS</p>\\n","line":74,"rawdescription":"\\n\\nFlag indicating whether the current platform is iOS\\n"},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":69,"modifierKind":[123]},{"name":"size","defaultValue":"input<\'s\' | \'m\' | \'l\'>(\'m\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of the loading indicator (&#39;s&#39; - small, &#39;m&#39; - medium, &#39;l&#39; - large)</p>\\n","line":67,"rawdescription":"\\n\\nSize of the loading indicator (\'s\' - small, \'m\' - medium, \'l\' - large)\\n"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.size-l","deprecated":false,"deprecationMessage":"","line":78,"type":"boolean","decorators":[]},{"name":"class.size-m","deprecated":false,"deprecationMessage":"","line":77,"type":"boolean","decorators":[]},{"name":"class.size-s","deprecated":false,"deprecationMessage":"","line":76,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"BaseSpinnerComponent","type":"component"},{"name":"IOSSpinnerComponent","type":"component"}],"description":"<p>Spinner component displays a loading indicator.\\nAutomatically selects the appropriate indicator style based on the platform.</p>\\n","rawdescription":"\\n\\nSpinner component displays a loading indicator.\\nAutomatically selects the appropriate indicator style based on the platform.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  HostBinding, \\n  inject,\\n  input,\\n  computed\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../services\';\\nimport { BaseSpinnerComponent } from \'./components/base-spinner/base-spinner.component\';\\nimport { IOSSpinnerComponent } from \'./components/ios-spinner/ios-spinner.component\';\\n\\n/**\\n * Spinner component displays a loading indicator.\\n * Automatically selects the appropriate indicator style based on the platform.\\n */\\n@Component({\\n  selector: \'tgui-spinner\',\\n  standalone: true,\\n  imports: [CommonModule, BaseSpinnerComponent, IOSSpinnerComponent],\\n  template: `\\n    <div role=\\"status\\" class=\\"wrapper\\" [class.wrapper--ios]=\\"isIOS\\">\\n      <ng-container *ngIf=\\"isIOS; else baseSpinner\\">\\n        <tgui-ios-spinner [size]=\\"size()\\"></tgui-ios-spinner>\\n      </ng-container>\\n      <ng-template #baseSpinner>\\n        <tgui-base-spinner [size]=\\"size()\\"></tgui-base-spinner>\\n      </ng-template>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n\\n    .wrapper {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    :host.size-s .wrapper {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    :host.size-m .wrapper {\\n      width: 28px;\\n      height: 28px;\\n    }\\n\\n    :host.size-l .wrapper {\\n      width: 36px;\\n      height: 36px;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class SpinnerComponent {\\n  /**\\n   * Size of the loading indicator (\'s\' - small, \'m\' - medium, \'l\' - large)\\n   */\\n  size = input<\'s\' | \'m\' | \'l\'>(\'m\');\\n  \\n  private platformService = inject(PlatformService);\\n  \\n  /**\\n   * Flag indicating whether the current platform is iOS\\n   */\\n  isIOS = this.platformService.isIOS();\\n\\n  @HostBinding(\'class.size-s\') get isSizeS() { return this.size() === \'s\'; }\\n  @HostBinding(\'class.size-m\') get isSizeM() { return this.size() === \'m\'; }\\n  @HostBinding(\'class.size-l\') get isSizeL() { return this.size() === \'l\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-flex;\\n      color: inherit;\\n    }\\n\\n    .wrapper {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n\\n    :host.size-s .wrapper {\\n      width: 20px;\\n      height: 20px;\\n    }\\n\\n    :host.size-m .wrapper {\\n      width: 28px;\\n      height: 28px;\\n    }\\n\\n    :host.size-l .wrapper {\\n      width: 36px;\\n      height: 36px;\\n    }\\n  \\n","extends":[],"accessors":{"isSizeS":{"name":"isSizeS","getSignature":{"name":"isSizeS","type":"","returnType":"","line":76}},"isSizeM":{"name":"isSizeM","getSignature":{"name":"isSizeM","type":"","returnType":"","line":77}},"isSizeL":{"name":"isSizeL","getSignature":{"name":"isSizeL","type":"","returnType":"","line":78}}}},{"name":"SpoilerComponent","id":"component-SpoilerComponent-c5d503ef513f508aed87ad438bc4f0a2b6cc4aaecb8f4552ff72553740b1d567b7c1087f0e0ae6cb9dfe5e6907bb513df8e779136fd72913ef7b25d2dfe93f6a","file":"projects/tgui/src/lib/components/feedback/spoiler/spoiler.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-spoiler","styleUrls":[],"styles":["\\n    :host {\\n      position: relative;\\n      display: table;\\n    }\\n\\n    :host::before {\\n      position: absolute;\\n      content: \'\';\\n      inset: 0;\\n      background-color: var(--tgui--bg_color);\\n      background-image: url(\'./icons/spoiler.svg\');\\n      background-repeat: round;\\n      background-position: center;\\n      z-index: var(--tgui--z-index--simple);\\n      transition: .4s ease;\\n    }\\n\\n    :host.visible::before {\\n      opacity: 0;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"visible","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":55,"required":false}],"outputsClass":[],"propertiesClass":[{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":52,"modifierKind":[123]},{"name":"isVisible","defaultValue":"signal(this.visible())","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":58,"modifierKind":[123]},{"name":"visible","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":55,"required":false}],"methodsClass":[{"name":"ngOnChanges","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":67,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyDown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'keydown.enter\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'keydown.space\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.visible","deprecated":false,"deprecationMessage":"","line":62,"type":"boolean","decorators":[]}],"hostListeners":[{"name":"click","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":73},{"name":"keydown.enter","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":81},{"name":"keydown.space","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":81}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Provides a way to hide or show content, such as details or spoilers, with a simple click.\\nThe visibility state can be controlled externally via props or toggled by user interaction.</p>\\n","rawdescription":"\\n\\nProvides a way to hide or show content, such as details or spoilers, with a simple click.\\nThe visibility state can be controlled externally via props or toggled by user interaction.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  input, \\n  signal,\\n  HostBinding,\\n  HostListener,\\n  ElementRef,\\n  inject\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Provides a way to hide or show content, such as details or spoilers, with a simple click.\\n * The visibility state can be controlled externally via props or toggled by user interaction.\\n */\\n@Component({\\n  selector: \'tgui-spoiler\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [`\\n    :host {\\n      position: relative;\\n      display: table;\\n    }\\n\\n    :host::before {\\n      position: absolute;\\n      content: \'\';\\n      inset: 0;\\n      background-color: var(--tgui--bg_color);\\n      background-image: url(\'./icons/spoiler.svg\');\\n      background-repeat: round;\\n      background-position: center;\\n      z-index: var(--tgui--z-index--simple);\\n      transition: .4s ease;\\n    }\\n\\n    :host.visible::before {\\n      opacity: 0;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class SpoilerComponent {\\n  private elementRef = inject(ElementRef);\\n\\n  // Input property for controlling visibility\\n  visible = input<boolean>(false);\\n  \\n  // Internal state for visibility\\n  private isVisible = signal(this.visible());\\n\\n  // Apply visible class based on internal state\\n  @HostBinding(\'class.visible\')\\n  get isVisibleState(): boolean {\\n    return this.isVisible();\\n  }\\n\\n  // Handle changes to input property\\n  ngOnChanges(): void {\\n    this.isVisible.set(this.visible());\\n  }\\n\\n  // Toggle visibility on click\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(event: Event): void {\\n    this.isVisible.update(state => !state);\\n    event.stopPropagation();\\n  }\\n\\n  // Handle keyboard accessibility\\n  @HostListener(\'keydown.enter\', [\'$event\'])\\n  @HostListener(\'keydown.space\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    this.isVisible.update(state => !state);\\n    event.preventDefault();\\n    event.stopPropagation();\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: relative;\\n      display: table;\\n    }\\n\\n    :host::before {\\n      position: absolute;\\n      content: \'\';\\n      inset: 0;\\n      background-color: var(--tgui--bg_color);\\n      background-image: url(\'./icons/spoiler.svg\');\\n      background-repeat: round;\\n      background-position: center;\\n      z-index: var(--tgui--z-index--simple);\\n      transition: .4s ease;\\n    }\\n\\n    :host.visible::before {\\n      opacity: 0;\\n    }\\n  \\n","extends":[],"accessors":{"isVisibleState":{"name":"isVisibleState","getSignature":{"name":"isVisibleState","type":"boolean","returnType":"boolean","line":62}}}},{"name":"StepsComponent","id":"component-StepsComponent-6a34c865e6cf7b29a2664df6b34814b9cca14556cc3bde4d06acd1294203bdf0545bcbac34f294045e6f47c7085c0d4ce0246a8786180ed530ce2276bbd66533","file":"projects/tgui/src/lib/components/blocks/steps/steps.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-steps","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-steps-wrapper {\\n      display: flex;\\n      gap: 9px;\\n      padding: 12px;\\n    }\\n    \\n    .tgui-steps-step {\\n      min-width: 3px;\\n      height: 3px;\\n      width: 100%;\\n      border-radius: 2px;\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n    \\n    .tgui-steps-step--active {\\n      background: var(--tgui--link_color);\\n    }\\n  "],"template":"<div class=\\"tgui-steps-wrapper\\">\\n  <div\\n    *ngFor=\\"let step of stepsArray()\\"\\n    class=\\"tgui-steps-step\\"\\n    [class.tgui-steps-step--active]=\\"step < progress()\\"\\n  ></div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"count","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Total number of steps.</p>\\n","line":49,"rawdescription":"\\nTotal number of steps.","required":false},{"name":"progress","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current progress, indicating how many steps have been completed.\\nProgress is 0-indexed and goes up to <code>count</code>.</p>\\n","line":55,"rawdescription":"\\n\\nCurrent progress, indicating how many steps have been completed.\\nProgress is 0-indexed and goes up to `count`.\\n","required":false}],"outputsClass":[],"propertiesClass":[{"name":"count","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Total number of steps.</p>\\n","line":49,"rawdescription":"\\nTotal number of steps.","required":false},{"name":"progress","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current progress, indicating how many steps have been completed.\\nProgress is 0-indexed and goes up to <code>count</code>.</p>\\n","line":55,"rawdescription":"\\n\\nCurrent progress, indicating how many steps have been completed.\\nProgress is 0-indexed and goes up to `count`.\\n","required":false},{"name":"stepsArray","defaultValue":"computed(() => Array.from({ length: this.count() }, (_, i) => i))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Array of indexes for rendering steps</p>\\n","line":58,"rawdescription":"\\nArray of indexes for rendering steps"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Renders a visual indicator of steps or progress in a process, such as a tutorial or a multi-step form.\\nIt visually represents total steps and current progress.</p>\\n","rawdescription":"\\n\\nRenders a visual indicator of steps or progress in a process, such as a tutorial or a multi-step form.\\nIt visually represents total steps and current progress.\\n","type":"component","sourceCode":"import { Component, ViewEncapsulation, ChangeDetectionStrategy, input, computed } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Renders a visual indicator of steps or progress in a process, such as a tutorial or a multi-step form.\\n * It visually represents total steps and current progress.\\n */\\n@Component({\\n  selector: \'tgui-steps\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <div class=\\"tgui-steps-wrapper\\">\\n      <div \\n        *ngFor=\\"let step of stepsArray()\\"\\n        class=\\"tgui-steps-step\\"\\n        [class.tgui-steps-step--active]=\\"step < progress()\\"\\n      ></div>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-steps-wrapper {\\n      display: flex;\\n      gap: 9px;\\n      padding: 12px;\\n    }\\n    \\n    .tgui-steps-step {\\n      min-width: 3px;\\n      height: 3px;\\n      width: 100%;\\n      border-radius: 2px;\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n    \\n    .tgui-steps-step--active {\\n      background: var(--tgui--link_color);\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class StepsComponent {\\n  /** Total number of steps. */\\n  count = input<number>(0);\\n  \\n  /** \\n   * Current progress, indicating how many steps have been completed. \\n   * Progress is 0-indexed and goes up to `count`. \\n   */\\n  progress = input<number>(0);\\n  \\n  /** Array of indexes for rendering steps */\\n  stepsArray = computed(() => Array.from({ length: this.count() }, (_, i) => i));\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n    \\n    .tgui-steps-wrapper {\\n      display: flex;\\n      gap: 9px;\\n      padding: 12px;\\n    }\\n    \\n    .tgui-steps-step {\\n      min-width: 3px;\\n      height: 3px;\\n      width: 100%;\\n      border-radius: 2px;\\n      background: var(--tgui--tertiary_bg_color);\\n    }\\n    \\n    .tgui-steps-step--active {\\n      background: var(--tgui--link_color);\\n    }\\n  \\n","extends":[]},{"name":"SubheadlineComponent","id":"component-SubheadlineComponent-662d6ce9146f5e02190559ce4ad0ef458f08effd5a611288720223a7279fd4beb55e99c8fc1655aa52b41ca8573a756c6a62d844115e01eb1aa91ed786bce867","file":"projects/tgui/src/lib/components/typography/subheadline/subheadline.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-subheadline","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--subheadline1--font_size);\\n      line-height: var(--tgui--subheadline1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--subheadline2--font_size);\\n      line-height: var(--tgui--subheadline2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'1\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetermines the size of the subheadline, with `1` being the default and \'2\' providing a smaller option.\\n","description":"<p>Determines the size of the subheadline, with <code>1</code> being the default and &#39;2&#39; providing a smaller option.</p>\\n","line":53,"type":"\\"1\\" | \\"2\\"","decorators":[]},{"name":"tag","defaultValue":"\'h6\'","deprecated":false,"deprecationMessage":"","line":56,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":64,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":59,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":60,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":63,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":65,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":66,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":67,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The Subheadline component is designed to render text that serves as a secondary heading\\nor subheading within content. It leverages the Typography component for consistent text styling,\\noffering additional control over the text&#39;s size through the <code>level</code> prop. By default, it renders\\nas an <code>&lt;h6&gt;</code> element but can be customized with the <code>tag</code> property.</p>\\n","rawdescription":"\\n\\nThe Subheadline component is designed to render text that serves as a secondary heading\\nor subheading within content. It leverages the Typography component for consistent text styling,\\noffering additional control over the text\'s size through the `level` prop. By default, it renders\\nas an `<h6>` element but can be customized with the `tag` property.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * The Subheadline component is designed to render text that serves as a secondary heading\\n * or subheading within content. It leverages the Typography component for consistent text styling,\\n * offering additional control over the text\'s size through the `level` prop. By default, it renders\\n * as an `<h6>` element but can be customized with the `tag` property.\\n */\\n@Component({\\n  selector: \'tgui-subheadline\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--subheadline1--font_size);\\n      line-height: var(--tgui--subheadline1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--subheadline2--font_size);\\n      line-height: var(--tgui--subheadline2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class SubheadlineComponent extends TypographyComponent {\\n  /**\\n   * Determines the size of the subheadline, with `1` being the default and \'2\' providing a smaller option.\\n   */\\n  @Input() level: \'1\' | \'2\' = \'1\';\\n  \\n  // Override tag to use h6 by default\\n  @Input() override tag = \'h6\';\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--subheadline1--font_size);\\n      line-height: var(--tgui--subheadline1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--subheadline2--font_size);\\n      line-height: var(--tgui--subheadline2--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":59}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":60}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":63}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":64}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":65}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":66}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":67}}}},{"name":"TabbarComponent","id":"component-TabbarComponent-9dbec33e3eccf6f3f3232da50ef3570dbf18717bb4d117cdbabc731906e3d4087dc9760f798eff538b46826c9f12b888fa7d8a0bd0bcb3d4d977bf3cab02aa99","file":"projects/tgui/src/lib/components/layout/tabbar/tabbar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-tabbar","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n    }\\n\\n    .tabbar-container {\\n      display: flex;\\n      justify-items: stretch;\\n      box-shadow: 0 -1px 0 var(--tgui--divider);\\n      background: var(--tgui--surface_primary);\\n      padding: 0 16px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tabbar-container {\\n      padding: 0;\\n    }\\n  "],"template":"<tgui-fixed-layout vertical=\\"bottom\\">\\n  <div class=\\"tabbar-container\\">\\n    <ng-content></ng-content>\\n  </div>\\n</tgui-fixed-layout>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"selectedIndex","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Index of the selected tab</p>\\n","line":61,"rawdescription":"\\nIndex of the selected tab","required":false}],"outputsClass":[{"name":"selectedIndexChange","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event emitted when selected tab changes</p>\\n","line":64,"rawdescription":"\\nEvent emitted when selected tab changes","required":false}],"propertiesClass":[{"name":"activeTabIndex","defaultValue":"signal<number>(0)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Internal signal for tracking active tab</p>\\n","line":67,"rawdescription":"\\nInternal signal for tracking active tab","modifierKind":[123]},{"name":"selectedIndex","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Index of the selected tab</p>\\n","line":61,"rawdescription":"\\nIndex of the selected tab","required":false},{"name":"selectedIndexChange","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event emitted when selected tab changes</p>\\n","line":64,"rawdescription":"\\nEvent emitted when selected tab changes","required":false},{"name":"tabbarItems","deprecated":false,"deprecationMessage":"","type":"QueryList<TabbarItemComponent>","indexKey":"","optional":false,"description":"<p>All tab items</p>\\n","line":70,"rawdescription":"\\nAll tab items","decorators":[{"name":"ContentChildren","stringifiedArguments":"TabbarItemComponent"}],"modifierKind":[170]}],"methodsClass":[{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":""},{"name":"selectTab","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбрабатывает событие выбора таба\\n","description":"<p>Обрабатывает событие выбора таба</p>\\n","jsdoctags":[{"name":{"pos":2583,"end":2588,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"index"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":2577,"end":2582,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Индекс выбранного таба</p>\\n"}]},{"name":"updateSelectedState","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":105,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбновляет состояние \\"selected\\" у всех дочерних элементов\\n","description":"<p>Обновляет состояние &quot;selected&quot; у всех дочерних элементов</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"FixedLayoutComponent","type":"component"}],"description":"<p>Serves as a container for <code>TabbarItem</code> components, rendering a navigational tab bar.\\nUtilizes a <code>FixedLayout</code> to ensure the tab bar remains positioned at a specific area within a view,\\ntypically at the bottom of the screen, making it ideal for mobile or web application navigation menus.</p>\\n<p>The component adapts its styling based on the platform, providing a consistent look and feel across different devices.</p>\\n","rawdescription":"\\n\\nServes as a container for `TabbarItem` components, rendering a navigational tab bar.\\nUtilizes a `FixedLayout` to ensure the tab bar remains positioned at a specific area within a view,\\ntypically at the bottom of the screen, making it ideal for mobile or web application navigation menus.\\n\\nThe component adapts its styling based on the platform, providing a consistent look and feel across different devices.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy,\\n  ContentChildren,\\n  QueryList,\\n  AfterContentInit,\\n  input,\\n  output,\\n  signal,\\n  effect,\\n  inject\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { FixedLayoutComponent } from \'../fixed-layout/fixed-layout.component\';\\nimport { TabbarItemComponent } from \'./tabbar-item.component\';\\n\\n/**\\n * Serves as a container for `TabbarItem` components, rendering a navigational tab bar.\\n * Utilizes a `FixedLayout` to ensure the tab bar remains positioned at a specific area within a view,\\n * typically at the bottom of the screen, making it ideal for mobile or web application navigation menus.\\n *\\n * The component adapts its styling based on the platform, providing a consistent look and feel across different devices.\\n */\\n@Component({\\n  selector: \'tgui-tabbar\',\\n  standalone: true,\\n  imports: [CommonModule, FixedLayoutComponent],\\n  template: `\\n    <tgui-fixed-layout vertical=\\"bottom\\">\\n      <div class=\\"tabbar-container\\">\\n        <ng-content></ng-content>\\n      </div>\\n    </tgui-fixed-layout>\\n  `,\\n  styles: [`\\n    :host {\\n      display: block;\\n    }\\n\\n    .tabbar-container {\\n      display: flex;\\n      justify-items: stretch;\\n      box-shadow: 0 -1px 0 var(--tgui--divider);\\n      background: var(--tgui--surface_primary);\\n      padding: 0 16px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tabbar-container {\\n      padding: 0;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class TabbarComponent implements AfterContentInit {\\n  /** Index of the selected tab */\\n  selectedIndex = input<number>(0);\\n  \\n  /** Event emitted when selected tab changes */\\n  selectedIndexChange = output<number>();\\n  \\n  /** Internal signal for tracking active tab */\\n  private activeTabIndex = signal<number>(0);\\n  \\n  /** All tab items */\\n  @ContentChildren(TabbarItemComponent) tabbarItems!: QueryList<TabbarItemComponent>;\\n  \\n  constructor() {\\n    // Синхронизируем внешний selectedIndex с внутренним activeTabIndex\\n    effect(() => {\\n      this.activeTabIndex.set(this.selectedIndex());\\n      this.updateSelectedState();\\n    });\\n  }\\n  \\n  ngAfterContentInit(): void {\\n    // Инициализация выбранного элемента\\n    this.updateSelectedState();\\n    \\n    // Подписываемся на изменения tabbarItems для актуализации выбранного таба\\n    this.tabbarItems.changes.subscribe(() => {\\n      this.updateSelectedState();\\n    });\\n  }\\n  \\n  /**\\n   * Обрабатывает событие выбора таба\\n   * @param index Индекс выбранного таба\\n   */\\n  selectTab(index: number): void {\\n    if (index !== this.activeTabIndex()) {\\n      this.activeTabIndex.set(index);\\n      this.selectedIndexChange.emit(index);\\n      this.updateSelectedState();\\n    }\\n  }\\n  \\n  /**\\n   * Обновляет состояние \\"selected\\" у всех дочерних элементов\\n   */\\n  private updateSelectedState(): void {\\n    if (!this.tabbarItems) return;\\n    \\n    const activeIndex = this.activeTabIndex();\\n    this.tabbarItems.forEach((item, index) => {\\n      // Установка выбранного состояния через сигнал\\n      item.selected.set(index === activeIndex);\\n      // Устанавливаем индекс для вкладки\\n      item.tabIndex = index;\\n      // Устанавливаем колбэк для отслеживания клика\\n      item.onSelect = () => this.selectTab(index);\\n    });\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n    }\\n\\n    .tabbar-container {\\n      display: flex;\\n      justify-items: stretch;\\n      box-shadow: 0 -1px 0 var(--tgui--divider);\\n      background: var(--tgui--surface_primary);\\n      padding: 0 16px;\\n    }\\n\\n    :host-context(.tgui-platform-ios) .tabbar-container {\\n      padding: 0;\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":70},"extends":[],"implements":["AfterContentInit"]},{"name":"TabbarItemComponent","id":"component-TabbarItemComponent-e145585875b5d752f4b282958828fc8a320079b8e749fc4ad6948ec70fd35b4d248c3594a6308971a306a9fe7441da1dcf91b3c3f0a715228301261fc02bb7d1","file":"projects/tgui/src/lib/components/layout/tabbar/tabbar-item.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-tabbar-item","styleUrls":[],"styles":["\\n    :host {\\n      display: flex;\\n      flex: 1 0 0;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n    }\\n\\n    tgui-tappable {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 6px;\\n      width: 100%;\\n      padding: 12px 16px 16px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) tgui-tappable {\\n      padding: 8px 12px 4px;\\n      gap: 4px;\\n    }\\n\\n    :host.selected tgui-tappable {\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .icon {\\n      display: flex;\\n      justify-content: center;\\n      min-width: 64px;\\n      padding: 2px 10px;\\n      border-radius: 35px;\\n    }\\n\\n    :host:not(.platform-ios).selected .icon {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .icon {\\n      padding: 0;\\n    }\\n\\n    .text {\\n      white-space: nowrap;\\n      max-inline-size: 100%;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n  "],"template":"<tgui-tappable interactiveAnimation=\\"opacity\\">\\n  <div *ngIf=\\"hasIcon\\" class=\\"icon\\">\\n    <ng-content></ng-content>\\n  </div>\\n  <tgui-caption\\n    *ngIf=\\"text()\\"\\n    class=\\"text\\"\\n    [weight]=\\"\'2\'\\"\\n    [level]=\\"platformService.isIOS() ? \'2\' : \'1\'\\"\\n  >\\n    {{ text() }}\\n  </tgui-caption>\\n</tgui-tappable>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"iconContent","deprecated":false,"deprecationMessage":"","type":"any","indexKey":"","optional":false,"description":"","line":134,"decorators":[{"name":"ContentChild","stringifiedArguments":"\'icon\'"}],"modifierKind":[170]},{"name":"onSelect","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"function","indexKey":"","optional":false,"description":"","line":113},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"modifierKind":[124]},{"name":"selected","defaultValue":"signal<boolean>(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":107},{"name":"tabIndex","defaultValue":"-1","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":110},{"name":"text","defaultValue":"input<string>(\'\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":106}],"methodsClass":[{"name":"onClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":129,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\'"}],"modifierKind":[170]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.platform-ios","deprecated":false,"deprecationMessage":"","line":117,"type":"boolean","decorators":[]},{"name":"class.selected","deprecated":false,"deprecationMessage":"","line":123,"type":"boolean","decorators":[]}],"hostListeners":[{"name":"click","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","line":129}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TappableComponent","type":"component"},{"name":"CaptionComponent","type":"component"}],"description":"<p>Represents an individual tab within a <code>Tabbar</code>.\\nEach <code>TabbarItem</code> typically contains an icon and optional text.\\nWhen selected, the tab exhibits different visual styles to indicate its active state.</p>\\n<p>The component adapts its styling based on the platform, providing a consistent look and feel across different devices.</p>\\n","rawdescription":"\\n\\nRepresents an individual tab within a `Tabbar`.\\nEach `TabbarItem` typically contains an icon and optional text.\\nWhen selected, the tab exhibits different visual styles to indicate its active state.\\n\\nThe component adapts its styling based on the platform, providing a consistent look and feel across different devices.\\n","type":"component","sourceCode":"import { \\n  Component, \\n  ViewEncapsulation, \\n  ChangeDetectionStrategy, \\n  input, \\n  HostBinding,\\n  inject,\\n  ContentChild,\\n  HostListener,\\n  signal,\\n  WritableSignal\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../services/platform.service\';\\nimport { TappableComponent } from \'../../utils/tappable/tappable.component\';\\nimport { CaptionComponent } from \'../../typography/caption/caption.component\';\\n\\n/**\\n * Represents an individual tab within a `Tabbar`.\\n * Each `TabbarItem` typically contains an icon and optional text.\\n * When selected, the tab exhibits different visual styles to indicate its active state.\\n *\\n * The component adapts its styling based on the platform, providing a consistent look and feel across different devices.\\n */\\n@Component({\\n  selector: \'tgui-tabbar-item\',\\n  standalone: true,\\n  imports: [CommonModule, TappableComponent, CaptionComponent],\\n  template: `\\n    <tgui-tappable interactiveAnimation=\\"opacity\\">\\n      <div *ngIf=\\"hasIcon\\" class=\\"icon\\">\\n        <ng-content></ng-content>\\n      </div>\\n      <tgui-caption \\n        *ngIf=\\"text()\\" \\n        class=\\"text\\"\\n        [weight]=\\"\'2\'\\"\\n        [level]=\\"platformService.isIOS() ? \'2\' : \'1\'\\"\\n      >\\n        {{ text() }}\\n      </tgui-caption>\\n    </tgui-tappable>\\n  `,\\n  styles: [`\\n    :host {\\n      display: flex;\\n      flex: 1 0 0;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n    }\\n\\n    tgui-tappable {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 6px;\\n      width: 100%;\\n      padding: 12px 16px 16px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) tgui-tappable {\\n      padding: 8px 12px 4px;\\n      gap: 4px;\\n    }\\n\\n    :host.selected tgui-tappable {\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .icon {\\n      display: flex;\\n      justify-content: center;\\n      min-width: 64px;\\n      padding: 2px 10px;\\n      border-radius: 35px;\\n    }\\n\\n    :host:not(.platform-ios).selected .icon {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .icon {\\n      padding: 0;\\n    }\\n\\n    .text {\\n      white-space: nowrap;\\n      max-inline-size: 100%;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'attr.data-refresh-platform\': \'true\'\\n  }\\n})\\nexport class TabbarItemComponent {\\n  // Inject services\\n  protected platformService = inject(PlatformService);\\n\\n  // Inputs\\n  text = input<string>(\'\');\\n  selected = signal<boolean>(false);\\n\\n  // Индекс вкладки, устанавливается родительским компонентом\\n  tabIndex = -1;\\n  \\n  // Callback на выбор вкладки, вызывается при клике\\n  onSelect: () => void = () => {};\\n\\n  // Platform-specific class binding\\n  @HostBinding(\'class.platform-ios\')\\n  get isIOS(): boolean {\\n    return this.platformService.isIOS();\\n  }\\n\\n  // Selected state class binding\\n  @HostBinding(\'class.selected\')\\n  get isSelected(): boolean {\\n    return this.selected();\\n  }\\n\\n  // Обработчик клика\\n  @HostListener(\'click\')\\n  onClick(): void {\\n    this.onSelect();\\n  }\\n\\n  // Content projection check\\n  @ContentChild(\'icon\') iconContent: any;\\n  \\n  get hasIcon(): boolean {\\n    return !!this.iconContent || true; // Default to true to match React behavior\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: flex;\\n      flex: 1 0 0;\\n      max-inline-size: 100%;\\n      min-inline-size: 0;\\n    }\\n\\n    tgui-tappable {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      flex-direction: column;\\n      gap: 6px;\\n      width: 100%;\\n      padding: 12px 16px 16px;\\n      color: var(--tgui--secondary_hint_color);\\n    }\\n\\n    :host-context(.tgui-platform-ios) tgui-tappable {\\n      padding: 8px 12px 4px;\\n      gap: 4px;\\n    }\\n\\n    :host.selected tgui-tappable {\\n      color: var(--tgui--link_color);\\n    }\\n\\n    .icon {\\n      display: flex;\\n      justify-content: center;\\n      min-width: 64px;\\n      padding: 2px 10px;\\n      border-radius: 35px;\\n    }\\n\\n    :host:not(.platform-ios).selected .icon {\\n      background: var(--tgui--secondary_fill);\\n    }\\n\\n    :host-context(.tgui-platform-ios) .icon {\\n      padding: 0;\\n    }\\n\\n    .text {\\n      white-space: nowrap;\\n      max-inline-size: 100%;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n    }\\n  \\n","extends":[],"accessors":{"isIOS":{"name":"isIOS","getSignature":{"name":"isIOS","type":"boolean","returnType":"boolean","line":117}},"isSelected":{"name":"isSelected","getSignature":{"name":"isSelected","type":"boolean","returnType":"boolean","line":123}},"hasIcon":{"name":"hasIcon","getSignature":{"name":"hasIcon","type":"boolean","returnType":"boolean","line":136}}}},{"name":"TappableComponent","id":"component-TappableComponent-1e9dc2e881dd1b2afb6ae698278d6f2490a2cd11d6c15724d293dae33b04d42571d1530e4feb6cf573836fe683c637f0ab20392456c067a93fee5ab7756f1601","file":"projects/tgui/src/lib/components/utils/tappable/tappable.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-tappable","styleUrls":[],"styles":["\\n    :host {\\n      position: relative;\\n      isolation: isolate;\\n      cursor: pointer;\\n      transition: opacity .15s ease-out;\\n      display: block;\\n      touch-action: manipulation;\\n      border-radius: inherit;\\n      overflow: hidden;\\n      user-select: none;\\n    }\\n\\n    :host.readonly {\\n      cursor: default;\\n      pointer-events: none;\\n    }\\n\\n    :host.disabled {\\n      cursor: default;\\n      opacity: .35;\\n      pointer-events: none;\\n    }\\n\\n    :host(.tappable--opacity:active),\\n    :host-context(.tgui-platform-ios):host(:active) {\\n      opacity: .65;\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      :host(.tappable--opacity:hover),\\n      :host-context(.tgui-platform-ios):host(:hover) {\\n        opacity: .85;\\n      }\\n    }\\n  "],"template":"<tgui-ripple *ngIf=\\"hasRippleEffect\\" [waves]=\\"rippleWaves()\\"></tgui-ripple>\\n<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"disabled","deprecated":false,"deprecationMessage":"","rawdescription":"\\nОтключить компонент","description":"<p>Отключить компонент</p>\\n","line":84,"type":"boolean | string","decorators":[]},{"name":"interactiveAnimation","defaultValue":"\'background\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nТип анимации для кликов","description":"<p>Тип анимации для кликов</p>\\n","line":71,"type":"\\"opacity\\" | \\"background\\"","decorators":[]},{"name":"readonly","deprecated":false,"deprecationMessage":"","rawdescription":"\\nСделать компонент только для чтения","description":"<p>Сделать компонент только для чтения</p>\\n","line":74,"type":"boolean | string","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"boolean | string","indexKey":"","optional":false,"description":"","line":91,"modifierKind":[123]},{"name":"_hasRippleEffect","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Приватное кешированное значение ripple эффекта</p>\\n","line":97,"rawdescription":"\\nПриватное кешированное значение ripple эффекта","modifierKind":[123]},{"name":"_readonly","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"boolean | string","indexKey":"","optional":false,"description":"","line":81,"modifierKind":[123]},{"name":"isIOS","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"modifierKind":[123]},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101,"modifierKind":[123]},{"name":"platformSignal","deprecated":false,"deprecationMessage":"","type":"Signal<string>","indexKey":"","optional":true,"description":"","line":104,"modifierKind":[123]},{"name":"rippleService","defaultValue":"inject(RippleService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Подключения сервисов</p>\\n","line":100,"rawdescription":"\\nПодключения сервисов","modifierKind":[123]},{"name":"rippleWaves","defaultValue":"signal<RippleWave[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Волны ripple эффекта</p>\\n","line":94,"rawdescription":"\\nВолны ripple эффекта"}],"methodsClass":[{"name":"isReadOnly","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nПроверка на readonly состояние\\n","description":"<p>Проверка на readonly состояние</p>\\n","modifierKind":[123]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":125,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":120,"deprecated":false,"deprecationMessage":""},{"name":"onPointerCancel","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":154,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointercancel/pointerup/pointerleave\\n","description":"<p>Обработчик pointercancel/pointerup/pointerleave</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'pointercancel\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'pointerup\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'pointerleave\', [\'$event\']"}],"modifierKind":[170,170,170],"jsdoctags":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onPointerDown","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":142,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointerdown\\n","description":"<p>Обработчик pointerdown</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'pointerdown\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateHasRippleEffect","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":131,"deprecated":false,"deprecationMessage":"","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.disabled","deprecated":false,"deprecationMessage":"","line":195,"type":"string","decorators":[]},{"name":"attr.readonly","deprecated":false,"deprecationMessage":"","line":190,"type":"string","decorators":[]},{"name":"class.disabled","deprecated":false,"deprecationMessage":"","line":179,"type":"boolean","decorators":[]},{"name":"class.readonly","deprecated":false,"deprecationMessage":"","rawdescription":"\\nБиндим классы","description":"<p>Биндим классы</p>\\n","line":174,"type":"boolean","decorators":[]},{"name":"class.tappable--opacity","deprecated":false,"deprecationMessage":"","line":185,"type":"boolean","decorators":[]}],"hostListeners":[{"name":"pointercancel","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointercancel/pointerup/pointerleave\\n","description":"<p>Обработчик pointercancel/pointerup/pointerleave</p>\\n","line":154},{"name":"pointerdown","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointerdown\\n","description":"<p>Обработчик pointerdown</p>\\n","line":142},{"name":"pointerleave","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointercancel/pointerup/pointerleave\\n","description":"<p>Обработчик pointercancel/pointerup/pointerleave</p>\\n","line":154},{"name":"pointerup","args":[{"name":"event","type":"PointerEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nОбработчик pointercancel/pointerup/pointerleave\\n","description":"<p>Обработчик pointercancel/pointerup/pointerleave</p>\\n","line":154}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"RippleComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\n  Component,\\n  Input,\\n  ElementRef,\\n  HostBinding,\\n  HostListener,\\n  OnInit,\\n  OnDestroy,\\n  OnChanges,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  signal,\\n  inject,\\n  effect,\\n  Signal\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\nimport { PlatformService, RippleService, RippleWave } from \'../../../services\';\\nimport { RippleComponent } from \'./components/ripple/ripple.component\';\\n\\n@Component({\\n  selector: \'tgui-tappable\',\\n  standalone: true,\\n  imports: [CommonModule, RippleComponent],\\n  template: `\\n    <tgui-ripple *ngIf=\\"hasRippleEffect\\" [waves]=\\"rippleWaves()\\"></tgui-ripple>\\n    <ng-content></ng-content>\\n  `,\\n  styles: [`\\n    :host {\\n      position: relative;\\n      isolation: isolate;\\n      cursor: pointer;\\n      transition: opacity .15s ease-out;\\n      display: block;\\n      touch-action: manipulation;\\n      border-radius: inherit;\\n      overflow: hidden;\\n      user-select: none;\\n    }\\n\\n    :host.readonly {\\n      cursor: default;\\n      pointer-events: none;\\n    }\\n\\n    :host.disabled {\\n      cursor: default;\\n      opacity: .35;\\n      pointer-events: none;\\n    }\\n\\n    :host(.tappable--opacity:active),\\n    :host-context(.tgui-platform-ios):host(:active) {\\n      opacity: .65;\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      :host(.tappable--opacity:hover),\\n      :host-context(.tgui-platform-ios):host(:hover) {\\n        opacity: .85;\\n      }\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class TappableComponent implements OnInit, OnChanges {\\n  /** Тип анимации для кликов */\\n  @Input() interactiveAnimation: \'opacity\' | \'background\' = \'background\';\\n  \\n  /** Сделать компонент только для чтения */\\n  @Input() set readonly(value: boolean | string) {\\n    this._readonly = value;\\n    this.updateHasRippleEffect();\\n  }\\n  get readonly(): boolean | string {\\n    return this._readonly;\\n  }\\n  private _readonly: boolean | string = false;\\n  \\n  /** Отключить компонент */\\n  @Input() set disabled(value: boolean | string) {\\n    this._disabled = value;\\n    this.updateHasRippleEffect();\\n  }\\n  get disabled(): boolean | string {\\n    return this._disabled;\\n  }\\n  private _disabled: boolean | string = false;\\n\\n  /** Волны ripple эффекта */\\n  rippleWaves = signal<RippleWave[]>([]);\\n\\n  /** Приватное кешированное значение ripple эффекта */\\n  private _hasRippleEffect = false;\\n\\n  /** Подключения сервисов */\\n  private rippleService = inject(RippleService);\\n  private platformService = inject(PlatformService);\\n\\n  private isIOS = false;\\n  private platformSignal?: Signal<string>;\\n\\n  /** Public API для шаблона */\\n  get hasRippleEffect(): boolean {\\n    return this._hasRippleEffect;\\n  }\\n\\n  constructor() {\\n    this.platformSignal = this.platformService.platform;\\n    effect(() => {\\n      const platform = this.platformSignal!();\\n      this.isIOS = platform === \'ios\';\\n      this.updateHasRippleEffect();\\n    });\\n  }\\n\\n  ngOnInit(): void {\\n    this.isIOS = this.platformService.isIOS();\\n    this.updateHasRippleEffect();\\n  }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes[\'interactiveAnimation\']) {\\n      this.updateHasRippleEffect();\\n    }\\n  }\\n\\n  private updateHasRippleEffect(): void {\\n    const isDisabled = this.isReadOnly();\\n    this._hasRippleEffect = !this.isIOS &&\\n                            this.interactiveAnimation === \'background\' &&\\n                            !isDisabled;\\n  }\\n\\n  /**\\n   * Обработчик pointerdown\\n   */\\n  @HostListener(\'pointerdown\', [\'$event\'])\\n  onPointerDown(event: PointerEvent): void {\\n    if (!this.isReadOnly() && this.hasRippleEffect) {\\n      this.rippleService.handlePointerDown(event, this.rippleWaves);\\n    }\\n  }\\n\\n  /**\\n   * Обработчик pointercancel/pointerup/pointerleave\\n   */\\n  @HostListener(\'pointercancel\', [\'$event\'])\\n  @HostListener(\'pointerup\', [\'$event\'])\\n  @HostListener(\'pointerleave\', [\'$event\'])\\n  onPointerCancel(event: PointerEvent): void {\\n    if (this.hasRippleEffect) {\\n      this.rippleService.handlePointerCancel(event.pointerId);\\n    }\\n  }\\n\\n  /**\\n   * Проверка на readonly состояние\\n   */\\n  private isReadOnly(): boolean {\\n    const isReadonlyValue = this._readonly === true || \\n                            (typeof this._readonly === \'string\' && this._readonly !== \'false\');\\n    const isDisabledValue = this._disabled === true || \\n                            (typeof this._disabled === \'string\' && this._disabled !== \'false\');\\n    return isReadonlyValue || isDisabledValue;\\n  }\\n\\n  /** Биндим классы */\\n\\n  @HostBinding(\'class.readonly\')\\n  get isReadonlyClass(): boolean {\\n    return this.isReadOnly();\\n  }\\n\\n  @HostBinding(\'class.disabled\')\\n  get isDisabledClass(): boolean {\\n    return this._disabled === true || \\n           (typeof this._disabled === \'string\' && this._disabled !== \'false\');\\n  }\\n\\n  @HostBinding(\'class.tappable--opacity\')\\n  get isOpacityAnimation(): boolean {\\n    return this.interactiveAnimation === \'opacity\';\\n  }\\n\\n  @HostBinding(\'attr.readonly\')\\n  get readonlyAttr() {\\n    return this._readonly ? \'\' : null;\\n  }\\n\\n  @HostBinding(\'attr.disabled\')\\n  get disabledAttr() {\\n    return this._disabled ? \'\' : null;\\n  }\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      position: relative;\\n      isolation: isolate;\\n      cursor: pointer;\\n      transition: opacity .15s ease-out;\\n      display: block;\\n      touch-action: manipulation;\\n      border-radius: inherit;\\n      overflow: hidden;\\n      user-select: none;\\n    }\\n\\n    :host.readonly {\\n      cursor: default;\\n      pointer-events: none;\\n    }\\n\\n    :host.disabled {\\n      cursor: default;\\n      opacity: .35;\\n      pointer-events: none;\\n    }\\n\\n    :host(.tappable--opacity:active),\\n    :host-context(.tgui-platform-ios):host(:active) {\\n      opacity: .65;\\n    }\\n\\n    @media (hover: hover) and (pointer: fine) {\\n      :host(.tappable--opacity:hover),\\n      :host-context(.tgui-platform-ios):host(:hover) {\\n        opacity: .85;\\n      }\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":109},"extends":[],"implements":["OnInit","OnChanges"],"accessors":{"readonly":{"name":"readonly","setSignature":{"name":"readonly","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"boolean | string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":74,"rawdescription":"\\nСделать компонент только для чтения","description":"<p>Сделать компонент только для чтения</p>\\n","jsdoctags":[{"name":"value","type":"boolean | string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"readonly","type":"","returnType":"boolean | string","line":78}},"disabled":{"name":"disabled","setSignature":{"name":"disabled","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"value","type":"boolean | string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":84,"rawdescription":"\\nОтключить компонент","description":"<p>Отключить компонент</p>\\n","jsdoctags":[{"name":"value","type":"boolean | string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"disabled","type":"","returnType":"boolean | string","line":88}},"hasRippleEffect":{"name":"hasRippleEffect","getSignature":{"name":"hasRippleEffect","type":"boolean","returnType":"boolean","line":107,"rawdescription":"\\nPublic API для шаблона","description":"<p>Public API для шаблона</p>\\n"}},"isReadonlyClass":{"name":"isReadonlyClass","getSignature":{"name":"isReadonlyClass","type":"boolean","returnType":"boolean","line":174,"rawdescription":"\\nБиндим классы","description":"<p>Биндим классы</p>\\n"}},"isDisabledClass":{"name":"isDisabledClass","getSignature":{"name":"isDisabledClass","type":"boolean","returnType":"boolean","line":179}},"isOpacityAnimation":{"name":"isOpacityAnimation","getSignature":{"name":"isOpacityAnimation","type":"boolean","returnType":"boolean","line":185}},"readonlyAttr":{"name":"readonlyAttr","getSignature":{"name":"readonlyAttr","type":"","returnType":"","line":190}},"disabledAttr":{"name":"disabledAttr","getSignature":{"name":"disabledAttr","type":"","returnType":"","line":195}}}},{"name":"TextComponent","id":"component-TextComponent-a603ae5e05b766c6959777cb07d9ca59028d5a3d73e3c3cfcf57723932f940b7a605e806ec255fa6b5456cd68fa67034a7257f88a479fa9d4a475ba91938385e","file":"projects/tgui/src/lib/components/typography/text/text.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-text","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n      font-size: 0.95em;\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'1\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe size level of the text, influencing its styling.\\n","description":"<p>The size level of the text, influencing its styling.</p>\\n","line":55,"type":"\\"1\\" | \\"2\\"","decorators":[]},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":58,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"tag","deprecated":false,"deprecationMessage":"","line":88,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":66,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":61,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":62,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":65,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":67,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":68,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":69,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Text component is designed for general-purpose text rendering,\\noffering a wide range of typographic options. It extends the Typography\\ncomponent, inheriting its flexibility and styling capabilities.\\nThis component is ideal for paragraphs, labels, or any textual content, providing\\nconsistent styling across the application.</p>\\n","rawdescription":"\\n\\nText component is designed for general-purpose text rendering,\\noffering a wide range of typographic options. It extends the Typography\\ncomponent, inheriting its flexibility and styling capabilities.\\nThis component is ideal for paragraphs, labels, or any textual content, providing\\nconsistent styling across the application.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * Text component is designed for general-purpose text rendering,\\n * offering a wide range of typographic options. It extends the Typography\\n * component, inheriting its flexibility and styling capabilities.\\n * This component is ideal for paragraphs, labels, or any textual content, providing\\n * consistent styling across the application.\\n */\\n@Component({\\n  selector: \'tgui-text\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n      font-size: 0.95em;\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class TextComponent extends TypographyComponent {\\n  /**\\n   * The size level of the text, influencing its styling.\\n   */\\n  @Input() level: \'1\' | \'2\' = \'1\';\\n  \\n  // Override plain property to keep consistency\\n  @Input() override plain = true;\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--text--font_size);\\n      line-height: var(--tgui--text--line_height);\\n      font-size: 0.95em;\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":61}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":62}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":65}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":66}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":67}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":68}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":69}}}},{"name":"TguiComponent","id":"component-TguiComponent-98d1768f2c4d8f6c25bd37d16d9f11f48c30531aedb8f4911930b838c235de5a8c907c7204597209a1d79135799366b156891f65bcd7f972fc93e5fcd0fcc553","file":"projects/tgui/src/lib/tgui.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"lib-tgui","styleUrls":[],"styles":[],"template":"<tgui-root>\\n  <ng-content></ng-content>\\n</tgui-root>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":true,"deprecationMessage":"Use TGUIRootComponent instead","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"RootComponent","type":"component"}],"description":"","rawdescription":"\\n\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { RootComponent } from \'./components/utils/tgui-root/tgui-root.component\';\\n\\n/**\\n * @deprecated Use TGUIRootComponent instead\\n */\\n@Component({\\n  selector: \'lib-tgui\',\\n  standalone: true,\\n  imports: [RootComponent],\\n  template: `\\n    <tgui-root>\\n      <ng-content></ng-content>\\n    </tgui-root>\\n  `,\\n})\\nexport class TguiComponent {\\n  // This component is just a wrapper for backward compatibility\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"TguiDynamicIconComponent","id":"component-TguiDynamicIconComponent-9b03d2dd39946d932d2379e13773d898f64f415236097c6eabaa35aefd439db31a9e8eeb99c7851dc74372aa21ff9856cbabf21150c14fe56f29ca829b96aaf4","file":"projects/tgui/src/lib/icons/dynamic-icon.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-dynamic-icon","styleUrls":[],"styles":[],"template":"<ng-container #iconContainer></ng-container>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"icon","deprecated":false,"deprecationMessage":"","line":16,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"componentRef","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"ComponentRef<TguiIconBase> | null","indexKey":"","optional":false,"description":"","line":21,"modifierKind":[123]},{"name":"iconContainer","deprecated":false,"deprecationMessage":"","type":"ViewContainerRef","indexKey":"","optional":false,"description":"","line":19,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'iconContainer\', {read: ViewContainerRef, static: true}"}],"modifierKind":[170]},{"name":"iconSizes","defaultValue":"[\'12\', \'16\', \'20\', \'24\', \'28\', \'32\', \'36\']","deprecated":false,"deprecationMessage":"","type":"[]","indexKey":"","optional":false,"description":"","line":24,"modifierKind":[123,148]}],"methodsClass":[{"name":"formatIconComponentName","args":[{"name":"iconName","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"iconName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hasSize","args":[{"name":"iconName","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":61,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"iconName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"loadIconComponent","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":26,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"toCamelCase","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":101,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, OnChanges, SimpleChanges, ViewContainerRef, ViewChild, ComponentRef } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'./icon-base.component\';\\nimport { TguiIconProps } from \'./icon.interface\';\\n\\n// Import all icon components\\nimport * as Icons from \'./index\';\\n\\n@Component({\\n  selector: \'tgui-dynamic-icon\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-container #iconContainer></ng-container>\',\\n})\\nexport class TguiDynamicIconComponent implements OnChanges {\\n  @Input() icon!: string;\\n  \\n  @ViewChild(\'iconContainer\', { read: ViewContainerRef, static: true })\\n  iconContainer!: ViewContainerRef;\\n\\n  private componentRef: ComponentRef<TguiIconBase> | null = null;\\n  \\n  // Available icon sizes in ascending order\\n  private readonly iconSizes = [\'12\', \'16\', \'20\', \'24\', \'28\', \'32\', \'36\'];\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes[\'icon\']) {\\n      this.loadIconComponent();\\n    }\\n  }\\n\\n  private loadIconComponent(): void {\\n    // Clear the previous component if any\\n    if (this.componentRef) {\\n      this.componentRef.destroy();\\n      this.componentRef = null;\\n    }\\n\\n    this.iconContainer.clear();\\n\\n    // Attempt to find the icon component by name\\n    let iconComponentName = this.formatIconComponentName(this.icon);\\n    let IconComponent = (Icons as any)[iconComponentName];\\n    // If no icon found and no size was specified, try with the smallest size first\\n    if (!IconComponent && !this.hasSize(this.icon)) {\\n      for (const size of this.iconSizes) {\\n        iconComponentName = this.toCamelCase(`tgui-icon${size}-${this.icon}`);\\n        IconComponent = (Icons as any)[iconComponentName];\\n        if (IconComponent) break;\\n      }\\n    }\\n\\n    if (IconComponent) {\\n      this.componentRef = this.iconContainer.createComponent(IconComponent);\\n    } else {\\n      console.warn(`Icon component \\"${this.icon}\\" not found.`);\\n    }\\n  }\\n\\n\\n  private hasSize(iconName: string): boolean {\\n    // Check if the icon name already contains a size\\n    if (iconName.startsWith(\'tgui-icon\') && /tgui-icon\\\\d+/.test(iconName)) {\\n      return true;\\n    }\\n    \\n    if (iconName.includes(\'-\')) {\\n      const parts = iconName.split(\'-\');\\n      // Check if any part is a number (size)\\n      return parts.some(part => /^\\\\d+$/.test(part));\\n    }\\n    \\n    return false;\\n  }\\n\\n  private formatIconComponentName(iconName: string): string {\\n    // Handle different name formats\\n    if (iconName.startsWith(\'tgui-icon\')) {\\n      return this.toCamelCase(iconName);\\n    }\\n    \\n    // If icon name contains a size (e.g. \\"close-24\\" or \\"24/close\\")\\n    if (iconName.includes(\'-\')) {\\n      const parts = iconName.split(\'-\');\\n      if (/^\\\\d+$/.test(parts[parts.length - 1])) {\\n        // Format: \\"close-24\\" -> \\"TguiIcon24Close\\"\\n        const size = parts.pop();\\n        return this.toCamelCase(`tgui-icon${size}-${parts.join(\'-\')}`);\\n      } else if (/^\\\\d+$/.test(parts[0])) {\\n        // Format: \\"24-close\\" -> \\"TguiIcon24Close\\"\\n        const size = parts.shift();\\n        return this.toCamelCase(`tgui-icon${size}-${parts.join(\'-\')}`);\\n      }\\n    }\\n    \\n    // For icons without size, we\'ll try with different sizes in loadIconComponent\\n    // Just return a default format here\\n    return this.toCamelCase(`tgui-icon-${iconName}`);\\n  }\\n\\n  private toCamelCase(str: string): string {\\n    return str.replace(/(^|-|_)([a-z])/g, (match, separator, char) => \\n      char.toUpperCase()\\n    ).replace(/(-|_)/g, \'\');\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"implements":["OnChanges"]},{"name":"TguiIcon12Quote","id":"component-TguiIcon12Quote-ca108c4ba011ce61050bfaeb2afb8ed73aa04d056e2765e8bbe9f900ad782592ed992696a78463bf923d27a48445387308b5faf7fada47a4974a1074f3c541ba","file":"projects/tgui/src/lib/icons/icon12/tgui-icon12-quote.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon12-quote","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"12\\"\\n  height=\\"12\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"M3.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 5.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM4.26 9.65ZM8.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 10.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM9.26 9.65Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon12-quote\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"12\\" \\n      height=\\"12\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path\\n        d=\\"M3.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 5.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM4.26 9.65ZM8.07 7.7c.14-.36-.14-.74-.5-.93A2 2 0 1 1 10.5 5V5c0 1.55-.27 2.67-.57 3.43a5.33 5.33 0 0 1-.67 1.22 1 1 0 0 1-1.53-1.3h.01l.07-.1c.06-.1.16-.28.26-.54ZM9.26 9.65Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon12Quote extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon16Cancel","id":"component-TguiIcon16Cancel-ce37acb6f6cca51d15df44644e7f5a0d25aebbe4bad13e219702f51aa38e8834ff1ceb8dca3b5112d4d19b8e98968e5c4629aac71430bd80553ddbe86d005367","file":"projects/tgui/src/lib/icons/icon16/tgui-icon16-cancel.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon16-cancel","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"16\\"\\n  height=\\"16\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M3.3 3.3a1 1 0 0 1 1.4 0L8 6.58l3.3-3.3a1 1 0 1 1 1.4 1.42L9.42 8l3.3 3.3a1 1 0 0 1-1.42 1.4L8 9.42l-3.3 3.3a1 1 0 0 1-1.4-1.42L6.58 8l-3.3-3.3a1 1 0 0 1 0-1.4Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon16-cancel\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"16\\" \\n      height=\\"16\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M3.3 3.3a1 1 0 0 1 1.4 0L8 6.58l3.3-3.3a1 1 0 1 1 1.4 1.42L9.42 8l3.3 3.3a1 1 0 0 1-1.42 1.4L8 9.42l-3.3 3.3a1 1 0 0 1-1.4-1.42L6.58 8l-3.3-3.3a1 1 0 0 1 0-1.4Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon16Cancel extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon16Chevron","id":"component-TguiIcon16Chevron-b5a6bf28b96087bbba577bc77d14c9b50bfd0fe333e2b8c4a8316b3d8ecb6ce6c93065e4c2be3a4a8021287e36a64e02e17937a5b044ee8d235000c8a625ab16","file":"projects/tgui/src/lib/icons/icon16/tgui-icon16-chevron.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon16-chevron","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"16\\"\\n  height=\\"16\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"m6 3 5 5-5 5\\"\\n    stroke=\\"currentColor\\"\\n    strokeWidth=\\"2\\"\\n    strokeLinecap=\\"round\\"\\n    strokeLinejoin=\\"round\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon16-chevron\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"16\\" \\n      height=\\"16\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        d=\\"m6 3 5 5-5 5\\" \\n        stroke=\\"currentColor\\" \\n        strokeWidth=\\"2\\" \\n        strokeLinecap=\\"round\\" \\n        strokeLinejoin=\\"round\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon16Chevron extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon20ChevronDown","id":"component-TguiIcon20ChevronDown-04784b67c56886b46add717808472292a1e611d4d0d6de21a6bc991eb967d098e97c0bb3be1e176dfd4dfd4c6fd8763dc9aedcc9ce24e3f661bbd34b239aab8f","file":"projects/tgui/src/lib/icons/icon20/tgui-icon20-chevron-down.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon20-chevron-down","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"20\\"\\n  height=\\"20\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M3.29289 6.29289c.39053-.39052 1.02369-.39052 1.41422 0L10 11.5858l5.2929-5.29291c.3905-.39052 1.0237-.39052 1.4142 0 .3905.39053.3905 1.02369 0 1.41422l-6 5.99999c-.3905.3905-1.02368.3905-1.41421 0l-6-5.99999c-.39052-.39053-.39052-1.02369 0-1.41422Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon20-chevron-down\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"20\\" \\n      height=\\"20\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M3.29289 6.29289c.39053-.39052 1.02369-.39052 1.41422 0L10 11.5858l5.2929-5.29291c.3905-.39052 1.0237-.39052 1.4142 0 .3905.39053.3905 1.02369 0 1.41422l-6 5.99999c-.3905.3905-1.02368.3905-1.41421 0l-6-5.99999c-.39052-.39053-.39052-1.02369 0-1.41422Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon20ChevronDown extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon20Copy","id":"component-TguiIcon20Copy-6ce24ebd0ba7d68f96b261cb6357b363dad332822ec68d23a611cb0b4362484cfcfdc25350e0776932e0d563129b63e25852559669e31b879f97fe150a7ed8b3","file":"projects/tgui/src/lib/icons/icon20/tgui-icon20-copy.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon20-copy","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"20\\"\\n  height=\\"20\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M6.16145 2.5H9.5C10.8807 2.5 12 3.61929 12 5c0 .55229-.4477 1-1 1s-1-.44771-1-1c0-.27614-.22386-.5-.5-.5H6.2c-.57656 0-.94883.00078-1.23217.02393-.27166.02219-.37238.05987-.42182.08507-.18817.09587-.34115.24885-.43702.43701-.02519.04945-.06287.15016-.08507.42183C4.00077 5.75117 4 6.12345 4 6.7V9c0 .51259.00484.62284.01921.69509.07891.39671.389.70681.7857.78571.07224.0144.1825.0192.69509.0192.55228 0 1 .4477 1 1s-.44772 1-1 1h-.08389c-.3807.0003-.70853.0006-1.00139-.0576-1.19007-.2368-2.12036-1.1671-2.35708-2.3571-.05825-.29288-.05799-.62072-.05769-1.00141C1.99997 9.05621 2 9.02825 2 9l-.00001-2.33854c-.00001-.52715-.00003-.98191.03058-1.35649.0323-.39534.10361-.78856.29641-1.16694.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.7716-.26411 1.16695-.29641.37457-.0306.82933-.03059 1.35648-.03057Zm6.00005 5h1.677c.5272-.00002.982-.00003 1.3565.03057.3954.0323.7886.10362 1.167.29641.5645.28762 1.0234.74656 1.311 1.31105.1928.37838.2641.7716.2964 1.16697.0306.3746.0306.8293.0306 1.3565v1.677c0 .5272 0 .982-.0306 1.3565-.0323.3954-.1036.7886-.2964 1.167-.2876.5645-.7465 1.0234-1.311 1.311-.3784.1928-.7716.2641-1.167.2964-.3746.0306-.8293.0306-1.3565.0306h-1.677c-.5272 0-.982 0-1.3565-.0306-.3954-.0323-.7886-.1036-1.16698-.2964-.56448-.2876-1.02342-.7465-1.31104-1.311-.1928-.3784-.26411-.7716-.29641-1.167-.03061-.3745-.03059-.8293-.03058-1.3565v-1.677c-.00001-.5272-.00003-.982.03058-1.3565.0323-.39537.10361-.78859.29641-1.16697.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.77158-.26411 1.16698-.29641.3745-.0306.8293-.03059 1.3565-.03057Zm-1.1937 2.02393c-.2716.02219-.3724.05987-.4218.08507-.1882.09587-.3411.24885-.437.437-.0252.0495-.0629.1502-.0851.4218-.0231.2834-.0239.6556-.0239 1.2322v1.6c0 .5766.0008.9488.0239 1.2322.0222.2716.0599.3723.0851.4218.0959.1882.2488.3411.437.437.0494.0252.1502.0629.4218.0851.2834.0231.6556.0239 1.2322.0239h1.6c.5765 0 .9488-.0008 1.2322-.0239.2716-.0222.3723-.0599.4218-.0851.1881-.0959.3411-.2488.437-.437.0252-.0495.0629-.1502.0851-.4218.0231-.2834.0239-.6556.0239-1.2322v-1.6c0-.5766-.0008-.9488-.0239-1.2322-.0222-.2716-.0599-.3723-.0851-.4218-.0959-.18815-.2489-.34113-.437-.437-.0495-.0252-.1502-.06288-.4218-.08507C14.7488 9.50078 14.3765 9.5 13.8 9.5h-1.6c-.5766 0-.9488.00078-1.2322.02393Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\n\\n@Component({\\n  selector: \'tgui-icon20-copy\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"20\\" \\n      height=\\"20\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M6.16145 2.5H9.5C10.8807 2.5 12 3.61929 12 5c0 .55229-.4477 1-1 1s-1-.44771-1-1c0-.27614-.22386-.5-.5-.5H6.2c-.57656 0-.94883.00078-1.23217.02393-.27166.02219-.37238.05987-.42182.08507-.18817.09587-.34115.24885-.43702.43701-.02519.04945-.06287.15016-.08507.42183C4.00077 5.75117 4 6.12345 4 6.7V9c0 .51259.00484.62284.01921.69509.07891.39671.389.70681.7857.78571.07224.0144.1825.0192.69509.0192.55228 0 1 .4477 1 1s-.44772 1-1 1h-.08389c-.3807.0003-.70853.0006-1.00139-.0576-1.19007-.2368-2.12036-1.1671-2.35708-2.3571-.05825-.29288-.05799-.62072-.05769-1.00141C1.99997 9.05621 2 9.02825 2 9l-.00001-2.33854c-.00001-.52715-.00003-.98191.03058-1.35649.0323-.39534.10361-.78856.29641-1.16694.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.7716-.26411 1.16695-.29641.37457-.0306.82933-.03059 1.35648-.03057Zm6.00005 5h1.677c.5272-.00002.982-.00003 1.3565.03057.3954.0323.7886.10362 1.167.29641.5645.28762 1.0234.74656 1.311 1.31105.1928.37838.2641.7716.2964 1.16697.0306.3746.0306.8293.0306 1.3565v1.677c0 .5272 0 .982-.0306 1.3565-.0323.3954-.1036.7886-.2964 1.167-.2876.5645-.7465 1.0234-1.311 1.311-.3784.1928-.7716.2641-1.167.2964-.3746.0306-.8293.0306-1.3565.0306h-1.677c-.5272 0-.982 0-1.3565-.0306-.3954-.0323-.7886-.1036-1.16698-.2964-.56448-.2876-1.02342-.7465-1.31104-1.311-.1928-.3784-.26411-.7716-.29641-1.167-.03061-.3745-.03059-.8293-.03058-1.3565v-1.677c-.00001-.5272-.00003-.982.03058-1.3565.0323-.39537.10361-.78859.29641-1.16697.28762-.56449.74656-1.02343 1.31104-1.31105.37838-.19279.77158-.26411 1.16698-.29641.3745-.0306.8293-.03059 1.3565-.03057Zm-1.1937 2.02393c-.2716.02219-.3724.05987-.4218.08507-.1882.09587-.3411.24885-.437.437-.0252.0495-.0629.1502-.0851.4218-.0231.2834-.0239.6556-.0239 1.2322v1.6c0 .5766.0008.9488.0239 1.2322.0222.2716.0599.3723.0851.4218.0959.1882.2488.3411.437.437.0494.0252.1502.0629.4218.0851.2834.0231.6556.0239 1.2322.0239h1.6c.5765 0 .9488-.0008 1.2322-.0239.2716-.0222.3723-.0599.4218-.0851.1881-.0959.3411-.2488.437-.437.0252-.0495.0629-.1502.0851-.4218.0231-.2834.0239-.6556.0239-1.2322v-1.6c0-.5766-.0008-.9488-.0239-1.2322-.0222-.2716-.0599-.3723-.0851-.4218-.0959-.18815-.2489-.34113-.437-.437-.0495-.0252-.1502-.06288-.4218-.08507C14.7488 9.50078 14.3765 9.5 13.8 9.5h-1.6c-.5766 0-.9488.00078-1.2322.02393Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon20Copy extends TguiIconBase {} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon20QuestionMark","id":"component-TguiIcon20QuestionMark-f19830ad296667f6a2c873f4802bb565e0956ec9bf04330835350fd8478ecdb0fd0591611117e1f48efd6aae4d29cc1e37e9dd0d72faf3da0c364ce40510d37c","file":"projects/tgui/src/lib/icons/icon20/tgui-icon20-question-mark.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon20-question-mark","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"20\\"\\n  height=\\"20\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"M10.0605 18.5815c-1.17313 0-2.27713-.2241-3.31196-.6723-1.03484-.4427-1.94792-1.0598-2.73926-1.8511-.78581-.7913-1.40283-1.7044-1.85108-2.7393-.44824-1.0348-.67236-2.1388-.67236-3.312 0-1.17314.22412-2.27715.67236-3.31198.44825-1.03483 1.06527-1.94515 1.85108-2.73095.79134-.79134 1.70166-1.41114 2.73095-1.85938 1.03483-.44824 2.13884-.67236 3.31197-.67236 1.1788 0 2.2855.22412 3.3204.67236 1.0348.44824 1.9479 1.06804 2.7392 1.85938.7914.7858 1.4111 1.69612 1.8594 2.73095.4482 1.03483.6724 2.13884.6724 3.31198 0 1.1732-.2242 2.2772-.6724 3.312-.4483 1.0349-1.068 1.948-1.8594 2.7393-.7913.7913-1.7044 1.4084-2.7392 1.8511-1.0349.4482-2.1389.6723-3.3121.6723Zm0-1.6933c.9574 0 1.8511-.1771 2.6812-.5313.8301-.3541 1.5605-.8466 2.1914-1.4775.6309-.6309 1.1234-1.3613 1.4775-2.1914.3542-.8301.5313-1.7238.5313-2.6812 0-.95179-.1771-1.84274-.5313-2.67282-.3541-.83561-.8466-1.56884-1.4775-2.1997s-1.3641-1.12337-2.1997-1.47754c-.8301-.35417-1.7238-.53125-2.6812-.53125-.95178 0-1.84549.17708-2.68111.53125-.83007.35417-1.55778.84668-2.1831 1.47754-.62533.63086-1.11507 1.36409-1.46924 2.1997-.35417.83008-.53125 1.72103-.53125 2.67282 0 .9574.17708 1.8511.53125 2.6812.35417.8301.84391 1.5605 1.46924 2.1914.63086.6309 1.36133 1.1234 2.1914 1.4775.83562.3542 1.72933.5313 2.68111.5313Zm-.18257-5.2295c-.52572 0-.78857-.2352-.78857-.7056V10.8618c0-.3818.09407-.6917.28222-.92967.19369-.23796.43994-.45931.73882-.66406.3541-.24349.617-.45101.7885-.62256.1771-.17155.2657-.38737.2657-.64746 0-.28223-.1052-.51188-.3155-.68897-.2047-.18262-.4759-.27392-.8135-.27392-.16597 0-.32092.02767-.4648.083-.13835.05534-.26839.13558-.39014.24073-.11621.09961-.22135.22412-.31543.37353l-.13281.17432c-.07747.10514-.17155.18815-.28222.24902-.10515.06087-.23243.09131-.38184.09131-.17155 0-.32373-.05811-.45654-.17432-.13282-.11621-.19922-.27392-.19922-.47314 0-.07747.00553-.14941.0166-.21582.0166-.07194.03874-.14388.06641-.21582.12727-.38737.42057-.72217.87988-1.0044.46484-.28222 1.0542-.42334 1.76811-.42334.4869 0 .9352.08578 1.3447.25733.415.17155.7471.4178.9961.73877.249.32096.3735.7111.3735 1.17041 0 .48698-.1245.87158-.3735 1.15381-.2435.28222-.5672.55892-.9712.83007-.2767.17708-.487.34588-.6309.50638-.1439.1605-.2213.3486-.2324.5644v.0498c0 .0166-.0028.0332-.0083.0498-.0111.1661-.0858.3072-.2241.4234-.1328.1162-.3127.1743-.53957.1743Zm-.0166 2.5483c-.26563 0-.49528-.0857-.68897-.2573-.18815-.1771-.28222-.3957-.28222-.6558 0-.26.09407-.4759.28222-.6474.18815-.1771.41781-.2656.68897-.2656.27117 0 .50077.0857.68897.2573.1881.1715.2822.3901.2822.6557 0 .2657-.0941.4843-.2822.6558-.1882.1716-.4178.2573-.68897.2573Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon20-question-mark\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"20\\" \\n      height=\\"20\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path\\n        d=\\"M10.0605 18.5815c-1.17313 0-2.27713-.2241-3.31196-.6723-1.03484-.4427-1.94792-1.0598-2.73926-1.8511-.78581-.7913-1.40283-1.7044-1.85108-2.7393-.44824-1.0348-.67236-2.1388-.67236-3.312 0-1.17314.22412-2.27715.67236-3.31198.44825-1.03483 1.06527-1.94515 1.85108-2.73095.79134-.79134 1.70166-1.41114 2.73095-1.85938 1.03483-.44824 2.13884-.67236 3.31197-.67236 1.1788 0 2.2855.22412 3.3204.67236 1.0348.44824 1.9479 1.06804 2.7392 1.85938.7914.7858 1.4111 1.69612 1.8594 2.73095.4482 1.03483.6724 2.13884.6724 3.31198 0 1.1732-.2242 2.2772-.6724 3.312-.4483 1.0349-1.068 1.948-1.8594 2.7393-.7913.7913-1.7044 1.4084-2.7392 1.8511-1.0349.4482-2.1389.6723-3.3121.6723Zm0-1.6933c.9574 0 1.8511-.1771 2.6812-.5313.8301-.3541 1.5605-.8466 2.1914-1.4775.6309-.6309 1.1234-1.3613 1.4775-2.1914.3542-.8301.5313-1.7238.5313-2.6812 0-.95179-.1771-1.84274-.5313-2.67282-.3541-.83561-.8466-1.56884-1.4775-2.1997s-1.3641-1.12337-2.1997-1.47754c-.8301-.35417-1.7238-.53125-2.6812-.53125-.95178 0-1.84549.17708-2.68111.53125-.83007.35417-1.55778.84668-2.1831 1.47754-.62533.63086-1.11507 1.36409-1.46924 2.1997-.35417.83008-.53125 1.72103-.53125 2.67282 0 .9574.17708 1.8511.53125 2.6812.35417.8301.84391 1.5605 1.46924 2.1914.63086.6309 1.36133 1.1234 2.1914 1.4775.83562.3542 1.72933.5313 2.68111.5313Zm-.18257-5.2295c-.52572 0-.78857-.2352-.78857-.7056V10.8618c0-.3818.09407-.6917.28222-.92967.19369-.23796.43994-.45931.73882-.66406.3541-.24349.617-.45101.7885-.62256.1771-.17155.2657-.38737.2657-.64746 0-.28223-.1052-.51188-.3155-.68897-.2047-.18262-.4759-.27392-.8135-.27392-.16597 0-.32092.02767-.4648.083-.13835.05534-.26839.13558-.39014.24073-.11621.09961-.22135.22412-.31543.37353l-.13281.17432c-.07747.10514-.17155.18815-.28222.24902-.10515.06087-.23243.09131-.38184.09131-.17155 0-.32373-.05811-.45654-.17432-.13282-.11621-.19922-.27392-.19922-.47314 0-.07747.00553-.14941.0166-.21582.0166-.07194.03874-.14388.06641-.21582.12727-.38737.42057-.72217.87988-1.0044.46484-.28222 1.0542-.42334 1.76811-.42334.4869 0 .9352.08578 1.3447.25733.415.17155.7471.4178.9961.73877.249.32096.3735.7111.3735 1.17041 0 .48698-.1245.87158-.3735 1.15381-.2435.28222-.5672.55892-.9712.83007-.2767.17708-.487.34588-.6309.50638-.1439.1605-.2213.3486-.2324.5644v.0498c0 .0166-.0028.0332-.0083.0498-.0111.1661-.0858.3072-.2241.4234-.1328.1162-.3127.1743-.53957.1743Zm-.0166 2.5483c-.26563 0-.49528-.0857-.68897-.2573-.18815-.1771-.28222-.3957-.28222-.6558 0-.26.09407-.4759.28222-.6474.18815-.1771.41781-.2656.68897-.2656.27117 0 .50077.0857.68897.2573.1881.1715.2822.3901.2822.6557 0 .2657-.0941.4843-.2822.6558-.1882.1716-.4178.2573-.68897.2573Z\\"\\n        fill=\\"currentColor\\"\\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon20QuestionMark extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon20Select","id":"component-TguiIcon20Select-a10ccce4c0f789136b8332447761f4860cdb64659f2fc0a5109a44746982fb94ba5998f3bb57348e9d065f470c960a3b003710c07e2918382c14c5df950a8e63","file":"projects/tgui/src/lib/icons/icon20/tgui-icon20-select.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon20-select","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"20\\"\\n  height=\\"20\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"M2.5 10.821 7 15.75l10.5-11.5\\"\\n    stroke=\\"currentColor\\"\\n    strokeWidth=\\"2\\"\\n    strokeLinecap=\\"round\\"\\n    strokeLinejoin=\\"round\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon20-select\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"20\\" \\n      height=\\"20\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path\\n        d=\\"M2.5 10.821 7 15.75l10.5-11.5\\"\\n        stroke=\\"currentColor\\"\\n        strokeWidth=\\"2\\"\\n        strokeLinecap=\\"round\\"\\n        strokeLinejoin=\\"round\\"\\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon20Select extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon20SelectIos","id":"component-TguiIcon20SelectIos-db1c144a77e578773955bbf69fab190614bb87ba18480388131377463331135f04f535b1e0e6a46de4b7ada4948ac3155e27c3f92b9bbf3e5cb5a1d3dfcbfc20","file":"projects/tgui/src/lib/icons/icon20/tgui-icon20-select-ios.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon20-select-ios","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"20\\"\\n  height=\\"20\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"M8.174 18c-.473 0-.876-.21-1.208-.63l-4.602-5.82a1.727 1.727 0 0 1-.284-.465 1.423 1.423 0 0 1-.08-.474c0-.365.118-.666.355-.903s.536-.356.898-.356c.408 0 .752.18 1.03.539l3.856 5.017 7.525-12.242c.154-.243.313-.414.48-.51.165-.104.372-.156.621-.156.361 0 .657.116.889.347.23.23.346.526.346.884 0 .146-.024.292-.071.438a2.017 2.017 0 0 1-.222.456L9.39 17.335c-.284.443-.69.665-1.217.665Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon20-select-ios\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"20\\" \\n      height=\\"20\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path\\n        d=\\"M8.174 18c-.473 0-.876-.21-1.208-.63l-4.602-5.82a1.727 1.727 0 0 1-.284-.465 1.423 1.423 0 0 1-.08-.474c0-.365.118-.666.355-.903s.536-.356.898-.356c.408 0 .752.18 1.03.539l3.856 5.017 7.525-12.242c.154-.243.313-.414.48-.51.165-.104.372-.156.621-.156.361 0 .657.116.889.347.23.23.346.526.346.884 0 .146-.024.292-.071.438a2.017 2.017 0 0 1-.222.456L9.39 17.335c-.284.443-.69.665-1.217.665Z\\"\\n        fill=\\"currentColor\\"\\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon20SelectIos extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Cancel","id":"component-TguiIcon24Cancel-41dad037cfbb76ff4b3d876f8417a2859c2ebe357f0398de5f17eb8b6baefe0d0179ca718dff940bd048be8c9b75d1a66ae8722e072157f5b73fb160b9f24dfc","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-cancel.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-cancel","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M4.5 4.44a.9.9 0 0 1 1.27 0L12 10.56l6.22-6.14a.9.9 0 0 1 1.27 1.28l-6.21 6.13 6.2 6.13a.9.9 0 0 1-1.26 1.28L12 13.1l-6.23 6.15a.9.9 0 1 1-1.26-1.28l6.2-6.13-6.2-6.13a.9.9 0 0 1-.01-1.27Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-cancel\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M4.5 4.44a.9.9 0 0 1 1.27 0L12 10.56l6.22-6.14a.9.9 0 0 1 1.27 1.28l-6.21 6.13 6.2 6.13a.9.9 0 0 1-1.26 1.28L12 13.1l-6.23 6.15a.9.9 0 1 1-1.26-1.28l6.2-6.13-6.2-6.13a.9.9 0 0 1-.01-1.27Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Cancel extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Channel","id":"component-TguiIcon24Channel-b49becf8639ff5e66623f6ed348b51f134bf4b10ddf90389fa40604744030a4a8e20182bfbba324fcb4572fecbd72fe348784242a6d8eca57dbe04615c693f3a","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-channel.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-channel","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"25\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M20.3345 4.69583c-.346-.56406-.9651-.85952-1.5842-.78415-.1303.01587-.3793.1062-.8925.47099-.4992.35487-1.1316.88076-2.0279 1.62737l-1.0131.84384v7.36662l1.201.8465c.8741.616 1.4867 1.047 1.9691 1.3339.4916.2923.7299.3598.8607.3676.5994.0357 1.1818-.272 1.5046-.8224.0752-.1282.1565-.381.2001-.9651.0428-.574.0434-1.34.0434-2.4288V8.38075c0-1.18556-.0006-2.02414-.0468-2.64881-.0474-.6407-.1364-.90909-.2144-1.03611Zm-7.3177 9.09147V7.33221H7.32665c-.60766 0-1.01705.00052-1.33441.02279-.30876.02167-.46285.06072-.56716.10516-.40136.17099-.72803.50259-.90011.9299-.04666.11586-.08557.28274-.10693.60477-.02187.32964-.02233.7538-.02233 1.37777v1.3914c0 .294.00084.3838.00668.4514.07352.8512.72316 1.494 1.50317 1.5653.06162.0057.14481.0066.43226.0066h6.67898Zm.5742-8.25509 1.1174-.93069c.8589-.71543 1.5442-1.28623 2.1065-1.68593.555-.39451 1.115-.71731 1.7179-.79071 1.3362-.16268 2.6314.481 3.3361 1.62975.3161.51527.424 1.15357.4751 1.84452.0517.69915.0517 1.60468.0517 2.74323v4.24772c0 1.0423 0 1.8757-.0484 2.5247-.0482.6468-.1505 1.2443-.4425 1.742-.6563 1.1189-1.8713 1.7855-3.1642 1.7085-.5788-.0345-1.1262-.2918-1.6737-.6173-.5497-.3269-1.2194-.7989-2.0539-1.387l-1.3815-.9737h-.2358v3.0331c0 1.7872-1.415 3.2796-3.2135 3.2796-.60764 0-1.21602-.1743-1.73688-.5279-1.1253-.7638-1.95819-1.4676-2.44463-2.5572-.38934-.8721-.52097-1.9169-.55377-3.2815-1.53933-.2768-2.70107-1.5796-2.83785-3.1631-.01344-.1556-.0134-.33-.01336-.5655v-1.4622c-.00001-.5865-.00001-1.0706.02628-1.46691.02724-.41065.08554-.79115.23328-1.15803.34635-.86004 1.01405-1.55123 1.86428-1.91347.36504-.15552.74311-.21645 1.14668-.24478.38788-.02722.86074-.02721 1.4291-.0272H13.591ZM7.24948 15.5873c.03562 1.2342.15547 1.9576.39485 2.4938.27219.6097.74578 1.078 1.81191 1.8017.20786.1411.46057.2172.72596.2172.7569 0 1.4135-.6383 1.4135-1.4796v-3.0331H7.24948Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-channel\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"25\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M20.3345 4.69583c-.346-.56406-.9651-.85952-1.5842-.78415-.1303.01587-.3793.1062-.8925.47099-.4992.35487-1.1316.88076-2.0279 1.62737l-1.0131.84384v7.36662l1.201.8465c.8741.616 1.4867 1.047 1.9691 1.3339.4916.2923.7299.3598.8607.3676.5994.0357 1.1818-.272 1.5046-.8224.0752-.1282.1565-.381.2001-.9651.0428-.574.0434-1.34.0434-2.4288V8.38075c0-1.18556-.0006-2.02414-.0468-2.64881-.0474-.6407-.1364-.90909-.2144-1.03611Zm-7.3177 9.09147V7.33221H7.32665c-.60766 0-1.01705.00052-1.33441.02279-.30876.02167-.46285.06072-.56716.10516-.40136.17099-.72803.50259-.90011.9299-.04666.11586-.08557.28274-.10693.60477-.02187.32964-.02233.7538-.02233 1.37777v1.3914c0 .294.00084.3838.00668.4514.07352.8512.72316 1.494 1.50317 1.5653.06162.0057.14481.0066.43226.0066h6.67898Zm.5742-8.25509 1.1174-.93069c.8589-.71543 1.5442-1.28623 2.1065-1.68593.555-.39451 1.115-.71731 1.7179-.79071 1.3362-.16268 2.6314.481 3.3361 1.62975.3161.51527.424 1.15357.4751 1.84452.0517.69915.0517 1.60468.0517 2.74323v4.24772c0 1.0423 0 1.8757-.0484 2.5247-.0482.6468-.1505 1.2443-.4425 1.742-.6563 1.1189-1.8713 1.7855-3.1642 1.7085-.5788-.0345-1.1262-.2918-1.6737-.6173-.5497-.3269-1.2194-.7989-2.0539-1.387l-1.3815-.9737h-.2358v3.0331c0 1.7872-1.415 3.2796-3.2135 3.2796-.60764 0-1.21602-.1743-1.73688-.5279-1.1253-.7638-1.95819-1.4676-2.44463-2.5572-.38934-.8721-.52097-1.9169-.55377-3.2815-1.53933-.2768-2.70107-1.5796-2.83785-3.1631-.01344-.1556-.0134-.33-.01336-.5655v-1.4622c-.00001-.5865-.00001-1.0706.02628-1.46691.02724-.41065.08554-.79115.23328-1.15803.34635-.86004 1.01405-1.55123 1.86428-1.91347.36504-.15552.74311-.21645 1.14668-.24478.38788-.02722.86074-.02721 1.4291-.0272H13.591ZM7.24948 15.5873c.03562 1.2342.15547 1.9576.39485 2.4938.27219.6097.74578 1.078 1.81191 1.8017.20786.1411.46057.2172.72596.2172.7569 0 1.4135-.6383 1.4135-1.4796v-3.0331H7.24948Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Channel extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Chat","id":"component-TguiIcon24Chat-52105846de0f6c58412ff8195fff6790880a1037f7073b4018e9fcf4c318495bb1d98281f1bc533ad61673c4b72671232c158ea11ed65b34d4422d14cc81e3a6","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chat.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-chat","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M6.665 18.088A4.269 4.269 0 0 0 7 16.37c-1.54-1.259-2.5-3.04-2.5-5.017 0-3.815 3.582-6.908 8-6.908 4.419 0 8 3.093 8 6.908 0 3.816-3.581 6.909-8 6.909-.69 0-1.36-.076-2-.218-.423.464-1.236 1.062-2.59 1.539-.78.274-1.741.508-2.91.652.644-.635 1.288-1.27 1.665-2.148Zm4.38 1.88c.475.062.961.095 1.455.095 5.156 0 9.8-3.66 9.8-8.709 0-5.048-4.644-8.708-9.8-8.708-5.155 0-9.8 3.66-9.8 8.708 0 2.232.938 4.227 2.414 5.73-.175.65-.623 1.126-1.379 1.871a1.8 1.8 0 0 0 1.485 3.068c2.768-.341 4.648-1.165 5.824-2.056Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-chat\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M6.665 18.088A4.269 4.269 0 0 0 7 16.37c-1.54-1.259-2.5-3.04-2.5-5.017 0-3.815 3.582-6.908 8-6.908 4.419 0 8 3.093 8 6.908 0 3.816-3.581 6.909-8 6.909-.69 0-1.36-.076-2-.218-.423.464-1.236 1.062-2.59 1.539-.78.274-1.741.508-2.91.652.644-.635 1.288-1.27 1.665-2.148Zm4.38 1.88c.475.062.961.095 1.455.095 5.156 0 9.8-3.66 9.8-8.709 0-5.048-4.644-8.708-9.8-8.708-5.155 0-9.8 3.66-9.8 8.708 0 2.232.938 4.227 2.414 5.73-.175.65-.623 1.126-1.379 1.871a1.8 1.8 0 0 0 1.485 3.068c2.768-.341 4.648-1.165 5.824-2.056Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Chat extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24ChevronDown","id":"component-TguiIcon24ChevronDown-952f6632faab241647f5cf45d2c1f7c7d5ec6d6f8c49edabc2147c8385e77ff4b042338ec9852a992ba6326873558abea6c3ef8dd28b523ca31b71a33b348dc4","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-down.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-chevron-down","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M4.3 7.54a1 1 0 0 1 1.4 0l6.8 6.8 6.8-6.8a1 1 0 1 1 1.4 1.42l-7.5 7.5a1 1 0 0 1-1.4 0l-7.5-7.5a1 1 0 0 1 0-1.42Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-chevron-down\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M4.3 7.54a1 1 0 0 1 1.4 0l6.8 6.8 6.8-6.8a1 1 0 1 1 1.4 1.42l-7.5 7.5a1 1 0 0 1-1.4 0l-7.5-7.5a1 1 0 0 1 0-1.42Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24ChevronDown extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24ChevronLeft","id":"component-TguiIcon24ChevronLeft-21acbd28a5e17f6e7d2b8252c70c3fc6eb4ce0e5070980f2001dcf1ddcfcef537dc92c24bf7ae577606fc5a1407509ef5fdb9f4c0e7c2cb1299b09e0db2b8d83","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-left.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-chevron-left","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M15.7071 3.79289c-.3905-.39052-1.0237-.39052-1.4142 0L6.79289 11.2929c-.39052.3905-.39052 1.0237 0 1.4142l7.50001 7.5c.3905.3905 1.0237.3905 1.4142 0 .3905-.3905.3905-1.0237 0-1.4142L8.91421 12l6.79289-6.79289c.3905-.39053.3905-1.02369 0-1.41422Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-chevron-left\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M15.7071 3.79289c-.3905-.39052-1.0237-.39052-1.4142 0L6.79289 11.2929c-.39052.3905-.39052 1.0237 0 1.4142l7.50001 7.5c.3905.3905 1.0237.3905 1.4142 0 .3905-.3905.3905-1.0237 0-1.4142L8.91421 12l6.79289-6.79289c.3905-.39053.3905-1.02369 0-1.41422Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24ChevronLeft extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24ChevronRight","id":"component-TguiIcon24ChevronRight-1e17ed8f4017ce554f477a6bb41538cb163c55dd4e82a72ceebf896b78bc720ead3d44601acf1ef23bc424e733266517066258a0a2b555190aa2109a45fde6d5","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-right.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-chevron-right","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M7.29289 3.79289c.39053-.39052 1.02369-.39052 1.41422 0l7.49999 7.50001c.3905.3905.3905 1.0237 0 1.4142l-7.49999 7.5c-.39053.3905-1.02369.3905-1.41422 0-.39052-.3905-.39052-1.0237 0-1.4142L14.0858 12 7.29289 5.20711c-.39052-.39053-.39052-1.02369 0-1.41422Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-chevron-right\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M7.29289 3.79289c.39053-.39052 1.02369-.39052 1.41422 0l7.49999 7.50001c.3905.3905.3905 1.0237 0 1.4142l-7.49999 7.5c-.39053.3905-1.02369.3905-1.41422 0-.39052-.3905-.39052-1.0237 0-1.4142L14.0858 12 7.29289 5.20711c-.39052-.39053-.39052-1.02369 0-1.41422Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24ChevronRight extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Close","id":"component-TguiIcon24Close-3f3d4528eafdff4ebdca0cc900d74143fd51740da81f4f65dd45cf631d56ffea9421ab3af7c78ba28efdb0db6f26f9bd8bf70ec4fc0e42ba351f954a0897de79","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-close.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-close","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <g opacity=\\".5\\" fill=\\"#000\\" clipPath=\\"url(#close_a)\\">\\n    <path\\n      d=\\"M12 24c6.5647 0 12-5.4471 12-12 0-6.56471-5.4471-12-12.0118-12C5.43529 0 0 5.43529 0 12c0 6.5529 5.44705 12 12 12Z\\"\\n      fill-opacity=\\".04\\" />\\n    <path\\n      d=\\"M7.86242 17.1429c-.56394 0-1.00528-.4542-1.00528-1.0187 0-.2701.09807-.5279.29422-.7121L10.5472 12 7.15136 8.60006c-.19615-.19637-.29422-.44187-.29422-.71189 0-.57689.44134-1.00648 1.00528-1.00648.28196 0 .50263.09819.69878.28231l3.4204 3.4122 3.4449-3.42448c.2084-.20866.4291-.29458.6988-.29458.5639 0 1.0176.44187 1.0176 1.00648 0 .28231-.0859.50324-.3066.72417L13.4282 12l3.3959 3.4c.2084.1841.3065.4417.3065.7242 0 .5645-.4536 1.0187-1.0298 1.0187-.282 0-.5395-.0982-.7234-.2947l-3.3958-3.4121-3.38363 3.4121c-.19613.1965-.45359.2947-.73555.2947Z\\"\\n      fill-opacity=\\".8\\" fill=\\"currentColor\\"/>\\n  </g>\\n  <defs>\\n    <clipPath id=\\"close_a\\">\\n      <path fill=\\"#fff\\" d=\\"M0 0h24v24H0z\\" />\\n    </clipPath>\\n  </defs>\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-close\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <g opacity=\\".5\\" fill=\\"#000\\" clipPath=\\"url(#close_a)\\">\\n        <path\\n          d=\\"M12 24c6.5647 0 12-5.4471 12-12 0-6.56471-5.4471-12-12.0118-12C5.43529 0 0 5.43529 0 12c0 6.5529 5.44705 12 12 12Z\\"\\n          fill-opacity=\\".04\\" />\\n        <path\\n          d=\\"M7.86242 17.1429c-.56394 0-1.00528-.4542-1.00528-1.0187 0-.2701.09807-.5279.29422-.7121L10.5472 12 7.15136 8.60006c-.19615-.19637-.29422-.44187-.29422-.71189 0-.57689.44134-1.00648 1.00528-1.00648.28196 0 .50263.09819.69878.28231l3.4204 3.4122 3.4449-3.42448c.2084-.20866.4291-.29458.6988-.29458.5639 0 1.0176.44187 1.0176 1.00648 0 .28231-.0859.50324-.3066.72417L13.4282 12l3.3959 3.4c.2084.1841.3065.4417.3065.7242 0 .5645-.4536 1.0187-1.0298 1.0187-.282 0-.5395-.0982-.7234-.2947l-3.3958-3.4121-3.38363 3.4121c-.19613.1965-.45359.2947-.73555.2947Z\\"\\n          fill-opacity=\\".8\\" fill=\\"currentColor\\"/>\\n      </g>\\n      <defs>\\n        <clipPath id=\\"close_a\\">\\n          <path fill=\\"#fff\\" d=\\"M0 0h24v24H0z\\" />\\n        </clipPath>\\n      </defs>\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Close extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Notifications","id":"component-TguiIcon24Notifications-4767b23b3cc4332af3fea91c48b02f4a1b031974640d49b9461414a2c488e5fed52ae4cc28ddfaadbc499a1222527e5f8ce9bc4bdba25b2d1ee62cb3421bde84","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-notifications.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-notifications","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M12.5 4.306c-.142 0-.278.004-.41.012-1.748.105-2.771.876-3.382 1.759-.637.921-.856 2.018-.856 2.738v3.2c0 .742 0 1.316-.177 1.857-.036.11-.077.219-.124.325-.23.52-.61.94-1.104 1.482l-.082.09c-.476.524-.783.865-.971 1.124.313.036.765.038 1.463.038h11.285c.698 0 1.15-.002 1.463-.038-.188-.26-.495-.6-.971-1.124l-.082-.09c-.493-.543-.874-.962-1.104-1.482a3.533 3.533 0 0 1-.124-.325c-.178-.541-.178-1.115-.177-1.857v-3.2c0-.72-.22-1.817-.856-2.738-.61-.883-1.635-1.654-3.382-1.759a6.86 6.86 0 0 0-.41-.012Zm-.512-1.791a8.57 8.57 0 0 1 1.023 0c2.291.137 3.8 1.195 4.713 2.516.887 1.283 1.181 2.764 1.181 3.784v3.077c0 .922.011 1.178.085 1.403.017.053.037.105.06.156.095.216.258.411.87 1.086l.04.043c.446.492.838.924 1.096 1.291.25.356.562.903.398 1.55a1.781 1.781 0 0 1-.212.501c-.35.565-.952.704-1.375.758-.438.057-1.012.057-1.667.057H6.8c-.656 0-1.23 0-1.668-.057-.423-.054-1.026-.193-1.375-.758a1.784 1.784 0 0 1-.212-.5c-.164-.648.148-1.195.398-1.55.258-.368.65-.8 1.097-1.292l.04-.043c.612-.675.774-.87.87-1.086a1.68 1.68 0 0 0 .059-.156c.074-.225.084-.48.084-1.403V8.815c0-1.02.295-2.501 1.182-3.784.913-1.32 2.422-2.379 4.713-2.516Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n  <path\\n    d=\\"M12.5 22.5c.913 0 1.69-.712 1.976-1.706.13-.452-.255-.843-.714-.843h-2.526c-.459 0-.844.39-.714.843.286.994 1.063 1.706 1.977 1.706Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-notifications\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M12.5 4.306c-.142 0-.278.004-.41.012-1.748.105-2.771.876-3.382 1.759-.637.921-.856 2.018-.856 2.738v3.2c0 .742 0 1.316-.177 1.857-.036.11-.077.219-.124.325-.23.52-.61.94-1.104 1.482l-.082.09c-.476.524-.783.865-.971 1.124.313.036.765.038 1.463.038h11.285c.698 0 1.15-.002 1.463-.038-.188-.26-.495-.6-.971-1.124l-.082-.09c-.493-.543-.874-.962-1.104-1.482a3.533 3.533 0 0 1-.124-.325c-.178-.541-.178-1.115-.177-1.857v-3.2c0-.72-.22-1.817-.856-2.738-.61-.883-1.635-1.654-3.382-1.759a6.86 6.86 0 0 0-.41-.012Zm-.512-1.791a8.57 8.57 0 0 1 1.023 0c2.291.137 3.8 1.195 4.713 2.516.887 1.283 1.181 2.764 1.181 3.784v3.077c0 .922.011 1.178.085 1.403.017.053.037.105.06.156.095.216.258.411.87 1.086l.04.043c.446.492.838.924 1.096 1.291.25.356.562.903.398 1.55a1.781 1.781 0 0 1-.212.501c-.35.565-.952.704-1.375.758-.438.057-1.012.057-1.667.057H6.8c-.656 0-1.23 0-1.668-.057-.423-.054-1.026-.193-1.375-.758a1.784 1.784 0 0 1-.212-.5c-.164-.648.148-1.195.398-1.55.258-.368.65-.8 1.097-1.292l.04-.043c.612-.675.774-.87.87-1.086a1.68 1.68 0 0 0 .059-.156c.074-.225.084-.48.084-1.403V8.815c0-1.02.295-2.501 1.182-3.784.913-1.32 2.422-2.379 4.713-2.516Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n      <path\\n        d=\\"M12.5 22.5c.913 0 1.69-.712 1.976-1.706.13-.452-.255-.843-.714-.843h-2.526c-.459 0-.844.39-.714.843.286.994 1.063 1.706 1.977 1.706Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Notifications extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24PersonRemove","id":"component-TguiIcon24PersonRemove-dff3c65462410900b8287eadd2ccc227971e800d2fcfd6f18c1f49fb108d75e11b5cbb1ef6e05ad0d1e22a1aded83db7cbcc7cf922e517ccadeafc374d7814e3","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-person-remove.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-person-remove","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M9.40001 3.89998c-1.47856 0-2.7 1.22035-2.7 2.75413s1.22144 2.75414 2.7 2.75414c1.47859 0 2.69999-1.22036 2.69999-2.75414 0-1.53378-1.2214-2.75413-2.69999-2.75413Zm-4.5 2.75413c0-2.50247 2.0021-4.55413 4.5-4.55413 2.49789 0 4.49999 2.05166 4.49999 4.55413 0 2.50247-2.0021 4.55409-4.49999 4.55409-2.4979 0-4.5-2.05162-4.5-4.55409Zm9.36629 8.79329c-.2335.4434-.3663.951-.3663 1.4924 0 1.758 1.4005 3.1602 3.1 3.1602.5337 0 1.0362-.1371 1.4755-.3801l-4.2092-4.2725Zm-.7352-2.0108c-.8855.8992-1.4311 2.1395-1.4311 3.5032 0 2.7267 2.1812 4.9602 4.9 4.9602 1.3573 0 2.5849-.5597 3.4696-1.4576.8843-.8977 1.4304-2.1375 1.4304-3.5026 0-2.7267-2.1812-4.9601-4.9-4.9601-1.3591 0-2.5838.5581-3.4689 1.4569Zm1.9938.7236 4.2086 4.2719c.2338-.4439.3665-.9515.3665-1.4923 0-1.758-1.4005-3.1601-3.1-3.1601-.5323 0-1.0353.1375-1.4751.3805ZM3.53465 13.847c.84767-.7943 1.88294-1.0553 2.66536-1.0553h4.37769c.497 0 .9.4029.9.9 0 .4971-.403.9-.9.9H6.20001c-.41759 0-.98231.145-1.43465.5688-.43226.405-.86535 1.1619-.86535 2.5914 0 .497-.40295.9-.9.9-.49706 0-.9-.403-.9-.9 0-1.8187.56691-3.0919 1.43464-3.9049Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-person-remove\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M9.40001 3.89998c-1.47856 0-2.7 1.22035-2.7 2.75413s1.22144 2.75414 2.7 2.75414c1.47859 0 2.69999-1.22036 2.69999-2.75414 0-1.53378-1.2214-2.75413-2.69999-2.75413Zm-4.5 2.75413c0-2.50247 2.0021-4.55413 4.5-4.55413 2.49789 0 4.49999 2.05166 4.49999 4.55413 0 2.50247-2.0021 4.55409-4.49999 4.55409-2.4979 0-4.5-2.05162-4.5-4.55409Zm9.36629 8.79329c-.2335.4434-.3663.951-.3663 1.4924 0 1.758 1.4005 3.1602 3.1 3.1602.5337 0 1.0362-.1371 1.4755-.3801l-4.2092-4.2725Zm-.7352-2.0108c-.8855.8992-1.4311 2.1395-1.4311 3.5032 0 2.7267 2.1812 4.9602 4.9 4.9602 1.3573 0 2.5849-.5597 3.4696-1.4576.8843-.8977 1.4304-2.1375 1.4304-3.5026 0-2.7267-2.1812-4.9601-4.9-4.9601-1.3591 0-2.5838.5581-3.4689 1.4569Zm1.9938.7236 4.2086 4.2719c.2338-.4439.3665-.9515.3665-1.4923 0-1.758-1.4005-3.1601-3.1-3.1601-.5323 0-1.0353.1375-1.4751.3805ZM3.53465 13.847c.84767-.7943 1.88294-1.0553 2.66536-1.0553h4.37769c.497 0 .9.4029.9.9 0 .4971-.403.9-.9.9H6.20001c-.41759 0-.98231.145-1.43465.5688-.43226.405-.86535 1.1619-.86535 2.5914 0 .497-.40295.9-.9.9-.49706 0-.9-.403-.9-.9 0-1.8187.56691-3.0919 1.43464-3.9049Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24PersonRemove extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24Qr","id":"component-TguiIcon24Qr-362c5b73388d4439b82bbb3729c420a205aee8676235011ccfa051824e13509779d58c0da694fbb2530e82ebaef490b816476a1dd99d80504ae54627993268cc","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-qr.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-qr","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M6.96424 2.48363h.07906c.63394-.00002 1.16862-.00003 1.60495.03899.4573.0409.89367.13017 1.30119.36235.46206.26326.84726.64277 1.11566 1.10156.2376.40608.3289.84138.3706 1.29567.0397.4322.0397.96123.0397 1.58569v.08066c0 .62446 0 1.1535-.0397 1.58569-.0417.45429-.133.88959-.3706 1.29568-.2684.45878-.6536.83828-1.11566 1.10158-.40752.2322-.84389.3214-1.30119.3623-.43632.039-.971.039-1.60493.039h-.07909c-.63393 0-1.16861 0-1.60493-.039-.4573-.0409-.89368-.1301-1.30119-.3623-.46208-.2633-.84726-.6428-1.11567-1.10158-.23758-.40609-.3289-.84139-.37063-1.29568-.03969-.4322-.03968-.96124-.03966-1.58572v-.08059c-.00002-.62448-.00003-1.15353.03966-1.58573.04173-.45429.13305-.88959.37063-1.29567.26841-.45879.65359-.8383 1.11566-1.10156.40752-.23218.8439-.32145 1.3012-.36235.43632-.03902.97101-.03901 1.60494-.03899ZM5.51965 4.31547c-.33464.02993-.48072.08233-.57048.13347-.18947.10795-.34534.26236-.4531.44655-.04952.08464-.10175.22412-.1318.55134-.03123.34005-.03212.78578-.03212 1.46139 0 .67561.00089 1.12135.03212 1.46139.03005.32722.08228.4667.1318.55134.10776.18419.26363.3386.4531.44656.08976.05114.23584.10354.57048.13347.34657.03099.80016.03183 1.48412.03183.68397 0 1.13756-.00084 1.48413-.03183.33464-.02993.48071-.08233.57048-.13347.18947-.10796.34534-.26237.45309-.44656.04953-.08464.10176-.22412.13181-.55134.03123-.34004.03212-.78578.03212-1.46139 0-.67561-.00089-1.12134-.03212-1.46139-.03005-.32722-.08228-.4667-.13181-.55134-.10775-.18419-.26362-.3386-.4531-.44655-.08975-.05114-.23583-.10354-.57047-.13347-.34657-.031-.80016-.03184-1.48413-.03184-.68396 0-1.13755.00084-1.48412.03184ZM16.9648 2.48363h.079c.634-.00002 1.1687-.00003 1.605.03899.4573.0409.8937.13017 1.3012.36235.4621.26326.8472.64277 1.1157 1.10156.2375.40608.3289.84138.3706 1.29567.0397.4322.0397.96125.0396 1.58574v.08057c.0001.62448.0001 1.15353-.0396 1.58573-.0417.45429-.1331.88959-.3706 1.29568-.2685.45878-.6536.83828-1.1157 1.10158-.4075.2322-.8439.3214-1.3012.3623-.4363.039-.971.039-1.6049.039h-.0791c-.634 0-1.1686 0-1.605-.039-.4573-.0409-.8936-.1301-1.3012-.3623-.462-.2633-.8472-.6428-1.1156-1.10158-.2376-.40609-.3289-.84139-.3706-1.29568-.0397-.4322-.0397-.96125-.0397-1.58573v-.08057c0-.62449 0-1.15353.0397-1.58574.0417-.45429.133-.88959.3706-1.29567.2684-.45879.6536-.8383 1.1156-1.10156.4076-.23218.8439-.32145 1.3012-.36235.4364-.03902.971-.03901 1.605-.03899Zm-1.4446 1.83184c-.3347.02993-.4807.08233-.5705.13347-.1895.10795-.3453.26236-.4531.44655-.0495.08464-.1017.22412-.1318.55134-.0312.34005-.0321.78578-.0321 1.46139 0 .67561.0009 1.12135.0321 1.46139.0301.32722.0823.4667.1318.55134.1078.18419.2636.3386.4531.44656.0898.05114.2358.10354.5705.13347.3466.03099.8001.03183 1.4841.03183.684 0 1.1376-.00084 1.4841-.03183.3347-.02993.4808-.08233.5705-.13347.1895-.10796.3454-.26237.4531-.44656.0495-.08464.10176-.22412.1318-.55134.0313-.34004.0321-.78578.0321-1.46139 0-.67561-.0008-1.12134-.0321-1.46139-.03-.32722-.0823-.4667-.1318-.55134-.1077-.18419-.2636-.3386-.4531-.44655-.0897-.05114-.2358-.10354-.5705-.13347-.3465-.031-.8001-.03184-1.4841-.03184-.684 0-1.1375.00084-1.4841.03184Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n  <path\\n    d=\\"M14.7468 13.5283c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm2.4001 2.3686c.5681 0 1.0286.4544 1.0286 1.0151 0 .5606-.4605 1.015-1.0286 1.015-.5681 0-1.0286-.4544-1.0286-1.015 0-.5607.4605-1.0151 1.0286-1.0151Zm2.4001-2.3686c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Zm-4.8002 4.7371c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm4.8002 0c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-qr\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M6.96424 2.48363h.07906c.63394-.00002 1.16862-.00003 1.60495.03899.4573.0409.89367.13017 1.30119.36235.46206.26326.84726.64277 1.11566 1.10156.2376.40608.3289.84138.3706 1.29567.0397.4322.0397.96123.0397 1.58569v.08066c0 .62446 0 1.1535-.0397 1.58569-.0417.45429-.133.88959-.3706 1.29568-.2684.45878-.6536.83828-1.11566 1.10158-.40752.2322-.84389.3214-1.30119.3623-.43632.039-.971.039-1.60493.039h-.07909c-.63393 0-1.16861 0-1.60493-.039-.4573-.0409-.89368-.1301-1.30119-.3623-.46208-.2633-.84726-.6428-1.11567-1.10158-.23758-.40609-.3289-.84139-.37063-1.29568-.03969-.4322-.03968-.96124-.03966-1.58572v-.08059c-.00002-.62448-.00003-1.15353.03966-1.58573.04173-.45429.13305-.88959.37063-1.29567.26841-.45879.65359-.8383 1.11566-1.10156.40752-.23218.8439-.32145 1.3012-.36235.43632-.03902.97101-.03901 1.60494-.03899ZM5.51965 4.31547c-.33464.02993-.48072.08233-.57048.13347-.18947.10795-.34534.26236-.4531.44655-.04952.08464-.10175.22412-.1318.55134-.03123.34005-.03212.78578-.03212 1.46139 0 .67561.00089 1.12135.03212 1.46139.03005.32722.08228.4667.1318.55134.10776.18419.26363.3386.4531.44656.08976.05114.23584.10354.57048.13347.34657.03099.80016.03183 1.48412.03183.68397 0 1.13756-.00084 1.48413-.03183.33464-.02993.48071-.08233.57048-.13347.18947-.10796.34534-.26237.45309-.44656.04953-.08464.10176-.22412.13181-.55134.03123-.34004.03212-.78578.03212-1.46139 0-.67561-.00089-1.12134-.03212-1.46139-.03005-.32722-.08228-.4667-.13181-.55134-.10775-.18419-.26362-.3386-.4531-.44655-.08975-.05114-.23583-.10354-.57047-.13347-.34657-.031-.80016-.03184-1.48413-.03184-.68396 0-1.13755.00084-1.48412.03184ZM16.9648 2.48363h.079c.634-.00002 1.1687-.00003 1.605.03899.4573.0409.8937.13017 1.3012.36235.4621.26326.8472.64277 1.1157 1.10156.2375.40608.3289.84138.3706 1.29567.0397.4322.0397.96125.0396 1.58574v.08057c.0001.62448.0001 1.15353-.0396 1.58573-.0417.45429-.1331.88959-.3706 1.29568-.2685.45878-.6536.83828-1.1157 1.10158-.4075.2322-.8439.3214-1.3012.3623-.4363.039-.971.039-1.6049.039h-.0791c-.634 0-1.1686 0-1.605-.039-.4573-.0409-.8936-.1301-1.3012-.3623-.462-.2633-.8472-.6428-1.1156-1.10158-.2376-.40609-.3289-.84139-.3706-1.29568-.0397-.4322-.0397-.96125-.0397-1.58573v-.08057c0-.62449 0-1.15353.0397-1.58574.0417-.45429.133-.88959.3706-1.29567.2684-.45879.6536-.8383 1.1156-1.10156.4076-.23218.8439-.32145 1.3012-.36235.4364-.03902.971-.03901 1.605-.03899Zm-1.4446 1.83184c-.3347.02993-.4807.08233-.5705.13347-.1895.10795-.3453.26236-.4531.44655-.0495.08464-.1017.22412-.1318.55134-.0312.34005-.0321.78578-.0321 1.46139 0 .67561.0009 1.12135.0321 1.46139.0301.32722.0823.4667.1318.55134.1078.18419.2636.3386.4531.44656.0898.05114.2358.10354.5705.13347.3466.03099.8001.03183 1.4841.03183.684 0 1.1376-.00084 1.4841-.03183.3347-.02993.4808-.08233.5705-.13347.1895-.10796.3454-.26237.4531-.44656.0495-.08464.10176-.22412.1318-.55134.0313-.34004.0321-.78578.0321-1.46139 0-.67561-.0008-1.12134-.0321-1.46139-.03-.32722-.0823-.4667-.1318-.55134-.1077-.18419-.2636-.3386-.4531-.44655-.0897-.05114-.2358-.10354-.5705-.13347-.3465-.031-.8001-.03184-1.4841-.03184-.684 0-1.1375.00084-1.4841.03184Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n      <path\\n        d=\\"M14.7468 13.5283c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm2.4001 2.3686c.5681 0 1.0286.4544 1.0286 1.0151 0 .5606-.4605 1.015-1.0286 1.015-.5681 0-1.0286-.4544-1.0286-1.015 0-.5607.4605-1.0151 1.0286-1.0151Zm2.4001-2.3686c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Zm-4.8002 4.7371c.5681 0 1.0286.4545 1.0286 1.0151 0 .5606-.4605 1.0151-1.0286 1.0151-.5681 0-1.0287-.4545-1.0287-1.0151 0-.5606.4606-1.0151 1.0287-1.0151Zm4.8002 0c.5681 0 1.0287.4545 1.0287 1.0151 0 .5606-.4606 1.0151-1.0287 1.0151-.5681 0-1.0286-.4545-1.0286-1.0151 0-.5606.4605-1.0151 1.0286-1.0151Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24Qr extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon24SunLow","id":"component-TguiIcon24SunLow-2975343f525188672a5296f566d077d92a8932c1b065f1b87c324e7b0c0a18f5a6ee466154b2e85af5cb7ba4828586c9c44bbfdf4826d36d716a5b5a84846b3d","file":"projects/tgui/src/lib/icons/icon24/tgui-icon24-sun-low.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon24-sun-low","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"24\\"\\n  height=\\"24\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M12 15.45c1.9054 0 3.45-1.5446 3.45-3.45 0-1.9054-1.5446-3.45-3.45-3.45-1.9054 0-3.45 1.5446-3.45 3.45 0 1.9054 1.5446 3.45 3.45 3.45Zm0 1.8c2.8995 0 5.25-2.3505 5.25-5.25 0-2.89949-2.3505-5.25-5.25-5.25-2.89949 0-5.25 2.35051-5.25 5.25 0 2.8995 2.35051 5.25 5.25 5.25Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n  <circle cx=\\"18.5\\" cy=\\"5.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <circle cx=\\"5.5\\" cy=\\"5.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <circle cx=\\"20.5\\" cy=\\"12\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <circle cx=\\"3.5\\" cy=\\"12\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <circle cx=\\"18.5\\" cy=\\"18.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <path d=\\"M13 20.5c0 .5523-.4477 1-1 1s-1-.4477-1-1 .4477-1 1-1 1 .4477 1 1Z\\" fill=\\"currentColor\\" />\\n  <circle cx=\\"5.5\\" cy=\\"18.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n  <path d=\\"M13 3.5c0 .55228-.4477 1-1 1s-1-.44772-1-1 .4477-1 1-1 1 .44772 1 1Z\\" fill=\\"currentColor\\" />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon24-sun-low\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"24\\" \\n      height=\\"24\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M12 15.45c1.9054 0 3.45-1.5446 3.45-3.45 0-1.9054-1.5446-3.45-3.45-3.45-1.9054 0-3.45 1.5446-3.45 3.45 0 1.9054 1.5446 3.45 3.45 3.45Zm0 1.8c2.8995 0 5.25-2.3505 5.25-5.25 0-2.89949-2.3505-5.25-5.25-5.25-2.89949 0-5.25 2.35051-5.25 5.25 0 2.8995 2.35051 5.25 5.25 5.25Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n      <circle cx=\\"18.5\\" cy=\\"5.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <circle cx=\\"5.5\\" cy=\\"5.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <circle cx=\\"20.5\\" cy=\\"12\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <circle cx=\\"3.5\\" cy=\\"12\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <circle cx=\\"18.5\\" cy=\\"18.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <path d=\\"M13 20.5c0 .5523-.4477 1-1 1s-1-.4477-1-1 .4477-1 1-1 1 .4477 1 1Z\\" fill=\\"currentColor\\" />\\n      <circle cx=\\"5.5\\" cy=\\"18.5\\" r=\\"1\\" fill=\\"currentColor\\" />\\n      <path d=\\"M13 3.5c0 .55228-.4477 1-1 1s-1-.44772-1-1 .4477-1 1-1 1 .44772 1 1Z\\" fill=\\"currentColor\\" />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon24SunLow extends TguiIconBase {\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28AddCircle","id":"component-TguiIcon28AddCircle-5bc0f505e1431267952c1c180be52ce1ec9849e28dc667700c0e781a5477e1215f4692b598e9bf961c447073a976789a454a8b84158e645b903b1e8b0b4eda13","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-add-circle.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-add-circle","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"29\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M14.5 3.9C8.92193 3.9 4.40001 8.42192 4.40001 14c0 5.5781 4.52192 10.1 10.09999 10.1 5.5781 0 10.1-4.5219 10.1-10.1 0-5.57808-4.5219-10.1-10.1-10.1ZM2.60001 14c0-6.57219 5.32781-11.9 11.89999-11.9 6.5722 0 11.9 5.32781 11.9 11.9 0 6.5722-5.3278 11.9-11.9 11.9-6.57218 0-11.89999-5.3278-11.89999-11.9ZM14.5 8.6c.4971 0 .9.40294.9.9v3.6H19c.4971 0 .9.4029.9.9 0 .4971-.4029.9-.9.9h-3.6v3.6c0 .4971-.4029.9-.9.9-.4971 0-.9-.4029-.9-.9v-3.6H10c-.49705 0-.89999-.4029-.89999-.9 0-.4971.40294-.9.89999-.9h3.6V9.5c0-.49706.4029-.9.9-.9Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-add-circle\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"29\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M14.5 3.9C8.92193 3.9 4.40001 8.42192 4.40001 14c0 5.5781 4.52192 10.1 10.09999 10.1 5.5781 0 10.1-4.5219 10.1-10.1 0-5.57808-4.5219-10.1-10.1-10.1ZM2.60001 14c0-6.57219 5.32781-11.9 11.89999-11.9 6.5722 0 11.9 5.32781 11.9 11.9 0 6.5722-5.3278 11.9-11.9 11.9-6.57218 0-11.89999-5.3278-11.89999-11.9ZM14.5 8.6c.4971 0 .9.40294.9.9v3.6H19c.4971 0 .9.4029.9.9 0 .4971-.4029.9-.9.9h-3.6v3.6c0 .4971-.4029.9-.9.9-.4971 0-.9-.4029-.9-.9v-3.6H10c-.49705 0-.89999-.4029-.89999-.9 0-.4971.40294-.9.89999-.9h3.6V9.5c0-.49706.4029-.9.9-.9Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28AddCircle extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Archive","id":"component-TguiIcon28Archive-5de680cbd5323aa6d96080a2dbad905ee0b55588a05c95ad51824540089c28e336c6780cd596cc355ce695075608dec25dc63f12cddbc08ce9f07b757fcf7000","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-archive.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-archive","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"29\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M9.72 5.35c-.59 0-1.14.25-1.54.67l-.9.98H20.7l-.9-.98c-.4-.42-.95-.67-1.53-.67H9.72ZM22.29 8.8H5.7c-.19.32-.3.7-.3 1.08V20.2c0 1.7 1.38 3.07 3.08 3.07h11.05c1.7 0 3.07-1.37 3.07-3.07V9.88c0-.39-.1-.76-.3-1.08ZM4.54 7.33c-.6.7-.94 1.61-.94 2.55V20.2c0 2.7 2.18 4.87 4.87 4.87h11.05c2.69 0 4.87-2.18 4.87-4.87V9.88c0-.98-.36-1.91-1.02-2.63l-2.24-2.44a3.88 3.88 0 0 0-2.86-1.26H9.72c-1.09 0-2.13.46-2.86 1.26L4.62 7.25a4.13 4.13 0 0 0-.08.08ZM14 11.55c.5 0 .9.4.9.9v5.36l1.83-1.75a.9.9 0 0 1 1.25 1.3l-3.36 3.2a.9.9 0 0 1-1.24 0l-3.35-3.2a.9.9 0 1 1 1.24-1.3l1.83 1.75v-5.36c0-.5.4-.9.9-.9Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-archive\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"29\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M9.72 5.35c-.59 0-1.14.25-1.54.67l-.9.98H20.7l-.9-.98c-.4-.42-.95-.67-1.53-.67H9.72ZM22.29 8.8H5.7c-.19.32-.3.7-.3 1.08V20.2c0 1.7 1.38 3.07 3.08 3.07h11.05c1.7 0 3.07-1.37 3.07-3.07V9.88c0-.39-.1-.76-.3-1.08ZM4.54 7.33c-.6.7-.94 1.61-.94 2.55V20.2c0 2.7 2.18 4.87 4.87 4.87h11.05c2.69 0 4.87-2.18 4.87-4.87V9.88c0-.98-.36-1.91-1.02-2.63l-2.24-2.44a3.88 3.88 0 0 0-2.86-1.26H9.72c-1.09 0-2.13.46-2.86 1.26L4.62 7.25a4.13 4.13 0 0 0-.08.08ZM14 11.55c.5 0 .9.4.9.9v5.36l1.83-1.75a.9.9 0 0 1 1.25 1.3l-3.36 3.2a.9.9 0 0 1-1.24 0l-3.35-3.2a.9.9 0 1 1 1.24-1.3l1.83 1.75v-5.36c0-.5.4-.9.9-.9Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Archive extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Attach","id":"component-TguiIcon28Attach-eb173280e57fac4ca50c0b9ce680d8c1168292dfe0613fe6fa781577bf95dd139015907f54082fbcdd3e6337c4831ce72fdb1a08567594f7067ab0885469b934","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-attach.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-attach","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M20.286 6.445c-2.342-2.307-6.19-2.307-8.53 0l-5.353 5.272a.99.99 0 0 1-1.388-1.41l5.352-5.272c3.112-3.065 8.196-3.065 11.307 0a7.598 7.598 0 0 1 0 10.885l-7.347 7.238c-2.355 2.32-6.198 2.32-8.553 0a5.762 5.762 0 0 1 0-8.253l7.381-7.27c1.585-1.56 4.141-1.632 5.814-.167a4.06 4.06 0 0 1 .082 6.068l-6.158 5.688a.99.99 0 0 1-1.343-1.454l6.16-5.687c.93-.859.91-2.29-.044-3.127a2.315 2.315 0 0 0-3.122.088l-7.381 7.27a3.784 3.784 0 0 0 0 5.435c1.584 1.56 4.191 1.56 5.775 0l7.348-7.238a5.62 5.62 0 0 0 0-8.066Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-attach\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M20.286 6.445c-2.342-2.307-6.19-2.307-8.53 0l-5.353 5.272a.99.99 0 0 1-1.388-1.41l5.352-5.272c3.112-3.065 8.196-3.065 11.307 0a7.598 7.598 0 0 1 0 10.885l-7.347 7.238c-2.355 2.32-6.198 2.32-8.553 0a5.762 5.762 0 0 1 0-8.253l7.381-7.27c1.585-1.56 4.141-1.632 5.814-.167a4.06 4.06 0 0 1 .082 6.068l-6.158 5.688a.99.99 0 0 1-1.343-1.454l6.16-5.687c.93-.859.91-2.29-.044-3.127a2.315 2.315 0 0 0-3.122.088l-7.381 7.27a3.784 3.784 0 0 0 0 5.435c1.584 1.56 4.191 1.56 5.775 0l7.348-7.238a5.62 5.62 0 0 0 0-8.066Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Attach extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Chat","id":"component-TguiIcon28Chat-8f7bac56bb02a11b67fb7bf1677d505c64cf8b0539717ea034b938fa0b0dc24a2f129baa6f7b70f9bbf16ce3eb0f08f1a0048331c2ad0e278cd3abb0eb45db51","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-chat.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-chat","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M7.15 20.64c.27-.6.45-1.29.45-2.13a7.55 7.55 0 0 1-2.91-5.84c0-4.44 4.17-8.04 9.3-8.04 5.15 0 9.32 3.6 9.32 8.04 0 4.44-4.17 8.04-9.31 8.04-.8 0-1.58-.1-2.33-.26a7.55 7.55 0 0 1-3.19 1.86c-.87.29-1.94.54-3.21.7a8.4 8.4 0 0 0 1.88-2.37Zm5.12 1.93c.57.08 1.14.12 1.73.12 5.95 0 11.29-4.23 11.29-10.02 0-5.8-5.34-10.02-11.3-10.02-5.94 0-11.28 4.22-11.28 10.02 0 2.58 1.1 4.9 2.82 6.63-.2.82-.75 1.4-1.65 2.3a1.98 1.98 0 0 0 1.63 3.37c3.24-.4 5.42-1.37 6.76-2.4Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-chat\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M7.15 20.64c.27-.6.45-1.29.45-2.13a7.55 7.55 0 0 1-2.91-5.84c0-4.44 4.17-8.04 9.3-8.04 5.15 0 9.32 3.6 9.32 8.04 0 4.44-4.17 8.04-9.31 8.04-.8 0-1.58-.1-2.33-.26a7.55 7.55 0 0 1-3.19 1.86c-.87.29-1.94.54-3.21.7a8.4 8.4 0 0 0 1.88-2.37Zm5.12 1.93c.57.08 1.14.12 1.73.12 5.95 0 11.29-4.23 11.29-10.02 0-5.8-5.34-10.02-11.3-10.02-5.94 0-11.28 4.22-11.28 10.02 0 2.58 1.1 4.9 2.82 6.63-.2.82-.75 1.4-1.65 2.3a1.98 1.98 0 0 0 1.63 3.37c3.24-.4 5.42-1.37 6.76-2.4Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Chat extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Close","id":"component-TguiIcon28Close-d207ddec423d8e742c3f37d428bf40797c826ccbb57d0e9cc8cfc8573418f3d50c1f6ec3cb9f06842e091a8a9bf0c8371d16692cd1103e130632a621efc41a06","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-close.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-close","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <g clipPath=\\"url(#close_a)\\" fill=\\"currentColor\\">\\n    <path\\n      d=\\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\\"\\n      fill-opacity=\\".04\\"\\n    />\\n    <path\\n      opacity=\\".5\\"\\n      d=\\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\\"\\n      fill-opacity=\\".8\\"\\n    />\\n  </g>\\n  <defs>\\n    <clipPath id=\\"close_a\\">\\n      <path fill=\\"#fff\\" d=\\"M0 0h28v28H0z\\" />\\n    </clipPath>\\n  </defs>\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-close\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <g clipPath=\\"url(#close_a)\\" fill=\\"currentColor\\">\\n        <path \\n          d=\\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\\"\\n          fill-opacity=\\".04\\" \\n        />\\n        <path \\n          opacity=\\".5\\"\\n          d=\\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\\"\\n          fill-opacity=\\".8\\" \\n        />\\n      </g>\\n      <defs>\\n        <clipPath id=\\"close_a\\">\\n          <path fill=\\"#fff\\" d=\\"M0 0h28v28H0z\\" />\\n        </clipPath>\\n      </defs>\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Close extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28CloseAmbient","id":"component-TguiIcon28CloseAmbient-1587881d8e50b5f0b90335750372a5e29d051e9019426a6431690cf7865199eb211d88f456478dfa48d3baaaeacc2dfda3e2deda61da2a89f8c6cfff8cb7a18c","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-close-ambient.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-close-ambient","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <g clipPath=\\"url(#close_ambient_a)\\">\\n    <path\\n      d=\\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\\"\\n      fill=\\"#000\\"\\n      fill-opacity=\\".1\\"\\n    />\\n    <path\\n      d=\\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\\"\\n      fill=\\"#fff\\"\\n    />\\n  </g>\\n  <defs>\\n    <clipPath id=\\"close_ambient_a\\">\\n      <path fill=\\"#fff\\" d=\\"M0 0h28v28H0z\\" />\\n    </clipPath>\\n  </defs>\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-close-ambient\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <g clipPath=\\"url(#close_ambient_a)\\">\\n        <path \\n          d=\\"M14 28c7.66 0 14-6.35 14-14 0-7.66-6.35-14-14.01-14A14.1 14.1 0 0 0 0 14c0 7.65 6.35 14 14 14Z\\"\\n          fill=\\"#000\\" \\n          fill-opacity=\\".1\\" \\n        />\\n        <path\\n          d=\\"M9.17 20C8.51 20 8 19.47 8 18.81c0-.31.11-.61.34-.83L12.31 14l-3.97-3.97A1.15 1.15 0 0 1 8 9.2c0-.67.51-1.17 1.17-1.17.33 0 .59.11.82.33l3.99 3.98 4.02-4c.24-.24.5-.34.81-.34.66 0 1.19.52 1.19 1.17 0 .33-.1.6-.36.85L15.67 14l3.96 3.97c.24.21.36.51.36.84 0 .66-.53 1.19-1.2 1.19-.33 0-.64-.11-.85-.34l-3.96-3.98-3.95 3.98c-.23.23-.53.34-.86.34Z\\"\\n          fill=\\"#fff\\" \\n        />\\n      </g>\\n      <defs>\\n        <clipPath id=\\"close_ambient_a\\">\\n          <path fill=\\"#fff\\" d=\\"M0 0h28v28H0z\\" />\\n        </clipPath>\\n      </defs>\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28CloseAmbient extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Devices","id":"component-TguiIcon28Devices-747ef47e23b79ff46f5d331c414faed4b7a6bca8f2dac7114c0ab23efb00ddb87e1cb0e7063d2a87f32ba17de4d5d43a6157fc8d81e8692849828f6ee412beb8","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-devices.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-devices","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M4.03 7.9c0-1.59 1.3-2.88 2.89-2.88h16.74a.9.9 0 0 1 0 1.8H6.92c-.6 0-1.09.48-1.09 1.08v12.9h9.63a.9.9 0 0 1 0 1.8H2a.9.9 0 1 1 0-1.8h2.03V7.9Zm16.93 3.77c-.6 0-1.08.5-1.08 1.1v6.95c0 .6.48 1.08 1.08 1.08h3.05c.6 0 1.09-.48 1.09-1.08v-6.96c0-.6-.49-1.09-1.09-1.09h-3.05Zm-2.88 1.1c0-1.6 1.29-2.9 2.88-2.9h3.05c1.6 0 2.89 1.3 2.89 2.9v6.95c0 1.6-1.3 2.88-2.89 2.88h-3.05c-1.6 0-2.88-1.29-2.88-2.88v-6.96Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-devices\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M4.03 7.9c0-1.59 1.3-2.88 2.89-2.88h16.74a.9.9 0 0 1 0 1.8H6.92c-.6 0-1.09.48-1.09 1.08v12.9h9.63a.9.9 0 0 1 0 1.8H2a.9.9 0 1 1 0-1.8h2.03V7.9Zm16.93 3.77c-.6 0-1.08.5-1.08 1.1v6.95c0 .6.48 1.08 1.08 1.08h3.05c.6 0 1.09-.48 1.09-1.08v-6.96c0-.6-.49-1.09-1.09-1.09h-3.05Zm-2.88 1.1c0-1.6 1.29-2.9 2.88-2.9h3.05c1.6 0 2.89 1.3 2.89 2.9v6.95c0 1.6-1.3 2.88-2.89 2.88h-3.05c-1.6 0-2.88-1.29-2.88-2.88v-6.96Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Devices extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Edit","id":"component-TguiIcon28Edit-0f7ffc9a60fd8bcc8342adc8af2bbb9f97e19de9dab2205b156668a977fda05325242325ef444e65b1e5413c03b226333056fb1cb0e303236f44fd43872d1835","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-edit.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-edit","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M18.92 3.4c.21-.03.43-.03.64 0 .58.06 1.04.32 1.47.66.41.32.86.77 1.4 1.29l.06.07c.55.54 1 1 1.34 1.4.35.44.62.91.7 1.5.02.21.02.43 0 .65a2.89 2.89 0 0 1-.7 1.5c-.33.4-.8.86-1.34 1.4L10.48 23.73l-.08.08a4.6 4.6 0 0 1-1.23.97 2.9 2.9 0 0 1-.26.11c-.47.17-.97.17-1.56.17H7.12c-.74 0-1.37 0-1.88-.06a2.9 2.9 0 0 1-1.5-.55c-.2-.15-.37-.32-.52-.51a2.9 2.9 0 0 1-.54-1.5c-.06-.51-.06-1.14-.06-1.88v-.16c0-.58 0-1.07.16-1.53l.14-.33c.22-.44.56-.78.97-1.19l.08-.08L16.06 5.35c.53-.52.98-.97 1.39-1.29.43-.34.9-.6 1.47-.67Zm.44 1.78h-.24c-.1.01-.26.06-.56.3-.32.25-.7.62-1.27 1.18l-.7.7 3.96 3.9.64-.64c.6-.58.98-.96 1.23-1.28.25-.3.3-.46.31-.57v-.25c-.01-.1-.06-.27-.3-.57-.26-.32-.65-.7-1.24-1.29a17.1 17.1 0 0 0-1.27-1.18c-.3-.24-.45-.29-.56-.3Zm-.1 7.34-3.95-3.9-10.07 9.94c-.53.52-.64.64-.7.77l-.06.13a17.21 17.21 0 0 0-.01 2.77c.04.38.11.52.18.6.05.08.12.14.19.2.08.07.23.14.6.18.4.05.92.05 1.73.05h.07a3.66 3.66 0 0 0 1.17-.1c.13-.07.26-.18.8-.71l10.06-9.93Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-edit\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M18.92 3.4c.21-.03.43-.03.64 0 .58.06 1.04.32 1.47.66.41.32.86.77 1.4 1.29l.06.07c.55.54 1 1 1.34 1.4.35.44.62.91.7 1.5.02.21.02.43 0 .65a2.89 2.89 0 0 1-.7 1.5c-.33.4-.8.86-1.34 1.4L10.48 23.73l-.08.08a4.6 4.6 0 0 1-1.23.97 2.9 2.9 0 0 1-.26.11c-.47.17-.97.17-1.56.17H7.12c-.74 0-1.37 0-1.88-.06a2.9 2.9 0 0 1-1.5-.55c-.2-.15-.37-.32-.52-.51a2.9 2.9 0 0 1-.54-1.5c-.06-.51-.06-1.14-.06-1.88v-.16c0-.58 0-1.07.16-1.53l.14-.33c.22-.44.56-.78.97-1.19l.08-.08L16.06 5.35c.53-.52.98-.97 1.39-1.29.43-.34.9-.6 1.47-.67Zm.44 1.78h-.24c-.1.01-.26.06-.56.3-.32.25-.7.62-1.27 1.18l-.7.7 3.96 3.9.64-.64c.6-.58.98-.96 1.23-1.28.25-.3.3-.46.31-.57v-.25c-.01-.1-.06-.27-.3-.57-.26-.32-.65-.7-1.24-1.29a17.1 17.1 0 0 0-1.27-1.18c-.3-.24-.45-.29-.56-.3Zm-.1 7.34-3.95-3.9-10.07 9.94c-.53.52-.64.64-.7.77l-.06.13a17.21 17.21 0 0 0-.01 2.77c.04.38.11.52.18.6.05.08.12.14.19.2.08.07.23.14.6.18.4.05.92.05 1.73.05h.07a3.66 3.66 0 0 0 1.17-.1c.13-.07.26-.18.8-.71l10.06-9.93Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Edit extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Heart","id":"component-TguiIcon28Heart-ecf7cd955b7ae7104544671e32fd7a47924325db8af7db021055e543ccc25910ff7ee689f1f92ff635aca47ab681dc9b124c7ad2db63677ee1174fffd1d1ea4e","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-heart.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-heart","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M14 5.126c-.994-.932-2.343-1.678-3.823-1.95-1.761-.323-3.71.03-5.402 1.524-1.128.996-1.833 2.563-2.067 4.256a9.678 9.678 0 0 0 .834 5.41c.607 1.287 2.054 2.908 3.557 4.4 1.537 1.523 3.247 3.023 4.5 4.083a3.706 3.706 0 0 0 4.803 0c1.252-1.06 2.962-2.56 4.499-4.084 1.503-1.491 2.95-3.112 3.558-4.4a9.677 9.677 0 0 0 .833-5.409c-.233-1.693-.939-3.26-2.067-4.256-1.692-1.495-3.64-1.847-5.402-1.524-1.48.272-2.828 1.018-3.823 1.95Zm-4.148-.18c-1.274-.233-2.648.01-3.886 1.103-.72.635-1.283 1.758-1.475 3.153a7.878 7.878 0 0 0 .678 4.395c.455.964 1.677 2.381 3.198 3.89 1.488 1.477 3.159 2.942 4.394 3.988.72.61 1.757.61 2.478 0 1.235-1.046 2.906-2.511 4.394-3.988 1.521-1.509 2.743-2.926 3.198-3.89a7.878 7.878 0 0 0 .678-4.395c-.192-1.395-.756-2.518-1.475-3.153-1.238-1.093-2.612-1.336-3.886-1.103-1.304.24-2.502.984-3.271 1.857a1.17 1.17 0 0 1-1.754 0c-.768-.873-1.967-1.617-3.271-1.857Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-heart\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M14 5.126c-.994-.932-2.343-1.678-3.823-1.95-1.761-.323-3.71.03-5.402 1.524-1.128.996-1.833 2.563-2.067 4.256a9.678 9.678 0 0 0 .834 5.41c.607 1.287 2.054 2.908 3.557 4.4 1.537 1.523 3.247 3.023 4.5 4.083a3.706 3.706 0 0 0 4.803 0c1.252-1.06 2.962-2.56 4.499-4.084 1.503-1.491 2.95-3.112 3.558-4.4a9.677 9.677 0 0 0 .833-5.409c-.233-1.693-.939-3.26-2.067-4.256-1.692-1.495-3.64-1.847-5.402-1.524-1.48.272-2.828 1.018-3.823 1.95Zm-4.148-.18c-1.274-.233-2.648.01-3.886 1.103-.72.635-1.283 1.758-1.475 3.153a7.878 7.878 0 0 0 .678 4.395c.455.964 1.677 2.381 3.198 3.89 1.488 1.477 3.159 2.942 4.394 3.988.72.61 1.757.61 2.478 0 1.235-1.046 2.906-2.511 4.394-3.988 1.521-1.509 2.743-2.926 3.198-3.89a7.878 7.878 0 0 0 .678-4.395c-.192-1.395-.756-2.518-1.475-3.153-1.238-1.093-2.612-1.336-3.886-1.103-1.304.24-2.502.984-3.271 1.857a1.17 1.17 0 0 1-1.754 0c-.768-.873-1.967-1.617-3.271-1.857Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Heart extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon28Stats","id":"component-TguiIcon28Stats-1f5bc554ec7c4b0f8d3c94396b318240d6692e435d1ed3fc7064249660ffa89150ce53c0a3eb199e803f1d6bef30ace84a2da7c38fc3c064327e01d56342aa24","file":"projects/tgui/src/lib/icons/icon28/tgui-icon28-stats.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon28-stats","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"28\\"\\n  height=\\"28\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon28-stats\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"28\\" \\n      height=\\"28\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M13.1 4.4a9.51 9.51 0 0 0-8.7 9.41 9.53 9.53 0 0 0 9.6 9.46c5 0 9.1-3.76 9.55-8.56h-7.29c-.5 0-.96 0-1.33-.05a2.04 2.04 0 0 1-1.23-.55c-.36-.36-.5-.8-.55-1.22-.05-.38-.05-.84-.05-1.34V4.4Zm1.8 0v7.1a9.97 9.97 0 0 0 .08 1.34l.19.04c.24.03.58.03 1.15.03h7.23A9.53 9.53 0 0 0 14.9 4.4Zm.06 8.43h.01Zm.02.01v.01Zm-12.38.97C2.6 7.6 7.72 2.56 14 2.56S25.4 7.59 25.4 13.8c0 6.23-5.12 11.26-11.4 11.26S2.6 20.04 2.6 13.81Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon28Stats extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon32ProfileColoredSquare","id":"component-TguiIcon32ProfileColoredSquare-dae06c407d9b5e3094053c57da5dc8422b344dd625eba45d22c2d75fd09134c7e23af67fff74f5a026d845e6da0e05bae8281931aa792d329f0f372f6a3dc0ec","file":"projects/tgui/src/lib/icons/icon32/tgui-icon32-profile-colored-square.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon32-profile-colored-square","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"33\\"\\n  height=\\"32\\"\\n  viewBox=\\"0 0 33 32\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    d=\\"M1.5 10.6C1.5 7.23968 1.5 5.55953 2.15396 4.27606C2.7292 3.14708 3.64708 2.2292 4.77606 1.65396C6.05953 1 7.73969 1 11.1 1H21.9C25.2603 1 26.9405 1 28.2239 1.65396C29.3529 2.2292 30.2708 3.14708 30.846 4.27606C31.5 5.55953 31.5 7.23969 31.5 10.6V21.4C31.5 24.7603 31.5 26.4405 30.846 27.7239C30.2708 28.8529 29.3529 29.7708 28.2239 30.346C26.9405 31 25.2603 31 21.9 31H11.1C7.73968 31 6.05953 31 4.77606 30.346C3.64708 29.7708 2.7292 28.8529 2.15396 27.7239C1.5 26.4405 1.5 24.7603 1.5 21.4V10.6Z\\"\\n    fill=\\"#008AFF\\" />\\n  <path\\n    d=\\"M18.459 13.2759H22.9912C23.1351 13.2759 23.2568 13.2261 23.3564 13.1265C23.4561 13.0269 23.5059 12.9051 23.5059 12.7612C23.5059 12.6174 23.4561 12.4984 23.3564 12.4043C23.2568 12.3047 23.1351 12.2549 22.9912 12.2549H18.459C18.3096 12.2549 18.1851 12.3047 18.0854 12.4043C17.9858 12.4984 17.936 12.6174 17.936 12.7612C17.936 12.9051 17.9858 13.0269 18.0854 13.1265C18.1851 13.2261 18.3096 13.2759 18.459 13.2759ZM18.459 16.5298H22.9912C23.1351 16.5298 23.2568 16.48 23.3564 16.3804C23.4561 16.2808 23.5059 16.1562 23.5059 16.0068C23.5059 15.8685 23.4561 15.7523 23.3564 15.6582C23.2568 15.5586 23.1351 15.5088 22.9912 15.5088H18.459C18.3096 15.5088 18.1851 15.5586 18.0854 15.6582C17.9858 15.7523 17.936 15.8685 17.936 16.0068C17.936 16.1562 17.9858 16.2808 18.0854 16.3804C18.1851 16.48 18.3096 16.5298 18.459 16.5298ZM18.459 19.7754H22.9912C23.1351 19.7754 23.2568 19.7284 23.3564 19.6343C23.4561 19.5347 23.5059 19.4157 23.5059 19.2773C23.5059 19.1335 23.4561 19.0117 23.3564 18.9121C23.2568 18.807 23.1351 18.7544 22.9912 18.7544H18.459C18.3096 18.7544 18.1851 18.807 18.0854 18.9121C17.9858 19.0117 17.936 19.1335 17.936 19.2773C17.936 19.4157 17.9858 19.5347 18.0854 19.6343C18.1851 19.7284 18.3096 19.7754 18.459 19.7754ZM9.80957 19.8335H16.2925C16.4253 19.8335 16.5249 19.792 16.5913 19.709C16.6632 19.626 16.6992 19.5236 16.6992 19.4019C16.6992 19.2026 16.6245 18.9508 16.4751 18.6465C16.3312 18.3366 16.1071 18.0267 15.8027 17.7168C15.5039 17.4014 15.1248 17.1385 14.6655 16.9282C14.2062 16.7179 13.6667 16.6128 13.0469 16.6128C12.4271 16.6128 11.8875 16.7179 11.4282 16.9282C10.9744 17.1385 10.5954 17.4014 10.291 17.7168C9.99219 18.0267 9.76807 18.3366 9.61865 18.6465C9.47477 18.9508 9.40283 19.2026 9.40283 19.4019C9.40283 19.5236 9.43604 19.626 9.50244 19.709C9.57438 19.792 9.67676 19.8335 9.80957 19.8335ZM13.0469 16.0317C13.5505 16.0317 13.9793 15.8436 14.3335 15.4673C14.6877 15.091 14.8647 14.6178 14.8647 14.0479C14.8647 13.6937 14.7817 13.37 14.6157 13.0767C14.4552 12.7834 14.2367 12.5482 13.96 12.3711C13.6888 12.194 13.3844 12.1055 13.0469 12.1055C12.7148 12.1055 12.4105 12.194 12.1338 12.3711C11.8571 12.5482 11.6357 12.7834 11.4697 13.0767C11.3092 13.37 11.229 13.6937 11.229 14.0479C11.229 14.6178 11.4061 15.091 11.7603 15.4673C12.12 15.8436 12.5488 16.0317 13.0469 16.0317ZM9.31982 23.6519C8.45101 23.6519 7.79801 23.436 7.36084 23.0044C6.9292 22.5783 6.71338 21.9391 6.71338 21.0869V10.9434C6.71338 10.0856 6.9292 9.44368 7.36084 9.01758C7.79801 8.58594 8.45101 8.37012 9.31982 8.37012H23.6802C24.5545 8.37012 25.2075 8.58594 25.6392 9.01758C26.0708 9.44922 26.2866 10.0911 26.2866 10.9434V21.0869C26.2866 21.9391 26.0708 22.5783 25.6392 23.0044C25.2075 23.436 24.5545 23.6519 23.6802 23.6519H9.31982Z\\"\\n    fill=\\"white\\" />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon32-profile-colored-square\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"33\\" \\n      height=\\"32\\" \\n      viewBox=\\"0 0 33 32\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path\\n        d=\\"M1.5 10.6C1.5 7.23968 1.5 5.55953 2.15396 4.27606C2.7292 3.14708 3.64708 2.2292 4.77606 1.65396C6.05953 1 7.73969 1 11.1 1H21.9C25.2603 1 26.9405 1 28.2239 1.65396C29.3529 2.2292 30.2708 3.14708 30.846 4.27606C31.5 5.55953 31.5 7.23969 31.5 10.6V21.4C31.5 24.7603 31.5 26.4405 30.846 27.7239C30.2708 28.8529 29.3529 29.7708 28.2239 30.346C26.9405 31 25.2603 31 21.9 31H11.1C7.73968 31 6.05953 31 4.77606 30.346C3.64708 29.7708 2.7292 28.8529 2.15396 27.7239C1.5 26.4405 1.5 24.7603 1.5 21.4V10.6Z\\"\\n        fill=\\"#008AFF\\" />\\n      <path\\n        d=\\"M18.459 13.2759H22.9912C23.1351 13.2759 23.2568 13.2261 23.3564 13.1265C23.4561 13.0269 23.5059 12.9051 23.5059 12.7612C23.5059 12.6174 23.4561 12.4984 23.3564 12.4043C23.2568 12.3047 23.1351 12.2549 22.9912 12.2549H18.459C18.3096 12.2549 18.1851 12.3047 18.0854 12.4043C17.9858 12.4984 17.936 12.6174 17.936 12.7612C17.936 12.9051 17.9858 13.0269 18.0854 13.1265C18.1851 13.2261 18.3096 13.2759 18.459 13.2759ZM18.459 16.5298H22.9912C23.1351 16.5298 23.2568 16.48 23.3564 16.3804C23.4561 16.2808 23.5059 16.1562 23.5059 16.0068C23.5059 15.8685 23.4561 15.7523 23.3564 15.6582C23.2568 15.5586 23.1351 15.5088 22.9912 15.5088H18.459C18.3096 15.5088 18.1851 15.5586 18.0854 15.6582C17.9858 15.7523 17.936 15.8685 17.936 16.0068C17.936 16.1562 17.9858 16.2808 18.0854 16.3804C18.1851 16.48 18.3096 16.5298 18.459 16.5298ZM18.459 19.7754H22.9912C23.1351 19.7754 23.2568 19.7284 23.3564 19.6343C23.4561 19.5347 23.5059 19.4157 23.5059 19.2773C23.5059 19.1335 23.4561 19.0117 23.3564 18.9121C23.2568 18.807 23.1351 18.7544 22.9912 18.7544H18.459C18.3096 18.7544 18.1851 18.807 18.0854 18.9121C17.9858 19.0117 17.936 19.1335 17.936 19.2773C17.936 19.4157 17.9858 19.5347 18.0854 19.6343C18.1851 19.7284 18.3096 19.7754 18.459 19.7754ZM9.80957 19.8335H16.2925C16.4253 19.8335 16.5249 19.792 16.5913 19.709C16.6632 19.626 16.6992 19.5236 16.6992 19.4019C16.6992 19.2026 16.6245 18.9508 16.4751 18.6465C16.3312 18.3366 16.1071 18.0267 15.8027 17.7168C15.5039 17.4014 15.1248 17.1385 14.6655 16.9282C14.2062 16.7179 13.6667 16.6128 13.0469 16.6128C12.4271 16.6128 11.8875 16.7179 11.4282 16.9282C10.9744 17.1385 10.5954 17.4014 10.291 17.7168C9.99219 18.0267 9.76807 18.3366 9.61865 18.6465C9.47477 18.9508 9.40283 19.2026 9.40283 19.4019C9.40283 19.5236 9.43604 19.626 9.50244 19.709C9.57438 19.792 9.67676 19.8335 9.80957 19.8335ZM13.0469 16.0317C13.5505 16.0317 13.9793 15.8436 14.3335 15.4673C14.6877 15.091 14.8647 14.6178 14.8647 14.0479C14.8647 13.6937 14.7817 13.37 14.6157 13.0767C14.4552 12.7834 14.2367 12.5482 13.96 12.3711C13.6888 12.194 13.3844 12.1055 13.0469 12.1055C12.7148 12.1055 12.4105 12.194 12.1338 12.3711C11.8571 12.5482 11.6357 12.7834 11.4697 13.0767C11.3092 13.37 11.229 13.6937 11.229 14.0479C11.229 14.6178 11.4061 15.091 11.7603 15.4673C12.12 15.8436 12.5488 16.0317 13.0469 16.0317ZM9.31982 23.6519C8.45101 23.6519 7.79801 23.436 7.36084 23.0044C6.9292 22.5783 6.71338 21.9391 6.71338 21.0869V10.9434C6.71338 10.0856 6.9292 9.44368 7.36084 9.01758C7.79801 8.58594 8.45101 8.37012 9.31982 8.37012H23.6802C24.5545 8.37012 25.2075 8.58594 25.6392 9.01758C26.0708 9.44922 26.2866 10.0911 26.2866 10.9434V21.0869C26.2866 21.9391 26.0708 22.5783 25.6392 23.0044C25.2075 23.436 24.5545 23.6519 23.6802 23.6519H9.31982Z\\"\\n        fill=\\"white\\" />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon32ProfileColoredSquare extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIcon36Backspace","id":"component-TguiIcon36Backspace-abcb8e5f53cec426626af7f9b9dba0e28b2d9fe28d0884c22eab550a736b5fbd7d878d47adac89521e49668d609b0ea97719456627d0f82d2a33f85e44d349d4","file":"projects/tgui/src/lib/icons/icon36/tgui-icon36-backspace.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-icon36-backspace","styleUrls":[],"styles":[],"template":"<svg\\n  width=\\"36\\"\\n  height=\\"36\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n  [tguiSvgProps]=\\"props\\"\\n>\\n  <path\\n    fillRule=\\"evenodd\\"\\n    clipRule=\\"evenodd\\"\\n    d=\\"M15.886 6.5h8.855c.805 0 1.47 0 2.01.044.563.046 1.08.145 1.564.392a4 4 0 0 1 1.749 1.748c.247.485.345 1.002.391 1.564.045.541.045 1.206.045 2.01v11.483c0 .805 0 1.47-.045 2.01-.046.563-.144 1.08-.391 1.565a4 4 0 0 1-1.748 1.748c-.486.247-1.002.346-1.565.392-.54.044-1.205.044-2.01.044h-8.855c-.635 0-1.115 0-1.578-.11a4.001 4.001 0 0 1-1.156-.48c-.405-.248-.745-.587-1.193-1.037l-.072-.072-5.73-5.729c-.569-.57-1.039-1.039-1.39-1.453-.365-.43-.66-.865-.829-1.383a4 4 0 0 1 0-2.472c.168-.518.464-.953.829-1.383.351-.414.821-.884 1.39-1.453l5.73-5.73.072-.071c.448-.45.787-.789 1.193-1.038a4 4 0 0 1 1.156-.479c.463-.11.943-.11 1.578-.11Zm.102 2c-.782 0-1.01.006-1.213.055-.204.05-.399.13-.578.24-.178.109-.344.265-.896.818l-5.7 5.7c-.606.606-1.017 1.018-1.31 1.362-.284.335-.397.54-.45.707a2 2 0 0 0 0 1.236c.053.167.166.371.45.707.293.344.704.756 1.31 1.362l5.7 5.7c.552.552.718.709.896.818.18.11.374.19.578.24.204.049.431.055 1.213.055H24.7c.856 0 1.438 0 1.889-.038.438-.035.662-.1.819-.18a2 2 0 0 0 .874-.874c.08-.157.144-.38.18-.82.037-.45.038-1.032.038-1.888V12.3c0-.857-.001-1.439-.038-1.889-.036-.438-.1-.663-.18-.819a2 2 0 0 0-.875-.874c-.156-.08-.38-.145-.819-.18-.45-.037-1.032-.038-1.889-.038h-8.711Zm-1.196 4.793a1 1 0 0 1 1.415 0l3.293 3.293 3.292-3.293a1 1 0 0 1 1.415 1.414L20.914 18l3.293 3.293a1 1 0 0 1-1.415 1.414L19.5 19.414l-3.292 3.293a1 1 0 1 1-1.415-1.414L18.085 18l-3.293-3.293a1 1 0 0 1 0-1.414Z\\"\\n    fill=\\"currentColor\\"\\n  />\\n</svg>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[],"inheritance":{"file":"TguiIconBase"}}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TguiSvgPropsDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TguiIconBase } from \'../icon-base.component\';\\nimport { TguiSvgPropsDirective } from \'../directives\';\\nimport { TguiIconProps } from \'../icon.interface\';\\n\\n@Component({\\n  selector: \'tgui-icon36-backspace\',\\n  standalone: true,\\n  imports: [CommonModule, TguiSvgPropsDirective],\\n  template: `\\n    <svg \\n      width=\\"36\\" \\n      height=\\"36\\" \\n      fill=\\"none\\" \\n      xmlns=\\"http://www.w3.org/2000/svg\\"\\n      [tguiSvgProps]=\\"props\\"\\n    >\\n      <path \\n        fillRule=\\"evenodd\\" \\n        clipRule=\\"evenodd\\"\\n        d=\\"M15.886 6.5h8.855c.805 0 1.47 0 2.01.044.563.046 1.08.145 1.564.392a4 4 0 0 1 1.749 1.748c.247.485.345 1.002.391 1.564.045.541.045 1.206.045 2.01v11.483c0 .805 0 1.47-.045 2.01-.046.563-.144 1.08-.391 1.565a4 4 0 0 1-1.748 1.748c-.486.247-1.002.346-1.565.392-.54.044-1.205.044-2.01.044h-8.855c-.635 0-1.115 0-1.578-.11a4.001 4.001 0 0 1-1.156-.48c-.405-.248-.745-.587-1.193-1.037l-.072-.072-5.73-5.729c-.569-.57-1.039-1.039-1.39-1.453-.365-.43-.66-.865-.829-1.383a4 4 0 0 1 0-2.472c.168-.518.464-.953.829-1.383.351-.414.821-.884 1.39-1.453l5.73-5.73.072-.071c.448-.45.787-.789 1.193-1.038a4 4 0 0 1 1.156-.479c.463-.11.943-.11 1.578-.11Zm.102 2c-.782 0-1.01.006-1.213.055-.204.05-.399.13-.578.24-.178.109-.344.265-.896.818l-5.7 5.7c-.606.606-1.017 1.018-1.31 1.362-.284.335-.397.54-.45.707a2 2 0 0 0 0 1.236c.053.167.166.371.45.707.293.344.704.756 1.31 1.362l5.7 5.7c.552.552.718.709.896.818.18.11.374.19.578.24.204.049.431.055 1.213.055H24.7c.856 0 1.438 0 1.889-.038.438-.035.662-.1.819-.18a2 2 0 0 0 .874-.874c.08-.157.144-.38.18-.82.037-.45.038-1.032.038-1.888V12.3c0-.857-.001-1.439-.038-1.889-.036-.438-.1-.663-.18-.819a2 2 0 0 0-.875-.874c-.156-.08-.38-.145-.819-.18-.45-.037-1.032-.038-1.889-.038h-8.711Zm-1.196 4.793a1 1 0 0 1 1.415 0l3.293 3.293 3.292-3.293a1 1 0 0 1 1.415 1.414L20.914 18l3.293 3.293a1 1 0 0 1-1.415 1.414L19.5 19.414l-3.292 3.293a1 1 0 1 1-1.415-1.414L18.085 18l-3.293-3.293a1 1 0 0 1 0-1.414Z\\"\\n        fill=\\"currentColor\\" \\n      />\\n    </svg>\\n  `,\\n})\\nexport class TguiIcon36Backspace extends TguiIconBase {\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":["TguiIconBase"]},{"name":"TguiIconBase","id":"component-TguiIconBase-a76efd20692517a498a0536e54a69dc5dd9a759b5b2bd3dca5d468e5454a45b4e59219771690887be83e764d0f443584b45c09506feab6ba5181a88f257b13da","file":"projects/tgui/src/lib/icons/icon-base.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"styleUrls":[],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"props","defaultValue":"{}","deprecated":false,"deprecationMessage":"","line":8,"type":"TguiIconProps","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport { TguiIconProps } from \'./icon.interface\';\\n\\n@Component({\\n  template: \'\',\\n})\\nexport abstract class TguiIconBase {\\n  @Input() props: TguiIconProps = {};\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"TimelineComponent","id":"component-TimelineComponent-da5efa9f6589a0bd6b4ac6d4b3fbe9978b1deeb17fae5e81ea0380b6a6ca557debc58fdf20d68a7256324fbe80d1a7e50ad307f528c2ef0af9f9a6a96f202cb0","file":"projects/tgui/src/lib/components/blocks/timeline/timeline.component.ts","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-timeline","styleUrls":[],"styles":["\\n    :host {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 24px;\\n      padding: 32px 44px;\\n      margin: 0;\\n    }\\n    \\n    :host.horizontal {\\n      flex-direction: row;\\n    }\\n  "],"template":"<ng-content></ng-content>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"active","defaultValue":"input<number | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":29},{"name":"horizontal","defaultValue":"input<boolean | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":30},{"name":"items","deprecated":false,"deprecationMessage":"","type":"QueryList<TimelineItemComponent>","indexKey":"","optional":false,"description":"","line":32,"decorators":[{"name":"ContentChildren","stringifiedArguments":"TimelineItemComponent"}],"modifierKind":[170]}],"methodsClass":[{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":""},{"name":"updateItemsMode","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.tguiHorizontalScroll","deprecated":false,"deprecationMessage":"","line":53,"type":"any","decorators":[]},{"name":"class.horizontal","deprecated":false,"deprecationMessage":"","line":48,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TimelineItemComponent","type":"component"},{"name":"HorizontalScrollDirective","type":"directive"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, ViewEncapsulation, ContentChildren, QueryList, input, HostBinding, AfterContentInit, effect } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TimelineItemComponent } from \'./components/timeline-item/timeline-item.component\';\\nimport { HorizontalScrollDirective } from \'../../../directives/horizontal-scroll.directive\';\\n\\n@Component({\\n  selector: \'tgui-timeline\',\\n  standalone: true,\\n  imports: [CommonModule, TimelineItemComponent, HorizontalScrollDirective],\\n  template: `\\n    <ng-content></ng-content>\\n  `,\\n  styles: [`\\n    :host {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 24px;\\n      padding: 32px 44px;\\n      margin: 0;\\n    }\\n    \\n    :host.horizontal {\\n      flex-direction: row;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class TimelineComponent implements AfterContentInit {\\n  active = input<number | undefined>(undefined);\\n  horizontal = input<boolean | undefined>(undefined);\\n  \\n  @ContentChildren(TimelineItemComponent) items!: QueryList<TimelineItemComponent>;\\n  \\n  constructor() {\\n    effect(() => {\\n      const activeValue = this.active();\\n      console.log(\'Active signal changed to:\', activeValue);\\n      \\n      // We need to access the value inside the effect to track it\\n      // But we\'ll only update items when they\'re available\\n      if (this.items && activeValue !== undefined) {\\n        this.updateItemsMode();\\n      }\\n    });\\n  }\\n  \\n  @HostBinding(\'class.horizontal\')\\n  get isHorizontal(): boolean {\\n    return !!this.horizontal();\\n  }\\n  \\n  @HostBinding(\'attr.tguiHorizontalScroll\')\\n  get needsHorizontalScroll(): any {\\n    return this.horizontal() ? \'\' : null;\\n  }\\n  \\n  ngAfterContentInit(): void {\\n    // Initial setup of items after they\'re available\\n    if (this.active() !== undefined) {\\n      this.updateItemsMode();\\n    }\\n    \\n    // Listen for changes to the items QueryList\\n    this.items.changes.subscribe(() => {\\n      if (this.active() !== undefined) {\\n        this.updateItemsMode();\\n      }\\n    });\\n  }\\n  \\n  private updateItemsMode(): void {\\n    console.log(\'updateItemsMode called, active value:\', this.active());\\n    \\n    this.items.forEach((item, index) => {\\n      // Convert to 1-based index for comparison (like in React implementation)\\n      const oneBasedIndex = index + 1;\\n      \\n      if (oneBasedIndex <= this.active()!) {\\n        item.mode = \'active\';\\n      } else if (oneBasedIndex === this.active()! + 1) {\\n        item.mode = \'pre-active\';\\n      } else {\\n        item.mode = undefined;\\n      }\\n      \\n      // Pass horizontal property to children\\n      item.horizontal = this.horizontal();\\n    });\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 24px;\\n      padding: 32px 44px;\\n      margin: 0;\\n    }\\n    \\n    :host.horizontal {\\n      flex-direction: row;\\n    }\\n  \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":32},"extends":[],"implements":["AfterContentInit"],"accessors":{"isHorizontal":{"name":"isHorizontal","getSignature":{"name":"isHorizontal","type":"boolean","returnType":"boolean","line":48}},"needsHorizontalScroll":{"name":"needsHorizontalScroll","getSignature":{"name":"needsHorizontalScroll","type":"any","returnType":"any","line":53}}}},{"name":"TimelineItemComponent","id":"component-TimelineItemComponent-83ef8ee2bcab6367208af82867049967846abcad13e699655f60fd14794ea7e5a67ef2495ee0051c665142a23d9d3833d364325b09d1df3c4b215bfc896af363","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.component.ts","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-timeline-item","styleUrls":[],"styles":["\\n    :host {\\n      --tgui--timeline--item--thickness: 4px;\\n      --tgui--timeline--item--size: 12px;\\n      display: flex;\\n      gap: 32px;\\n    }\\n    \\n    :host:last-child .line {\\n      display: none;\\n    }\\n    \\n    .side {\\n      position: relative;\\n      min-width: var(--tgui--timeline--item--size);\\n    }\\n    \\n    .dot {\\n      position: absolute;\\n      top: 4px;\\n      left: 0;\\n      width: var(--tgui--timeline--item--size);\\n      height: var(--tgui--timeline--item--size);\\n      border-radius: 50%;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .line {\\n      position: absolute;\\n      top: 24px;\\n      bottom: 0;\\n      left: 50%;\\n      height: calc(100% - 4px);\\n      width: var(--tgui--timeline--item--thickness);\\n      border-radius: 2px;\\n      transform: translateX(-50%);\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .fields {\\n      overflow: hidden;\\n    }\\n    \\n    .title {\\n      display: block;\\n      margin-bottom: 4px;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    :host.active .line,\\n    :host.active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.pre-active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.ios .side {\\n      --tgui--timeline--item--size: 16px;\\n    }\\n    \\n    :host.ios .dot {\\n      top: 6px;\\n    }\\n    \\n    :host.ios .line {\\n      top: 6px;\\n      height: calc(100% + 26px);\\n    }\\n    \\n    :host.horizontal {\\n      gap: 24px;\\n      flex-direction: column;\\n    }\\n    \\n    :host.horizontal .side {\\n      height: var(--tgui--timeline--item--size);\\n      display: flex;\\n      align-items: center;\\n    }\\n    \\n    :host.horizontal .dot {\\n      top: 0;\\n    }\\n    \\n    :host.horizontal .line {\\n      top: 50%;\\n      left: 0;\\n      height: var(--tgui--timeline--item--thickness);\\n      width: calc(100% + 36px);\\n      transform: translateY(-50%);\\n    }\\n    \\n    :host.horizontal .title {\\n      white-space: nowrap;\\n    }\\n  "],"template":"<div class=\\"side\\">\\n  <div class=\\"line\\"></div>\\n  <div class=\\"dot\\"></div>\\n</div>\\n<div class=\\"fields\\">\\n  <tgui-text class=\\"title\\" weight=\\"2\\" *ngIf=\\"header\\">{{ header }}</tgui-text>\\n  <tgui-subheadline\\n    [level]=\\"platformService.platform() === \'ios\' ? \'1\' : \'2\'\\"\\n    class=\\"description\\"\\n  >\\n    <ng-content></ng-content>\\n  </tgui-subheadline>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"header","deprecated":false,"deprecationMessage":"","line":130,"type":"string","decorators":[]},{"name":"horizontal","deprecated":false,"deprecationMessage":"","line":132,"type":"boolean","decorators":[]},{"name":"mode","deprecated":false,"deprecationMessage":"","line":131,"type":"\\"active\\" | \\"pre-active\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":134,"modifierKind":[124]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.active","deprecated":false,"deprecationMessage":"","line":137,"type":"boolean","decorators":[]},{"name":"class.horizontal","deprecated":false,"deprecationMessage":"","line":152,"type":"boolean","decorators":[]},{"name":"class.ios","deprecated":false,"deprecationMessage":"","line":147,"type":"boolean","decorators":[]},{"name":"class.pre-active","deprecated":false,"deprecationMessage":"","line":142,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"TextComponent","type":"component"},{"name":"SubheadlineComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, HostBinding, inject } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../../../services/platform.service\';\\nimport { TextComponent } from \'../../../../typography/text/text.component\';\\nimport { SubheadlineComponent } from \'../../../../typography/subheadline/subheadline.component\';\\n\\n@Component({\\n  selector: \'tgui-timeline-item\',\\n  standalone: true,\\n  imports: [CommonModule, TextComponent, SubheadlineComponent],\\n  template: `\\n    <div class=\\"side\\">\\n      <div class=\\"line\\"></div>\\n      <div class=\\"dot\\"></div>\\n    </div>\\n    <div class=\\"fields\\">\\n      <tgui-text class=\\"title\\" weight=\\"2\\" *ngIf=\\"header\\">{{ header }}</tgui-text>\\n      <tgui-subheadline \\n        [level]=\\"platformService.platform() === \'ios\' ? \'1\' : \'2\'\\"\\n        class=\\"description\\"\\n      >\\n        <ng-content></ng-content>\\n      </tgui-subheadline>\\n    </div>\\n  `,\\n  styles: [`\\n    :host {\\n      --tgui--timeline--item--thickness: 4px;\\n      --tgui--timeline--item--size: 12px;\\n      display: flex;\\n      gap: 32px;\\n    }\\n    \\n    :host:last-child .line {\\n      display: none;\\n    }\\n    \\n    .side {\\n      position: relative;\\n      min-width: var(--tgui--timeline--item--size);\\n    }\\n    \\n    .dot {\\n      position: absolute;\\n      top: 4px;\\n      left: 0;\\n      width: var(--tgui--timeline--item--size);\\n      height: var(--tgui--timeline--item--size);\\n      border-radius: 50%;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .line {\\n      position: absolute;\\n      top: 24px;\\n      bottom: 0;\\n      left: 50%;\\n      height: calc(100% - 4px);\\n      width: var(--tgui--timeline--item--thickness);\\n      border-radius: 2px;\\n      transform: translateX(-50%);\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .fields {\\n      overflow: hidden;\\n    }\\n    \\n    .title {\\n      display: block;\\n      margin-bottom: 4px;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    :host.active .line,\\n    :host.active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.pre-active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.ios .side {\\n      --tgui--timeline--item--size: 16px;\\n    }\\n    \\n    :host.ios .dot {\\n      top: 6px;\\n    }\\n    \\n    :host.ios .line {\\n      top: 6px;\\n      height: calc(100% + 26px);\\n    }\\n    \\n    :host.horizontal {\\n      gap: 24px;\\n      flex-direction: column;\\n    }\\n    \\n    :host.horizontal .side {\\n      height: var(--tgui--timeline--item--size);\\n      display: flex;\\n      align-items: center;\\n    }\\n    \\n    :host.horizontal .dot {\\n      top: 0;\\n    }\\n    \\n    :host.horizontal .line {\\n      top: 50%;\\n      left: 0;\\n      height: var(--tgui--timeline--item--thickness);\\n      width: calc(100% + 36px);\\n      transform: translateY(-50%);\\n    }\\n    \\n    :host.horizontal .title {\\n      white-space: nowrap;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class TimelineItemComponent {\\n  @Input() header?: string;\\n  @Input() mode?: \'active\' | \'pre-active\';\\n  @Input() horizontal?: boolean;\\n  \\n  protected platformService = inject(PlatformService);\\n  \\n  @HostBinding(\'class.active\')\\n  get isActive(): boolean {\\n    return this.mode === \'active\';\\n  }\\n  \\n  @HostBinding(\'class.pre-active\')\\n  get isPreActive(): boolean {\\n    return this.mode === \'pre-active\';\\n  }\\n  \\n  @HostBinding(\'class.ios\')\\n  get isIOS(): boolean {\\n    return this.platformService.platform() === \'ios\';\\n  }\\n  \\n  @HostBinding(\'class.horizontal\')\\n  get isHorizontal(): boolean {\\n    return !!this.horizontal;\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      --tgui--timeline--item--thickness: 4px;\\n      --tgui--timeline--item--size: 12px;\\n      display: flex;\\n      gap: 32px;\\n    }\\n    \\n    :host:last-child .line {\\n      display: none;\\n    }\\n    \\n    .side {\\n      position: relative;\\n      min-width: var(--tgui--timeline--item--size);\\n    }\\n    \\n    .dot {\\n      position: absolute;\\n      top: 4px;\\n      left: 0;\\n      width: var(--tgui--timeline--item--size);\\n      height: var(--tgui--timeline--item--size);\\n      border-radius: 50%;\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .line {\\n      position: absolute;\\n      top: 24px;\\n      bottom: 0;\\n      left: 50%;\\n      height: calc(100% - 4px);\\n      width: var(--tgui--timeline--item--thickness);\\n      border-radius: 2px;\\n      transform: translateX(-50%);\\n      background: var(--tgui--quartenary_bg_color);\\n    }\\n    \\n    .fields {\\n      overflow: hidden;\\n    }\\n    \\n    .title {\\n      display: block;\\n      margin-bottom: 4px;\\n    }\\n    \\n    .description {\\n      color: var(--tgui--hint_color);\\n    }\\n    \\n    :host.active .line,\\n    :host.active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.pre-active .dot {\\n      background: var(--tgui--link_color);\\n    }\\n    \\n    :host.ios .side {\\n      --tgui--timeline--item--size: 16px;\\n    }\\n    \\n    :host.ios .dot {\\n      top: 6px;\\n    }\\n    \\n    :host.ios .line {\\n      top: 6px;\\n      height: calc(100% + 26px);\\n    }\\n    \\n    :host.horizontal {\\n      gap: 24px;\\n      flex-direction: column;\\n    }\\n    \\n    :host.horizontal .side {\\n      height: var(--tgui--timeline--item--size);\\n      display: flex;\\n      align-items: center;\\n    }\\n    \\n    :host.horizontal .dot {\\n      top: 0;\\n    }\\n    \\n    :host.horizontal .line {\\n      top: 50%;\\n      left: 0;\\n      height: var(--tgui--timeline--item--thickness);\\n      width: calc(100% + 36px);\\n      transform: translateY(-50%);\\n    }\\n    \\n    :host.horizontal .title {\\n      white-space: nowrap;\\n    }\\n  \\n","extends":[],"accessors":{"isActive":{"name":"isActive","getSignature":{"name":"isActive","type":"boolean","returnType":"boolean","line":137}},"isPreActive":{"name":"isPreActive","getSignature":{"name":"isPreActive","type":"boolean","returnType":"boolean","line":142}},"isIOS":{"name":"isIOS","getSignature":{"name":"isIOS","type":"boolean","returnType":"boolean","line":147}},"isHorizontal":{"name":"isHorizontal","getSignature":{"name":"isHorizontal","type":"boolean","returnType":"boolean","line":152}}}},{"name":"TitleComponent","id":"component-TitleComponent-8aa7383cf7d98ce9ca52be071b75259ec5d8cf3274543138a77aca37442d146b482a1f1d699a877c453c7400ec7d9cc6d4b119a7c02eded0a278f0f061cff26d","file":"projects/tgui/src/lib/components/typography/title/title.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-title","styleUrls":[],"styles":["\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--title1--font_size);\\n      line-height: var(--tgui--title1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--title2--font_size);\\n      line-height: var(--tgui--title2--line_height);\\n    }\\n    \\n    :host.level-3 {\\n      font-size: var(--tgui--title3--font_size);\\n      line-height: var(--tgui--title3--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"level","defaultValue":"\'2\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetermines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\\n","description":"<p>Determines the size and semantic tag of the title, with options for <code>h2</code>, <code>h3</code>, or <code>h4</code>.</p>\\n","line":58,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[]},{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"tag","deprecated":false,"deprecationMessage":"","line":88,"type":"string","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"outputsClass":[],"propertiesClass":[{"name":"titleLevelTags","defaultValue":"{\\n    \'1\': \'h2\',\\n    \'2\': \'h3\',\\n    \'3\': \'h4\'\\n  }","deprecated":false,"deprecationMessage":"","type":"Record<string | string>","indexKey":"","optional":false,"description":"","line":73,"modifierKind":[123]}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":67,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.level-1","deprecated":false,"deprecationMessage":"","line":61,"type":"boolean","decorators":[]},{"name":"class.level-2","deprecated":false,"deprecationMessage":"","line":62,"type":"boolean","decorators":[]},{"name":"class.level-3","deprecated":false,"deprecationMessage":"","line":63,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":66,"type":"any","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":68,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":69,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":70,"type":"boolean","decorators":[],"inheritance":{"file":"TypographyComponent"}}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The Title component is designed to render text as a page or section heading,\\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses <code>h3</code>\\nfor its semantic HTML element but can be customized via the <code>level</code> prop or explicitly with the <code>tag</code> property.</p>\\n","rawdescription":"\\n\\nThe Title component is designed to render text as a page or section heading,\\nproviding clear hierarchy and structure within content. It supports three levels of emphasis,\\nallowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\\nfor its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\\n","type":"component","sourceCode":"import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, OnInit } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { TypographyComponent } from \'@typography/typography.component\';\\n\\n/**\\n * The Title component is designed to render text as a page or section heading,\\n * providing clear hierarchy and structure within content. It supports three levels of emphasis,\\n * allowing for flexibility in design while maintaining semantic integrity. By default, it uses `h3`\\n * for its semantic HTML element but can be customized via the `level` prop or explicitly with the `tag` property.\\n */\\n@Component({\\n  selector: \'tgui-title\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [`\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--title1--font_size);\\n      line-height: var(--tgui--title1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--title2--font_size);\\n      line-height: var(--tgui--title2--line_height);\\n    }\\n    \\n    :host.level-3 {\\n      font-size: var(--tgui--title3--font_size);\\n      line-height: var(--tgui--title3--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class TitleComponent extends TypographyComponent implements OnInit {\\n  /**\\n   * Determines the size and semantic tag of the title, with options for `h2`, `h3`, or `h4`.\\n   */\\n  @Input() level: \'1\' | \'2\' | \'3\' = \'2\';\\n  \\n  // Host bindings for level classes\\n  @HostBinding(\'class.level-1\') get isLevel1() { return this.level === \'1\'; }\\n  @HostBinding(\'class.level-2\') get isLevel2() { return this.level === \'2\'; }\\n  @HostBinding(\'class.level-3\') get isLevel3() { return this.level === \'3\'; }\\n  \\n  // Добавляем привязки хоста для CSS-классов весов и других свойств\\n  @HostBinding(\'class.plain\') override get isPlain() { return this.plain; }\\n  @HostBinding(\'class.caps\') override get isCaps() { return this.caps; }\\n  @HostBinding(\'class.weight-1\') override get isWeight1() { return this.weight === \'1\'; }\\n  @HostBinding(\'class.weight-2\') override get isWeight2() { return this.weight === \'2\'; }\\n  @HostBinding(\'class.weight-3\') override get isWeight3() { return this.weight === \'3\'; }\\n  \\n  // Set the correct semantic HTML tag based on level\\n  private titleLevelTags: Record<string, string> = {\\n    \'1\': \'h2\',\\n    \'2\': \'h3\',\\n    \'3\': \'h4\'\\n  };\\n  \\n  // Override ngOnInit to set the tag based on level\\n  ngOnInit() {\\n    // Set the tag based on level if no custom tag is specified\\n    if (!this.tag) {\\n      this.tag = this.titleLevelTags[this.level];\\n    }\\n    \\n    // Call the parent\'s ngOnInit\\n    // super.ngOnInit();\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: inline-block;\\n    }\\n    \\n    :host.level-1 {\\n      font-size: var(--tgui--title1--font_size);\\n      line-height: var(--tgui--title1--line_height);\\n    }\\n    \\n    :host.level-2 {\\n      font-size: var(--tgui--title2--font_size);\\n      line-height: var(--tgui--title2--line_height);\\n    }\\n    \\n    :host.level-3 {\\n      font-size: var(--tgui--title3--font_size);\\n      line-height: var(--tgui--title3--line_height);\\n    }\\n    \\n    :host.weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":["TypographyComponent"],"implements":["OnInit"],"accessors":{"isLevel1":{"name":"isLevel1","getSignature":{"name":"isLevel1","type":"","returnType":"","line":61}},"isLevel2":{"name":"isLevel2","getSignature":{"name":"isLevel2","type":"","returnType":"","line":62}},"isLevel3":{"name":"isLevel3","getSignature":{"name":"isLevel3","type":"","returnType":"","line":63}},"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":66}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":67}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":68}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":69}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":70}}}},{"name":"TouchComponent","id":"component-TouchComponent-33992f53964ea88709f6396f8b608ff79aa20eb7b9dbfc6b2df81df3bd664ea0b8e9d22ff63f139f8539800fb01cc205afbf8f0c4f5f4b64bb319392e85284e5","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.Emulated"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-touch","styleUrls":[],"styles":["\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"noSlideClick","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":92,"required":false},{"name":"slideThreshold","defaultValue":"5","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":91,"required":false},{"name":"stopPropagation","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":93,"required":false},{"name":"useCapture","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":90,"required":false},{"name":"usePointerHover","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":89,"required":false}],"outputsClass":[{"name":"onEnd","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":104,"required":false},{"name":"onEndX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":105,"required":false},{"name":"onEndY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":106,"required":false},{"name":"onEnter","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":96,"required":false},{"name":"onLeave","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":97,"required":false},{"name":"onMove","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101,"required":false},{"name":"onMoveX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":102,"required":false},{"name":"onMoveY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"required":false},{"name":"onStart","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":98,"required":false},{"name":"onStartX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":99,"required":false},{"name":"onStartY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":100,"required":false}],"propertiesClass":[{"name":"didSlide","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":110,"modifierKind":[123]},{"name":"elementRef","defaultValue":"inject(ElementRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":85,"modifierKind":[123]},{"name":"gesture","defaultValue":"signal<Partial<Gesture> | null>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":109,"modifierKind":[123]},{"name":"moveEndUnlisteners","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"(function)[]","indexKey":"","optional":false,"description":"","line":113,"modifierKind":[123]},{"name":"noSlideClick","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":92,"required":false},{"name":"onEnd","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":104,"required":false},{"name":"onEndX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":105,"required":false},{"name":"onEndY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":106,"required":false},{"name":"onEnter","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":96,"required":false},{"name":"onLeave","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":97,"required":false},{"name":"onMove","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101,"required":false},{"name":"onMoveX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":102,"required":false},{"name":"onMoveY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":103,"required":false},{"name":"onStart","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":98,"required":false},{"name":"onStartX","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":99,"required":false},{"name":"onStartY","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":100,"required":false},{"name":"permanentUnlisteners","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"(function)[]","indexKey":"","optional":false,"description":"","line":112,"modifierKind":[123]},{"name":"renderer","defaultValue":"inject(Renderer2)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":86,"modifierKind":[123]},{"name":"slideThreshold","defaultValue":"5","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":91,"required":false},{"name":"stopPropagation","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":93,"required":false},{"name":"supportedEvents","defaultValue":"this.getSupportedEvents()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":111,"modifierKind":[123]},{"name":"useCapture","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":90,"required":false},{"name":"usePointerHover","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":89,"required":false}],"methodsClass":[{"name":"addDocumentEventListeners","args":[{"name":"target","type":"HTMLElement | Document","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":233,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd event listeners at document level for move and end events\\n","description":"<p>Add event listeners at document level for move and end events</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"target","type":"HTMLElement | Document","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addPermanentEventListener","args":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":""},{"name":"handler","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"e","type":"any","deprecated":false,"deprecationMessage":""}]}],"optional":false,"returnType":"void","typeParameters":[],"line":442,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd permanent event listeners to the host element\\nThese listeners remain active throughout the component lifecycle\\n","description":"<p>Add permanent event listeners to the host element\\nThese listeners remain active throughout the component lifecycle</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"eventName","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"handler","type":"function","deprecated":false,"deprecationMessage":"","function":[{"name":"e","type":"any","deprecated":false,"deprecationMessage":""}],"tagName":{"text":"param"}}]},{"name":"coordX","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":159,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGet X coordinate from an event\\n","description":"<p>Get X coordinate from an event</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"coordY","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":169,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGet Y coordinate from an event\\n","description":"<p>Get Y coordinate from an event</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getSupportedEvents","args":[],"optional":false,"returnType":"string[]","typeParameters":[],"line":125,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGet supported events based on browser capabilities\\n","description":"<p>Get supported events based on browser capabilities</p>\\n","modifierKind":[123]},{"name":"handleEnd","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":345,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle end of interaction\\n","description":"<p>Handle end of interaction</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleGestureEvent","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""},{"name":"handlers","type":"Array<OutputEmitterRef | null>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":400,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle gesture events and emit to appropriate outputs\\n","description":"<p>Handle gesture events and emit to appropriate outputs</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"handlers","type":"Array<OutputEmitterRef | null>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleHoverEnter","args":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":382,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle hover enter event\\n","description":"<p>Handle hover enter event</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleHoverLeave","args":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":391,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle hover leave event\\n","description":"<p>Handle hover leave event</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleMove","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":258,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle move events\\n","description":"<p>Handle move events</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"handleStart","args":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":210,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle start of a touch/mouse interaction\\n","description":"<p>Handle start of a touch/mouse interaction</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"e","type":"CustomTouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hasListeners","args":[{"name":"emitter","type":"OutputEmitterRef<any>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":336,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if an output emitter has any listeners\\n","description":"<p>Check if an output emitter has any listeners</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"emitter","type":"OutputEmitterRef<any>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"initGesture","args":[{"name":"startX","type":"number","deprecated":false,"deprecationMessage":""},{"name":"startY","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Gesture","typeParameters":[],"line":135,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInitialize a gesture\\n","description":"<p>Initialize a gesture</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"startX","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"startY","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":180,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":176,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":474,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCancel the transition through nested links if a swipe was detected\\n","description":"<p>Cancel the transition through nested links if a swipe was detected</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDragStart","args":[{"name":"e","type":"DragEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":492,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDragstart event handler\\nCancels the native browser behavior for nested links and images\\n","description":"<p>Dragstart event handler\\nCancels the native browser behavior for nested links and images</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'dragstart\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"e","type":"DragEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"removeAllListeners","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":464,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRemove all event listeners\\nCalled on component destruction\\n","description":"<p>Remove all event listeners\\nCalled on component destruction</p>\\n","modifierKind":[123]},{"name":"removeMoveEndListeners","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":455,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRemove move and end event listeners\\nThese are cleaned up after every gesture completes\\n","description":"<p>Remove move and end event listeners\\nThese are cleaned up after every gesture completes</p>\\n","modifierKind":[123]},{"name":"setupListeners","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":187,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSetup event listeners\\n","description":"<p>Setup event listeners</p>\\n","modifierKind":[123]},{"name":"touchEnabled","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":118,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCheck if touch events are enabled in the browser\\n","description":"<p>Check if touch events are enabled in the browser</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"e","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCancel the transition through nested links if a swipe was detected\\n","description":"<p>Cancel the transition through nested links if a swipe was detected</p>\\n","line":474},{"name":"dragstart","args":[{"name":"e","type":"DragEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDragstart event handler\\nCancels the native browser behavior for nested links and images\\n","description":"<p>Dragstart event handler\\nCancels the native browser behavior for nested links and images</p>\\n","line":492}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Component for handling touch and gesture events</p>\\n<p>This component is ported from the VKUI library for convenient handling of pointer events\\n<a href=\\"https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\">https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx</a></p>\\n","rawdescription":"\\n\\nComponent for handling touch and gesture events\\n\\nThis component is ported from the VKUI library for convenient handling of pointer events\\nhttps://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\n","type":"component","sourceCode":"import {\\n  Component,\\n  ViewEncapsulation,\\n  ChangeDetectionStrategy,\\n  ElementRef,\\n  inject,\\n  Renderer2,\\n  HostListener,\\n  signal,\\n  computed,\\n  input,\\n  output,\\n  OutputEmitterRef,\\n  OnInit,\\n  OnDestroy,\\n  CUSTOM_ELEMENTS_SCHEMA\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Interface for a touch/gesture event\\n */\\nexport interface Gesture {\\n  startX: number;\\n  startY: number;\\n  startT: Date;\\n  duration: number;\\n  isPressed: boolean;\\n  isY: boolean;\\n  isX: boolean;\\n  isSlideX: boolean;\\n  isSlideY: boolean;\\n  isSlide: boolean;\\n  clientX: number;\\n  clientY: number;\\n  shiftX: number;\\n  shiftY: number;\\n  shiftXAbs: number;\\n  shiftYAbs: number;\\n}\\n\\n/**\\n * Custom touch event type combining MouseEvent and TouchEvent properties\\n */\\nexport interface CustomTouchEvent extends MouseEvent {\\n  touches?: TouchList;\\n  changedTouches?: TouchList;\\n}\\n\\n/**\\n * Touch event handler type\\n */\\nexport type TouchEventHandler = (e: TouchEvent) => void;\\n\\n/**\\n * Touch event with gesture information\\n */\\nexport interface TouchEvent extends Gesture {\\n  originalEvent: CustomTouchEvent;\\n}\\n\\n/**\\n * Component for handling touch and gesture events\\n * \\n * This component is ported from the VKUI library for convenient handling of pointer events\\n * https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/components/Touch/Touch.tsx\\n */\\n@Component({\\n  selector: \'tgui-touch\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `<ng-content></ng-content>`,\\n  styles: [`\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  `],\\n  encapsulation: ViewEncapsulation.Emulated,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\\n})\\nexport class TouchComponent implements OnInit, OnDestroy {\\n  private elementRef = inject(ElementRef);\\n  private renderer = inject(Renderer2);\\n\\n  // Input properties using Signal API\\n  usePointerHover = input<boolean>(false);\\n  useCapture = input<boolean>(false);\\n  slideThreshold = input<number>(5);\\n  noSlideClick = input<boolean>(false);\\n  stopPropagation = input<boolean>(false);\\n\\n  // Output events using Signal API\\n  onEnter = output<MouseEvent>();\\n  onLeave = output<MouseEvent>();\\n  onStart = output<TouchEvent>();\\n  onStartX = output<TouchEvent>();\\n  onStartY = output<TouchEvent>();\\n  onMove = output<TouchEvent>();\\n  onMoveX = output<TouchEvent>();\\n  onMoveY = output<TouchEvent>();\\n  onEnd = output<TouchEvent>();\\n  onEndX = output<TouchEvent>();\\n  onEndY = output<TouchEvent>();\\n\\n  // Internal state\\n  private gesture = signal<Partial<Gesture> | null>(null);\\n  private didSlide = signal(false);\\n  private supportedEvents = this.getSupportedEvents();\\n  private permanentUnlisteners: (() => void)[] = []; // Listeners that should persist throughout component lifecycle\\n  private moveEndUnlisteners: (() => void)[] = []; // Listeners that should be removed after gesture end\\n\\n  /**\\n   * Check if touch events are enabled in the browser\\n   */\\n  private touchEnabled(): boolean {\\n    return typeof window !== \'undefined\' && \'ontouchstart\' in window;\\n  }\\n\\n  /**\\n   * Get supported events based on browser capabilities\\n   */\\n  private getSupportedEvents(): string[] {\\n    if (this.touchEnabled()) {\\n      return [\'touchstart\', \'touchmove\', \'touchend\', \'touchcancel\'];\\n    }\\n    return [\'mousedown\', \'mousemove\', \'mouseup\', \'mouseleave\'];\\n  }\\n\\n  /**\\n   * Initialize a gesture\\n   */\\n  private initGesture(startX: number, startY: number): Gesture {\\n    return {\\n      startX,\\n      startY,\\n      startT: new Date(),\\n      duration: 0,\\n      isPressed: true,\\n      isY: false,\\n      isX: false,\\n      isSlideX: false,\\n      isSlideY: false,\\n      isSlide: false,\\n      clientX: 0,\\n      clientY: 0,\\n      shiftX: 0,\\n      shiftY: 0,\\n      shiftXAbs: 0,\\n      shiftYAbs: 0,\\n    };\\n  }\\n\\n  /**\\n   * Get X coordinate from an event\\n   */\\n  private coordX(e: CustomTouchEvent): number {\\n    if (e.clientX != null) {\\n      return e.clientX;\\n    }\\n    return e.changedTouches?.[0]?.clientX || 0;\\n  }\\n\\n  /**\\n   * Get Y coordinate from an event\\n   */\\n  private coordY(e: CustomTouchEvent): number {\\n    if (e.clientY != null) {\\n      return e.clientY;\\n    }\\n    return e.changedTouches?.[0]?.clientY || 0;\\n  }\\n\\n  ngOnInit(): void {\\n    this.setupListeners();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.removeAllListeners();\\n  }\\n\\n  /**\\n   * Setup event listeners\\n   */\\n  private setupListeners(): void {\\n    // Setup hover events if needed\\n    if (this.usePointerHover()) {\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerenter\' : \'mouseenter\',\\n        (e: MouseEvent) => this.handleHoverEnter(e)\\n      );\\n      this.addPermanentEventListener(\\n        this.usePointerHover() ? \'pointerleave\' : \'mouseleave\',\\n        (e: MouseEvent) => this.handleHoverLeave(e)\\n      );\\n    }\\n\\n    // Setup touch/mouse start events\\n    this.addPermanentEventListener(\\n      this.supportedEvents[0],\\n      (e: CustomTouchEvent) => this.handleStart(e)\\n    );\\n  }\\n\\n  /**\\n   * Handle start of a touch/mouse interaction\\n   */\\n  private handleStart(e: CustomTouchEvent): void {\\n    const newGesture = this.initGesture(this.coordX(e), this.coordY(e));\\n    this.gesture.set(newGesture);\\n\\n    // Fire start events\\n    this.handleGestureEvent(e, [\\n      this.onStart,\\n      this.onStartX,\\n      this.onStartY\\n    ]);\\n\\n    // Add move and end events\\n    const targetElement = this.touchEnabled() \\n      ? (e.target as HTMLElement) // Touch events fire on the initial target\\n      : (window.document as any); // Mouse events need document-level capture\\n\\n    // Add move and end event listeners\\n    this.addDocumentEventListeners(targetElement);\\n  }\\n\\n  /**\\n   * Add event listeners at document level for move and end events\\n   */\\n  private addDocumentEventListeners(target: HTMLElement | Document): void {\\n    const moveListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[1],\\n      (e: CustomTouchEvent) => this.handleMove(e)\\n    );\\n\\n    const endListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[2],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    const cancelListener = this.renderer.listen(\\n      target,\\n      this.supportedEvents[3],\\n      (e: CustomTouchEvent) => this.handleEnd(e)\\n    );\\n\\n    this.moveEndUnlisteners.push(moveListener, endListener, cancelListener);\\n  }\\n\\n  /**\\n   * Handle move events\\n   */\\n  private handleMove(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    \\n    if (!currentGesture?.isPressed) {\\n      return;\\n    }\\n\\n    const { isPressed, isX, isY, startX = 0, startY = 0 } = currentGesture;\\n\\n    if (isPressed) {\\n      const clientX = this.coordX(e);\\n      const clientY = this.coordY(e);\\n\\n      // Calculate offsets\\n      const shiftX = clientX - startX;\\n      const shiftY = clientY - startY;\\n\\n      // Absolute offset values\\n      const shiftXAbs = Math.abs(shiftX);\\n      const shiftYAbs = Math.abs(shiftY);\\n\\n      // Check for multitouch - interrupt the gesture if detected\\n      if (e.touches && e.touches.length > 1) {\\n        this.handleEnd(e);\\n        return;\\n      }\\n\\n      // If direction not determined yet\\n      if (!isX && !isY) {\\n        const willBeX = shiftXAbs >= this.slideThreshold() && shiftXAbs > shiftYAbs;\\n        const willBeY = shiftYAbs >= this.slideThreshold() && shiftYAbs > shiftXAbs;\\n        const willBeSlidedX = willBeX && this.hasListeners(this.onMoveX) || this.hasListeners(this.onMove);\\n        const willBeSlidedY = willBeY && this.hasListeners(this.onMoveY) || this.hasListeners(this.onMove);\\n\\n        // Update gesture state\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            isY: willBeY,\\n            isX: willBeX,\\n            isSlideX: willBeSlidedX,\\n            isSlideY: willBeSlidedY,\\n            isSlide: willBeSlidedX || willBeSlidedY\\n          };\\n        });\\n      }\\n\\n      const updatedGesture = this.gesture();\\n      \\n      if (updatedGesture?.isSlide) {\\n        // Update gesture with new coordinates\\n        this.gesture.update(g => {\\n          if (!g) return g;\\n          return {\\n            ...g,\\n            clientX,\\n            clientY,\\n            shiftX,\\n            shiftY,\\n            shiftXAbs,\\n            shiftYAbs\\n          };\\n        });\\n\\n        // Fire move events\\n        this.handleGestureEvent(e, [\\n          this.onMove,\\n          updatedGesture.isSlideX ? this.onMoveX : null,\\n          updatedGesture.isSlideY ? this.onMoveY : null\\n        ]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Check if an output emitter has any listeners\\n   */\\n  private hasListeners(emitter: OutputEmitterRef<any>): boolean {\\n    // In Angular, we can\'t directly check if an output has listeners\\n    // So we\'ll make our best guess implementation\\n    return true;\\n  }\\n\\n  /**\\n   * Handle end of interaction\\n   */\\n  private handleEnd(e: CustomTouchEvent): void {\\n    const currentGesture = this.gesture();\\n    const { isPressed, isSlide, isSlideX, isSlideY } = currentGesture || {};\\n\\n    if (isPressed) {\\n      // Fire end events\\n      this.handleGestureEvent(e, [\\n        this.onEnd,\\n        isSlideY ? this.onEndY : null,\\n        isSlideX ? this.onEndX : null\\n      ]);\\n    }\\n\\n    // Track if slide occurred for click handling\\n    if (this.touchEnabled() && isSlide) {\\n      // If it\'s a touch device and touchmove was detected,\\n      // the click event won\'t be triggered\\n      this.didSlide.set(false);\\n    } else {\\n      this.didSlide.set(Boolean(isSlide));\\n    }\\n\\n    // Reset gesture state\\n    this.gesture.set({});\\n\\n    // If it was a touch event, simulate hover cancellation\\n    if (this.touchEnabled() && this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e as MouseEvent);\\n    }\\n\\n    // Remove document listeners for move and end events\\n    this.removeMoveEndListeners();\\n  }\\n\\n  /**\\n   * Handle hover enter event\\n   */\\n  private handleHoverEnter(e: MouseEvent): void {\\n    if (this.hasListeners(this.onEnter)) {\\n      this.onEnter.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle hover leave event\\n   */\\n  private handleHoverLeave(e: MouseEvent): void {\\n    if (this.hasListeners(this.onLeave)) {\\n      this.onLeave.emit(e);\\n    }\\n  }\\n\\n  /**\\n   * Handle gesture events and emit to appropriate outputs\\n   */\\n  private handleGestureEvent(e: CustomTouchEvent, handlers: Array<OutputEmitterRef<TouchEvent> | null>): void {\\n    if (this.stopPropagation()) {\\n      e.stopPropagation();\\n    }\\n\\n    handlers.forEach(emitter => {\\n      if (!emitter || !this.hasListeners(emitter)) return;\\n      \\n      const currentGesture = this.gesture();\\n      if (!currentGesture) return;\\n      \\n      const duration = Date.now() - (currentGesture.startT?.getTime() ?? 0);\\n      \\n      // Create a complete TouchEvent object with all required properties\\n      const touchEvent: TouchEvent = {\\n        startX: currentGesture.startX ?? 0,\\n        startY: currentGesture.startY ?? 0,\\n        startT: currentGesture.startT ?? new Date(),\\n        duration,\\n        isPressed: currentGesture.isPressed ?? false,\\n        isY: currentGesture.isY ?? false,\\n        isX: currentGesture.isX ?? false,\\n        isSlideX: currentGesture.isSlideX ?? false,\\n        isSlideY: currentGesture.isSlideY ?? false,\\n        isSlide: currentGesture.isSlide ?? false,\\n        clientX: currentGesture.clientX ?? 0,\\n        clientY: currentGesture.clientY ?? 0,\\n        shiftX: currentGesture.shiftX ?? 0,\\n        shiftY: currentGesture.shiftY ?? 0,\\n        shiftXAbs: currentGesture.shiftXAbs ?? 0,\\n        shiftYAbs: currentGesture.shiftYAbs ?? 0,\\n        originalEvent: e\\n      };\\n      \\n      emitter.emit(touchEvent);\\n    });\\n  }\\n\\n  /**\\n   * Add permanent event listeners to the host element\\n   * These listeners remain active throughout the component lifecycle\\n   */\\n  private addPermanentEventListener(eventName: string, handler: (e: any) => void): void {\\n    const unlistener = this.renderer.listen(\\n      this.elementRef.nativeElement,\\n      eventName,\\n      (e: any) => handler(e)\\n    );\\n    this.permanentUnlisteners.push(unlistener);\\n  }\\n\\n  /**\\n   * Remove move and end event listeners\\n   * These are cleaned up after every gesture completes\\n   */\\n  private removeMoveEndListeners(): void {\\n    this.moveEndUnlisteners.forEach(unlisten => unlisten());\\n    this.moveEndUnlisteners = [];\\n  }\\n\\n  /**\\n   * Remove all event listeners\\n   * Called on component destruction\\n   */\\n  private removeAllListeners(): void {\\n    this.removeMoveEndListeners();\\n    this.permanentUnlisteners.forEach(unlisten => unlisten());\\n    this.permanentUnlisteners = [];\\n  }\\n\\n  /**\\n   * Cancel the transition through nested links if a swipe was detected\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(e: MouseEvent): void {\\n    if (!this.didSlide()) {\\n      return;\\n    }\\n\\n    if (this.noSlideClick()) {\\n      e.stopPropagation();\\n      e.preventDefault();\\n    }\\n\\n    this.didSlide.set(false);\\n  }\\n\\n  /**\\n   * Dragstart event handler\\n   * Cancels the native browser behavior for nested links and images\\n   */\\n  @HostListener(\'dragstart\', [\'$event\'])\\n  onDragStart(e: DragEvent): void {\\n    const target = e.target as HTMLElement;\\n    if (target.tagName === \'A\' || target.tagName === \'IMG\') {\\n      e.preventDefault();\\n    }\\n  }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: block;\\n      position: relative;\\n      touch-action: manipulation;\\n    }\\n  \\n","extends":[],"implements":["OnInit","OnDestroy"]},{"name":"TouchPopperDemoComponent","id":"component-TouchPopperDemoComponent-9d0c1819f82cff175ea6751e246b6ef3a214654d1557e25cebd9767b49aecf66229dde27e05edf0a7d70becbc4c3d788dbeb4810ea729de2c828efa005cd5fb0","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"tgui-touch-popper-demo","styleUrls":[],"styles":[],"template":"<div style=\\"padding: 16px; display: flex; flex-direction: column; gap: 16px;\\">\\n  <h3 style=\\"margin: 0 0 8px 0; color: #333;\\">Interactive Touch Popper</h3>\\n  <p style=\\"margin: 0 0 16px 0; color: #666;\\">Touch or click anywhere in the area below to see the popper appear at that exact location.</p>\\n\\n  <div style=\\"position: relative;\\">\\n    <tgui-touch\\n      (onStart)=\\"handleTouch($event)\\"\\n      style=\\"display: block; width: 100%; height: 300px; background-color: #f7f7f7; border: 1px dashed #ccc; border-radius: 12px; display: flex; align-items: center; justify-content: center; user-select: none; overflow: hidden;\\">\\n      <div style=\\"text-align: center; color: #666; display: flex; flex-direction: column; align-items: center; gap: 8px;\\">\\n        <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <path d=\\"M8 16L12 12M12 12L16 16M12 12V21M20 16.7428C21.2215 15.734 22 14.2079 22 12.5C22 9.46243 19.5376 7 16.5 7C16.2815 7 16.0771 6.886 15.9661 6.69774C14.6621 4.48484 12.2544 3 9.5 3C5.35786 3 2 6.35786 2 10.5C2 12.5661 2.83545 14.4371 4.18695 15.7935\\" stroke=\\"#666666\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n        </svg>\\n        <span>Touch anywhere in this area</span>\\n      </div>\\n      <tgui-popper\\n      *ngIf=\\"showPopper\\"\\n      [targetRef]=\\"virtualElement\\"\\n      [placement]=\\"placement\\"\\n      [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n      [flip]=\\"flip\\"\\n      [shift]=\\"shift\\">\\n      <div style=\\"padding: 16px; min-width: 180px; max-width: 250px;\\">\\n        <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;\\">\\n          <p style=\\"margin: 0; padding: 0; font-weight: bold; font-size: 14px;\\">Touch Position</p>\\n          <button\\n            style=\\"background: none; border: none; cursor: pointer; padding: 2px; color: #999; font-size: 18px; line-height: 1;\\"\\n            (click)=\\"hidePopper()\\"\\n            title=\\"Close\\">\\n            ×\\n          </button>\\n        </div>\\n        <div style=\\"display: flex; gap: 8px; align-items: center; font-size: 13px; color: #666; margin-bottom: 8px;\\">\\n          <div style=\\"width: 6px; height: 6px; background-color: #4285F4; border-radius: 50%;\\"></div>\\n          <span>X: {{ touchPosition.x | number:\'1.0-0\' }}</span>\\n        </div>\\n        <div style=\\"display: flex; gap: 8px; align-items: center; font-size: 13px; color: #666;\\">\\n          <div style=\\"width: 6px; height: 6px; background-color: #EA4335; border-radius: 50%;\\"></div>\\n          <span>Y: {{ touchPosition.y | number:\'1.0-0\' }}</span>\\n        </div>\\n      </div>\\n    </tgui-popper>\\n    </tgui-touch>\\n\\n  </div>\\n\\n  <div style=\\"margin-top: 8px; padding: 12px; background-color: #f0f0f0; border-radius: 8px; font-size: 13px; color: #666;\\">\\n    <p style=\\"margin: 0; font-style: italic;\\">The popper will automatically hide after 3 seconds or when you click elsewhere.</p>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"flip","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":73},{"name":"lastTouchTarget","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"EventTarget | null","indexKey":"","optional":false,"description":"","line":78,"modifierKind":[123]},{"name":"offsetByMainAxis","defaultValue":"8","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":72},{"name":"placement","defaultValue":"\'top\'","deprecated":false,"deprecationMessage":"","type":"\\"top\\" | \\"bottom\\" | \\"left\\" | \\"right\\"","indexKey":"","optional":false,"description":"","line":71},{"name":"platformService","defaultValue":"inject(PlatformService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":68},{"name":"popperTimerId","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"number | null","indexKey":"","optional":false,"description":"","line":77,"modifierKind":[123]},{"name":"shift","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":74},{"name":"showPopper","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":70},{"name":"touchPosition","defaultValue":"{ x: 0, y: 0 }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":76},{"name":"virtualElement","defaultValue":"{\\n    getBoundingClientRect: () => ({\\n      width: 5,\\n      height: 5,\\n      top: this.touchPosition.y,\\n      right: this.touchPosition.x + 5,\\n      bottom: this.touchPosition.y + 5,\\n      left: this.touchPosition.x,\\n      x: this.touchPosition.x,\\n      y: this.touchPosition.y,\\n    })\\n  }","deprecated":false,"deprecationMessage":"","type":"object","indexKey":"","optional":false,"description":"","line":81}],"methodsClass":[{"name":"handleTouch","args":[{"name":"event","type":"TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hidePopper","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":122,"deprecated":false,"deprecationMessage":""},{"name":"onDocumentClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":130,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"PopperComponent","type":"component"},{"name":"TouchComponent","type":"component"},{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Meta, StoryObj, moduleMetadata } from \'@storybook/angular\';\\nimport { PopperComponent } from \'../popper.component\';\\nimport { Component, inject } from \'@angular/core\';\\nimport { TouchComponent, TouchEvent } from \'../../../utils/touch/touch.component\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { PlatformService } from \'../../../../services\';\\n\\n@Component({\\n  selector: \'tgui-touch-popper-demo\',\\n  standalone: true,\\n  imports: [PopperComponent, TouchComponent, CommonModule],\\n  template: `\\n    <div style=\\"padding: 16px; display: flex; flex-direction: column; gap: 16px;\\">\\n      <h3 style=\\"margin: 0 0 8px 0; color: #333;\\">Interactive Touch Popper</h3>\\n      <p style=\\"margin: 0 0 16px 0; color: #666;\\">Touch or click anywhere in the area below to see the popper appear at that exact location.</p>\\n      \\n      <div style=\\"position: relative;\\">\\n        <tgui-touch\\n          (onStart)=\\"handleTouch($event)\\"\\n          style=\\"display: block; width: 100%; height: 300px; background-color: #f7f7f7; border: 1px dashed #ccc; border-radius: 12px; display: flex; align-items: center; justify-content: center; user-select: none; overflow: hidden;\\">\\n          <div style=\\"text-align: center; color: #666; display: flex; flex-direction: column; align-items: center; gap: 8px;\\">\\n            <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n              <path d=\\"M8 16L12 12M12 12L16 16M12 12V21M20 16.7428C21.2215 15.734 22 14.2079 22 12.5C22 9.46243 19.5376 7 16.5 7C16.2815 7 16.0771 6.886 15.9661 6.69774C14.6621 4.48484 12.2544 3 9.5 3C5.35786 3 2 6.35786 2 10.5C2 12.5661 2.83545 14.4371 4.18695 15.7935\\" stroke=\\"#666666\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            </svg>\\n            <span>Touch anywhere in this area</span>\\n          </div>\\n          <tgui-popper\\n          *ngIf=\\"showPopper\\"\\n          [targetRef]=\\"virtualElement\\"\\n          [placement]=\\"placement\\"\\n          [offsetByMainAxis]=\\"offsetByMainAxis\\"\\n          [flip]=\\"flip\\"\\n          [shift]=\\"shift\\">\\n          <div style=\\"padding: 16px; min-width: 180px; max-width: 250px;\\">\\n            <div style=\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;\\">\\n              <p style=\\"margin: 0; padding: 0; font-weight: bold; font-size: 14px;\\">Touch Position</p>\\n              <button \\n                style=\\"background: none; border: none; cursor: pointer; padding: 2px; color: #999; font-size: 18px; line-height: 1;\\"\\n                (click)=\\"hidePopper()\\"\\n                title=\\"Close\\">\\n                ×\\n              </button>\\n            </div>\\n            <div style=\\"display: flex; gap: 8px; align-items: center; font-size: 13px; color: #666; margin-bottom: 8px;\\">\\n              <div style=\\"width: 6px; height: 6px; background-color: #4285F4; border-radius: 50%;\\"></div>\\n              <span>X: {{ touchPosition.x | number:\'1.0-0\' }}</span>\\n            </div>\\n            <div style=\\"display: flex; gap: 8px; align-items: center; font-size: 13px; color: #666;\\">\\n              <div style=\\"width: 6px; height: 6px; background-color: #EA4335; border-radius: 50%;\\"></div>\\n              <span>Y: {{ touchPosition.y | number:\'1.0-0\' }}</span>\\n            </div>\\n          </div>\\n        </tgui-popper>\\n        </tgui-touch>\\n        \\n      </div>\\n      \\n      <div style=\\"margin-top: 8px; padding: 12px; background-color: #f0f0f0; border-radius: 8px; font-size: 13px; color: #666;\\">\\n        <p style=\\"margin: 0; font-style: italic;\\">The popper will automatically hide after 3 seconds or when you click elsewhere.</p>\\n      </div>\\n    </div>\\n  `,\\n  host: {\\n    \'(document:click)\': \'onDocumentClick($event)\'\\n  }\\n})\\nclass TouchPopperDemoComponent {\\n  platformService = inject(PlatformService);\\n  \\n  showPopper = false;\\n  placement: \'top\' | \'bottom\' | \'left\' | \'right\' = \'top\';\\n  offsetByMainAxis = 8;\\n  flip = true;\\n  shift = true;\\n  \\n  touchPosition = { x: 0, y: 0 };\\n  private popperTimerId: number | null = null;\\n  private lastTouchTarget: EventTarget | null = null;\\n  \\n  // Virtual element that will be used as the reference for the popper\\n  virtualElement = {\\n    getBoundingClientRect: () => ({\\n      width: 5,\\n      height: 5,\\n      top: this.touchPosition.y,\\n      right: this.touchPosition.x + 5,\\n      bottom: this.touchPosition.y + 5,\\n      left: this.touchPosition.x,\\n      x: this.touchPosition.x,\\n      y: this.touchPosition.y,\\n    })\\n  };\\n  \\n  handleTouch(event: TouchEvent) {\\n    // Сначала скрываем существующий поппер, если он показан\\n    // Это обеспечит \\"эффект обновления\\" при повторном клике\\n    const wasShowing = this.showPopper;\\n    this.hidePopper();\\n    \\n    // Обновляем координаты касания\\n    this.touchPosition = {\\n      x: event.startX,\\n      y: event.startY\\n    };\\n    \\n    // Немного задержки перед показом нового поппера\\n    // Это создаст визуальный эффект \\"нового\\" поппера даже при клике в то же место\\n    setTimeout(() => {\\n      // Отображаем поппер на новых координатах\\n      this.showPopper = true;\\n      \\n      // Устанавливаем таймер для автоматического скрытия\\n      this.popperTimerId = window.setTimeout(() => {\\n        this.hidePopper();\\n      }, 3000);\\n      \\n      // Сохраняем target для предотвращения мгновенного закрытия\\n      this.lastTouchTarget = event.originalEvent.target;\\n    }, wasShowing ? 50 : 0); // Небольшая задержка, если поппер уже был показан\\n  }\\n  \\n  hidePopper() {\\n    this.showPopper = false;\\n    if (this.popperTimerId !== null) {\\n      window.clearTimeout(this.popperTimerId);\\n      this.popperTimerId = null;\\n    }\\n  }\\n  \\n  onDocumentClick(event: MouseEvent) {\\n    // If the click is on the last touch target, ignore it (prevents immediate closing)\\n    if (event.target === this.lastTouchTarget) {\\n      return;\\n    }\\n    \\n    // Check if the click is inside the popper\\n    const path = event.composedPath();\\n    const isClickInsidePopper = path.some(element => {\\n      if (element instanceof HTMLElement) {\\n        return element.classList.contains(\'tgui-popper-body\');\\n      }\\n      return false;\\n    });\\n    \\n    // Hide the popper if the click is outside\\n    if (!isClickInsidePopper && this.showPopper) {\\n      this.hidePopper();\\n    }\\n  }\\n}\\n\\nconst meta: Meta<TouchPopperDemoComponent> = {\\n  title: \'Components/Overlays/Popper/Touch\',\\n  component: TouchPopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, TouchComponent, CommonModule],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'top\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    }\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Interactive Touch Popper shows how to display a popper at the exact location where a user touches or clicks on the screen.\'\\n      }\\n    }\\n  }\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<TouchPopperDemoComponent>;\\n\\nexport const Default: Story = {\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'This example shows how to use the Popper component with a touch zone. The popper appears at the exact location where the user clicks or taps and automatically disappears after 3 seconds or when clicking outside of it.\'\\n      }\\n    }\\n  }\\n}; ","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"TypographyComponent","id":"component-TypographyComponent-d1b26e4f493c41b2161a1a6a6d02f33e832f0b7f08e8558976b8b271732249a461e0cbfa5875dde587b0baa169248597a13abafb9259eec76a7c67501b37c5f6","file":"projects/tgui/src/lib/components/typography/typography.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"tgui-typography","styleUrls":[],"styles":["\\n    :host {\\n      font-family: var(--tgui--font-family);\\n      display: inline-block;\\n    }\\n\\n    :host.plain, .plain {\\n      margin: 0;\\n    }\\n\\n    :host.weight-1, .weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2, .weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3, .weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps, .caps {\\n      text-transform: uppercase;\\n    }\\n  "],"template":"<ng-container *ngIf=\\"!tag\\">\\n  <ng-content></ng-content>\\n</ng-container>\\n<ng-container *ngIf=\\"tag\\">\\n  <ng-container [ngSwitch]=\\"tag\\">\\n    <h1 *ngSwitchCase=\\"\'h1\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </h1>\\n    <h2 *ngSwitchCase=\\"\'h2\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </h2>\\n    <h3 *ngSwitchCase=\\"\'h3\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </h3>\\n    <h4 *ngSwitchCase=\\"\'h4\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </h4>\\n    <h5 *ngSwitchCase=\\"\'h5\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </h5>\\n    <h6 *ngSwitchCase=\\"\'h6\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n    222\\n    <ng-content></ng-content>\\n    </h6>\\n    <p *ngSwitchCase=\\"\'p\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </p>\\n    <span *ngSwitchCase=\\"\'span\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </span>\\n    <div *ngSwitchCase=\\"\'div\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <ng-container *ngSwitchDefault>\\n      <span [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n        <ng-content></ng-content>\\n      </span>\\n    </ng-container>\\n  </ng-container>\\n</ng-container>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"caps","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":86,"type":"boolean","decorators":[]},{"name":"plain","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":87,"type":"boolean","decorators":[]},{"name":"tag","deprecated":false,"deprecationMessage":"","line":88,"type":"string","decorators":[]},{"name":"weight","defaultValue":"\'3\'","deprecated":false,"deprecationMessage":"","line":85,"type":"\\"1\\" | \\"2\\" | \\"3\\"","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.caps","deprecated":false,"deprecationMessage":"","line":91,"type":"boolean","decorators":[]},{"name":"class.plain","deprecated":false,"deprecationMessage":"","line":90,"type":"boolean","decorators":[]},{"name":"class.weight-1","deprecated":false,"deprecationMessage":"","line":92,"type":"boolean","decorators":[]},{"name":"class.weight-2","deprecated":false,"deprecationMessage":"","line":93,"type":"boolean","decorators":[]},{"name":"class.weight-3","deprecated":false,"deprecationMessage":"","line":94,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>The Typography component is a versatile wrapper for text content, offering\\ncustomizable styling options such as weight, capitalization, and HTML tag. It&#39;s designed\\nto facilitate consistent text styling across your application, with support for customization\\nthrough inputs.</p>\\n","rawdescription":"\\n\\nThe Typography component is a versatile wrapper for text content, offering\\ncustomizable styling options such as weight, capitalization, and HTML tag. It\'s designed\\nto facilitate consistent text styling across your application, with support for customization\\nthrough inputs.\\n","type":"component","sourceCode":"import { Component, Input, ElementRef, Renderer2, OnInit, ViewEncapsulation, HostBinding, ChangeDetectionStrategy, inject } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * The Typography component is a versatile wrapper for text content, offering\\n * customizable styling options such as weight, capitalization, and HTML tag. It\'s designed\\n * to facilitate consistent text styling across your application, with support for customization\\n * through inputs.\\n */\\n@Component({\\n  selector: \'tgui-typography\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: `\\n    <ng-container *ngIf=\\"!tag\\">\\n      <ng-content></ng-content>\\n    </ng-container>\\n    <ng-container *ngIf=\\"tag\\">\\n      <ng-container [ngSwitch]=\\"tag\\">\\n        <h1 *ngSwitchCase=\\"\'h1\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </h1>\\n        <h2 *ngSwitchCase=\\"\'h2\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </h2>\\n        <h3 *ngSwitchCase=\\"\'h3\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </h3>\\n        <h4 *ngSwitchCase=\\"\'h4\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </h4>\\n        <h5 *ngSwitchCase=\\"\'h5\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </h5>\\n        <h6 *ngSwitchCase=\\"\'h6\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n        222  \\n        <ng-content></ng-content>\\n        </h6>\\n        <p *ngSwitchCase=\\"\'p\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </p>\\n        <span *ngSwitchCase=\\"\'span\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </span>\\n        <div *ngSwitchCase=\\"\'div\'\\" [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n          <ng-content></ng-content>\\n        </div>\\n        <ng-container *ngSwitchDefault>\\n          <span [class.plain]=\\"plain\\" [class.caps]=\\"caps\\" [class.weight-1]=\\"weight === \'1\'\\" [class.weight-2]=\\"weight === \'2\'\\" [class.weight-3]=\\"weight === \'3\'\\">\\n            <ng-content></ng-content>\\n          </span>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  `,\\n  styles: [`\\n    :host {\\n      font-family: var(--tgui--font-family);\\n      display: inline-block;\\n    }\\n\\n    :host.plain, .plain {\\n      margin: 0;\\n    }\\n\\n    :host.weight-1, .weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2, .weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3, .weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps, .caps {\\n      text-transform: uppercase;\\n    }\\n  `],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class TypographyComponent {\\n  @Input() weight: \'1\' | \'2\' | \'3\' = \'3\';\\n  @Input() caps = false;\\n  @Input() plain = true;\\n  @Input() tag?: string;\\n\\n  @HostBinding(\'class.plain\') get isPlain() { return this.plain && !this.tag; }\\n  @HostBinding(\'class.caps\') get isCaps() { return this.caps && !this.tag; }\\n  @HostBinding(\'class.weight-1\') get isWeight1() { return this.weight === \'1\' && !this.tag; }\\n  @HostBinding(\'class.weight-2\') get isWeight2() { return this.weight === \'2\' && !this.tag; }\\n  @HostBinding(\'class.weight-3\') get isWeight3() { return this.weight === \'3\' && !this.tag; }\\n} ","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      font-family: var(--tgui--font-family);\\n      display: inline-block;\\n    }\\n\\n    :host.plain, .plain {\\n      margin: 0;\\n    }\\n\\n    :host.weight-1, .weight-1 {\\n      font-weight: var(--tgui--font_weight--accent1);\\n    }\\n\\n    :host.weight-2, .weight-2 {\\n      font-weight: var(--tgui--font_weight--accent2);\\n    }\\n\\n    :host.weight-3, .weight-3 {\\n      font-weight: var(--tgui--font_weight--accent3);\\n    }\\n\\n    :host.caps, .caps {\\n      text-transform: uppercase;\\n    }\\n  \\n","extends":[],"accessors":{"isPlain":{"name":"isPlain","getSignature":{"name":"isPlain","type":"","returnType":"","line":90}},"isCaps":{"name":"isCaps","getSignature":{"name":"isCaps","type":"","returnType":"","line":91}},"isWeight1":{"name":"isWeight1","getSignature":{"name":"isWeight1","type":"","returnType":"","line":92}},"isWeight2":{"name":"isWeight2","getSignature":{"name":"isWeight2","type":"","returnType":"","line":93}},"isWeight3":{"name":"isWeight3","getSignature":{"name":"isWeight3","type":"","returnType":"","line":94}}}}],"modules":[],"miscellaneous":{"variables":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-caption level=\\"1\\" weight=\\"1\\">Caption Level 1 - Bold</tgui-caption>\\n            <tgui-caption level=\\"1\\" weight=\\"2\\">Caption Level 1 - Medium</tgui-caption>\\n            <tgui-caption level=\\"1\\" weight=\\"3\\">Caption Level 1 - Regular</tgui-caption>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-caption level=\\"2\\" weight=\\"1\\">Caption Level 2 - Bold</tgui-caption>\\n            <tgui-caption level=\\"2\\" weight=\\"2\\">Caption Level 2 - Medium</tgui-caption>\\n            <tgui-caption level=\\"2\\" weight=\\"3\\">Caption Level 2 - Regular</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default, h5)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-headline level=\\"1\\" weight=\\"1\\">Headline Level 1 - Bold (h5)</tgui-headline>\\n            <tgui-headline level=\\"1\\" weight=\\"2\\">Headline Level 1 - Medium (h5)</tgui-headline>\\n            <tgui-headline level=\\"1\\" weight=\\"3\\">Headline Level 1 - Regular (h5)</tgui-headline>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller, h5)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-headline level=\\"2\\" weight=\\"1\\">Headline Level 2 - Bold (h5)</tgui-headline>\\n            <tgui-headline level=\\"2\\" weight=\\"2\\">Headline Level 2 - Medium (h5)</tgui-headline>\\n            <tgui-headline level=\\"2\\" weight=\\"3\\">Headline Level 2 - Regular (h5)</tgui-headline>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-large-title level=\\"1\\" weight=\\"1\\">Large Title Level 1 - Bold</tgui-large-title>\\n            <tgui-large-title level=\\"1\\" weight=\\"2\\">Large Title Level 1 - Medium</tgui-large-title>\\n            <tgui-large-title level=\\"1\\" weight=\\"3\\">Large Title Level 1 - Regular</tgui-large-title>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-large-title level=\\"2\\" weight=\\"1\\">Large Title Level 2 - Bold</tgui-large-title>\\n            <tgui-large-title level=\\"2\\" weight=\\"2\\">Large Title Level 2 - Medium</tgui-large-title>\\n            <tgui-large-title level=\\"2\\" weight=\\"3\\">Large Title Level 2 - Regular</tgui-large-title>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default, h6)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-subheadline level=\\"1\\" weight=\\"1\\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"1\\" weight=\\"2\\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"1\\" weight=\\"3\\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller, h6)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-subheadline level=\\"2\\" weight=\\"1\\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"2\\" weight=\\"2\\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"2\\" weight=\\"3\\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-text level=\\"1\\" weight=\\"1\\">Text Level 1 - Bold</tgui-text>\\n            <tgui-text level=\\"1\\" weight=\\"2\\">Text Level 1 - Medium</tgui-text>\\n            <tgui-text level=\\"1\\" weight=\\"3\\">Text Level 1 - Regular</tgui-text>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-text level=\\"2\\" weight=\\"1\\">Text Level 2 - Bold</tgui-text>\\n            <tgui-text level=\\"2\\" weight=\\"2\\">Text Level 2 - Medium</tgui-text>\\n            <tgui-text level=\\"2\\" weight=\\"3\\">Text Level 2 - Regular</tgui-text>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (h2)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"1\\" weight=\\"1\\">Title Level 1 - Bold (h2)</tgui-title>\\n            <tgui-title level=\\"1\\" weight=\\"2\\">Title Level 1 - Medium (h2)</tgui-title>\\n            <tgui-title level=\\"1\\" weight=\\"3\\">Title Level 1 - Regular (h2)</tgui-title>\\n          </div>\\n        </div>\\n        \\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (h3)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"2\\" weight=\\"1\\">Title Level 2 - Bold (h3)</tgui-title>\\n            <tgui-title level=\\"2\\" weight=\\"2\\">Title Level 2 - Medium (h3)</tgui-title>\\n            <tgui-title level=\\"2\\" weight=\\"3\\">Title Level 2 - Regular (h3)</tgui-title>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 3 (h4)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"3\\" weight=\\"1\\">Title Level 3 - Bold (h4)</tgui-title>\\n            <tgui-title level=\\"3\\" weight=\\"2\\">Title Level 3 - Medium (h4)</tgui-title>\\n            <tgui-title level=\\"3\\" weight=\\"3\\">Title Level 3 - Regular (h4)</tgui-title>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Ambient","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    type: \'ambient\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px;\\">\\n        <tgui-card-cell\\n          header=\\"Ambient Card\\"\\n          subtitle=\\"This card uses the ambient style with a dark background.\\">\\n          <div style=\\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\\">\\n            Additional content with lower opacity text\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"AutosizingIcons","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-dynamic-icon [icon]=\\"\'close\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chat\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chevron-left\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chevron-right\'\\"></tgui-dynamic-icon>\\n      </div>\\n    `,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'When no size is specified in the icon name, the component automatically tries to use the smallest available size (12) first, then tries larger sizes if needed.\',\\n      },\\n    },\\n  },\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    type: \'number\',\\n    mode: \'primary\',\\n    large: false\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-badge \\n        [type]=\\"type\\" \\n        [mode]=\\"mode\\" \\n        [large]=\\"large\\"\\n      >\\n        3\\n      </tgui-badge>\\n    `,\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    mode: \'filled\',\\n    stretched: false,\\n    loading: false,\\n    disabled: false,\\n    interactiveAnimation: \'background\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-button \\n        [size]=\\"size\\" \\n        [mode]=\\"mode\\" \\n        [stretched]=\\"stretched\\" \\n        [loading]=\\"loading\\" \\n        [disabled]=\\"disabled\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n      >\\n        Button\\n      </tgui-button>\\n    `,\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <tgui-image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Sample image\'\\"></tgui-image>\\n    `\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Placeholder Title\',\\n    description: \'This is a description text for the placeholder component. It provides additional context.\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-placeholder \\n        [header]=\\"header\\" \\n        [description]=\\"description\\"\\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `<tgui-spinner [size]=\\"size\\"></tgui-spinner>`,\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    selectedIndex: 0\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"height: 500px; position: relative;\\">\\n        <p style=\\"padding: 20px;\\">Выбран таб с индексом: {{ selectedIndex }}</p>\\n        <tgui-tabbar [selectedIndex]=\\"selectedIndex\\" (selectedIndexChange)=\\"selectedIndex = $event\\">\\n          \\n         <tgui-tabbar-item text=\\"Devices\\">\\n            <tgui-icon28-devices></tgui-icon28-devices>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Chat\\">\\n            <tgui-icon28-chat></tgui-icon28-chat>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Stats\\">\\n             <tgui-icon28-stats></tgui-icon28-stats>\\n          </tgui-tabbar-item>\\n\\n        </tgui-tabbar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      lastEvent: signal<string>(\'No events yet\'),\\n      onStart(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Start - X: ${event.startX}, Y: ${event.startY}`);\\n      },\\n      onMove(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Move - Shift X: ${event.shiftX}, Shift Y: ${event.shiftY}`);\\n      },\\n      onEnd(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`End - Duration: ${event.duration}ms`);\\n      }\\n    },\\n    template: `\\n      <div style=\\"width: 100%; padding: 16px;\\">\\n        <h3>Touch Component Demo</h3>\\n        \\n        <div>\\n          <tgui-touch\\n            [usePointerHover]=\\"usePointerHover\\"\\n            [useCapture]=\\"useCapture\\"\\n            [slideThreshold]=\\"slideThreshold\\"\\n            [noSlideClick]=\\"noSlideClick\\"\\n            [stopPropagation]=\\"stopPropagation\\"\\n            (onStart)=\\"onStart($event)\\"\\n            (onMove)=\\"onMove($event)\\"\\n            (onEnd)=\\"onEnd($event)\\"\\n            style=\\"display: block; width: 100%; height: 200px; background-color: #f0f0f0; border-radius: 8px; display: flex; align-items: center; justify-content: center; user-select: none; touch-action: manipulation;\\"\\n          >\\n            <div style=\\"text-align: center;\\">\\n              Touch or swipe here\\n            </div>\\n          </tgui-touch>\\n        </div>\\n        \\n        <div style=\\"margin-top: 16px; padding: 8px; background-color: #eee; border-radius: 4px;\\">\\n          <strong>Last Event:</strong> {{ lastEvent() }}\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"CaptionInContext","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\\">\\n        <div style=\\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\\">\\n          <h4 style=\\"margin-bottom: 8px;\\">Chart Title</h4>\\n          <div style=\\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\\"></div>\\n          <tgui-caption level=\\"2\\">Chart data source: Example Dataset, 2023</tgui-caption>\\n        </div>\\n        \\n        <div style=\\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\\">\\n          <img style=\\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\\" />\\n          <tgui-caption level=\\"1\\">Photo by Example Photographer © 2023</tgui-caption>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"CellWithInfo","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    title: \'Noah\',\\n    subtitle: \'Yesterday\',\\n    subhead: \'Subhead\',\\n    hint: \'Hint\',\\n    description: \'Description\',\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      titleValue: args.title,\\n      subtitleValue: args.subtitle,\\n      subheadValue: args.subhead,\\n      hintValue: args.hint,\\n      descriptionValue: args.description\\n    },\\n    template: `\\n      <tgui-cell\\n        [title]=\\"titleValue\\"\\n        [subtitle]=\\"subtitleValue\\"\\n        [subhead]=\\"subheadValue\\"\\n        [hint]=\\"hintValue\\"\\n        [description]=\\"descriptionValue\\"\\n      >\\n        <tgui-avatar content-slot=\\"before\\" size=\\"l\\"></tgui-avatar>\\n        <div content-slot=\\"after\\" style=\\"text-align: right;\\">\\n          <div style=\\"color: var(--tgui--link_color); font-weight: 500\\">+1000</div>\\n          <div style=\\"color: var(--tgui--secondary_hinttint_color); font-size: 12px\\">Received</div>\\n        </div>\\n      </tgui-cell>\\n    `,\\n  })\\n}"},{"name":"config","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/.storybook/main.ts","deprecated":false,"deprecationMessage":"","type":"StorybookConfig","defaultValue":"{\\n  stories: [\\n    \'../src/**/*.mdx\',\\n    \'../src/**/*.stories.@(ts|mdx)\'\\n  ],\\n  addons: [\\n    \'@storybook/addon-essentials\',\\n    \'@storybook/addon-docs\',\\n    \'@storybook/addon-controls\',\\n  ],\\n  staticDirs: [\\n    { from: \'../src/lib/styles\', to: \'styles\' } // Без префикса assets/tgui\\n  ],\\n  framework: {\\n    name: \'@storybook/angular\',\\n    options: {\\n      enableIvy: true,\\n    },\\n  },\\n  core: {\\n    builder: \'@storybook/builder-webpack5\',\\n  },\\n  webpackFinal: async (config) => {\\n    config.resolve = {\\n      ...(config.resolve || {}),\\n      alias: {\\n        ...(config.resolve?.alias || {}),\\n        \'@components\': \'../src/lib/components\',\\n        \'@services\': \'../src/lib/services\',\\n        \'@utils\': \'../src/lib/components/utils\',\\n        \'@feedback\': \'../src/lib/components/feedback\',\\n        \'@blocks\': \'../src/lib/components/blocks\',\\n        \'@form\': \'../src/lib/components/form\',\\n        \'@layout\': \'../src/lib/components/layout\',\\n        \'@overlays\': \'../src/lib/components/overlays\',\\n        \'@typography\': \'../src/lib/components/typography\',\\n        \'@navigation\': \'../src/lib/components/navigation\',\\n        \'@directives\': \'../src/lib/directives\',\\n        \'@lib\': \'../src/lib\',\\n      },\\n    };\\n    return config;\\n  },\\n}"},{"name":"CustomBorderRadius","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    borderRadius: \'8px\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image with custom border radius\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Custom Border Radius\\"\\n          subtitle=\\"This card uses a custom border radius of 8px instead of the default 24px.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"CustomCloseIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\" [closeIcon]=\\"closeIcon\\">\\n        <div content-slot=\\"header\\">Banner with custom close icon</div>\\n        <div content-slot=\\"description\\">This banner has a custom close icon</div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n    closeIcon: \'tgui-icon24-qr\'\\n  },\\n}"},{"name":"CustomColors","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .color-container {\\n        display: flex;\\n        gap: 24px;\\n      }\\n      .color-item {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        padding: 16px;\\n        border-radius: 8px;\\n      }\\n      .color-item:nth-child(1) {\\n        color: var(--tgui--link_color);\\n      }\\n      .color-item:nth-child(2) {\\n        color: var(--tgui--destructive);\\n      }\\n      .color-item:nth-child(3) {\\n        color: #4CAF50;\\n      }\\n      .color-item:nth-child(4) {\\n        background: #333;\\n        color: white;\\n      }\\n      .color-label {\\n        margin-top: 8px;\\n        font-size: 14px;\\n      }\\n    `],\\n    template: `\\n      <div>\\n        <p style=\\"margin-bottom: 16px;\\">\\n          The spinner color is inherited from the parent container through the CSS <code>color</code> property.\\n        </p>\\n        \\n        <div class=\\"color-container\\">\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Primary</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Destructive</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Success</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Light</span>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"CustomOffsets","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 20px;\\">\\n        <div>\\n          <p>Большой отступ (-6px):</p>\\n          <tgui-avatar-stack [offset]=\\"-6\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n        \\n        <div>\\n          <p>Стандартный отступ (-12px):</p>\\n          <tgui-avatar-stack [offset]=\\"-12\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n        \\n        <div>\\n          <p>Маленький отступ (-18px):</p>\\n          <tgui-avatar-stack [offset]=\\"-18\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"CustomStyle","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Обычный разделитель</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Кастомный разделитель</div>\\n        <tgui-divider style=\\"border-color: var(--tgui--button_color); border-width: 2px;\\"></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент после разделителя</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'close\',\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент выше разделителя</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент ниже разделителя</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  }\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"header\\">This is a banner</div>\\n        <div content-slot=\\"description\\">Banner description that can span multiple lines and provide additional information about the banner content</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\">\\n        This is a blockquote with default styling.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px;\\">\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Card Title\\"\\n          subtitle=\\"Card description text would go here to provide more information about this card.\\">\\n          <div style=\\"margin-top: 10px; color: #707579;\\">\\n            Additional content can be added here\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    mode: \'bezeled\',\\n    disabled: false,\\n    interactiveAnimation: \'background\',\\n    type: \'button\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-icon-button\\n        [size]=\\"size\\"\\n        [mode]=\\"mode\\"\\n        [disabled]=\\"disabled\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n        [type]=\\"type\\"\\n      >\\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n      </tgui-icon-button>\\n    `\\n  })\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-list>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 1</div>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 2</div>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 3</div>\\n      </tgui-list>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Section Header\',\\n    footer: \'Section Footer\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"header\\" [footer]=\\"footer\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Basic section content</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <p>This is a spoiler content that can be hidden or shown with a click.</p>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'This example shows how to use the Popper component with a touch zone. The popper appears at the exact location where the user clicks or taps and automatically disappears after 3 seconds or when clicking outside of it.\'\\n      }\\n    }\\n  }\\n}"},{"name":"DescriptionOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        description=\\"This is a placeholder with only a description text and no header.\\"\\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"DifferentShapes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar shape=\\"circle\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n        <tgui-avatar shape=\\"rounded\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n        <tgui-avatar shape=\\"square\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"DifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar size=\\"xs\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"s\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"m\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"l\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"xl\\" initials=\\"JD\\"></tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"DifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 20px;\\">\\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n        \\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n        \\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"bezeled\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"plain\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"gray\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"outline\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-inline-buttons mode=\\"bezeled\\">\\n          <tgui-inline-buttons-item [text]=\\"\'Enabled\'\\">\\n            <tgui-icon24-chat></tgui-icon24-chat>\\n          </tgui-inline-buttons-item>\\n          <tgui-inline-buttons-item [disabled]=\\"true\\" [text]=\\"\'Disabled\'\\">\\n            <tgui-icon24-notifications></tgui-icon24-notifications>\\n          </tgui-inline-buttons-item>\\n          <tgui-inline-buttons-item [text]=\\"\'Enabled\'\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n          </tgui-inline-buttons-item>\\n        </tgui-inline-buttons>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Dots","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge type=\\"dot\\" mode=\\"primary\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"critical\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"secondary\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"gray\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"white\\"></tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"EmptyState","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    imports: [CommonModule, ButtonComponent],\\n    template: `\\n      <tgui-placeholder \\n        header=\\"No Items Found\\" \\n        description=\\"There are no items matching your search criteria. Try changing your search parameters or create a new item.\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n\\n        <tgui-button action [size]=\\"\'l\'\\" [mode]=\\"\'filled\'\\">Take Action</tgui-button>\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"FewSteps","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 3,\\n    progress: 1,\\n  },\\n}"},{"name":"HeaderOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Header Only Placeholder\\" \\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"Horizontal","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    ...Playground.args,\\n    horizontal: true\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      timelineItems\\n    },\\n    template: `\\n      <tgui-timeline [active]=\\"active\\" [horizontal]=\\"horizontal\\">\\n        <tgui-timeline-item \\n          *ngFor=\\"let item of timelineItems\\"\\n          [header]=\\"item.header\\"\\n        >\\n          {{item.content}}\\n        </tgui-timeline-item>\\n      </tgui-timeline>\\n    `\\n  })\\n}"},{"name":"HorizontalSwipe","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startX;\\n        },\\n        onMoveX(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-100, event.shiftX), 100);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Horizontal Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 100px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveX)=\\"onMoveX($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-y;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; top: 0; left: 50%; transform: translateX(-50%); width: 80px; height: 80px; margin: 10px; background-color: #2196F3; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateX(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the blue box left and right</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n}"},{"name":"InlineType","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"header\\">Inline banner</div>\\n        <div content-slot=\\"description\\">This banner uses the inline type</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'inline\',\\n  },\\n}"},{"name":"InList","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Первый элемент списка</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Второй элемент списка</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Третий элемент списка</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"IOSStyle","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    selectedIndex: 1\\n  },\\n  parameters: {\\n    platform: \'ios\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"height: 500px; position: relative;\\">\\n        <p style=\\"padding: 20px;\\">Выбран таб с индексом: {{ selectedIndex }}</p>\\n        <tgui-tabbar [selectedIndex]=\\"selectedIndex\\" (selectedIndexChange)=\\"selectedIndex = $event\\">\\n          \\n          <tgui-tabbar-item text=\\"Devices\\">\\n            <tgui-icon28-devices></tgui-icon28-devices>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Chat\\">\\n            <tgui-icon28-chat></tgui-icon28-chat>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Stats\\">\\n             <tgui-icon28-stats></tgui-icon28-stats>\\n          </tgui-tabbar-item>\\n          \\n        </tgui-tabbar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"ItemModes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Mixed Modes</h3>\\n          <tgui-inline-buttons mode=\\"plain\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Plain\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [mode]=\\"\'bezeled\'\\" [text]=\\"\'Bezeled\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [mode]=\\"\'gray\'\\" [text]=\\"\'Gray\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-caption level=\\"1\\" weight=\\"1\\">Caption Level 1 - Bold</tgui-caption>\\n        <tgui-caption level=\\"1\\" weight=\\"2\\">Caption Level 1 - Medium</tgui-caption>\\n        <tgui-caption level=\\"1\\" weight=\\"3\\">Caption Level 1 - Regular</tgui-caption>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-headline level=\\"1\\" weight=\\"1\\">Headline Level 1 - Bold (h5)</tgui-headline>\\n        <tgui-headline level=\\"1\\" weight=\\"2\\">Headline Level 1 - Medium (h5)</tgui-headline>\\n        <tgui-headline level=\\"1\\" weight=\\"3\\">Headline Level 1 - Regular (h5)</tgui-headline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-large-title level=\\"1\\" weight=\\"1\\">Large Title Level 1 - Bold</tgui-large-title>\\n        <tgui-large-title level=\\"1\\" weight=\\"2\\">Large Title Level 1 - Medium</tgui-large-title>\\n        <tgui-large-title level=\\"1\\" weight=\\"3\\">Large Title Level 1 - Regular</tgui-large-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-subheadline level=\\"1\\" weight=\\"1\\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"1\\" weight=\\"2\\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"1\\" weight=\\"3\\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-text level=\\"1\\" weight=\\"1\\">Text Level 1 - Bold</tgui-text>\\n        <tgui-text level=\\"1\\" weight=\\"2\\">Text Level 1 - Medium</tgui-text>\\n        <tgui-text level=\\"1\\" weight=\\"3\\">Text Level 1 - Regular</tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-caption level=\\"2\\" weight=\\"1\\">Caption Level 2 - Bold</tgui-caption>\\n        <tgui-caption level=\\"2\\" weight=\\"2\\">Caption Level 2 - Medium</tgui-caption>\\n        <tgui-caption level=\\"2\\" weight=\\"3\\">Caption Level 2 - Regular</tgui-caption>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-headline level=\\"2\\" weight=\\"1\\">Headline Level 2 - Bold (h5)</tgui-headline>\\n        <tgui-headline level=\\"2\\" weight=\\"2\\">Headline Level 2 - Medium (h5)</tgui-headline>\\n        <tgui-headline level=\\"2\\" weight=\\"3\\">Headline Level 2 - Regular (h5)</tgui-headline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-large-title level=\\"2\\" weight=\\"1\\">Large Title Level 2 - Bold</tgui-large-title>\\n        <tgui-large-title level=\\"2\\" weight=\\"2\\">Large Title Level 2 - Medium</tgui-large-title>\\n        <tgui-large-title level=\\"2\\" weight=\\"3\\">Large Title Level 2 - Regular</tgui-large-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-subheadline level=\\"2\\" weight=\\"1\\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"2\\" weight=\\"2\\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"2\\" weight=\\"3\\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-text level=\\"2\\" weight=\\"1\\">Text Level 2 - Bold</tgui-text>\\n        <tgui-text level=\\"2\\" weight=\\"2\\">Text Level 2 - Medium</tgui-text>\\n        <tgui-text level=\\"2\\" weight=\\"3\\">Text Level 2 - Regular</tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"LoadingStates","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png?text=Loading\'\\" [alt]=\\"\'Loading image\'\\"></tgui-image>\\n        \\n        <tgui-image [size]=\\"40\\" [alt]=\\"\'Failed image\'\\">\\n          <ng-template #fallbackIcon>\\n            <div style=\\"font-size: 18px;\\">❓</div>\\n          </ng-template>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"LongContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <div style=\\"max-width: 500px;\\">\\n          <h3>Hidden Information</h3>\\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum euismod, nunc eget aliquam ultricies, \\n          nunc nisl ultricies nunc, eget aliquet nunc nisl eget nunc. Vestibulum euismod, nunc eget aliquam ultricies, \\n          nunc nisl ultricies nunc, eget aliquet nunc nisl eget nunc.</p>\\n          <p>Click to toggle visibility.</p>\\n        </div>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"},{"name":"ManySteps","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 20,\\n    progress: 15,\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TguiDynamicIconComponent>","defaultValue":"{\\n  title: \'Icons/Dynamic Icon\',\\n  component: TguiDynamicIconComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TguiDynamicIconComponent],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    icon: {\\n      control: \'text\',\\n      description: \'Name of the icon to render\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconsShowcaseComponent>","defaultValue":"{\\n  title: \'Icons/Overview\',\\n  component: IconsShowcaseComponent,\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<DividerComponent>","defaultValue":"{\\n  title: \'Misc/Divider\',\\n  component: DividerComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [DividerComponent],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AccordionComponent>","defaultValue":"{\\n  title: \'Blocks/Accordion\',\\n  component: AccordionComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        AccordionComponent, \\n        AccordionSummaryComponent, \\n        AccordionContentComponent,\\n        SectionComponent,\\n        BlockquoteComponent\\n      ],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AvatarComponent>","defaultValue":"{\\n  title: \'Blocks/Avatar\',\\n  component: AvatarComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'xs\', \'s\', \'m\', \'l\', \'xl\'],\\n      control: { type: \'select\' },\\n      description: \'Размер аватара\',\\n      defaultValue: \'m\',\\n    },\\n    shape: {\\n      options: [\'circle\', \'rounded\', \'square\'],\\n      control: { type: \'select\' },\\n      description: \'Форма аватара\',\\n      defaultValue: \'circle\',\\n    },\\n    src: {\\n      control: \'text\',\\n      description: \'URL изображения аватара\',\\n    },\\n    initials: {\\n      control: \'text\',\\n      description: \'Текст для формирования инициалов, если изображение отсутствует\',\\n    },\\n    color: {\\n      control: \'color\',\\n      description: \'Цвет фона для аватара с инициалами\',\\n    },\\n    online: {\\n      control: \'boolean\',\\n      description: \'Индикатор онлайн-статуса\',\\n      defaultValue: false,\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AvatarStackComponent>","defaultValue":"{\\n  title: \'Blocks/AvatarStack\',\\n  component: AvatarStackComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [AvatarComponent],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    offset: {\\n      control: { type: \'range\', min: -24, max: 0, step: 1 },\\n      defaultValue: -12,\\n      description: \'Смещение между аватарами в пикселях\'\\n    }\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BadgeComponent>","defaultValue":"{\\n  title: \'Blocks/Badge\',\\n  component: BadgeComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [],\\n  argTypes: {\\n    type: {\\n      options: [\'number\', \'dot\'],\\n      control: { type: \'select\' },\\n      description: \'Badge type\',\\n      defaultValue: \'number\',\\n    },\\n    mode: {\\n      options: [\'primary\', \'critical\', \'secondary\', \'gray\', \'white\'],\\n      control: { type: \'select\' },\\n      description: \'Badge color mode\',\\n      defaultValue: \'primary\',\\n    },\\n    large: {\\n      control: \'boolean\',\\n      description: \'Increases badge size (for number type only)\',\\n      defaultValue: false,\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BannerComponent>","defaultValue":"{\\n  title: \'Blocks/Banner\',\\n  component: BannerComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [BannerComponent, ButtonComponent, TguiIcon24Qr, ContentSlotDirective],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n  argTypes: {\\n    type: {\\n      options: [\'section\', \'inline\'],\\n      control: { type: \'select\' },\\n      description: \'Specifies the banner\\\\\'s layout style\',\\n      table: {\\n        defaultValue: { summary: \'section\' },\\n      },\\n    },\\n    onCloseIcon: { \\n      action: \'onCloseIcon\' \\n    },\\n    closeIcon: {\\n      control: \'text\',\\n      description: \'Custom close icon name to display\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BlockquoteComponent>","defaultValue":"{\\n  title: \'Blocks/Blockquote\',\\n  component: BlockquoteComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        BlockquoteComponent, \\n        TextComponent,\\n        TguiDynamicIconComponent\\n      ]\\n    })\\n  ],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    icon: {\\n      control: \'text\',\\n      description: \'The icon to display in the top right corner\'\\n    },\\n    text: {\\n      control: \'text\',\\n      description: \'Optional text to display as a headline above the content\'\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonComponent>","defaultValue":"{\\n  title: \'Blocks/Button\',\\n  component: ButtonComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Button size\',\\n      defaultValue: \'m\',\\n    },\\n    mode: {\\n      options: [\'filled\', \'bezeled\', \'plain\', \'gray\', \'outline\', \'white\'],\\n      control: { type: \'select\' },\\n      description: \'Button display variant\',\\n      defaultValue: \'filled\',\\n    },\\n    stretched: {\\n      control: \'boolean\',\\n      description: \'Stretch button to full width\',\\n      defaultValue: false,\\n    },\\n    loading: {\\n      control: \'boolean\',\\n      description: \'Show loading indicator\',\\n      defaultValue: false,\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disabled state\',\\n      defaultValue: false,\\n    },\\n    interactiveAnimation: {\\n      options: [\'opacity\', \'background\'],\\n      control: { type: \'radio\' },\\n      description: \'Type of interaction animation\',\\n      defaultValue: \'background\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CardComponent>","defaultValue":"{\\n  title: \'Blocks/Card\',\\n  component: CardComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    type: {\\n      options: [\'plain\', \'ambient\'],\\n      control: { type: \'radio\' },\\n      description: \'Defines the visual style of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'plain\' },\\n      },\\n    },\\n    borderRadius: {\\n      control: { type: \'text\' },\\n      description: \'Defines the border radius of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'24px\' },\\n      },\\n    },\\n    image: {\\n      control: { type: \'text\' },\\n      description: \'URL of the image to display at the top of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'undefined\' },\\n      },\\n    },\\n    imageHeight: {\\n      control: { type: \'text\' },\\n      description: \'Height of the image section\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'200px\' },\\n      },\\n    }\\n  },\\n  args: {\\n    type: \'plain\',\\n    borderRadius: \'24px\',\\n    imageHeight: \'200px\'\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CellComponent>","defaultValue":"{\\n  title: \'Blocks/Cell\',\\n  component: CellComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, BadgeComponent, AvatarComponent, ContentSlotDirective],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    hovered: {\\n      control: \'boolean\',\\n      description: \'Controls the hover state of the component externally, useful for keyboard navigation\',\\n    },\\n    multiline: {\\n      control: \'boolean\',\\n      description: \'Allows for multiline content without truncation\',\\n    },\\n    interactiveAnimation: {\\n      control: { type: \'select\', options: [\'opacity\', \'background\'] },\\n      description: \'Type of animation for interaction feedback\',\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disables the cell\',\\n    },\\n    readonly: {\\n      control: \'boolean\',\\n      description: \'Makes the cell readonly\',\\n    },\\n    subhead: {\\n      control: \'text\',\\n      description: \'Content displayed above the main content as a subheading\',\\n    },\\n    title: {\\n      control: \'text\',\\n      description: \'Main content displayed as a header\',\\n    },\\n    hint: {\\n      control: \'text\',\\n      description: \'Content displayed alongside the header as a hint\',\\n    },\\n    subtitle: {\\n      control: \'text\',\\n      description: \'Content displayed below the header as a subtitle\',\\n    },\\n    description: {\\n      control: \'text\',\\n      description: \'Additional description displayed below the subtitle\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconButtonComponent>","defaultValue":"{\\n  title: \'Blocks/IconButton\',\\n  component: IconButtonComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, TappableComponent, TguiIcon20QuestionMark, TguiIcon24Notifications, TguiIcon28Chat],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Size of the icon button\',\\n      table: {\\n        type: { summary: \'s | m | l\' },\\n        defaultValue: { summary: \'m\' }\\n      }\\n    },\\n    mode: {\\n      options: [\'bezeled\', \'plain\', \'gray\', \'outline\'],\\n      control: { type: \'select\' },\\n      description: \'Visual style of the button\',\\n      table: {\\n        type: { summary: \'bezeled | plain | gray | outline\' },\\n        defaultValue: { summary: \'bezeled\' }\\n      }\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Whether the button is disabled\',\\n      table: {\\n        type: { summary: \'boolean\' },\\n        defaultValue: { summary: \'false\' }\\n      }\\n    },\\n    interactiveAnimation: {\\n      options: [\'opacity\', \'background\'],\\n      control: { type: \'select\' },\\n      description: \'Type of animation on interaction\',\\n      table: {\\n        type: { summary: \'opacity | background\' },\\n        defaultValue: { summary: \'background\' }\\n      }\\n    },\\n    type: {\\n      options: [\'button\', \'submit\', \'reset\'],\\n      control: { type: \'select\' },\\n      description: \'HTML button type\',\\n      table: {\\n        type: { summary: \'button | submit | reset\' },\\n        defaultValue: { summary: \'button\' }\\n      }\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: \'The IconButton component is designed for icon-only buttons. It supports different sizes and visual styles.\'\\n      }\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconContainerComponent>","defaultValue":"{\\n  title: \'Blocks/IconContainer\',\\n  component: IconContainerComponent,\\n  tags: [\'autodocs\'],\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-icon-container>\\n        <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <path d=\\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\\" fill=\\"currentColor\\" />\\n        </svg>\\n      </tgui-icon-container>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<InlineButtonsComponent>","defaultValue":"{\\n  title: \'Blocks/InlineButtons\',\\n  component: InlineButtonsComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        InlineButtonsItemComponent,\\n        TappableComponent,\\n        TguiIcon24Chat,\\n        TguiIcon24Notifications,\\n        TguiIcon24Qr\\n      ],\\n    }),\\n  ],\\n  argTypes: {\\n    mode: {\\n      options: [\'plain\', \'bezeled\', \'gray\'],\\n      control: { type: \'select\' },\\n      description: \'Visual style of the buttons\',\\n      table: {\\n        type: { summary: \'plain | bezeled | gray\' },\\n        defaultValue: { summary: \'plain\' }\\n      }\\n    }\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'The InlineButtons component is a container for multiple inline button items, providing a consistent styling and layout. It is commonly used for action bars or tool strips.\'\\n      }\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ListComponent>","defaultValue":"{\\n  title: \'Blocks/List\',\\n  component: ListComponent,\\n  tags: [\'autodocs\'],\\n  argTypes: {},\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PlaceholderComponent>","defaultValue":"{\\n  title: \'Blocks/Placeholder\',\\n  component: PlaceholderComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [ButtonComponent, ImageComponent],\\n    }),\\n  ],  \\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    header: {\\n      control: \'text\',\\n      description: \'The primary text, usually a title or a header, for the placeholder\',\\n    },\\n    description: {\\n      control: \'text\',\\n      description: \'Additional descriptive text to provide more details or context\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SectionComponent>","defaultValue":"{\\n  title: \'Blocks/Section\',\\n  component: SectionComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        SectionComponent,\\n        SectionHeaderComponent,\\n        SectionFooterComponent,\\n        TextComponent,\\n        DividerComponent\\n      ],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<StepsComponent>","defaultValue":"{\\n  title: \'Blocks/Steps\',\\n  component: StepsComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [StepsComponent]\\n    })\\n  ],\\n  tags: [\'autodocs\'],\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TimelineComponent>","defaultValue":"{\\n  title: \'Blocks/Timeline\',\\n  component: TimelineComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TimelineComponent, TimelineItemComponent]\\n    })\\n  ]\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SnackbarComponent>","defaultValue":"{\\n  title: \'Feedback/Snackbar\',\\n  component: SnackbarComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        SnackbarComponent,\\n        SnackbarButtonComponent,\\n        RootPortalComponent,\\n        TappableComponent,\\n        RootComponent,\\n        ButtonComponent,\\n        DemoSnackbarComponent\\n      ],\\n      providers: [PlatformService]\\n    })\\n  ],\\n  parameters: {\\n    layout: \'fullscreen\'\\n  },\\n  argTypes: {\\n    description: {\\n      control: \'text\',\\n      description: \'Additional text description shown below the main message\'\\n    },\\n    duration: {\\n      control: {\\n        type: \'number\',\\n        min: 1000,\\n        max: 10000,\\n        step: 1000\\n      },\\n      description: \'Duration in milliseconds before the snackbar is automatically closed\'\\n    },\\n    beforeTemplate: { control: false },\\n    afterTemplate: { control: false },\\n    linkTemplate: { control: false },\\n    onClose: { control: false }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SpinnerComponent>","defaultValue":"{\\n  title: \'Feedback/Spinner\',\\n  component: SpinnerComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, SpinnerComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Loading indicator size\',\\n      defaultValue: \'m\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<FixedLayoutComponent>","defaultValue":"{\\n  title: \'Layout/FixedLayout\',\\n  component: FixedLayoutComponent,\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    vertical: {\\n      control: \'radio\',\\n      options: [\'top\', \'bottom\'],\\n      description: \'Vertical position of the layout\',\\n      defaultValue: \'bottom\',\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TabbarComponent>","defaultValue":"{\\n  title: \'Layout/Tabbar\',\\n  component: TabbarComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TabbarComponent, TabbarItemComponent, TguiIcon28Devices, TguiIcon28Chat, TguiIcon28Stats],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'fullscreen\',\\n  },\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    selectedIndex: { \\n      control: { type: \'number\', min: 0, max: 2, step: 1 },\\n      description: \'Index of the currently selected tab\',\\n      defaultValue: 0\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PopperDemoComponent>","defaultValue":"{\\n  title: \'Components/Overlays/Popper\',\\n  component: PopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, ButtonComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'bottom\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    offsetByCrossAxis: {\\n      control: { type: \'number\', min: -32, max: 32, step: 2 },\\n      description: \'Offset along the cross axis (in pixels)\',\\n      defaultValue: 0,\\n    },\\n    sameWidth: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should have the same width as the target element\',\\n      defaultValue: false,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    },\\n    hide: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should hide when there is no space for it\',\\n      defaultValue: false,\\n    },\\n    autoPlacement: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should auto-place in the available space\',\\n      defaultValue: false,\\n    },\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Popper component provides a way to position floating elements relative to a reference element.\'\\n      }\\n    }\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TouchPopperDemoComponent>","defaultValue":"{\\n  title: \'Components/Overlays/Popper/Touch\',\\n  component: TouchPopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, TouchComponent, CommonModule],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'top\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    }\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Interactive Touch Popper shows how to display a popper at the exact location where a user touches or clicks on the screen.\'\\n      }\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CaptionComponent>","defaultValue":"{\\n  title: \'Typography/Caption\',\\n  component: CaptionComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CaptionComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the caption\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is span)\',\\n      defaultValue: \'span\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<HeadlineComponent>","defaultValue":"{\\n  title: \'Typography/Headline\',\\n  component: HeadlineComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [HeadlineComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the headline\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h5)\',\\n      defaultValue: \'h5\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<LargeTitleComponent>","defaultValue":"{\\n  title: \'Typography/LargeTitle\',\\n  component: LargeTitleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [LargeTitleComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the large title\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h1)\',\\n      defaultValue: \'h1\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SubheadlineComponent>","defaultValue":"{\\n  title: \'Typography/Subheadline\',\\n  component: SubheadlineComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [SubheadlineComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the subheadline\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h6)\',\\n      defaultValue: \'h6\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TextComponent>","defaultValue":"{\\n  title: \'Typography/Text\',\\n  component: TextComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TextComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the text\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is span)\',\\n      defaultValue: \'span\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TitleComponent>","defaultValue":"{\\n  title: \'Typography/Title\',\\n  component: TitleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TitleComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the title, determines size and semantic tag (h2, h3, h4)\',\\n      defaultValue: \'2\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, defaults based on level)\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TouchComponent>","defaultValue":"{\\n  title: \'Utils/Touch\',\\n  component: TouchComponent,\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    usePointerHover: {\\n      control: \'boolean\',\\n      description: \'Use pointer events for hover instead of mouse events\',\\n      defaultValue: false\\n    },\\n    useCapture: {\\n      control: \'boolean\',\\n      description: \'Use capture phase for events\',\\n      defaultValue: false\\n    },\\n    slideThreshold: {\\n      control: { type: \'number\', min: 1, max: 50 },\\n      description: \'Threshold in pixels before a touch is considered a slide\',\\n      defaultValue: 5\\n    },\\n    noSlideClick: {\\n      control: \'boolean\',\\n      description: \'Prevent clicks after a slide is detected\',\\n      defaultValue: false\\n    },\\n    stopPropagation: {\\n      control: \'boolean\',\\n      description: \'Stop event propagation\',\\n      defaultValue: false\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: `\\nA component for handling touch and gesture events.\\nThis component helps in handling swipe gestures and detecting various touch interactions.\\nIt\'s especially useful for implementing custom touch behaviors like swipeable lists, carousels, etc.\\n        `\\n      }\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TimelineItemComponent>","defaultValue":"{\\n  title: \'Blocks/Timeline/Timeline Item\',\\n  component: TimelineItemComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TimelineItemComponent]\\n    })\\n  ]\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonCellComponent>","defaultValue":"{\\n  title: \'Blocks/Cell/ButtonCell\',\\n  component: ButtonCellComponent,\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        TguiIcon28AddCircle,\\n        SectionComponent,\\n        CellComponent,\\n        ContentSlotDirective,\\n        TguiIcon32ProfileColoredSquare,\\n        ListComponent\\n      ],\\n    }),\\n  ],\\n  argTypes: {\\n    mode: {\\n      control: { type: \'select\', options: [\'default\', \'destructive\'] },\\n      description: \'Determines the button cell\\\\\'s visual theme\',\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disables button interaction\',\\n    }\\n  }\\n}","rawdescription":"The ButtonCell component is an interactive cell component that combines\\nthe flexibility of a cell with button-like interaction behavior.","description":"<p>The ButtonCell component is an interactive cell component that combines\\nthe flexibility of a cell with button-like interaction behavior.</p>\\n"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<RippleComponent>","defaultValue":"{\\n  title: \'Utils/Ripple\',\\n  component: RippleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, RippleComponent],\\n    }),\\n  ],\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge mode=\\"primary\\">1</tgui-badge>\\n        <tgui-badge mode=\\"critical\\">2</tgui-badge>\\n        <tgui-badge mode=\\"secondary\\">3</tgui-badge>\\n        <tgui-badge mode=\\"gray\\">4</tgui-badge>\\n        <tgui-badge mode=\\"white\\">5</tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px;\\">\\n        <tgui-button mode=\\"filled\\">Filled</tgui-button>\\n        <tgui-button mode=\\"bezeled\\">Bezeled</tgui-button>\\n        <tgui-button mode=\\"plain\\">Plain</tgui-button>\\n        <tgui-button mode=\\"gray\\">Gray</tgui-button>\\n        <tgui-button mode=\\"outline\\">Outline</tgui-button>\\n        <tgui-button mode=\\"white\\">White</tgui-button>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n      \\n        <tgui-icon-button mode=\\"bezeled\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"plain\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"gray\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"outline\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Plain Mode</h3>\\n          <tgui-inline-buttons mode=\\"plain\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Bezeled Mode</h3>\\n          <tgui-inline-buttons mode=\\"bezeled\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Gray Mode</h3>\\n          <tgui-inline-buttons mode=\\"gray\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Multiple","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n    <tgui-list>\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"\'Account Settings\'\\">\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Username\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Phone Number\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Email\\n          </tgui-button-cell>\\n        </tgui-section>\\n\\n        <tgui-section [header]=\\"\'Privacy & Security\'\\" style=\\"margin-top: 16px;\\">\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Privacy Settings\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Security Settings\\n          </tgui-button-cell>\\n          <tgui-button-cell [mode]=\\"\'destructive\'\\">\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Delete Account\\n          </tgui-button-cell>\\n        </tgui-section>\\n      </div>\\n    </tgui-list>\\n    `\\n  })\\n}"},{"name":"MultipleAccordions","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      accordion1: false,\\n      accordion2: false,\\n      accordion3: false,\\n      nestedAccordion: false,\\n      \\n      toggleAccordion1: function() {\\n        this[\'accordion1\'] = !this[\'accordion1\'];\\n      },\\n      toggleAccordion2: function() {\\n        this[\'accordion2\'] = !this[\'accordion2\'];\\n      },\\n      toggleAccordion3: function() {\\n        this[\'accordion3\'] = !this[\'accordion3\'];\\n      },\\n      toggleNestedAccordion: function() {\\n        this[\'nestedAccordion\'] = !this[\'nestedAccordion\'];\\n      }\\n    },\\n    template: `\\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px; margin-bottom: 20px;\\">\\n        <div style=\\"padding: 16px;\\">\\n            <tgui-text>Basic section content</tgui-text>\\n          </div>\\n        <tgui-accordion [expanded]=\\"accordion1\\" (expandedChange)=\\"toggleAccordion1()\\" style=\\"margin-bottom: 8px\\">\\n          <tgui-accordion-summary>\\n            First accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the first accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n        \\n        <tgui-accordion [expanded]=\\"accordion2\\" (expandedChange)=\\"toggleAccordion2()\\" style=\\"margin-bottom: 8px\\">\\n          <tgui-accordion-summary>\\n            Second accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the second accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n        \\n        <tgui-accordion [expanded]=\\"accordion3\\" (expandedChange)=\\"toggleAccordion3()\\">\\n          <tgui-accordion-summary>\\n            Third accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the third accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n      \\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px;\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Multiple accordions</tgui-text>\\n          </div>        \\n        <tgui-accordion>\\n          <tgui-accordion-summary>\\n            Parent accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the parent accordion.</p>\\n              \\n              <tgui-accordion  style=\\"margin-top: 16px\\">\\n                <tgui-accordion-summary>\\n                  Nested accordion\\n                </tgui-accordion-summary>\\n                <tgui-accordion-content>\\n                  <div style=\\"padding: 10px 20px 20px;\\">\\n                    <p>This is the content of the nested accordion.</p>\\n                    <p>The chevron icon should only respond to its direct parent accordion state.</p>\\n                  </div>\\n                </tgui-accordion-content>\\n              </tgui-accordion>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n    `\\n  })\\n}"},{"name":"MultipleExamples","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-blockquote icon=\\"quote\\" text=\\"Simple example with text\\">\\n          Basic blockquote with text headline and default quote icon.\\n        </tgui-blockquote>\\n        \\n        <tgui-blockquote icon=\\"chevron\\">\\n          Blockquote with only content and custom chevron icon.\\n        </tgui-blockquote>\\n        \\n        <tgui-blockquote icon=\\"quote\\" text=\\"Complex content example\\">\\n          <div style=\\"padding: 4px 0;\\">\\n            <strong>HTML content</strong>\\n            <p style=\\"margin: 4px 0 0 0;\\">With formatted elements</p>\\n          </div>\\n        </tgui-blockquote>\\n      </div>\\n    `\\n  })\\n}"},{"name":"MultipleItems","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Multiple Items\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"header\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>First section item</tgui-text>\\n          </div>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Second section item</tgui-text>\\n          </div>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Third section item</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Overview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n}"},{"name":"Paragraph","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 600px;\\">\\n        <tgui-text>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\\n        </tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"PlatformSpecific","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .platform-demo {\\n        display: flex;\\n        flex-direction: column;\\n        gap: 32px;\\n      }\\n      .platform-container {\\n        padding: 24px;\\n        border-radius: 8px;\\n        background-color: var(--tgui--secondary_fill);\\n      }\\n      .platform-title {\\n        font-size: 16px;\\n        font-weight: 500;\\n        margin-bottom: 16px;\\n      }\\n      .platform-spinners {\\n        display: flex;\\n        gap: 24px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"platform-demo\\">\\n        <div>\\n          <p>\\n            The Spinner component automatically adapts to the current platform.\\n            On iOS, it displays a circular indicator with solid fill, on Android/Web - a circular progress.\\n          </p>\\n        </div>\\n        \\n        <div class=\\"platform-container\\">\\n          <div class=\\"platform-title\\">iOS Spinner (example)</div>\\n          <div class=\\"platform-spinners\\">\\n            <tgui-spinner size=\\"s\\" class=\\"platform-ios\\"></tgui-spinner>\\n            <tgui-spinner size=\\"m\\" class=\\"platform-ios\\"></tgui-spinner>\\n            <tgui-spinner size=\\"l\\" class=\\"platform-ios\\"></tgui-spinner>\\n          </div>\\n        </div>\\n        \\n        <div class=\\"platform-container\\">\\n          <div class=\\"platform-title\\">Android/Web Spinner (example)</div>\\n          <div class=\\"platform-spinners\\">\\n            <tgui-spinner size=\\"s\\"></tgui-spinner>\\n            <tgui-spinner size=\\"m\\"></tgui-spinner>\\n            <tgui-spinner size=\\"l\\"></tgui-spinner>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      expanded: false,\\n      toggleExpanded: function() {\\n        this[\'expanded\'] = !this[\'expanded\'];\\n      },\\n    },\\n    template: `\\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px; width: 358px;\\">\\n        <tgui-accordion [expanded]=\\"expanded\\" (expandedChange)=\\"toggleExpanded()\\">\\n          <tgui-accordion-summary>\\n            History of accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <tgui-blockquote>\\n                The accordion\'s basic form is believed to have been invented in Berlin, in 1822,\\n                by Christian Friedrich Ludwig Buschmann, although one instrument was discovered in 2006\\n                that appears to have been built earlier. The earliest history of the accordion in Russia is poorly documented.\\n              </tgui-blockquote>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n    `\\n  }),\\n  args: {\\n    expanded: false\\n  }\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 8px;\\">\\n        <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\" [closeIcon]=\\"closeIcon\\">\\n          <div content-slot=\\"before\\" style=\\"width: 48px; height: 48px; background: #eaeaea; border-radius: 8px; display: flex; align-items: center; justify-content: center;\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n          </div>\\n          <div content-slot=\\"callout\\">Urgent notification</div>\\n          <div content-slot=\\"header\\">Introducing TON Space</div>\\n          <div content-slot=\\"description\\">Start exploring TON in a new, better way</div>\\n          <div content-slot=\\"buttons\\">\\n            <tgui-button size=\\"s\\">Try it out</tgui-button>\\n            <tgui-button size=\\"s\\" mode=\\"plain\\">Maybe later</tgui-button>\\n          </div>\\n        </tgui-banner>\\n      </div>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    subhead: \'Subhead\',\\n    title: \'Title\',\\n    subtitle: \'Subtitle\',\\n    description: \'Description\',\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      titleValue: args.title,\\n      subheadValue: args.subhead,\\n      subtitleValue: args.subtitle,\\n      descriptionValue: args.description\\n    },\\n    template: `\\n      <tgui-cell \\n        [hovered]=\\"hovered\\"\\n        [multiline]=\\"multiline\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n        [disabled]=\\"disabled\\"\\n        [readonly]=\\"readonly\\"\\n        [subhead]=\\"subheadValue\\"\\n        [title]=\\"titleValue\\"\\n        [subtitle]=\\"subtitleValue\\"\\n        [description]=\\"descriptionValue\\"\\n      >\\n        <tgui-badge content-slot=\\"title-badge\\" type=\\"dot\\"></tgui-badge>\\n        <tgui-avatar content-slot=\\"before\\" size=\\"l\\"></tgui-avatar>\\n        <tgui-badge content-slot=\\"after\\" type=\\"number\\">99</tgui-badge>\\n      </tgui-cell>\\n    `,\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    mode: \'plain\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-inline-buttons [mode]=\\"mode\\">\\n        <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n            <tgui-icon24-chat></tgui-icon24-chat>\\n        </tgui-inline-buttons-item>\\n        <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n            <tgui-icon24-notifications></tgui-icon24-notifications>\\n        </tgui-inline-buttons-item>\\n        <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n        </tgui-inline-buttons-item>\\n      </tgui-inline-buttons>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 10,\\n    progress: 5,\\n  },\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    active: 2\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      timelineItems\\n    },\\n    template: `\\n      <tgui-timeline [active]=\\"active\\">\\n        <tgui-timeline-item \\n          *ngFor=\\"let item of timelineItems\\"\\n          [header]=\\"item.header\\"\\n        >\\n          {{item.content}}\\n        </tgui-timeline-item>\\n      </tgui-timeline>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  parameters: {\\n    controls: { hideNoControlsWarning: true }\\n  },\\n  render: () => ({\\n    template: `<demo-snackbar></demo-snackbar>`\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"height: 200px; width: 300px; \\">\\n        <tgui-fixed-layout vertical=\\"top\\" style=\\"padding: 16px;\\">\\n          <tgui-button size=\\"l\\" [stretched]=\\"true\\">\\n            This is FixedLayout with top vertical\\n          </tgui-button>\\n        </tgui-fixed-layout>\\n        \\n        <tgui-fixed-layout style=\\"padding: 16px;\\">\\n          <tgui-button size=\\"l\\" [stretched]=\\"true\\">\\n            This is FixedLayout with default vertical\\n          </tgui-button>\\n        </tgui-fixed-layout>\\n      </div>\\n    `,\\n    moduleMetadata: {\\n      imports: [FixedLayoutComponent, ButtonComponent]\\n    }\\n  }),\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'It\\\\\'s my header = header prop\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-timeline-item [header]=\\"header\\">\\n        It\'s my description = content projection\\n      </tgui-timeline-item>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    mode: \'default\',\\n    disabled: false\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      modeValue: args.mode,\\n      disabledValue: args.disabled\\n    },\\n    template: `\\n    <tgui-list>\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-cell\\n            [title]=\\"\'My Ads\'\\"\\n            [subtitle]=\\"\'Manage ads and payment settings\'\\"\\n          >\\n            <tgui-icon32-profile-colored-square content-slot=\\"before\\"></tgui-icon32-profile-colored-square>\\n          </tgui-cell>\\n          <tgui-button-cell\\n            [mode]=\\"modeValue\\"\\n            [disabled]=\\"disabledValue\\"\\n          >\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Create Ad\\n          </tgui-button-cell>\\n        </tgui-section>\\n      </div>\\n    </tgui-list>\\n    `\\n  })\\n}"},{"name":"PopperWithCloseButton","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"CloseButtonStory","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    component: PopperWithCloseButtonDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper with a close button inside and click-outside functionality to dismiss it.\'\\n      }\\n    }\\n  }\\n}"},{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, RootComponent],\\n      providers: [\\n        ThemeService, \\n        PlatformService, \\n        PortalService,\\n        TelegramService,\\n        {\\n          provide: TGUI_CONFIG,\\n          useValue: {\\n            platform: \'base\',\\n            appearance: \'light\',\\n            followSystemTheme: false\\n          }\\n        },\\n      ],\\n    }),\\n    \\n    componentWrapperDecorator(\\n      story => `<tgui-root [appearance]=\\"appearance\\" [platform]=\\"platform\\"><div style=\\"background-color: var(--tgui--bg_color); padding: 3rem;\\">${story}</div></tgui-root>`,\\n      ({globals: {theme, platform}}) => ({\\n        appearance: theme,\\n        platform: platform\\n      })\\n    )\\n  ],\\n  parameters: {\\n    controls: {\\n      matchers: {\\n        color: /(background|color)$/i,\\n        date: /Date$/i,\\n      },\\n    },\\n  },\\nglobalTypes: {\\n    platform: {\\n      name: \'Platform\',\\n      description: \'Platform for components\',\\n      defaultValue: \'base\',\\n      toolbar: {\\n        icon: \'mobile\',\\n        items: [\'base\', \'ios\'],\\n        title: \'Platform\',\\n        dynamicTitle: true,\\n      },\\n    },\\n    theme: {\\n      description: \'Global theme for components\',\\n      defaultValue: \'light\',\\n      toolbar: {\\n        title: \'Theme\',\\n        icon: \'circlehollow\',\\n        items: [\'light\', \'dark\'],\\n        dynamicTitle: true,\\n      },\\n    },\\n  },\\n}"},{"name":"Preview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .ripple-demo {\\n        position: relative;\\n        width: 200px;\\n        height: 200px;\\n        background-color: var(--tgui--secondary_fill);\\n        border-radius: 8px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        margin-bottom: 16px;\\n      }\\n      \\n      .ripple-demo::after {\\n        content: \'Click for demonstration\';\\n        position: relative;\\n        z-index: 1;\\n      }\\n      \\n      .description {\\n        max-width: 600px;\\n        margin-bottom: 16px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"description\\">\\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\\n           This effect is automatically used in the Button component with interactiveAnimation=\\"background\\" value.</p>\\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\\n      </div>\\n      \\n      <div #container class=\\"ripple-demo\\" (click)=\\"addRipple($event)\\">\\n        <tgui-ripple [waves]=\\"waves\\"></tgui-ripple>\\n      </div>\\n    `,\\n    props: {\\n      waves: [] as RippleWave[],\\n      addRipple: function(event: MouseEvent) {\\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\\n        const x = event.clientX - rect.left;\\n        const y = event.clientY - rect.top;\\n        \\n        const newWave: RippleWave = {\\n          x,\\n          y,\\n          date: Date.now(),\\n          pointerId: Date.now() // use timestamp as a unique ID\\n        };\\n        \\n        this[\'waves\'] = [...this[\'waves\'], newWave];\\n        \\n        // Clear the wave after animation completes\\n        setTimeout(() => {\\n          this[\'waves\'] = this[\'waves\'].filter((wave: RippleWave) => wave.date !== newWave.date);\\n        }, 300);\\n      }\\n    } as RippleDemoProps\\n  }),\\n}"},{"name":"RippleEffects","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <div style=\\"margin-bottom: 8px;\\">\\n          <strong>Ripple effect (background)</strong>\\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\\n        </div>\\n        <div style=\\"display: flex; gap: 16px;\\">\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"filled\\">Background Ripple</tgui-button>\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"bezeled\\">Background Ripple</tgui-button>\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"plain\\">Background Ripple</tgui-button>\\n        </div>\\n        \\n        <div style=\\"margin: 16px 0 8px 0;\\">\\n          <strong>Without ripple (opacity)</strong>\\n        </div>\\n        <div style=\\"display: flex; gap: 16px;\\">\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"filled\\">Opacity Effect</tgui-button>\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"bezeled\\">Opacity Effect</tgui-button>\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"plain\\">Opacity Effect</tgui-button>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge [large]=\\"false\\">1</tgui-badge>\\n        <tgui-badge [large]=\\"true\\">99</tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-button size=\\"s\\">Small</tgui-button>\\n        <tgui-button size=\\"m\\">Medium</tgui-button>\\n        <tgui-button size=\\"l\\">Large</tgui-button>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-icon-button size=\\"s\\">\\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button size=\\"m\\">\\n        <tgui-icon24-notifications></tgui-icon24-notifications>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button size=\\"l\\">\\n        <tgui-icon28-chat></tgui-icon28-chat>\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: flex-end;\\">\\n        <tgui-image [size]=\\"20\\" [src]=\\"\'https://placehold.co/20x20/png\'\\" [alt]=\\"\'Size 20\'\\"></tgui-image>\\n        <tgui-image [size]=\\"24\\" [src]=\\"\'https://placehold.co/24x24/png\'\\" [alt]=\\"\'Size 24\'\\"></tgui-image>\\n        <tgui-image [size]=\\"28\\" [src]=\\"\'https://placehold.co/28x28/png\'\\" [alt]=\\"\'Size 28\'\\"></tgui-image>\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Size 40\'\\"></tgui-image>\\n        <tgui-image [size]=\\"48\\" [src]=\\"\'https://placehold.co/48x48/png\'\\" [alt]=\\"\'Size 48\'\\"></tgui-image>\\n        <tgui-image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .spinner-container {\\n        display: flex;\\n        gap: 24px;\\n        align-items: center;\\n      }\\n      .spinner-item {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        gap: 8px;\\n      }\\n      .spinner-label {\\n        font-size: 14px;\\n        margin-top: 8px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"spinner-container\\">\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"s\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Small (s)</span>\\n        </div>\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"m\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Medium (m)</span>\\n        </div>\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"l\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Large (l)</span>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"States","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <div>\\n          <tgui-button [loading]=\\"true\\">Loading</tgui-button>\\n        </div>\\n        <div>\\n          <tgui-button [disabled]=\\"true\\">Disabled</tgui-button>\\n        </div>\\n        <div style=\\"width: 100%;\\">\\n          <tgui-button [stretched]=\\"true\\">Stretched button</tgui-button>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"TGUI_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<{\\n  platform?: PlatformType;\\n  appearance?: AppearanceType;\\n  followSystemTheme?: boolean;\\n}>(\'TGUI_CONFIG\')"},{"name":"timelineItems","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  {\\n    key: \'1\',\\n    header: \'Arrived\',\\n    content: \'Yesterday\'\\n  },\\n  {\\n    key: \'2\',\\n    header: \'Departed\',\\n    content: \'Today\'\\n  },\\n  {\\n    key: \'3\',\\n    header: \'In transit\',\\n    content: \'Tomorrow\'\\n  },\\n  {\\n    key: \'4\',\\n    header: \'Processed to delivery center\',\\n    content: \'Next week\'\\n  },\\n  {\\n    key: \'5\',\\n    header: \'Shipped\',\\n    content: \'Someday\'\\n  }\\n]"},{"name":"Title1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"1\\" weight=\\"1\\">Title Level 1 - Bold (h2)</tgui-title>\\n        <tgui-title level=\\"1\\" weight=\\"2\\">Title Level 1 - Medium (h2)</tgui-title>\\n        <tgui-title level=\\"1\\" weight=\\"3\\">Title Level 1 - Regular (h2)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Title2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"2\\" weight=\\"1\\">Title Level 2 - Bold (h3)</tgui-title>\\n        <tgui-title level=\\"2\\" weight=\\"2\\">Title Level 2 - Medium (h3)</tgui-title>\\n        <tgui-title level=\\"2\\" weight=\\"3\\">Title Level 2 - Regular (h3)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Title3","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'3\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"3\\" weight=\\"1\\">Title Level 3 - Bold (h4)</tgui-title>\\n        <tgui-title level=\\"3\\" weight=\\"2\\">Title Level 3 - Medium (h4)</tgui-title>\\n        <tgui-title level=\\"3\\" weight=\\"3\\">Title Level 3 - Regular (h4)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"TogglePopper","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"ToggleStory","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    component: PopperToggleDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper that can be toggled on and off with a button click.\'\\n      }\\n    }\\n  }\\n}"},{"name":"Types","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge type=\\"number\\">5</tgui-badge>\\n        <tgui-badge type=\\"dot\\"></tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Usage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 700px;\\">\\n        <h3>How to use Ripple</h3>\\n        <p>The Ripple component is usually not used directly in developer code, \\n        but is integrated into buttons and other interactive elements.</p>\\n        \\n        <h4>Example of usage in the Button component:</h4>\\n        <pre>\\n&lt;tgui-button interactiveAnimation=\\"background\\"&gt;\\n  With ripple effect\\n&lt;/tgui-button&gt;\\n        </pre>\\n        \\n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\\n        when the button has the parameter interactiveAnimation=\\"background\\".</p>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"UsageExamples","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <div style=\\"margin-bottom: 8px;\\">Notifications count:</div>\\n          <div style=\\"display: flex; align-items: center;\\">\\n            Messages <tgui-badge style=\\"margin-left: 8px;\\">12</tgui-badge>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <div style=\\"margin-bottom: 8px;\\">Status indicators:</div>\\n          <div style=\\"display: flex; gap: 16px;\\">\\n            <div style=\\"display: flex; align-items: center;\\">\\n              <tgui-badge type=\\"dot\\" mode=\\"critical\\"></tgui-badge> \\n              <span style=\\"margin-left: 8px;\\">Critical</span>\\n            </div>\\n            <div style=\\"display: flex; align-items: center;\\">\\n              <tgui-badge type=\\"dot\\" mode=\\"primary\\"></tgui-badge> \\n              <span style=\\"margin-left: 8px;\\">Active</span>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"UserCardExample","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\\">\\n        <div style=\\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\\">\\n          <tgui-avatar size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\" online=\\"true\\"></tgui-avatar>\\n          <div>\\n            <div style=\\"font-weight: 600; margin-bottom: 4px;\\">John Doe</div>\\n            <div style=\\"color: var(--tgui--hint_color); font-size: 14px;\\">Last seen just now</div>\\n          </div>\\n          <div style=\\"margin-left: auto;\\">\\n            <tgui-avatar-badge [count]=\\"10\\"></tgui-avatar-badge>\\n          </div>\\n        </div>\\n        \\n        <div style=\\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\\">\\n          <tgui-avatar size=\\"l\\" initials=\\"Anna Smith\\" color=\\"#8e24aa\\"></tgui-avatar>\\n          <div>\\n            <div style=\\"font-weight: 600; margin-bottom: 4px;\\">Anna Smith</div>\\n            <div style=\\"color: var(--tgui--hint_color); font-size: 14px;\\">Last seen 2 hours ago</div>\\n          </div>\\n          <div style=\\"margin-left: auto;\\">\\n            <tgui-avatar-badge [count]=\\"3\\"></tgui-avatar-badge>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"VerticalSwipe","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startY;\\n        },\\n        onMoveY(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-50, event.shiftY), 50);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Vertical Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 200px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveY)=\\"onMoveY($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-x;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; left: 50%; transform: translateX(-50%); top: 60px; width: 80px; height: 80px; background-color: #4CAF50; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateY(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the green box up and down</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n}"},{"name":"Visible","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    visible: true\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <p>This spoiler content is visible by default.</p>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"},{"name":"WithAction","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    imports: [CommonModule, ButtonComponent],\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Action Placeholder\\" \\n        description=\\"This placeholder includes an actionable button\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n        <tgui-button action [size]=\\"\'l\'\\" [mode]=\\"\'filled\'\\">Take Action</tgui-button>\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"WithAdvancedChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      beforeIcon: `\\n        <svg width=\\"16\\" height=\\"16\\" viewBox=\\"0 0 16 16\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <path d=\\"M8 3.5V12.5M3.5 8H12.5\\" stroke=\\"currentColor\\" stroke-width=\\"1.5\\" stroke-linecap=\\"round\\" />\\n        </svg>\\n      `\\n    },\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip [mode]=\\"\'mono\'\\" [before]=\\"beforeTemplate\\">\\n          Featured\\n        </tgui-card-chip>\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Advanced Chip\\"\\n          subtitle=\\"This card uses a chip with an icon and styling.\\">\\n        </tgui-card-cell>\\n\\n        <ng-template #beforeTemplate>\\n          <div [innerHTML]=\\"beforeIcon\\"></div>\\n        </ng-template>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithBackground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"background\\">\\n          <div style=\\"background: linear-gradient(45deg, #4158D0, #C850C0, #FFCC70); width: 100%; height: 100%;\\"></div>\\n        </div>\\n        <div content-slot=\\"header\\">Banner with background</div>\\n        <div content-slot=\\"description\\">Description text on a colorful background</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"white\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithBadge","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\">\\n          <tgui-avatar-badge [count]=\\"5\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n        \\n        <tgui-avatar size=\\"l\\" initials=\\"John Doe\\">\\n          <tgui-avatar-badge [count]=\\"42\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n        \\n        <tgui-avatar size=\\"l\\" initials=\\"Overflow\\" color=\\"#e91e63\\">\\n          <tgui-avatar-badge [count]=\\"999\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithBadge","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Image with badge\'\\">\\n          <tgui-image-badge [count]=\\"5\\"></tgui-image-badge>\\n        </tgui-image>\\n        \\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Image with large count badge\'\\">\\n          <tgui-image-badge [count]=\\"125\\" [maxCount]=\\"99\\"></tgui-image-badge>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"WithBeforeContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"before\\" style=\\"width: 48px; height: 48px; background: #eee; border-radius: 8px; display: flex; align-items: center; justify-content: center;\\">\\n          Icon\\n        </div>\\n        <div content-slot=\\"header\\">Banner with before content</div>\\n        <div content-slot=\\"description\\">This banner has content before the main text</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithCallout","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"callout\\">New Feature</div>\\n        <div content-slot=\\"header\\">This is a banner with callout</div>\\n        <div content-slot=\\"description\\">Banner description that can span multiple lines and provide additional information about the banner content</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithCenteredFooter","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-section-header>Section Header</tgui-section-header>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Section with centered footer</tgui-text>\\n          </div>\\n          <tgui-section-footer [centered]=\\"true\\">Centered Footer</tgui-section-footer>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithChildren","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n      props: {},\\n      template: `\\n        <tgui-image [size]=\\"96\\">\\n          <tgui-icon24-qr></tgui-icon24-qr>\\n        </tgui-image>\\n      `\\n    }),\\n  }"},{"name":"WithChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip mode=\\"elevated\\">\\n          <span>New</span>\\n        </tgui-card-chip>\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Card with Chip\\"\\n          subtitle=\\"This card includes a chip component positioned in the top-right corner.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithComplexContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\">\\n        <div style=\\"padding: 8px 0;\\">\\n          <strong>Custom content</strong>\\n          <p style=\\"margin: 4px 0 0 0;\\">This blockquote contains custom HTML content.</p>\\n        </div>\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithCustomColor","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    initials: \'John Doe\',\\n    color: \'#3949ab\',\\n  },\\n}"},{"name":"WithCustomIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'chevron\',\\n    text: \'Blockquote with chevron icon\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is a blockquote with a custom chevron icon.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithDifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; color: var(--tgui--link_color); align-items: center;\\">\\n        <tgui-dynamic-icon [icon]=\\"\'close-28\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'quote-12\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'qr-24\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'backspace-36\'\\"></tgui-dynamic-icon>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithDirectImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    image: \'https://via.placeholder.com/300x200\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card \\n        [type]=\\"type\\" \\n        [borderRadius]=\\"borderRadius\\" \\n        [image]=\\"image\\" \\n        [imageHeight]=\\"imageHeight\\"\\n        style=\\"width: 300px;\\">\\n        <tgui-card-cell\\n          header=\\"Direct Image Card\\"\\n          subtitle=\\"This card uses the image property directly on the card without a separate cell.\\">\\n          <div style=\\"margin-top: 10px; color: #707579;\\">\\n            This approach is more similar to the React implementation.\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithDirectImageAndChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    image: \'https://via.placeholder.com/300x200\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card \\n        [type]=\\"type\\" \\n        [borderRadius]=\\"borderRadius\\" \\n        [image]=\\"image\\" \\n        [imageHeight]=\\"imageHeight\\"\\n        style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip mode=\\"elevated\\">\\n          <span>New</span>\\n        </tgui-card-chip>\\n        <tgui-card-cell\\n          header=\\"Direct Image with Chip\\"\\n          subtitle=\\"This card combines the direct image approach with a chip.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithFallbackIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"96\\">\\n          <ng-template #fallbackIcon>\\n            <div style=\\"font-size: 24px;\\">🖼️</div>\\n          </ng-template>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"WithImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    src: \'https://randomuser.me/api/portraits/men/32.jpg\',\\n    alt: \'User avatar\',\\n  },\\n}"},{"name":"WithImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Image Placeholder\\" \\n        description=\\"This placeholder includes an image element\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"WithInitials","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    initials: \'John Doe\',\\n  },\\n}"},{"name":"WithInitials","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [initials]=\\"\'AB\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'CD\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'EF\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"},{"name":"WithLargeHeader","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-section-header [large]=\\"true\\">Large Header</tgui-section-header>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Section with large header</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithLargerIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'backspace\',\\n    text: \'Blockquote with larger quote icon\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is a blockquote with a larger quote icon.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithMixedContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'CD\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"},{"name":"WithOnlineStatus","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    src: \'https://randomuser.me/api/portraits/women/44.jpg\',\\n    online: true,\\n  },\\n}"},{"name":"WithText","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\',\\n    text: \'This is the headline text\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is the content below the headline.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithTextAndComplexContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\',\\n    text: \'Complex content example\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        <div style=\\"padding: 8px 0;\\">\\n          <strong>Custom content below the headline</strong>\\n          <p style=\\"margin: 4px 0 0 0;\\">This shows how to combine text headline with complex content.</p>\\n        </div>\\n      </tgui-blockquote>\\n    `\\n  })\\n}"}],"functions":[{"name":"applyTheme","file":"projects/tgui/src/lib/utils/theme-helper.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\\n","args":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":359,"end":364,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"theme"},"type":"AppearanceType","deprecated":false,"deprecationMessage":"","tagName":{"pos":353,"end":358,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\\n"}]},{"name":"hasNode","file":"projects/tgui/src/lib/utils/has-node.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Utility function to check if a node exists in Angular\\nUsed to conditionally render elements based on whether content exists</p>\\n","args":[{"name":"node","type":"any","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"node","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setupSystemThemeDetection","file":"projects/tgui/src/lib/utils/theme-helper.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Setup system theme detection using prefers-color-scheme</p>\\n","args":[{"name":"callback","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"void","jsdoctags":[{"name":{"pos":766,"end":774,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"callback"},"deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":760,"end":765,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional callback function that will be called when the theme changes</p>\\n"},{"tagName":{"pos":849,"end":856,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function to cleanup the listeners</p>\\n"}]}],"typealiases":[{"name":"AppearanceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"light\\" | \\"dark\\"","file":"projects/tgui/src/lib/services/theme.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"AvatarShape","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"circle\\" | \\"rounded\\" | \\"square\\"","file":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"AvatarSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"xxs\\" | \\"xs\\" | \\"s\\" | \\"m\\" | \\"l\\" | \\"xl\\"","file":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"BadgeMode","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"primary\\" | \\"critical\\" | \\"secondary\\" | \\"gray\\" | \\"white\\"","file":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"BadgeType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"number\\" | \\"dot\\"","file":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"CardType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"plain\\" | \\"ambient\\"","file":"projects/tgui/src/lib/components/blocks/card/card.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Card types that define the visual style of the card</p>\\n","kind":192},{"name":"CloseButtonStory","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperWithCloseButtonDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"ImageSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"20\\" | \\"24\\" | \\"28\\" | \\"40\\" | \\"48\\" | \\"96\\"","file":"projects/tgui/src/lib/components/blocks/image/image.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"PlatformType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"base\\" | \\"ios\\"","file":"projects/tgui/src/lib/services/platform.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TguiDynamicIconComponent>","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconsShowcaseComponent>","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<DividerComponent>","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AccordionComponent>","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AvatarComponent>","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AvatarStackComponent>","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BadgeComponent>","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BannerComponent>","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BlockquoteComponent>","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonComponent>","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CardComponent>","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CellComponent>","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconButtonComponent>","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconContainerComponent>","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ImageComponent>","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<InlineButtonsComponent>","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ListComponent>","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PlaceholderComponent>","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SectionComponent>","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<StepsComponent>","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TimelineComponent>","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SnackbarComponent>","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SpinnerComponent>","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SpoilerComponent>","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<FixedLayoutComponent>","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TabbarComponent>","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TouchPopperDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CaptionComponent>","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<HeadlineComponent>","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<LargeTitleComponent>","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SubheadlineComponent>","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TextComponent>","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TitleComponent>","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TouchComponent>","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TimelineItemComponent>","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonCellComponent>","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<RippleComponent>","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"ToggleStory","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperToggleDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"TouchEventHandler","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Touch event handler type</p>\\n","kind":184}],"enumerations":[],"groupedVariables":{"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-caption level=\\"1\\" weight=\\"1\\">Caption Level 1 - Bold</tgui-caption>\\n            <tgui-caption level=\\"1\\" weight=\\"2\\">Caption Level 1 - Medium</tgui-caption>\\n            <tgui-caption level=\\"1\\" weight=\\"3\\">Caption Level 1 - Regular</tgui-caption>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-caption level=\\"2\\" weight=\\"1\\">Caption Level 2 - Bold</tgui-caption>\\n            <tgui-caption level=\\"2\\" weight=\\"2\\">Caption Level 2 - Medium</tgui-caption>\\n            <tgui-caption level=\\"2\\" weight=\\"3\\">Caption Level 2 - Regular</tgui-caption>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"CaptionInContext","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 600px; display: flex; flex-direction: column; gap: 16px;\\">\\n        <div style=\\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\\">\\n          <h4 style=\\"margin-bottom: 8px;\\">Chart Title</h4>\\n          <div style=\\"height: 150px; background-color: #f5f5f5; margin-bottom: 10px;\\"></div>\\n          <tgui-caption level=\\"2\\">Chart data source: Example Dataset, 2023</tgui-caption>\\n        </div>\\n        \\n        <div style=\\"border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px;\\">\\n          <img style=\\"width: 100%; height: 200px; background-color: #f5f5f5; margin-bottom: 10px;\\" />\\n          <tgui-caption level=\\"1\\">Photo by Example Photographer © 2023</tgui-caption>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-caption level=\\"1\\" weight=\\"1\\">Caption Level 1 - Bold</tgui-caption>\\n        <tgui-caption level=\\"1\\" weight=\\"2\\">Caption Level 1 - Medium</tgui-caption>\\n        <tgui-caption level=\\"1\\" weight=\\"3\\">Caption Level 1 - Regular</tgui-caption>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-caption level=\\"2\\" weight=\\"1\\">Caption Level 2 - Bold</tgui-caption>\\n        <tgui-caption level=\\"2\\" weight=\\"2\\">Caption Level 2 - Medium</tgui-caption>\\n        <tgui-caption level=\\"2\\" weight=\\"3\\">Caption Level 2 - Regular</tgui-caption>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CaptionComponent>","defaultValue":"{\\n  title: \'Typography/Caption\',\\n  component: CaptionComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CaptionComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the caption\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is span)\',\\n      defaultValue: \'span\',\\n    },\\n  },\\n}"}],"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default, h5)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-headline level=\\"1\\" weight=\\"1\\">Headline Level 1 - Bold (h5)</tgui-headline>\\n            <tgui-headline level=\\"1\\" weight=\\"2\\">Headline Level 1 - Medium (h5)</tgui-headline>\\n            <tgui-headline level=\\"1\\" weight=\\"3\\">Headline Level 1 - Regular (h5)</tgui-headline>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller, h5)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-headline level=\\"2\\" weight=\\"1\\">Headline Level 2 - Bold (h5)</tgui-headline>\\n            <tgui-headline level=\\"2\\" weight=\\"2\\">Headline Level 2 - Medium (h5)</tgui-headline>\\n            <tgui-headline level=\\"2\\" weight=\\"3\\">Headline Level 2 - Regular (h5)</tgui-headline>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-headline level=\\"1\\" weight=\\"1\\">Headline Level 1 - Bold (h5)</tgui-headline>\\n        <tgui-headline level=\\"1\\" weight=\\"2\\">Headline Level 1 - Medium (h5)</tgui-headline>\\n        <tgui-headline level=\\"1\\" weight=\\"3\\">Headline Level 1 - Regular (h5)</tgui-headline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-headline level=\\"2\\" weight=\\"1\\">Headline Level 2 - Bold (h5)</tgui-headline>\\n        <tgui-headline level=\\"2\\" weight=\\"2\\">Headline Level 2 - Medium (h5)</tgui-headline>\\n        <tgui-headline level=\\"2\\" weight=\\"3\\">Headline Level 2 - Regular (h5)</tgui-headline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<HeadlineComponent>","defaultValue":"{\\n  title: \'Typography/Headline\',\\n  component: HeadlineComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [HeadlineComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the headline\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h5)\',\\n      defaultValue: \'h5\',\\n    },\\n  },\\n}"}],"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-large-title level=\\"1\\" weight=\\"1\\">Large Title Level 1 - Bold</tgui-large-title>\\n            <tgui-large-title level=\\"1\\" weight=\\"2\\">Large Title Level 1 - Medium</tgui-large-title>\\n            <tgui-large-title level=\\"1\\" weight=\\"3\\">Large Title Level 1 - Regular</tgui-large-title>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-large-title level=\\"2\\" weight=\\"1\\">Large Title Level 2 - Bold</tgui-large-title>\\n            <tgui-large-title level=\\"2\\" weight=\\"2\\">Large Title Level 2 - Medium</tgui-large-title>\\n            <tgui-large-title level=\\"2\\" weight=\\"3\\">Large Title Level 2 - Regular</tgui-large-title>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-large-title level=\\"1\\" weight=\\"1\\">Large Title Level 1 - Bold</tgui-large-title>\\n        <tgui-large-title level=\\"1\\" weight=\\"2\\">Large Title Level 1 - Medium</tgui-large-title>\\n        <tgui-large-title level=\\"1\\" weight=\\"3\\">Large Title Level 1 - Regular</tgui-large-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-large-title level=\\"2\\" weight=\\"1\\">Large Title Level 2 - Bold</tgui-large-title>\\n        <tgui-large-title level=\\"2\\" weight=\\"2\\">Large Title Level 2 - Medium</tgui-large-title>\\n        <tgui-large-title level=\\"2\\" weight=\\"3\\">Large Title Level 2 - Regular</tgui-large-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<LargeTitleComponent>","defaultValue":"{\\n  title: \'Typography/LargeTitle\',\\n  component: LargeTitleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [LargeTitleComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the large title\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h1)\',\\n      defaultValue: \'h1\',\\n    },\\n  },\\n}"}],"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default, h6)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-subheadline level=\\"1\\" weight=\\"1\\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"1\\" weight=\\"2\\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"1\\" weight=\\"3\\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller, h6)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-subheadline level=\\"2\\" weight=\\"1\\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"2\\" weight=\\"2\\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\\n            <tgui-subheadline level=\\"2\\" weight=\\"3\\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-subheadline level=\\"1\\" weight=\\"1\\">Subheadline Level 1 - Bold (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"1\\" weight=\\"2\\">Subheadline Level 1 - Medium (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"1\\" weight=\\"3\\">Subheadline Level 1 - Regular (h6)</tgui-subheadline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-subheadline level=\\"2\\" weight=\\"1\\">Subheadline Level 2 - Bold (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"2\\" weight=\\"2\\">Subheadline Level 2 - Medium (h6)</tgui-subheadline>\\n        <tgui-subheadline level=\\"2\\" weight=\\"3\\">Subheadline Level 2 - Regular (h6)</tgui-subheadline>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SubheadlineComponent>","defaultValue":"{\\n  title: \'Typography/Subheadline\',\\n  component: SubheadlineComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [SubheadlineComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the subheadline\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is h6)\',\\n      defaultValue: \'h6\',\\n    },\\n  },\\n}"}],"projects/tgui/src/lib/components/typography/text/story/text.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (Default)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-text level=\\"1\\" weight=\\"1\\">Text Level 1 - Bold</tgui-text>\\n            <tgui-text level=\\"1\\" weight=\\"2\\">Text Level 1 - Medium</tgui-text>\\n            <tgui-text level=\\"1\\" weight=\\"3\\">Text Level 1 - Regular</tgui-text>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (Smaller)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-text level=\\"2\\" weight=\\"1\\">Text Level 2 - Bold</tgui-text>\\n            <tgui-text level=\\"2\\" weight=\\"2\\">Text Level 2 - Medium</tgui-text>\\n            <tgui-text level=\\"2\\" weight=\\"3\\">Text Level 2 - Regular</tgui-text>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-text level=\\"1\\" weight=\\"1\\">Text Level 1 - Bold</tgui-text>\\n        <tgui-text level=\\"1\\" weight=\\"2\\">Text Level 1 - Medium</tgui-text>\\n        <tgui-text level=\\"1\\" weight=\\"3\\">Text Level 1 - Regular</tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Level2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-text level=\\"2\\" weight=\\"1\\">Text Level 2 - Bold</tgui-text>\\n        <tgui-text level=\\"2\\" weight=\\"2\\">Text Level 2 - Medium</tgui-text>\\n        <tgui-text level=\\"2\\" weight=\\"3\\">Text Level 2 - Regular</tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TextComponent>","defaultValue":"{\\n  title: \'Typography/Text\',\\n  component: TextComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TextComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the text\',\\n      defaultValue: \'1\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, default is span)\',\\n      defaultValue: \'span\',\\n    },\\n  },\\n}"},{"name":"Paragraph","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 600px;\\">\\n        <tgui-text>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl. Nullam euismod, nisl eget ultricies ultrices, \\n          nunc nisl aliquam nunc, quis ultricies nisl nunc eget nisl.\\n        </tgui-text>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/typography/title/story/title.stories.ts":[{"name":"AllVariations","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 1 (h2)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"1\\" weight=\\"1\\">Title Level 1 - Bold (h2)</tgui-title>\\n            <tgui-title level=\\"1\\" weight=\\"2\\">Title Level 1 - Medium (h2)</tgui-title>\\n            <tgui-title level=\\"1\\" weight=\\"3\\">Title Level 1 - Regular (h2)</tgui-title>\\n          </div>\\n        </div>\\n        \\n        <div style=\\"margin-bottom: 16px;\\">\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 2 (h3)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"2\\" weight=\\"1\\">Title Level 2 - Bold (h3)</tgui-title>\\n            <tgui-title level=\\"2\\" weight=\\"2\\">Title Level 2 - Medium (h3)</tgui-title>\\n            <tgui-title level=\\"2\\" weight=\\"3\\">Title Level 2 - Regular (h3)</tgui-title>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <h3 style=\\"margin-bottom: 12px;\\">Level 3 (h4)</h3>\\n          <div style=\\"display: flex; flex-direction: column; gap: 8px;\\">\\n            <tgui-title level=\\"3\\" weight=\\"1\\">Title Level 3 - Bold (h4)</tgui-title>\\n            <tgui-title level=\\"3\\" weight=\\"2\\">Title Level 3 - Medium (h4)</tgui-title>\\n            <tgui-title level=\\"3\\" weight=\\"3\\">Title Level 3 - Regular (h4)</tgui-title>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TitleComponent>","defaultValue":"{\\n  title: \'Typography/Title\',\\n  component: TitleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TitleComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    level: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Size level of the title, determines size and semantic tag (h2, h3, h4)\',\\n      defaultValue: \'2\',\\n    },\\n    weight: {\\n      options: [\'1\', \'2\', \'3\'],\\n      control: { type: \'select\' },\\n      description: \'Font weight\',\\n      defaultValue: \'3\',\\n    },\\n    caps: {\\n      control: \'boolean\',\\n      description: \'Transform text to uppercase\',\\n      defaultValue: false,\\n    },\\n    plain: {\\n      control: \'boolean\',\\n      description: \'Remove default margins\',\\n      defaultValue: true,\\n    },\\n    tag: {\\n      control: \'text\',\\n      description: \'HTML tag to render (optional, defaults based on level)\',\\n    },\\n  },\\n}"},{"name":"Title1","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'1\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"1\\" weight=\\"1\\">Title Level 1 - Bold (h2)</tgui-title>\\n        <tgui-title level=\\"1\\" weight=\\"2\\">Title Level 1 - Medium (h2)</tgui-title>\\n        <tgui-title level=\\"1\\" weight=\\"3\\">Title Level 1 - Regular (h2)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Title2","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'2\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"2\\" weight=\\"1\\">Title Level 2 - Bold (h3)</tgui-title>\\n        <tgui-title level=\\"2\\" weight=\\"2\\">Title Level 2 - Medium (h3)</tgui-title>\\n        <tgui-title level=\\"2\\" weight=\\"3\\">Title Level 2 - Regular (h3)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Title3","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    level: \'3\',\\n  },\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-title level=\\"3\\" weight=\\"1\\">Title Level 3 - Bold (h4)</tgui-title>\\n        <tgui-title level=\\"3\\" weight=\\"2\\">Title Level 3 - Medium (h4)</tgui-title>\\n        <tgui-title level=\\"3\\" weight=\\"3\\">Title Level 3 - Regular (h4)</tgui-title>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts":[{"name":"Ambient","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    type: \'ambient\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px;\\">\\n        <tgui-card-cell\\n          header=\\"Ambient Card\\"\\n          subtitle=\\"This card uses the ambient style with a dark background.\\">\\n          <div style=\\"margin-top: 12px; color: rgba(255, 255, 255, 0.5);\\">\\n            Additional content with lower opacity text\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"CustomBorderRadius","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    borderRadius: \'8px\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image with custom border radius\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Custom Border Radius\\"\\n          subtitle=\\"This card uses a custom border radius of 8px instead of the default 24px.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px;\\">\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Card Title\\"\\n          subtitle=\\"Card description text would go here to provide more information about this card.\\">\\n          <div style=\\"margin-top: 10px; color: #707579;\\">\\n            Additional content can be added here\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CardComponent>","defaultValue":"{\\n  title: \'Blocks/Card\',\\n  component: CardComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CardComponent, CardCellComponent, CardChipComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    type: {\\n      options: [\'plain\', \'ambient\'],\\n      control: { type: \'radio\' },\\n      description: \'Defines the visual style of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'plain\' },\\n      },\\n    },\\n    borderRadius: {\\n      control: { type: \'text\' },\\n      description: \'Defines the border radius of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'24px\' },\\n      },\\n    },\\n    image: {\\n      control: { type: \'text\' },\\n      description: \'URL of the image to display at the top of the card\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'undefined\' },\\n      },\\n    },\\n    imageHeight: {\\n      control: { type: \'text\' },\\n      description: \'Height of the image section\',\\n      table: {\\n        type: { summary: \'string\' },\\n        defaultValue: { summary: \'200px\' },\\n      },\\n    }\\n  },\\n  args: {\\n    type: \'plain\',\\n    borderRadius: \'24px\',\\n    imageHeight: \'200px\'\\n  },\\n}"},{"name":"WithAdvancedChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      beforeIcon: `\\n        <svg width=\\"16\\" height=\\"16\\" viewBox=\\"0 0 16 16\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <path d=\\"M8 3.5V12.5M3.5 8H12.5\\" stroke=\\"currentColor\\" stroke-width=\\"1.5\\" stroke-linecap=\\"round\\" />\\n        </svg>\\n      `\\n    },\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip [mode]=\\"\'mono\'\\" [before]=\\"beforeTemplate\\">\\n          Featured\\n        </tgui-card-chip>\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Advanced Chip\\"\\n          subtitle=\\"This card uses a chip with an icon and styling.\\">\\n        </tgui-card-cell>\\n\\n        <ng-template #beforeTemplate>\\n          <div [innerHTML]=\\"beforeIcon\\"></div>\\n        </ng-template>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card [type]=\\"type\\" [borderRadius]=\\"borderRadius\\" style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip mode=\\"elevated\\">\\n          <span>New</span>\\n        </tgui-card-chip>\\n        <tgui-card-cell [isImage]=\\"true\\">\\n          <div style=\\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #707579;\\">\\n            Image content goes here\\n          </div>\\n        </tgui-card-cell>\\n        <tgui-card-cell\\n          header=\\"Card with Chip\\"\\n          subtitle=\\"This card includes a chip component positioned in the top-right corner.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithDirectImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    image: \'https://via.placeholder.com/300x200\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card \\n        [type]=\\"type\\" \\n        [borderRadius]=\\"borderRadius\\" \\n        [image]=\\"image\\" \\n        [imageHeight]=\\"imageHeight\\"\\n        style=\\"width: 300px;\\">\\n        <tgui-card-cell\\n          header=\\"Direct Image Card\\"\\n          subtitle=\\"This card uses the image property directly on the card without a separate cell.\\">\\n          <div style=\\"margin-top: 10px; color: #707579;\\">\\n            This approach is more similar to the React implementation.\\n          </div>\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"},{"name":"WithDirectImageAndChip","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    image: \'https://via.placeholder.com/300x200\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-card \\n        [type]=\\"type\\" \\n        [borderRadius]=\\"borderRadius\\" \\n        [image]=\\"image\\" \\n        [imageHeight]=\\"imageHeight\\"\\n        style=\\"width: 300px; position: relative;\\">\\n        <tgui-card-chip mode=\\"elevated\\">\\n          <span>New</span>\\n        </tgui-card-chip>\\n        <tgui-card-cell\\n          header=\\"Direct Image with Chip\\"\\n          subtitle=\\"This card combines the direct image approach with a chip.\\">\\n        </tgui-card-cell>\\n      </tgui-card>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts":[{"name":"AutosizingIcons","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-dynamic-icon [icon]=\\"\'close\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chat\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chevron-left\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'chevron-right\'\\"></tgui-dynamic-icon>\\n      </div>\\n    `,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'When no size is specified in the icon name, the component automatically tries to use the smallest available size (12) first, then tries larger sizes if needed.\',\\n      },\\n    },\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'close\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TguiDynamicIconComponent>","defaultValue":"{\\n  title: \'Icons/Dynamic Icon\',\\n  component: TguiDynamicIconComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TguiDynamicIconComponent],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    icon: {\\n      control: \'text\',\\n      description: \'Name of the icon to render\',\\n    }\\n  },\\n}"},{"name":"WithDifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; color: var(--tgui--link_color); align-items: center;\\">\\n        <tgui-dynamic-icon [icon]=\\"\'close-28\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'quote-12\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'qr-24\'\\"></tgui-dynamic-icon>\\n        <tgui-dynamic-icon [icon]=\\"\'backspace-36\'\\"></tgui-dynamic-icon>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    type: \'number\',\\n    mode: \'primary\',\\n    large: false\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-badge \\n        [type]=\\"type\\" \\n        [mode]=\\"mode\\" \\n        [large]=\\"large\\"\\n      >\\n        3\\n      </tgui-badge>\\n    `,\\n  }),\\n}"},{"name":"Dots","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge type=\\"dot\\" mode=\\"primary\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"critical\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"secondary\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"gray\\"></tgui-badge>\\n        <tgui-badge type=\\"dot\\" mode=\\"white\\"></tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BadgeComponent>","defaultValue":"{\\n  title: \'Blocks/Badge\',\\n  component: BadgeComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [],\\n  argTypes: {\\n    type: {\\n      options: [\'number\', \'dot\'],\\n      control: { type: \'select\' },\\n      description: \'Badge type\',\\n      defaultValue: \'number\',\\n    },\\n    mode: {\\n      options: [\'primary\', \'critical\', \'secondary\', \'gray\', \'white\'],\\n      control: { type: \'select\' },\\n      description: \'Badge color mode\',\\n      defaultValue: \'primary\',\\n    },\\n    large: {\\n      control: \'boolean\',\\n      description: \'Increases badge size (for number type only)\',\\n      defaultValue: false,\\n    }\\n  },\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge mode=\\"primary\\">1</tgui-badge>\\n        <tgui-badge mode=\\"critical\\">2</tgui-badge>\\n        <tgui-badge mode=\\"secondary\\">3</tgui-badge>\\n        <tgui-badge mode=\\"gray\\">4</tgui-badge>\\n        <tgui-badge mode=\\"white\\">5</tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge [large]=\\"false\\">1</tgui-badge>\\n        <tgui-badge [large]=\\"true\\">99</tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Types","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-badge type=\\"number\\">5</tgui-badge>\\n        <tgui-badge type=\\"dot\\"></tgui-badge>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"UsageExamples","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <div style=\\"margin-bottom: 8px;\\">Notifications count:</div>\\n          <div style=\\"display: flex; align-items: center;\\">\\n            Messages <tgui-badge style=\\"margin-left: 8px;\\">12</tgui-badge>\\n          </div>\\n        </div>\\n        \\n        <div>\\n          <div style=\\"margin-bottom: 8px;\\">Status indicators:</div>\\n          <div style=\\"display: flex; gap: 16px;\\">\\n            <div style=\\"display: flex; align-items: center;\\">\\n              <tgui-badge type=\\"dot\\" mode=\\"critical\\"></tgui-badge> \\n              <span style=\\"margin-left: 8px;\\">Critical</span>\\n            </div>\\n            <div style=\\"display: flex; align-items: center;\\">\\n              <tgui-badge type=\\"dot\\" mode=\\"primary\\"></tgui-badge> \\n              <span style=\\"margin-left: 8px;\\">Active</span>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    mode: \'filled\',\\n    stretched: false,\\n    loading: false,\\n    disabled: false,\\n    interactiveAnimation: \'background\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-button \\n        [size]=\\"size\\" \\n        [mode]=\\"mode\\" \\n        [stretched]=\\"stretched\\" \\n        [loading]=\\"loading\\" \\n        [disabled]=\\"disabled\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n      >\\n        Button\\n      </tgui-button>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonComponent>","defaultValue":"{\\n  title: \'Blocks/Button\',\\n  component: ButtonComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Button size\',\\n      defaultValue: \'m\',\\n    },\\n    mode: {\\n      options: [\'filled\', \'bezeled\', \'plain\', \'gray\', \'outline\', \'white\'],\\n      control: { type: \'select\' },\\n      description: \'Button display variant\',\\n      defaultValue: \'filled\',\\n    },\\n    stretched: {\\n      control: \'boolean\',\\n      description: \'Stretch button to full width\',\\n      defaultValue: false,\\n    },\\n    loading: {\\n      control: \'boolean\',\\n      description: \'Show loading indicator\',\\n      defaultValue: false,\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disabled state\',\\n      defaultValue: false,\\n    },\\n    interactiveAnimation: {\\n      options: [\'opacity\', \'background\'],\\n      control: { type: \'radio\' },\\n      description: \'Type of interaction animation\',\\n      defaultValue: \'background\',\\n    }\\n  },\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px;\\">\\n        <tgui-button mode=\\"filled\\">Filled</tgui-button>\\n        <tgui-button mode=\\"bezeled\\">Bezeled</tgui-button>\\n        <tgui-button mode=\\"plain\\">Plain</tgui-button>\\n        <tgui-button mode=\\"gray\\">Gray</tgui-button>\\n        <tgui-button mode=\\"outline\\">Outline</tgui-button>\\n        <tgui-button mode=\\"white\\">White</tgui-button>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"RippleEffects","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <div style=\\"margin-bottom: 8px;\\">\\n          <strong>Ripple effect (background)</strong>\\n          <p>Click on the button to see the ripple effect (works on non-iOS platforms)</p>\\n        </div>\\n        <div style=\\"display: flex; gap: 16px;\\">\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"filled\\">Background Ripple</tgui-button>\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"bezeled\\">Background Ripple</tgui-button>\\n          <tgui-button interactiveAnimation=\\"background\\" mode=\\"plain\\">Background Ripple</tgui-button>\\n        </div>\\n        \\n        <div style=\\"margin: 16px 0 8px 0;\\">\\n          <strong>Without ripple (opacity)</strong>\\n        </div>\\n        <div style=\\"display: flex; gap: 16px;\\">\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"filled\\">Opacity Effect</tgui-button>\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"bezeled\\">Opacity Effect</tgui-button>\\n          <tgui-button interactiveAnimation=\\"opacity\\" mode=\\"plain\\">Opacity Effect</tgui-button>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\\">\\n        <tgui-button size=\\"s\\">Small</tgui-button>\\n        <tgui-button size=\\"m\\">Medium</tgui-button>\\n        <tgui-button size=\\"l\\">Large</tgui-button>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"States","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <div>\\n          <tgui-button [loading]=\\"true\\">Loading</tgui-button>\\n        </div>\\n        <div>\\n          <tgui-button [disabled]=\\"true\\">Disabled</tgui-button>\\n        </div>\\n        <div style=\\"width: 100%;\\">\\n          <tgui-button [stretched]=\\"true\\">Stretched button</tgui-button>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <tgui-image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Sample image\'\\"></tgui-image>\\n    `\\n  }),\\n}"},{"name":"LoadingStates","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png?text=Loading\'\\" [alt]=\\"\'Loading image\'\\"></tgui-image>\\n        \\n        <tgui-image [size]=\\"40\\" [alt]=\\"\'Failed image\'\\">\\n          <ng-template #fallbackIcon>\\n            <div style=\\"font-size: 18px;\\">❓</div>\\n          </ng-template>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: flex-end;\\">\\n        <tgui-image [size]=\\"20\\" [src]=\\"\'https://placehold.co/20x20/png\'\\" [alt]=\\"\'Size 20\'\\"></tgui-image>\\n        <tgui-image [size]=\\"24\\" [src]=\\"\'https://placehold.co/24x24/png\'\\" [alt]=\\"\'Size 24\'\\"></tgui-image>\\n        <tgui-image [size]=\\"28\\" [src]=\\"\'https://placehold.co/28x28/png\'\\" [alt]=\\"\'Size 28\'\\"></tgui-image>\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Size 40\'\\"></tgui-image>\\n        <tgui-image [size]=\\"48\\" [src]=\\"\'https://placehold.co/48x48/png\'\\" [alt]=\\"\'Size 48\'\\"></tgui-image>\\n        <tgui-image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"WithBadge","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Image with badge\'\\">\\n          <tgui-image-badge [count]=\\"5\\"></tgui-image-badge>\\n        </tgui-image>\\n        \\n        <tgui-image [size]=\\"40\\" [src]=\\"\'https://placehold.co/40x40/png\'\\" [alt]=\\"\'Image with large count badge\'\\">\\n          <tgui-image-badge [count]=\\"125\\" [maxCount]=\\"99\\"></tgui-image-badge>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"},{"name":"WithChildren","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n    render: () => ({\\n      props: {},\\n      template: `\\n        <tgui-image [size]=\\"96\\">\\n          <tgui-icon24-qr></tgui-icon24-qr>\\n        </tgui-image>\\n      `\\n    }),\\n  }"},{"name":"WithFallbackIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-image [size]=\\"96\\">\\n          <ng-template #fallbackIcon>\\n            <div style=\\"font-size: 24px;\\">🖼️</div>\\n          </ng-template>\\n        </tgui-image>\\n      </div>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Placeholder Title\',\\n    description: \'This is a description text for the placeholder component. It provides additional context.\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-placeholder \\n        [header]=\\"header\\" \\n        [description]=\\"description\\"\\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"DescriptionOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        description=\\"This is a placeholder with only a description text and no header.\\"\\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"EmptyState","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    imports: [CommonModule, ButtonComponent],\\n    template: `\\n      <tgui-placeholder \\n        header=\\"No Items Found\\" \\n        description=\\"There are no items matching your search criteria. Try changing your search parameters or create a new item.\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n\\n        <tgui-button action [size]=\\"\'l\'\\" [mode]=\\"\'filled\'\\">Take Action</tgui-button>\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"HeaderOnly","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Header Only Placeholder\\" \\n      >\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PlaceholderComponent>","defaultValue":"{\\n  title: \'Blocks/Placeholder\',\\n  component: PlaceholderComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [ButtonComponent, ImageComponent],\\n    }),\\n  ],  \\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    header: {\\n      control: \'text\',\\n      description: \'The primary text, usually a title or a header, for the placeholder\',\\n    },\\n    description: {\\n      control: \'text\',\\n      description: \'Additional descriptive text to provide more details or context\',\\n    }\\n  },\\n}"},{"name":"WithAction","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    imports: [CommonModule, ButtonComponent],\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Action Placeholder\\" \\n        description=\\"This placeholder includes an actionable button\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n        <tgui-button action [size]=\\"\'l\'\\" [mode]=\\"\'filled\'\\">Take Action</tgui-button>\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"},{"name":"WithImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <tgui-placeholder \\n        header=\\"Image Placeholder\\" \\n        description=\\"This placeholder includes an image element\\"\\n      >\\n        <tgui-image image [size]=\\"96\\" [src]=\\"\'https://placehold.co/96x96/png\'\\" [alt]=\\"\'Size 96\'\\"></tgui-image>\\n\\n      </tgui-placeholder>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `<tgui-spinner [size]=\\"size\\"></tgui-spinner>`,\\n  }),\\n}"},{"name":"CustomColors","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .color-container {\\n        display: flex;\\n        gap: 24px;\\n      }\\n      .color-item {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        padding: 16px;\\n        border-radius: 8px;\\n      }\\n      .color-item:nth-child(1) {\\n        color: var(--tgui--link_color);\\n      }\\n      .color-item:nth-child(2) {\\n        color: var(--tgui--destructive);\\n      }\\n      .color-item:nth-child(3) {\\n        color: #4CAF50;\\n      }\\n      .color-item:nth-child(4) {\\n        background: #333;\\n        color: white;\\n      }\\n      .color-label {\\n        margin-top: 8px;\\n        font-size: 14px;\\n      }\\n    `],\\n    template: `\\n      <div>\\n        <p style=\\"margin-bottom: 16px;\\">\\n          The spinner color is inherited from the parent container through the CSS <code>color</code> property.\\n        </p>\\n        \\n        <div class=\\"color-container\\">\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Primary</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Destructive</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Success</span>\\n          </div>\\n          <div class=\\"color-item\\">\\n            <tgui-spinner></tgui-spinner>\\n            <span class=\\"color-label\\">Light</span>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SpinnerComponent>","defaultValue":"{\\n  title: \'Feedback/Spinner\',\\n  component: SpinnerComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, SpinnerComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Loading indicator size\',\\n      defaultValue: \'m\',\\n    }\\n  },\\n}"},{"name":"PlatformSpecific","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .platform-demo {\\n        display: flex;\\n        flex-direction: column;\\n        gap: 32px;\\n      }\\n      .platform-container {\\n        padding: 24px;\\n        border-radius: 8px;\\n        background-color: var(--tgui--secondary_fill);\\n      }\\n      .platform-title {\\n        font-size: 16px;\\n        font-weight: 500;\\n        margin-bottom: 16px;\\n      }\\n      .platform-spinners {\\n        display: flex;\\n        gap: 24px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"platform-demo\\">\\n        <div>\\n          <p>\\n            The Spinner component automatically adapts to the current platform.\\n            On iOS, it displays a circular indicator with solid fill, on Android/Web - a circular progress.\\n          </p>\\n        </div>\\n        \\n        <div class=\\"platform-container\\">\\n          <div class=\\"platform-title\\">iOS Spinner (example)</div>\\n          <div class=\\"platform-spinners\\">\\n            <tgui-spinner size=\\"s\\" class=\\"platform-ios\\"></tgui-spinner>\\n            <tgui-spinner size=\\"m\\" class=\\"platform-ios\\"></tgui-spinner>\\n            <tgui-spinner size=\\"l\\" class=\\"platform-ios\\"></tgui-spinner>\\n          </div>\\n        </div>\\n        \\n        <div class=\\"platform-container\\">\\n          <div class=\\"platform-title\\">Android/Web Spinner (example)</div>\\n          <div class=\\"platform-spinners\\">\\n            <tgui-spinner size=\\"s\\"></tgui-spinner>\\n            <tgui-spinner size=\\"m\\"></tgui-spinner>\\n            <tgui-spinner size=\\"l\\"></tgui-spinner>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .spinner-container {\\n        display: flex;\\n        gap: 24px;\\n        align-items: center;\\n      }\\n      .spinner-item {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        gap: 8px;\\n      }\\n      .spinner-label {\\n        font-size: 14px;\\n        margin-top: 8px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"spinner-container\\">\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"s\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Small (s)</span>\\n        </div>\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"m\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Medium (m)</span>\\n        </div>\\n        <div class=\\"spinner-item\\">\\n          <tgui-spinner size=\\"l\\"></tgui-spinner>\\n          <span class=\\"spinner-label\\">Large (l)</span>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    selectedIndex: 0\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"height: 500px; position: relative;\\">\\n        <p style=\\"padding: 20px;\\">Выбран таб с индексом: {{ selectedIndex }}</p>\\n        <tgui-tabbar [selectedIndex]=\\"selectedIndex\\" (selectedIndexChange)=\\"selectedIndex = $event\\">\\n          \\n         <tgui-tabbar-item text=\\"Devices\\">\\n            <tgui-icon28-devices></tgui-icon28-devices>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Chat\\">\\n            <tgui-icon28-chat></tgui-icon28-chat>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Stats\\">\\n             <tgui-icon28-stats></tgui-icon28-stats>\\n          </tgui-tabbar-item>\\n\\n        </tgui-tabbar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"IOSStyle","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    selectedIndex: 1\\n  },\\n  parameters: {\\n    platform: \'ios\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"height: 500px; position: relative;\\">\\n        <p style=\\"padding: 20px;\\">Выбран таб с индексом: {{ selectedIndex }}</p>\\n        <tgui-tabbar [selectedIndex]=\\"selectedIndex\\" (selectedIndexChange)=\\"selectedIndex = $event\\">\\n          \\n          <tgui-tabbar-item text=\\"Devices\\">\\n            <tgui-icon28-devices></tgui-icon28-devices>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Chat\\">\\n            <tgui-icon28-chat></tgui-icon28-chat>\\n          </tgui-tabbar-item>\\n\\n          <tgui-tabbar-item text=\\"Stats\\">\\n             <tgui-icon28-stats></tgui-icon28-stats>\\n          </tgui-tabbar-item>\\n          \\n        </tgui-tabbar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TabbarComponent>","defaultValue":"{\\n  title: \'Layout/Tabbar\',\\n  component: TabbarComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TabbarComponent, TabbarItemComponent, TguiIcon28Devices, TguiIcon28Chat, TguiIcon28Stats],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'fullscreen\',\\n  },\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    selectedIndex: { \\n      control: { type: \'number\', min: 0, max: 2, step: 1 },\\n      description: \'Index of the currently selected tab\',\\n      defaultValue: 0\\n    }\\n  }\\n}"}],"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts":[{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      lastEvent: signal<string>(\'No events yet\'),\\n      onStart(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Start - X: ${event.startX}, Y: ${event.startY}`);\\n      },\\n      onMove(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`Move - Shift X: ${event.shiftX}, Shift Y: ${event.shiftY}`);\\n      },\\n      onEnd(event: TouchEvent): void {\\n        (this as unknown as StoryComponentProps).lastEvent.set(`End - Duration: ${event.duration}ms`);\\n      }\\n    },\\n    template: `\\n      <div style=\\"width: 100%; padding: 16px;\\">\\n        <h3>Touch Component Demo</h3>\\n        \\n        <div>\\n          <tgui-touch\\n            [usePointerHover]=\\"usePointerHover\\"\\n            [useCapture]=\\"useCapture\\"\\n            [slideThreshold]=\\"slideThreshold\\"\\n            [noSlideClick]=\\"noSlideClick\\"\\n            [stopPropagation]=\\"stopPropagation\\"\\n            (onStart)=\\"onStart($event)\\"\\n            (onMove)=\\"onMove($event)\\"\\n            (onEnd)=\\"onEnd($event)\\"\\n            style=\\"display: block; width: 100%; height: 200px; background-color: #f0f0f0; border-radius: 8px; display: flex; align-items: center; justify-content: center; user-select: none; touch-action: manipulation;\\"\\n          >\\n            <div style=\\"text-align: center;\\">\\n              Touch or swipe here\\n            </div>\\n          </tgui-touch>\\n        </div>\\n        \\n        <div style=\\"margin-top: 16px; padding: 8px; background-color: #eee; border-radius: 4px;\\">\\n          <strong>Last Event:</strong> {{ lastEvent() }}\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"HorizontalSwipe","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startX;\\n        },\\n        onMoveX(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-100, event.shiftX), 100);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Horizontal Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 100px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveX)=\\"onMoveX($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-y;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; top: 0; left: 50%; transform: translateX(-50%); width: 80px; height: 80px; margin: 10px; background-color: #2196F3; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateX(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the blue box left and right</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TouchComponent>","defaultValue":"{\\n  title: \'Utils/Touch\',\\n  component: TouchComponent,\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    usePointerHover: {\\n      control: \'boolean\',\\n      description: \'Use pointer events for hover instead of mouse events\',\\n      defaultValue: false\\n    },\\n    useCapture: {\\n      control: \'boolean\',\\n      description: \'Use capture phase for events\',\\n      defaultValue: false\\n    },\\n    slideThreshold: {\\n      control: { type: \'number\', min: 1, max: 50 },\\n      description: \'Threshold in pixels before a touch is considered a slide\',\\n      defaultValue: 5\\n    },\\n    noSlideClick: {\\n      control: \'boolean\',\\n      description: \'Prevent clicks after a slide is detected\',\\n      defaultValue: false\\n    },\\n    stopPropagation: {\\n      control: \'boolean\',\\n      description: \'Stop event propagation\',\\n      defaultValue: false\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: `\\nA component for handling touch and gesture events.\\nThis component helps in handling swipe gestures and detecting various touch interactions.\\nIt\'s especially useful for implementing custom touch behaviors like swipeable lists, carousels, etc.\\n        `\\n      }\\n    }\\n  }\\n}"},{"name":"VerticalSwipe","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => {\\n    let startPosition = 0;\\n    \\n    return {\\n      props: {\\n        swipePosition: signal<number>(0),\\n        onStart(event: TouchEvent): void {\\n          startPosition = event.startY;\\n        },\\n        onMoveY(event: TouchEvent): void {\\n          const shift = Math.min(Math.max(-50, event.shiftY), 50);\\n          (this as unknown as StoryComponentProps).swipePosition.set(shift);\\n        }\\n      },\\n      template: `\\n        <div style=\\"width: 100%; padding: 16px;\\">\\n          <h3>Vertical Swipe Demo</h3>\\n          \\n          <div style=\\"position: relative; overflow: hidden; width: 100%; height: 200px; background-color: #e0e0e0; border-radius: 8px;\\">\\n            <tgui-touch\\n              [slideThreshold]=\\"5\\"\\n              (onStart)=\\"onStart($event)\\"\\n              (onMoveY)=\\"onMoveY($event)\\"\\n              style=\\"display: block; width: 100%; height: 100%; touch-action: pan-x;\\"\\n            >\\n              <div \\n                style=\\"position: absolute; left: 50%; transform: translateX(-50%); top: 60px; width: 80px; height: 80px; background-color: #4CAF50; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; user-select: none;\\"\\n                [style.transform]=\\"\'translateY(\' + swipePosition() + \'px)\'\\">\\n                Swipe me\\n              </div>\\n            </tgui-touch>\\n          </div>\\n          \\n          <div style=\\"margin-top: 16px; text-align: center;\\">\\n            <small>Swipe the green box up and down</small>\\n          </div>\\n        </div>\\n      `\\n    };\\n  }\\n}"}],"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts":[{"name":"CellWithInfo","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    title: \'Noah\',\\n    subtitle: \'Yesterday\',\\n    subhead: \'Subhead\',\\n    hint: \'Hint\',\\n    description: \'Description\',\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      titleValue: args.title,\\n      subtitleValue: args.subtitle,\\n      subheadValue: args.subhead,\\n      hintValue: args.hint,\\n      descriptionValue: args.description\\n    },\\n    template: `\\n      <tgui-cell\\n        [title]=\\"titleValue\\"\\n        [subtitle]=\\"subtitleValue\\"\\n        [subhead]=\\"subheadValue\\"\\n        [hint]=\\"hintValue\\"\\n        [description]=\\"descriptionValue\\"\\n      >\\n        <tgui-avatar content-slot=\\"before\\" size=\\"l\\"></tgui-avatar>\\n        <div content-slot=\\"after\\" style=\\"text-align: right;\\">\\n          <div style=\\"color: var(--tgui--link_color); font-weight: 500\\">+1000</div>\\n          <div style=\\"color: var(--tgui--secondary_hinttint_color); font-size: 12px\\">Received</div>\\n        </div>\\n      </tgui-cell>\\n    `,\\n  })\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<CellComponent>","defaultValue":"{\\n  title: \'Blocks/Cell\',\\n  component: CellComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, BadgeComponent, AvatarComponent, ContentSlotDirective],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    hovered: {\\n      control: \'boolean\',\\n      description: \'Controls the hover state of the component externally, useful for keyboard navigation\',\\n    },\\n    multiline: {\\n      control: \'boolean\',\\n      description: \'Allows for multiline content without truncation\',\\n    },\\n    interactiveAnimation: {\\n      control: { type: \'select\', options: [\'opacity\', \'background\'] },\\n      description: \'Type of animation for interaction feedback\',\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disables the cell\',\\n    },\\n    readonly: {\\n      control: \'boolean\',\\n      description: \'Makes the cell readonly\',\\n    },\\n    subhead: {\\n      control: \'text\',\\n      description: \'Content displayed above the main content as a subheading\',\\n    },\\n    title: {\\n      control: \'text\',\\n      description: \'Main content displayed as a header\',\\n    },\\n    hint: {\\n      control: \'text\',\\n      description: \'Content displayed alongside the header as a hint\',\\n    },\\n    subtitle: {\\n      control: \'text\',\\n      description: \'Content displayed below the header as a subtitle\',\\n    },\\n    description: {\\n      control: \'text\',\\n      description: \'Additional description displayed below the subtitle\',\\n    },\\n  },\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    subhead: \'Subhead\',\\n    title: \'Title\',\\n    subtitle: \'Subtitle\',\\n    description: \'Description\',\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      titleValue: args.title,\\n      subheadValue: args.subhead,\\n      subtitleValue: args.subtitle,\\n      descriptionValue: args.description\\n    },\\n    template: `\\n      <tgui-cell \\n        [hovered]=\\"hovered\\"\\n        [multiline]=\\"multiline\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n        [disabled]=\\"disabled\\"\\n        [readonly]=\\"readonly\\"\\n        [subhead]=\\"subheadValue\\"\\n        [title]=\\"titleValue\\"\\n        [subtitle]=\\"subtitleValue\\"\\n        [description]=\\"descriptionValue\\"\\n      >\\n        <tgui-badge content-slot=\\"title-badge\\" type=\\"dot\\"></tgui-badge>\\n        <tgui-avatar content-slot=\\"before\\" size=\\"l\\"></tgui-avatar>\\n        <tgui-badge content-slot=\\"after\\" type=\\"number\\">99</tgui-badge>\\n      </tgui-cell>\\n    `,\\n  })\\n}"}],"projects/tgui/.storybook/main.ts":[{"name":"config","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/.storybook/main.ts","deprecated":false,"deprecationMessage":"","type":"StorybookConfig","defaultValue":"{\\n  stories: [\\n    \'../src/**/*.mdx\',\\n    \'../src/**/*.stories.@(ts|mdx)\'\\n  ],\\n  addons: [\\n    \'@storybook/addon-essentials\',\\n    \'@storybook/addon-docs\',\\n    \'@storybook/addon-controls\',\\n  ],\\n  staticDirs: [\\n    { from: \'../src/lib/styles\', to: \'styles\' } // Без префикса assets/tgui\\n  ],\\n  framework: {\\n    name: \'@storybook/angular\',\\n    options: {\\n      enableIvy: true,\\n    },\\n  },\\n  core: {\\n    builder: \'@storybook/builder-webpack5\',\\n  },\\n  webpackFinal: async (config) => {\\n    config.resolve = {\\n      ...(config.resolve || {}),\\n      alias: {\\n        ...(config.resolve?.alias || {}),\\n        \'@components\': \'../src/lib/components\',\\n        \'@services\': \'../src/lib/services\',\\n        \'@utils\': \'../src/lib/components/utils\',\\n        \'@feedback\': \'../src/lib/components/feedback\',\\n        \'@blocks\': \'../src/lib/components/blocks\',\\n        \'@form\': \'../src/lib/components/form\',\\n        \'@layout\': \'../src/lib/components/layout\',\\n        \'@overlays\': \'../src/lib/components/overlays\',\\n        \'@typography\': \'../src/lib/components/typography\',\\n        \'@navigation\': \'../src/lib/components/navigation\',\\n        \'@directives\': \'../src/lib/directives\',\\n        \'@lib\': \'../src/lib\',\\n      },\\n    };\\n    return config;\\n  },\\n}"}],"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts":[{"name":"CustomCloseIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\" [closeIcon]=\\"closeIcon\\">\\n        <div content-slot=\\"header\\">Banner with custom close icon</div>\\n        <div content-slot=\\"description\\">This banner has a custom close icon</div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n    closeIcon: \'tgui-icon24-qr\'\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"header\\">This is a banner</div>\\n        <div content-slot=\\"description\\">Banner description that can span multiple lines and provide additional information about the banner content</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"InlineType","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"header\\">Inline banner</div>\\n        <div content-slot=\\"description\\">This banner uses the inline type</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'inline\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BannerComponent>","defaultValue":"{\\n  title: \'Blocks/Banner\',\\n  component: BannerComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [BannerComponent, ButtonComponent, TguiIcon24Qr, ContentSlotDirective],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n  argTypes: {\\n    type: {\\n      options: [\'section\', \'inline\'],\\n      control: { type: \'select\' },\\n      description: \'Specifies the banner\\\\\'s layout style\',\\n      table: {\\n        defaultValue: { summary: \'section\' },\\n      },\\n    },\\n    onCloseIcon: { \\n      action: \'onCloseIcon\' \\n    },\\n    closeIcon: {\\n      control: \'text\',\\n      description: \'Custom close icon name to display\',\\n    }\\n  },\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 8px;\\">\\n        <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\" [closeIcon]=\\"closeIcon\\">\\n          <div content-slot=\\"before\\" style=\\"width: 48px; height: 48px; background: #eaeaea; border-radius: 8px; display: flex; align-items: center; justify-content: center;\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n          </div>\\n          <div content-slot=\\"callout\\">Urgent notification</div>\\n          <div content-slot=\\"header\\">Introducing TON Space</div>\\n          <div content-slot=\\"description\\">Start exploring TON in a new, better way</div>\\n          <div content-slot=\\"buttons\\">\\n            <tgui-button size=\\"s\\">Try it out</tgui-button>\\n            <tgui-button size=\\"s\\" mode=\\"plain\\">Maybe later</tgui-button>\\n          </div>\\n        </tgui-banner>\\n      </div>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithBackground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"background\\">\\n          <div style=\\"background: linear-gradient(45deg, #4158D0, #C850C0, #FFCC70); width: 100%; height: 100%;\\"></div>\\n        </div>\\n        <div content-slot=\\"header\\">Banner with background</div>\\n        <div content-slot=\\"description\\">Description text on a colorful background</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"white\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithBeforeContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"before\\" style=\\"width: 48px; height: 48px; background: #eee; border-radius: 8px; display: flex; align-items: center; justify-content: center;\\">\\n          Icon\\n        </div>\\n        <div content-slot=\\"header\\">Banner with before content</div>\\n        <div content-slot=\\"description\\">This banner has content before the main text</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"},{"name":"WithCallout","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-banner [type]=\\"type\\" (onCloseIcon)=\\"onCloseIcon($event)\\">\\n        <div content-slot=\\"callout\\">New Feature</div>\\n        <div content-slot=\\"header\\">This is a banner with callout</div>\\n        <div content-slot=\\"description\\">Banner description that can span multiple lines and provide additional information about the banner content</div>\\n        <div content-slot=\\"buttons\\">\\n          <tgui-button size=\\"s\\" mode=\\"bezeled\\">Action</tgui-button>\\n        </div>\\n      </tgui-banner>\\n    `,\\n  }),\\n  args: {\\n    type: \'section\',\\n  },\\n}"}],"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts":[{"name":"CustomOffsets","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 20px;\\">\\n        <div>\\n          <p>Большой отступ (-6px):</p>\\n          <tgui-avatar-stack [offset]=\\"-6\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n        \\n        <div>\\n          <p>Стандартный отступ (-12px):</p>\\n          <tgui-avatar-stack [offset]=\\"-12\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n        \\n        <div>\\n          <p>Маленький отступ (-18px):</p>\\n          <tgui-avatar-stack [offset]=\\"-18\\">\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n            <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          </tgui-avatar-stack>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  }\\n}"},{"name":"DifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 20px;\\">\\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'s\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n        \\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n        \\n        <tgui-avatar-stack>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n          <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'l\'\\"></tgui-avatar>\\n        </tgui-avatar-stack>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AvatarStackComponent>","defaultValue":"{\\n  title: \'Blocks/AvatarStack\',\\n  component: AvatarStackComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [AvatarComponent],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  argTypes: {\\n    offset: {\\n      control: { type: \'range\', min: -24, max: 0, step: 1 },\\n      defaultValue: -12,\\n      description: \'Смещение между аватарами в пикселях\'\\n    }\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=2\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"},{"name":"WithInitials","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [initials]=\\"\'AB\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'CD\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'EF\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"},{"name":"WithMixedContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    offset: -12\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-avatar-stack [offset]=\\"offset\\">\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=1\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [initials]=\\"\'CD\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n        <tgui-avatar [src]=\\"\'https://i.pravatar.cc/150?img=3\'\\" [size]=\\"\'m\'\\"></tgui-avatar>\\n      </tgui-avatar-stack>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/misc/divider/divider.stories.ts":[{"name":"CustomStyle","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Обычный разделитель</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Кастомный разделитель</div>\\n        <tgui-divider style=\\"border-color: var(--tgui--button_color); border-width: 2px;\\"></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент после разделителя</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент выше разделителя</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 10px 0; color: var(--tgui--text_color);\\">Элемент ниже разделителя</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"InList","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 300px; padding: 16px; background: var(--tgui--secondary_bg_color);\\">\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Первый элемент списка</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Второй элемент списка</div>\\n        <tgui-divider></tgui-divider>\\n        <div style=\\"padding: 12px 0; color: var(--tgui--text_color);\\">Третий элемент списка</div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<DividerComponent>","defaultValue":"{\\n  title: \'Misc/Divider\',\\n  component: DividerComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [DividerComponent],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n}"}],"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\">\\n        This is a blockquote with default styling.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<BlockquoteComponent>","defaultValue":"{\\n  title: \'Blocks/Blockquote\',\\n  component: BlockquoteComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        BlockquoteComponent, \\n        TextComponent,\\n        TguiDynamicIconComponent\\n      ]\\n    })\\n  ],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    icon: {\\n      control: \'text\',\\n      description: \'The icon to display in the top right corner\'\\n    },\\n    text: {\\n      control: \'text\',\\n      description: \'Optional text to display as a headline above the content\'\\n    }\\n  }\\n}"},{"name":"MultipleExamples","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px;\\">\\n        <tgui-blockquote icon=\\"quote\\" text=\\"Simple example with text\\">\\n          Basic blockquote with text headline and default quote icon.\\n        </tgui-blockquote>\\n        \\n        <tgui-blockquote icon=\\"chevron\\">\\n          Blockquote with only content and custom chevron icon.\\n        </tgui-blockquote>\\n        \\n        <tgui-blockquote icon=\\"quote\\" text=\\"Complex content example\\">\\n          <div style=\\"padding: 4px 0;\\">\\n            <strong>HTML content</strong>\\n            <p style=\\"margin: 4px 0 0 0;\\">With formatted elements</p>\\n          </div>\\n        </tgui-blockquote>\\n      </div>\\n    `\\n  })\\n}"},{"name":"WithComplexContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\">\\n        <div style=\\"padding: 8px 0;\\">\\n          <strong>Custom content</strong>\\n          <p style=\\"margin: 4px 0 0 0;\\">This blockquote contains custom HTML content.</p>\\n        </div>\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithCustomIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'chevron\',\\n    text: \'Blockquote with chevron icon\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is a blockquote with a custom chevron icon.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithLargerIcon","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'backspace\',\\n    text: \'Blockquote with larger quote icon\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is a blockquote with a larger quote icon.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithText","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\',\\n    text: \'This is the headline text\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        This is the content below the headline.\\n      </tgui-blockquote>\\n    `\\n  })\\n}"},{"name":"WithTextAndComplexContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    icon: \'quote\',\\n    text: \'Complex content example\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-blockquote [icon]=\\"icon\\" [text]=\\"text\\">\\n        <div style=\\"padding: 8px 0;\\">\\n          <strong>Custom content below the headline</strong>\\n          <p style=\\"margin: 4px 0 0 0;\\">This shows how to combine text headline with complex content.</p>\\n        </div>\\n      </tgui-blockquote>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    mode: \'bezeled\',\\n    disabled: false,\\n    interactiveAnimation: \'background\',\\n    type: \'button\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-icon-button\\n        [size]=\\"size\\"\\n        [mode]=\\"mode\\"\\n        [disabled]=\\"disabled\\"\\n        [interactiveAnimation]=\\"interactiveAnimation\\"\\n        [type]=\\"type\\"\\n      >\\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n      </tgui-icon-button>\\n    `\\n  })\\n}"},{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"bezeled\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"plain\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"gray\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button [disabled]=\\"true\\" mode=\\"outline\\">\\n          <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path d=\\"M12 21V3\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n            <path d=\\"M5 10L12 3L19 10\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\"/>\\n          </svg>\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconButtonComponent>","defaultValue":"{\\n  title: \'Blocks/IconButton\',\\n  component: IconButtonComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, TappableComponent, TguiIcon20QuestionMark, TguiIcon24Notifications, TguiIcon28Chat],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'s\', \'m\', \'l\'],\\n      control: { type: \'select\' },\\n      description: \'Size of the icon button\',\\n      table: {\\n        type: { summary: \'s | m | l\' },\\n        defaultValue: { summary: \'m\' }\\n      }\\n    },\\n    mode: {\\n      options: [\'bezeled\', \'plain\', \'gray\', \'outline\'],\\n      control: { type: \'select\' },\\n      description: \'Visual style of the button\',\\n      table: {\\n        type: { summary: \'bezeled | plain | gray | outline\' },\\n        defaultValue: { summary: \'bezeled\' }\\n      }\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Whether the button is disabled\',\\n      table: {\\n        type: { summary: \'boolean\' },\\n        defaultValue: { summary: \'false\' }\\n      }\\n    },\\n    interactiveAnimation: {\\n      options: [\'opacity\', \'background\'],\\n      control: { type: \'select\' },\\n      description: \'Type of animation on interaction\',\\n      table: {\\n        type: { summary: \'opacity | background\' },\\n        defaultValue: { summary: \'background\' }\\n      }\\n    },\\n    type: {\\n      options: [\'button\', \'submit\', \'reset\'],\\n      control: { type: \'select\' },\\n      description: \'HTML button type\',\\n      table: {\\n        type: { summary: \'button | submit | reset\' },\\n        defaultValue: { summary: \'button\' }\\n      }\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: \'The IconButton component is designed for icon-only buttons. It supports different sizes and visual styles.\'\\n      }\\n    }\\n  }\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n      \\n        <tgui-icon-button mode=\\"bezeled\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"plain\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"gray\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button mode=\\"outline\\">\\n          <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Sizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px; align-items: center;\\">\\n        <tgui-icon-button size=\\"s\\">\\n        <tgui-icon20-question-mark></tgui-icon20-question-mark>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button size=\\"m\\">\\n        <tgui-icon24-notifications></tgui-icon24-notifications>\\n\\n        </tgui-icon-button>\\n        \\n        <tgui-icon-button size=\\"l\\">\\n        <tgui-icon28-chat></tgui-icon28-chat>\\n        </tgui-icon-button>\\n      </div>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconContainerComponent>","defaultValue":"{\\n  title: \'Blocks/IconContainer\',\\n  component: IconContainerComponent,\\n  tags: [\'autodocs\'],\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-icon-container>\\n        <svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <path d=\\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\\" fill=\\"currentColor\\" />\\n        </svg>\\n      </tgui-icon-container>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-list>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 1</div>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 2</div>\\n        <div style=\\"background: var(--tgui--secondary_fill); padding: 16px; border-radius: 12px;\\">List item 3</div>\\n      </tgui-list>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ListComponent>","defaultValue":"{\\n  title: \'Blocks/List\',\\n  component: ListComponent,\\n  tags: [\'autodocs\'],\\n  argTypes: {},\\n}"}],"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Section Header\',\\n    footer: \'Section Footer\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"header\\" [footer]=\\"footer\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Basic section content</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SectionComponent>","defaultValue":"{\\n  title: \'Blocks/Section\',\\n  component: SectionComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        SectionComponent,\\n        SectionHeaderComponent,\\n        SectionFooterComponent,\\n        TextComponent,\\n        DividerComponent\\n      ],\\n    }),\\n  ],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n}"},{"name":"MultipleItems","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'Multiple Items\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"header\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>First section item</tgui-text>\\n          </div>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Second section item</tgui-text>\\n          </div>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Third section item</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithCenteredFooter","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-section-header>Section Header</tgui-section-header>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Section with centered footer</tgui-text>\\n          </div>\\n          <tgui-section-footer [centered]=\\"true\\">Centered Footer</tgui-section-footer>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithLargeHeader","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <div style=\\"width: 400px; background-color: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-section-header [large]=\\"true\\">Large Header</tgui-section-header>\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Section with large header</tgui-text>\\n          </div>\\n        </tgui-section>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <p>This is a spoiler content that can be hidden or shown with a click.</p>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"},{"name":"LongContent","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <div style=\\"max-width: 500px;\\">\\n          <h3>Hidden Information</h3>\\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum euismod, nunc eget aliquam ultricies, \\n          nunc nisl ultricies nunc, eget aliquet nunc nisl eget nunc. Vestibulum euismod, nunc eget aliquam ultricies, \\n          nunc nisl ultricies nunc, eget aliquet nunc nisl eget nunc.</p>\\n          <p>Click to toggle visibility.</p>\\n        </div>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"},{"name":"Visible","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    visible: true\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-spoiler [visible]=\\"visible\\">\\n        <p>This spoiler content is visible by default.</p>\\n      </tgui-spoiler>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PopperDemoComponent>","defaultValue":"{\\n  title: \'Components/Overlays/Popper\',\\n  component: PopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, ButtonComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'bottom\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    offsetByCrossAxis: {\\n      control: { type: \'number\', min: -32, max: 32, step: 2 },\\n      description: \'Offset along the cross axis (in pixels)\',\\n      defaultValue: 0,\\n    },\\n    sameWidth: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should have the same width as the target element\',\\n      defaultValue: false,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    },\\n    hide: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should hide when there is no space for it\',\\n      defaultValue: false,\\n    },\\n    autoPlacement: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should auto-place in the available space\',\\n      defaultValue: false,\\n    },\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Popper component provides a way to position floating elements relative to a reference element.\'\\n      }\\n    }\\n  },\\n}"},{"name":"PopperWithCloseButton","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"CloseButtonStory","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    component: PopperWithCloseButtonDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper with a close button inside and click-outside functionality to dismiss it.\'\\n      }\\n    }\\n  }\\n}"},{"name":"TogglePopper","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"ToggleStory","defaultValue":"{\\n  render: (args) => ({\\n    props: args,\\n    component: PopperToggleDemoComponent,\\n  }),\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'A popper that can be toggled on and off with a button click.\'\\n      }\\n    }\\n  }\\n}"}],"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \'This example shows how to use the Popper component with a touch zone. The popper appears at the exact location where the user clicks or taps and automatically disappears after 3 seconds or when clicking outside of it.\'\\n      }\\n    }\\n  }\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TouchPopperDemoComponent>","defaultValue":"{\\n  title: \'Components/Overlays/Popper/Touch\',\\n  component: TouchPopperDemoComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [PopperComponent, TouchComponent, CommonModule],\\n    }),\\n  ],\\n  argTypes: {\\n    placement: {\\n      control: \'select\',\\n      options: [\'top\', \'bottom\', \'left\', \'right\'],\\n      description: \'The preferred placement of the popper\',\\n      defaultValue: \'top\',\\n    },\\n    offsetByMainAxis: {\\n      control: { type: \'number\', min: 0, max: 32, step: 2 },\\n      description: \'Offset along the main axis (in pixels)\',\\n      defaultValue: 8,\\n    },\\n    flip: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should flip to the opposite side when it overflows\',\\n      defaultValue: true,\\n    },\\n    shift: {\\n      control: \'boolean\',\\n      description: \'Whether the popper should shift to stay in view when it would overflow\',\\n      defaultValue: true,\\n    }\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'Interactive Touch Popper shows how to display a popper at the exact location where a user touches or clicks on the screen.\'\\n      }\\n    }\\n  }\\n}"}],"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts":[{"name":"DifferentShapes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar shape=\\"circle\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n        <tgui-avatar shape=\\"rounded\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n        <tgui-avatar shape=\\"square\\" size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\"></tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"DifferentSizes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar size=\\"xs\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"s\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"m\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"l\\" initials=\\"JD\\"></tgui-avatar>\\n        <tgui-avatar size=\\"xl\\" initials=\\"JD\\"></tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AvatarComponent>","defaultValue":"{\\n  title: \'Blocks/Avatar\',\\n  component: AvatarComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, AvatarComponent, AvatarBadgeComponent],\\n    }),\\n  ],\\n  argTypes: {\\n    size: {\\n      options: [\'xs\', \'s\', \'m\', \'l\', \'xl\'],\\n      control: { type: \'select\' },\\n      description: \'Размер аватара\',\\n      defaultValue: \'m\',\\n    },\\n    shape: {\\n      options: [\'circle\', \'rounded\', \'square\'],\\n      control: { type: \'select\' },\\n      description: \'Форма аватара\',\\n      defaultValue: \'circle\',\\n    },\\n    src: {\\n      control: \'text\',\\n      description: \'URL изображения аватара\',\\n    },\\n    initials: {\\n      control: \'text\',\\n      description: \'Текст для формирования инициалов, если изображение отсутствует\',\\n    },\\n    color: {\\n      control: \'color\',\\n      description: \'Цвет фона для аватара с инициалами\',\\n    },\\n    online: {\\n      control: \'boolean\',\\n      description: \'Индикатор онлайн-статуса\',\\n      defaultValue: false,\\n    },\\n  },\\n}"},{"name":"UserCardExample","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\\">\\n        <div style=\\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\\">\\n          <tgui-avatar size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\" online=\\"true\\"></tgui-avatar>\\n          <div>\\n            <div style=\\"font-weight: 600; margin-bottom: 4px;\\">John Doe</div>\\n            <div style=\\"color: var(--tgui--hint_color); font-size: 14px;\\">Last seen just now</div>\\n          </div>\\n          <div style=\\"margin-left: auto;\\">\\n            <tgui-avatar-badge [count]=\\"10\\"></tgui-avatar-badge>\\n          </div>\\n        </div>\\n        \\n        <div style=\\"display: flex; align-items: center; gap: 12px; position: relative; padding: 16px; background-color: var(--tgui--secondary_bg_color); border-radius: 12px;\\">\\n          <tgui-avatar size=\\"l\\" initials=\\"Anna Smith\\" color=\\"#8e24aa\\"></tgui-avatar>\\n          <div>\\n            <div style=\\"font-weight: 600; margin-bottom: 4px;\\">Anna Smith</div>\\n            <div style=\\"color: var(--tgui--hint_color); font-size: 14px;\\">Last seen 2 hours ago</div>\\n          </div>\\n          <div style=\\"margin-left: auto;\\">\\n            <tgui-avatar-badge [count]=\\"3\\"></tgui-avatar-badge>\\n          </div>\\n        </div>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithBadge","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; align-items: center; gap: 16px;\\">\\n        <tgui-avatar size=\\"l\\" src=\\"https://randomuser.me/api/portraits/men/32.jpg\\">\\n          <tgui-avatar-badge [count]=\\"5\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n        \\n        <tgui-avatar size=\\"l\\" initials=\\"John Doe\\">\\n          <tgui-avatar-badge [count]=\\"42\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n        \\n        <tgui-avatar size=\\"l\\" initials=\\"Overflow\\" color=\\"#e91e63\\">\\n          <tgui-avatar-badge [count]=\\"999\\"></tgui-avatar-badge>\\n        </tgui-avatar>\\n      </div>\\n    `,\\n  }),\\n}"},{"name":"WithCustomColor","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    initials: \'John Doe\',\\n    color: \'#3949ab\',\\n  },\\n}"},{"name":"WithImage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    src: \'https://randomuser.me/api/portraits/men/32.jpg\',\\n    alt: \'User avatar\',\\n  },\\n}"},{"name":"WithInitials","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    initials: \'John Doe\',\\n  },\\n}"},{"name":"WithOnlineStatus","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'m\',\\n    shape: \'circle\',\\n    src: \'https://randomuser.me/api/portraits/women/44.jpg\',\\n    online: true,\\n  },\\n}"}],"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts":[{"name":"Disabled","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; gap: 16px;\\">\\n        <tgui-inline-buttons mode=\\"bezeled\\">\\n          <tgui-inline-buttons-item [text]=\\"\'Enabled\'\\">\\n            <tgui-icon24-chat></tgui-icon24-chat>\\n          </tgui-inline-buttons-item>\\n          <tgui-inline-buttons-item [disabled]=\\"true\\" [text]=\\"\'Disabled\'\\">\\n            <tgui-icon24-notifications></tgui-icon24-notifications>\\n          </tgui-inline-buttons-item>\\n          <tgui-inline-buttons-item [text]=\\"\'Enabled\'\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n          </tgui-inline-buttons-item>\\n        </tgui-inline-buttons>\\n      </div>\\n    `\\n  })\\n}"},{"name":"ItemModes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Mixed Modes</h3>\\n          <tgui-inline-buttons mode=\\"plain\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Plain\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [mode]=\\"\'bezeled\'\\" [text]=\\"\'Bezeled\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [mode]=\\"\'gray\'\\" [text]=\\"\'Gray\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<InlineButtonsComponent>","defaultValue":"{\\n  title: \'Blocks/InlineButtons\',\\n  component: InlineButtonsComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        InlineButtonsItemComponent,\\n        TappableComponent,\\n        TguiIcon24Chat,\\n        TguiIcon24Notifications,\\n        TguiIcon24Qr\\n      ],\\n    }),\\n  ],\\n  argTypes: {\\n    mode: {\\n      options: [\'plain\', \'bezeled\', \'gray\'],\\n      control: { type: \'select\' },\\n      description: \'Visual style of the buttons\',\\n      table: {\\n        type: { summary: \'plain | bezeled | gray\' },\\n        defaultValue: { summary: \'plain\' }\\n      }\\n    }\\n  },\\n  parameters: {\\n    layout: \'centered\',\\n    docs: {\\n      description: {\\n        component: \'The InlineButtons component is a container for multiple inline button items, providing a consistent styling and layout. It is commonly used for action bars or tool strips.\'\\n      }\\n    }\\n  }\\n}"},{"name":"Modes","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"display: flex; flex-direction: column; gap: 24px;\\">\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Plain Mode</h3>\\n          <tgui-inline-buttons mode=\\"plain\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Bezeled Mode</h3>\\n          <tgui-inline-buttons mode=\\"bezeled\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n\\n        <div>\\n          <h3 style=\\"margin-bottom: 8px; font-size: 14px; color: #666;\\">Gray Mode</h3>\\n          <tgui-inline-buttons mode=\\"gray\\">\\n            <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n              <tgui-icon24-chat></tgui-icon24-chat>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n              <tgui-icon24-notifications></tgui-icon24-notifications>\\n            </tgui-inline-buttons-item>\\n            <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n              <tgui-icon24-qr></tgui-icon24-qr>\\n            </tgui-inline-buttons-item>\\n          </tgui-inline-buttons>\\n        </div>\\n      </div>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    mode: \'plain\'\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-inline-buttons [mode]=\\"mode\\">\\n        <tgui-inline-buttons-item [text]=\\"\'Chat\'\\">\\n            <tgui-icon24-chat></tgui-icon24-chat>\\n        </tgui-inline-buttons-item>\\n        <tgui-inline-buttons-item [text]=\\"\'Mute\'\\">\\n            <tgui-icon24-notifications></tgui-icon24-notifications>\\n        </tgui-inline-buttons-item>\\n        <tgui-inline-buttons-item [text]=\\"\'QR\'\\">\\n            <tgui-icon24-qr></tgui-icon24-qr>\\n        </tgui-inline-buttons-item>\\n      </tgui-inline-buttons>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts":[{"name":"FewSteps","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 3,\\n    progress: 1,\\n  },\\n}"},{"name":"ManySteps","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 20,\\n    progress: 15,\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<StepsComponent>","defaultValue":"{\\n  title: \'Blocks/Steps\',\\n  component: StepsComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [StepsComponent]\\n    })\\n  ],\\n  tags: [\'autodocs\'],\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    count: 10,\\n    progress: 5,\\n  },\\n}"}],"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts":[{"name":"Horizontal","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    ...Playground.args,\\n    horizontal: true\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      timelineItems\\n    },\\n    template: `\\n      <tgui-timeline [active]=\\"active\\" [horizontal]=\\"horizontal\\">\\n        <tgui-timeline-item \\n          *ngFor=\\"let item of timelineItems\\"\\n          [header]=\\"item.header\\"\\n        >\\n          {{item.content}}\\n        </tgui-timeline-item>\\n      </tgui-timeline>\\n    `\\n  })\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TimelineComponent>","defaultValue":"{\\n  title: \'Blocks/Timeline\',\\n  component: TimelineComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TimelineComponent, TimelineItemComponent]\\n    })\\n  ]\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    active: 2\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      timelineItems\\n    },\\n    template: `\\n      <tgui-timeline [active]=\\"active\\">\\n        <tgui-timeline-item \\n          *ngFor=\\"let item of timelineItems\\"\\n          [header]=\\"item.header\\"\\n        >\\n          {{item.content}}\\n        </tgui-timeline-item>\\n      </tgui-timeline>\\n    `\\n  })\\n}"},{"name":"timelineItems","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  {\\n    key: \'1\',\\n    header: \'Arrived\',\\n    content: \'Yesterday\'\\n  },\\n  {\\n    key: \'2\',\\n    header: \'Departed\',\\n    content: \'Today\'\\n  },\\n  {\\n    key: \'3\',\\n    header: \'In transit\',\\n    content: \'Tomorrow\'\\n  },\\n  {\\n    key: \'4\',\\n    header: \'Processed to delivery center\',\\n    content: \'Next week\'\\n  },\\n  {\\n    key: \'5\',\\n    header: \'Shipped\',\\n    content: \'Someday\'\\n  }\\n]"}],"projects/tgui/src/lib/icons/story/icons.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<IconsShowcaseComponent>","defaultValue":"{\\n  title: \'Icons/Overview\',\\n  component: IconsShowcaseComponent,\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n}"},{"name":"Overview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {},\\n}"}],"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<AccordionComponent>","defaultValue":"{\\n  title: \'Blocks/Accordion\',\\n  component: AccordionComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        AccordionComponent, \\n        AccordionSummaryComponent, \\n        AccordionContentComponent,\\n        SectionComponent,\\n        BlockquoteComponent\\n      ],\\n    }),\\n  ],\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'padded\',\\n  },\\n}"},{"name":"MultipleAccordions","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      accordion1: false,\\n      accordion2: false,\\n      accordion3: false,\\n      nestedAccordion: false,\\n      \\n      toggleAccordion1: function() {\\n        this[\'accordion1\'] = !this[\'accordion1\'];\\n      },\\n      toggleAccordion2: function() {\\n        this[\'accordion2\'] = !this[\'accordion2\'];\\n      },\\n      toggleAccordion3: function() {\\n        this[\'accordion3\'] = !this[\'accordion3\'];\\n      },\\n      toggleNestedAccordion: function() {\\n        this[\'nestedAccordion\'] = !this[\'nestedAccordion\'];\\n      }\\n    },\\n    template: `\\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px; margin-bottom: 20px;\\">\\n        <div style=\\"padding: 16px;\\">\\n            <tgui-text>Basic section content</tgui-text>\\n          </div>\\n        <tgui-accordion [expanded]=\\"accordion1\\" (expandedChange)=\\"toggleAccordion1()\\" style=\\"margin-bottom: 8px\\">\\n          <tgui-accordion-summary>\\n            First accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the first accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n        \\n        <tgui-accordion [expanded]=\\"accordion2\\" (expandedChange)=\\"toggleAccordion2()\\" style=\\"margin-bottom: 8px\\">\\n          <tgui-accordion-summary>\\n            Second accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the second accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n        \\n        <tgui-accordion [expanded]=\\"accordion3\\" (expandedChange)=\\"toggleAccordion3()\\">\\n          <tgui-accordion-summary>\\n            Third accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the third accordion.</p>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n      \\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px;\\">\\n          <div style=\\"padding: 16px;\\">\\n            <tgui-text>Multiple accordions</tgui-text>\\n          </div>        \\n        <tgui-accordion>\\n          <tgui-accordion-summary>\\n            Parent accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <p>This is the content of the parent accordion.</p>\\n              \\n              <tgui-accordion  style=\\"margin-top: 16px\\">\\n                <tgui-accordion-summary>\\n                  Nested accordion\\n                </tgui-accordion-summary>\\n                <tgui-accordion-content>\\n                  <div style=\\"padding: 10px 20px 20px;\\">\\n                    <p>This is the content of the nested accordion.</p>\\n                    <p>The chevron icon should only respond to its direct parent accordion state.</p>\\n                  </div>\\n                </tgui-accordion-content>\\n              </tgui-accordion>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {\\n      expanded: false,\\n      toggleExpanded: function() {\\n        this[\'expanded\'] = !this[\'expanded\'];\\n      },\\n    },\\n    template: `\\n      <tgui-section style=\\"background: var(--tgui--secondary_bg_color); padding: 20px; width: 358px;\\">\\n        <tgui-accordion [expanded]=\\"expanded\\" (expandedChange)=\\"toggleExpanded()\\">\\n          <tgui-accordion-summary>\\n            History of accordion\\n          </tgui-accordion-summary>\\n          <tgui-accordion-content>\\n            <div style=\\"padding: 10px 20px 20px;\\">\\n              <tgui-blockquote>\\n                The accordion\'s basic form is believed to have been invented in Berlin, in 1822,\\n                by Christian Friedrich Ludwig Buschmann, although one instrument was discovered in 2006\\n                that appears to have been built earlier. The earliest history of the accordion in Russia is poorly documented.\\n              </tgui-blockquote>\\n            </div>\\n          </tgui-accordion-content>\\n        </tgui-accordion>\\n      </tgui-section>\\n    `\\n  }),\\n  args: {\\n    expanded: false\\n  }\\n}"}],"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<SnackbarComponent>","defaultValue":"{\\n  title: \'Feedback/Snackbar\',\\n  component: SnackbarComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        SnackbarComponent,\\n        SnackbarButtonComponent,\\n        RootPortalComponent,\\n        TappableComponent,\\n        RootComponent,\\n        ButtonComponent,\\n        DemoSnackbarComponent\\n      ],\\n      providers: [PlatformService]\\n    })\\n  ],\\n  parameters: {\\n    layout: \'fullscreen\'\\n  },\\n  argTypes: {\\n    description: {\\n      control: \'text\',\\n      description: \'Additional text description shown below the main message\'\\n    },\\n    duration: {\\n      control: {\\n        type: \'number\',\\n        min: 1000,\\n        max: 10000,\\n        step: 1000\\n      },\\n      description: \'Duration in milliseconds before the snackbar is automatically closed\'\\n    },\\n    beforeTemplate: { control: false },\\n    afterTemplate: { control: false },\\n    linkTemplate: { control: false },\\n    onClose: { control: false }\\n  }\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  parameters: {\\n    controls: { hideNoControlsWarning: true }\\n  },\\n  render: () => ({\\n    template: `<demo-snackbar></demo-snackbar>`\\n  })\\n}"}],"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<FixedLayoutComponent>","defaultValue":"{\\n  title: \'Layout/FixedLayout\',\\n  component: FixedLayoutComponent,\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  argTypes: {\\n    vertical: {\\n      control: \'radio\',\\n      options: [\'top\', \'bottom\'],\\n      description: \'Vertical position of the layout\',\\n      defaultValue: \'bottom\',\\n    }\\n  },\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    props: {},\\n    template: `\\n      <div style=\\"height: 200px; width: 300px; \\">\\n        <tgui-fixed-layout vertical=\\"top\\" style=\\"padding: 16px;\\">\\n          <tgui-button size=\\"l\\" [stretched]=\\"true\\">\\n            This is FixedLayout with top vertical\\n          </tgui-button>\\n        </tgui-fixed-layout>\\n        \\n        <tgui-fixed-layout style=\\"padding: 16px;\\">\\n          <tgui-button size=\\"l\\" [stretched]=\\"true\\">\\n            This is FixedLayout with default vertical\\n          </tgui-button>\\n        </tgui-fixed-layout>\\n      </div>\\n    `,\\n    moduleMetadata: {\\n      imports: [FixedLayoutComponent, ButtonComponent]\\n    }\\n  }),\\n}"}],"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TimelineItemComponent>","defaultValue":"{\\n  title: \'Blocks/Timeline/Timeline Item\',\\n  component: TimelineItemComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [TimelineItemComponent]\\n    })\\n  ]\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    header: \'It\\\\\'s my header = header prop\',\\n  },\\n  render: (args) => ({\\n    props: args,\\n    template: `\\n      <tgui-timeline-item [header]=\\"header\\">\\n        It\'s my description = content projection\\n      </tgui-timeline-item>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<ButtonCellComponent>","defaultValue":"{\\n  title: \'Blocks/Cell/ButtonCell\',\\n  component: ButtonCellComponent,\\n  parameters: {\\n    layout: \'centered\',\\n  },\\n  decorators: [\\n    moduleMetadata({\\n      imports: [\\n        CommonModule,\\n        TguiIcon28AddCircle,\\n        SectionComponent,\\n        CellComponent,\\n        ContentSlotDirective,\\n        TguiIcon32ProfileColoredSquare,\\n        ListComponent\\n      ],\\n    }),\\n  ],\\n  argTypes: {\\n    mode: {\\n      control: { type: \'select\', options: [\'default\', \'destructive\'] },\\n      description: \'Determines the button cell\\\\\'s visual theme\',\\n    },\\n    disabled: {\\n      control: \'boolean\',\\n      description: \'Disables button interaction\',\\n    }\\n  }\\n}","rawdescription":"The ButtonCell component is an interactive cell component that combines\\nthe flexibility of a cell with button-like interaction behavior.","description":"<p>The ButtonCell component is an interactive cell component that combines\\nthe flexibility of a cell with button-like interaction behavior.</p>\\n"},{"name":"Multiple","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n    <tgui-list>\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section [header]=\\"\'Account Settings\'\\">\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Username\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Phone Number\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Change Email\\n          </tgui-button-cell>\\n        </tgui-section>\\n\\n        <tgui-section [header]=\\"\'Privacy & Security\'\\" style=\\"margin-top: 16px;\\">\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Privacy Settings\\n          </tgui-button-cell>\\n          <tgui-button-cell>\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Security Settings\\n          </tgui-button-cell>\\n          <tgui-button-cell [mode]=\\"\'destructive\'\\">\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Delete Account\\n          </tgui-button-cell>\\n        </tgui-section>\\n      </div>\\n    </tgui-list>\\n    `\\n  })\\n}"},{"name":"Playground","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    mode: \'default\',\\n    disabled: false\\n  },\\n  render: (args) => ({\\n    props: {\\n      ...args,\\n      modeValue: args.mode,\\n      disabledValue: args.disabled\\n    },\\n    template: `\\n    <tgui-list>\\n      <div style=\\"background: var(--tgui--secondary_bg_color); padding: 10px;\\">\\n        <tgui-section>\\n          <tgui-cell\\n            [title]=\\"\'My Ads\'\\"\\n            [subtitle]=\\"\'Manage ads and payment settings\'\\"\\n          >\\n            <tgui-icon32-profile-colored-square content-slot=\\"before\\"></tgui-icon32-profile-colored-square>\\n          </tgui-cell>\\n          <tgui-button-cell\\n            [mode]=\\"modeValue\\"\\n            [disabled]=\\"disabledValue\\"\\n          >\\n            <tgui-icon28-add-circle content-slot=\\"before\\"></tgui-icon28-add-circle>\\n            Create Ad\\n          </tgui-button-cell>\\n        </tgui-section>\\n      </div>\\n    </tgui-list>\\n    `\\n  })\\n}"}],"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts":[{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<RippleComponent>","defaultValue":"{\\n  title: \'Utils/Ripple\',\\n  component: RippleComponent,\\n  tags: [\'autodocs\'],\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, RippleComponent],\\n    }),\\n  ],\\n}"},{"name":"Preview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    styles: [`\\n      .ripple-demo {\\n        position: relative;\\n        width: 200px;\\n        height: 200px;\\n        background-color: var(--tgui--secondary_fill);\\n        border-radius: 8px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        margin-bottom: 16px;\\n      }\\n      \\n      .ripple-demo::after {\\n        content: \'Click for demonstration\';\\n        position: relative;\\n        z-index: 1;\\n      }\\n      \\n      .description {\\n        max-width: 600px;\\n        margin-bottom: 16px;\\n      }\\n    `],\\n    template: `\\n      <div class=\\"description\\">\\n        <p>Ripple component creates a wave effect when an interactive element is pressed.\\n           This effect is automatically used in the Button component with interactiveAnimation=\\"background\\" value.</p>\\n        <p>Ripple effect is displayed only on non-iOS platforms as it does not comply with iOS design guidelines.</p>\\n      </div>\\n      \\n      <div #container class=\\"ripple-demo\\" (click)=\\"addRipple($event)\\">\\n        <tgui-ripple [waves]=\\"waves\\"></tgui-ripple>\\n      </div>\\n    `,\\n    props: {\\n      waves: [] as RippleWave[],\\n      addRipple: function(event: MouseEvent) {\\n        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();\\n        const x = event.clientX - rect.left;\\n        const y = event.clientY - rect.top;\\n        \\n        const newWave: RippleWave = {\\n          x,\\n          y,\\n          date: Date.now(),\\n          pointerId: Date.now() // use timestamp as a unique ID\\n        };\\n        \\n        this[\'waves\'] = [...this[\'waves\'], newWave];\\n        \\n        // Clear the wave after animation completes\\n        setTimeout(() => {\\n          this[\'waves\'] = this[\'waves\'].filter((wave: RippleWave) => wave.date !== newWave.date);\\n        }, 300);\\n      }\\n    } as RippleDemoProps\\n  }),\\n}"},{"name":"Usage","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: () => ({\\n    template: `\\n      <div style=\\"max-width: 700px;\\">\\n        <h3>How to use Ripple</h3>\\n        <p>The Ripple component is usually not used directly in developer code, \\n        but is integrated into buttons and other interactive elements.</p>\\n        \\n        <h4>Example of usage in the Button component:</h4>\\n        <pre>\\n&lt;tgui-button interactiveAnimation=\\"background\\"&gt;\\n  With ripple effect\\n&lt;/tgui-button&gt;\\n        </pre>\\n        \\n        <p>The Ripple component is automatically displayed only on non-iOS platforms and\\n        when the button has the parameter interactiveAnimation=\\"background\\".</p>\\n      </div>\\n    `,\\n  }),\\n}"}],"projects/tgui/.storybook/preview.ts":[{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CommonModule, RootComponent],\\n      providers: [\\n        ThemeService, \\n        PlatformService, \\n        PortalService,\\n        TelegramService,\\n        {\\n          provide: TGUI_CONFIG,\\n          useValue: {\\n            platform: \'base\',\\n            appearance: \'light\',\\n            followSystemTheme: false\\n          }\\n        },\\n      ],\\n    }),\\n    \\n    componentWrapperDecorator(\\n      story => `<tgui-root [appearance]=\\"appearance\\" [platform]=\\"platform\\"><div style=\\"background-color: var(--tgui--bg_color); padding: 3rem;\\">${story}</div></tgui-root>`,\\n      ({globals: {theme, platform}}) => ({\\n        appearance: theme,\\n        platform: platform\\n      })\\n    )\\n  ],\\n  parameters: {\\n    controls: {\\n      matchers: {\\n        color: /(background|color)$/i,\\n        date: /Date$/i,\\n      },\\n    },\\n  },\\nglobalTypes: {\\n    platform: {\\n      name: \'Platform\',\\n      description: \'Platform for components\',\\n      defaultValue: \'base\',\\n      toolbar: {\\n        icon: \'mobile\',\\n        items: [\'base\', \'ios\'],\\n        title: \'Platform\',\\n        dynamicTitle: true,\\n      },\\n    },\\n    theme: {\\n      description: \'Global theme for components\',\\n      defaultValue: \'light\',\\n      toolbar: {\\n        title: \'Theme\',\\n        icon: \'circlehollow\',\\n        items: [\'light\', \'dark\'],\\n        dynamicTitle: true,\\n      },\\n    },\\n  },\\n}"}],"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts":[{"name":"TGUI_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<{\\n  platform?: PlatformType;\\n  appearance?: AppearanceType;\\n  followSystemTheme?: boolean;\\n}>(\'TGUI_CONFIG\')"}]},"groupedFunctions":{"projects/tgui/src/lib/utils/theme-helper.ts":[{"name":"applyTheme","file":"projects/tgui/src/lib/utils/theme-helper.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Apply the specified theme by adding the appropriate CSS class to the document&#39;s root element</p>\\n","args":[{"name":"theme","type":"AppearanceType","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":359,"end":364,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"theme"},"type":"AppearanceType","deprecated":false,"deprecationMessage":"","tagName":{"pos":353,"end":358,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The theme to apply (&#39;light&#39; or &#39;dark&#39;)</p>\\n"}]},{"name":"setupSystemThemeDetection","file":"projects/tgui/src/lib/utils/theme-helper.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Setup system theme detection using prefers-color-scheme</p>\\n","args":[{"name":"callback","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"void","jsdoctags":[{"name":{"pos":766,"end":774,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"callback"},"deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":760,"end":765,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional callback function that will be called when the theme changes</p>\\n"},{"tagName":{"pos":849,"end":856,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function to cleanup the listeners</p>\\n"}]}],"projects/tgui/src/lib/utils/has-node.ts":[{"name":"hasNode","file":"projects/tgui/src/lib/utils/has-node.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Utility function to check if a node exists in Angular\\nUsed to conditionally render elements based on whether content exists</p>\\n","args":[{"name":"node","type":"any","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"node","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}]},"groupedEnumerations":{},"groupedTypeAliases":{"projects/tgui/src/lib/services/theme.service.ts":[{"name":"AppearanceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"light\\" | \\"dark\\"","file":"projects/tgui/src/lib/services/theme.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts":[{"name":"AvatarShape","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"circle\\" | \\"rounded\\" | \\"square\\"","file":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"AvatarSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"xxs\\" | \\"xs\\" | \\"s\\" | \\"m\\" | \\"l\\" | \\"xl\\"","file":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/tgui/src/lib/components/blocks/badge/badge.component.ts":[{"name":"BadgeMode","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"primary\\" | \\"critical\\" | \\"secondary\\" | \\"gray\\" | \\"white\\"","file":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"BadgeType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"number\\" | \\"dot\\"","file":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/tgui/src/lib/components/blocks/card/card.component.ts":[{"name":"CardType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"plain\\" | \\"ambient\\"","file":"projects/tgui/src/lib/components/blocks/card/card.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Card types that define the visual style of the card</p>\\n","kind":192}],"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts":[{"name":"CloseButtonStory","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperWithCloseButtonDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"ToggleStory","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PopperToggleDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/image/image.component.ts":[{"name":"ImageSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"20\\" | \\"24\\" | \\"28\\" | \\"40\\" | \\"48\\" | \\"96\\"","file":"projects/tgui/src/lib/components/blocks/image/image.component.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/tgui/src/lib/services/platform.service.ts":[{"name":"PlatformType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"base\\" | \\"ios\\"","file":"projects/tgui/src/lib/services/platform.service.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TguiDynamicIconComponent>","file":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/icons/story/icons.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconsShowcaseComponent>","file":"projects/tgui/src/lib/icons/story/icons.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/misc/divider/divider.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<DividerComponent>","file":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AccordionComponent>","file":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AvatarComponent>","file":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<AvatarStackComponent>","file":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BadgeComponent>","file":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BannerComponent>","file":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<BlockquoteComponent>","file":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonComponent>","file":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CardComponent>","file":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CellComponent>","file":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconButtonComponent>","file":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<IconContainerComponent>","file":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ImageComponent>","file":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<InlineButtonsComponent>","file":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ListComponent>","file":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PlaceholderComponent>","file":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SectionComponent>","file":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<StepsComponent>","file":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TimelineComponent>","file":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SnackbarComponent>","file":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SpinnerComponent>","file":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SpoilerComponent>","file":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<FixedLayoutComponent>","file":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TabbarComponent>","file":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TouchPopperDemoComponent>","file":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<CaptionComponent>","file":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<HeadlineComponent>","file":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<LargeTitleComponent>","file":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<SubheadlineComponent>","file":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/text/story/text.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TextComponent>","file":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/typography/title/story/title.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TitleComponent>","file":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TouchComponent>","file":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TimelineItemComponent>","file":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<ButtonCellComponent>","file":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<RippleComponent>","file":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"projects/tgui/src/lib/components/utils/touch/touch.component.ts":[{"name":"TouchEventHandler","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Touch event handler type</p>\\n","kind":184}]}},"routes":[],"coverage":{"count":10,"status":"low","files":[{"filePath":"projects/tgui/.storybook/main.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"config","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/.storybook/preview.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"preview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/accordion.component.ts","type":"component","linktype":"component","name":"AccordionComponent","coveragePercent":100,"coverageCount":"9/9","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/components/accordion-content/accordion-content.component.ts","type":"component","linktype":"component","name":"AccordionContentComponent","coveragePercent":25,"coverageCount":"5/20","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/components/accordion-summary/accordion-summary.component.ts","type":"component","linktype":"component","name":"AccordionSummaryComponent","coveragePercent":37,"coverageCount":"3/8","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"MultipleAccordions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/avatar-stack.component.ts","type":"component","linktype":"component","name":"AvatarStackComponent","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomOffsets","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DifferentSizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithInitials","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithMixedContent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","type":"component","linktype":"component","name":"AvatarComponent","coveragePercent":50,"coverageCount":"9/18","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"AvatarShape","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/avatar.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"AvatarSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/components/avatar-acronym/avatar-acronym.component.ts","type":"component","linktype":"component","name":"AvatarAcronymComponent","coveragePercent":100,"coverageCount":"6/6","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/components/avatar-badge/avatar-badge.component.ts","type":"component","linktype":"component","name":"AvatarBadgeComponent","coveragePercent":100,"coverageCount":"2/2","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DifferentShapes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DifferentSizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"UserCardExample","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithBadge","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithCustomColor","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithImage","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithInitials","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithOnlineStatus","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","type":"component","linktype":"component","name":"BadgeComponent","coveragePercent":33,"coverageCount":"4/12","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"BadgeMode","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/badge.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"BadgeType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Dots","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Modes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Sizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Types","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"UsageExamples","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/banner.component.ts","type":"component","linktype":"component","name":"BannerComponent","coveragePercent":31,"coverageCount":"6/19","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomCloseIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"InlineType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithBackground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithBeforeContent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithCallout","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/blockquote.component.ts","type":"component","linktype":"component","name":"BlockquoteComponent","coveragePercent":100,"coverageCount":"3/3","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"MultipleExamples","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithComplexContent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithCustomIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithLargerIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithText","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithTextAndComplexContent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/button.component.ts","type":"component","linktype":"component","name":"ButtonComponent","coveragePercent":36,"coverageCount":"11/30","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Modes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"RippleEffects","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Sizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"States","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/button/story/button.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/card.component.ts","type":"component","linktype":"component","name":"CardComponent","coveragePercent":80,"coverageCount":"12/15","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/card/card.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"CardType","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/card/components/card-cell/card-cell.component.ts","type":"component","linktype":"component","name":"CardCellComponent","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/card/components/card-chip/card-chip.component.ts","type":"component","linktype":"component","name":"CardChipComponent","coveragePercent":100,"coverageCount":"7/7","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Ambient","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomBorderRadius","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithAdvancedChip","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithChip","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithDirectImage","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithDirectImageAndChip","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/card/story/card.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/cell.component.ts","type":"component","linktype":"component","name":"CellComponent","coveragePercent":88,"coverageCount":"22/25","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/button-cell.component.ts","type":"component","linktype":"component","name":"ButtonCellComponent","coveragePercent":100,"coverageCount":"6/6","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Multiple","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/services/typography-cell.service.ts","type":"injectable","linktype":"injectable","name":"TypographyCellService","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CellWithInfo","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/icon-button.component.ts","type":"component","linktype":"component","name":"IconButtonComponent","coveragePercent":35,"coverageCount":"6/17","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Disabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Modes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Sizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-container/icon-container.component.ts","type":"component","linktype":"component","name":"IconContainerComponent","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/components/image-badge/image-badge.component.ts","type":"component","linktype":"component","name":"ImageBadgeComponent","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"projects/tgui/src/lib/components/blocks/image/image.component.ts","type":"component","linktype":"component","name":"ImageComponent","coveragePercent":70,"coverageCount":"19/27","status":"good"},{"filePath":"projects/tgui/src/lib/components/blocks/image/image.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"ImageSize","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoadingStates","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Sizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithBadge","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithChildren","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithFallbackIcon","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/image/story/image.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/components/inline-buttons-item.component.ts","type":"component","linktype":"component","name":"InlineButtonsItemComponent","coveragePercent":62,"coverageCount":"5/8","status":"good"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/inline-buttons.component.ts","type":"component","linktype":"component","name":"InlineButtonsComponent","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Disabled","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ItemModes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Modes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/list/list.component.ts","type":"component","linktype":"component","name":"ListComponent","coveragePercent":50,"coverageCount":"1/2","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/placeholder.component.ts","type":"component","linktype":"component","name":"PlaceholderComponent","coveragePercent":100,"coverageCount":"3/3","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DescriptionOnly","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EmptyState","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HeaderOnly","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithAction","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithImage","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/components/section-footer/section-footer.component.ts","type":"component","linktype":"component","name":"SectionFooterComponent","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/section/components/section-header/section-header.component.ts","type":"component","linktype":"component","name":"SectionHeaderComponent","coveragePercent":100,"coverageCount":"2/2","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/section/section.component.ts","type":"component","linktype":"component","name":"SectionComponent","coveragePercent":50,"coverageCount":"5/10","status":"medium"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"MultipleItems","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithCenteredFooter","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithLargeHeader","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/section/story/section.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/steps.component.ts","type":"component","linktype":"component","name":"StepsComponent","coveragePercent":100,"coverageCount":"6/6","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"FewSteps","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ManySteps","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.component.ts","type":"component","linktype":"component","name":"TimelineItemComponent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Horizontal","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"timelineItems","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/blocks/timeline/timeline.component.ts","type":"component","linktype":"component","name":"TimelineComponent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/components/snackbar-button/snackbar-button.component.ts","type":"component","linktype":"component","name":"SnackbarButtonComponent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.component.ts","type":"component","linktype":"component","name":"SnackbarComponent","coveragePercent":0,"coverageCount":"0/17","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts","type":"injectable","linktype":"injectable","name":"SnackbarService","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/snackbar.service.ts","type":"interface","linktype":"interface","name":"SnackbarOptions","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","type":"component","linktype":"component","name":"DemoSnackbarComponent","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/components/base-spinner/base-spinner.component.ts","type":"component","linktype":"component","name":"BaseSpinnerComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/components/ios-spinner/ios-spinner.component.ts","type":"component","linktype":"component","name":"IOSSpinnerComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/spinner.component.ts","type":"component","linktype":"component","name":"SpinnerComponent","coveragePercent":42,"coverageCount":"3/7","status":"medium"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomColors","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"PlatformSpecific","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Sizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spoiler/spoiler.component.ts","type":"component","linktype":"component","name":"SpoilerComponent","coveragePercent":8,"coverageCount":"1/12","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LongContent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Visible","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/form/chip/chip.component.ts","type":"component","linktype":"component","name":"ChipComponent","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/layout/fixed-layout/fixed-layout.component.ts","type":"component","linktype":"component","name":"FixedLayoutComponent","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Playground","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"IOSStyle","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/tabbar-item.component.ts","type":"component","linktype":"component","name":"TabbarItemComponent","coveragePercent":9,"coverageCount":"1/11","status":"low"},{"filePath":"projects/tgui/src/lib/components/layout/tabbar/tabbar.component.ts","type":"component","linktype":"component","name":"TabbarComponent","coveragePercent":81,"coverageCount":"9/11","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.component.ts","type":"component","linktype":"component","name":"DividerComponent","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomStyle","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"InList","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/misc/divider/divider.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/popper.component.ts","type":"component","linktype":"component","name":"PopperComponent","coveragePercent":0,"coverageCount":"0/36","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"component","linktype":"component","name":"PopperDemoComponent","coveragePercent":0,"coverageCount":"0/15","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"component","linktype":"component","name":"PopperToggleDemoComponent","coveragePercent":0,"coverageCount":"0/15","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"component","linktype":"component","name":"PopperWithCloseButtonDemoComponent","coveragePercent":0,"coverageCount":"0/17","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"PopperWithCloseButton","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"TogglePopper","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"CloseButtonStory","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"ToggleStory","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","type":"component","linktype":"component","name":"TouchPopperDemoComponent","coveragePercent":0,"coverageCount":"0/14","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/caption.component.ts","type":"component","linktype":"component","name":"CaptionComponent","coveragePercent":15,"coverageCount":"2/13","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CaptionInContext","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/headline.component.ts","type":"component","linktype":"component","name":"HeadlineComponent","coveragePercent":15,"coverageCount":"2/13","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/large-title.component.ts","type":"component","linktype":"component","name":"LargeTitleComponent","coveragePercent":15,"coverageCount":"2/13","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/subheadline/subheadline.component.ts","type":"component","linktype":"component","name":"SubheadlineComponent","coveragePercent":15,"coverageCount":"2/13","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Level2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Paragraph","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/story/text.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/text/text.component.ts","type":"component","linktype":"component","name":"TextComponent","coveragePercent":15,"coverageCount":"2/13","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AllVariations","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Title1","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Title2","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Title3","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/story/title.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/title/title.component.ts","type":"component","linktype":"component","name":"TitleComponent","coveragePercent":12,"coverageCount":"2/16","status":"low"},{"filePath":"projects/tgui/src/lib/components/typography/typography.component.ts","type":"component","linktype":"component","name":"TypographyComponent","coveragePercent":10,"coverageCount":"1/10","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/portal/root-portal.component.ts","type":"component","linktype":"component","name":"RootPortalComponent","coveragePercent":9,"coverageCount":"1/11","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/ripple.component.ts","type":"component","linktype":"component","name":"RippleComponent","coveragePercent":50,"coverageCount":"1/2","status":"medium"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","type":"interface","linktype":"interface","name":"RippleDemoProps","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Preview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Usage","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tappable/tappable.component.ts","type":"component","linktype":"component","name":"TappableComponent","coveragePercent":50,"coverageCount":"14/28","status":"medium"},{"filePath":"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts","type":"component","linktype":"component","name":"RootComponent","coveragePercent":23,"coverageCount":"4/17","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"TGUI_CONFIG","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"interface","linktype":"interface","name":"StoryComponentProps","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HorizontalSwipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"VerticalSwipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","type":"component","linktype":"component","name":"TouchComponent","coveragePercent":34,"coverageCount":"22/63","status":"medium"},{"filePath":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","type":"interface","linktype":"interface","name":"CustomTouchEvent","coveragePercent":33,"coverageCount":"1/3","status":"medium"},{"filePath":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","type":"interface","linktype":"interface","name":"Gesture","coveragePercent":5,"coverageCount":"1/17","status":"low"},{"filePath":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","type":"interface","linktype":"interface","name":"TouchEvent","coveragePercent":50,"coverageCount":"1/2","status":"medium"},{"filePath":"projects/tgui/src/lib/components/utils/touch/touch.component.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"TouchEventHandler","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/directives/content-slot.directive.ts","type":"directive","linktype":"directive","name":"ContentSlotDirective","coveragePercent":50,"coverageCount":"1/2","status":"medium"},{"filePath":"projects/tgui/src/lib/directives/horizontal-scroll.directive.ts","type":"directive","linktype":"directive","name":"HorizontalScrollDirective","coveragePercent":0,"coverageCount":"0/13","status":"low"},{"filePath":"projects/tgui/src/lib/directives/portal-outlet.directive.ts","type":"directive","linktype":"directive","name":"PortalOutletDirective","coveragePercent":12,"coverageCount":"1/8","status":"low"},{"filePath":"projects/tgui/src/lib/directives/tgui-theme.directive.ts","type":"directive","linktype":"directive","name":"TGUIThemeDirective","coveragePercent":16,"coverageCount":"1/6","status":"low"},{"filePath":"projects/tgui/src/lib/icons/directives/svg-props.directive.ts","type":"directive","linktype":"directive","name":"TguiSvgPropsDirective","coveragePercent":12,"coverageCount":"1/8","status":"low"},{"filePath":"projects/tgui/src/lib/icons/dynamic-icon.component.ts","type":"component","linktype":"component","name":"TguiDynamicIconComponent","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon-base.component.ts","type":"component","linktype":"component","name":"TguiIconBase","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon.interface.ts","type":"interface","linktype":"interface","name":"TguiIconProps","coveragePercent":100,"coverageCount":"21/21","status":"very-good"},{"filePath":"projects/tgui/src/lib/icons/icon12/tgui-icon12-quote.ts","type":"component","linktype":"component","name":"TguiIcon12Quote","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon16/tgui-icon16-cancel.ts","type":"component","linktype":"component","name":"TguiIcon16Cancel","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon16/tgui-icon16-chevron.ts","type":"component","linktype":"component","name":"TguiIcon16Chevron","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon20/tgui-icon20-chevron-down.ts","type":"component","linktype":"component","name":"TguiIcon20ChevronDown","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon20/tgui-icon20-copy.ts","type":"component","linktype":"component","name":"TguiIcon20Copy","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon20/tgui-icon20-question-mark.ts","type":"component","linktype":"component","name":"TguiIcon20QuestionMark","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon20/tgui-icon20-select-ios.ts","type":"component","linktype":"component","name":"TguiIcon20SelectIos","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon20/tgui-icon20-select.ts","type":"component","linktype":"component","name":"TguiIcon20Select","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-cancel.ts","type":"component","linktype":"component","name":"TguiIcon24Cancel","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-channel.ts","type":"component","linktype":"component","name":"TguiIcon24Channel","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chat.ts","type":"component","linktype":"component","name":"TguiIcon24Chat","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-down.ts","type":"component","linktype":"component","name":"TguiIcon24ChevronDown","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-left.ts","type":"component","linktype":"component","name":"TguiIcon24ChevronLeft","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-chevron-right.ts","type":"component","linktype":"component","name":"TguiIcon24ChevronRight","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-close.ts","type":"component","linktype":"component","name":"TguiIcon24Close","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-notifications.ts","type":"component","linktype":"component","name":"TguiIcon24Notifications","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-person-remove.ts","type":"component","linktype":"component","name":"TguiIcon24PersonRemove","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-qr.ts","type":"component","linktype":"component","name":"TguiIcon24Qr","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon24/tgui-icon24-sun-low.ts","type":"component","linktype":"component","name":"TguiIcon24SunLow","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-add-circle.ts","type":"component","linktype":"component","name":"TguiIcon28AddCircle","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-archive.ts","type":"component","linktype":"component","name":"TguiIcon28Archive","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-attach.ts","type":"component","linktype":"component","name":"TguiIcon28Attach","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-chat.ts","type":"component","linktype":"component","name":"TguiIcon28Chat","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-close-ambient.ts","type":"component","linktype":"component","name":"TguiIcon28CloseAmbient","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-close.ts","type":"component","linktype":"component","name":"TguiIcon28Close","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-devices.ts","type":"component","linktype":"component","name":"TguiIcon28Devices","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-edit.ts","type":"component","linktype":"component","name":"TguiIcon28Edit","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-heart.ts","type":"component","linktype":"component","name":"TguiIcon28Heart","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon28/tgui-icon28-stats.ts","type":"component","linktype":"component","name":"TguiIcon28Stats","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon32/tgui-icon32-profile-colored-square.ts","type":"component","linktype":"component","name":"TguiIcon32ProfileColoredSquare","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/icon36/tgui-icon36-backspace.ts","type":"component","linktype":"component","name":"TguiIcon36Backspace","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AutosizingIcons","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithDifferentSizes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/icons.stories.ts","type":"component","linktype":"component","name":"IconsShowcaseComponent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/icons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/icons.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Overview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/icons/story/icons.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/services/platform.service.ts","type":"injectable","linktype":"injectable","name":"PlatformService","coveragePercent":50,"coverageCount":"5/10","status":"medium"},{"filePath":"projects/tgui/src/lib/services/platform.service.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"PlatformType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/services/portal.service.ts","type":"injectable","linktype":"injectable","name":"PortalService","coveragePercent":55,"coverageCount":"5/9","status":"good"},{"filePath":"projects/tgui/src/lib/services/ripple.service.ts","type":"injectable","linktype":"injectable","name":"RippleService","coveragePercent":57,"coverageCount":"4/7","status":"good"},{"filePath":"projects/tgui/src/lib/services/ripple.service.ts","type":"interface","linktype":"interface","name":"RippleWave","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"projects/tgui/src/lib/services/telegram.service.ts","type":"injectable","linktype":"injectable","name":"TelegramService","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/tgui/src/lib/services/telegram.service.ts","type":"interface","linktype":"interface","name":"ThemeParams","coveragePercent":0,"coverageCount":"0/14","status":"low"},{"filePath":"projects/tgui/src/lib/services/telegram.service.ts","type":"interface","linktype":"interface","name":"WebApp","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"projects/tgui/src/lib/services/telegram.service.ts","type":"interface","linktype":"interface","name":"Window","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/services/theme.service.ts","type":"injectable","linktype":"injectable","name":"ThemeService","coveragePercent":40,"coverageCount":"8/20","status":"medium"},{"filePath":"projects/tgui/src/lib/services/theme.service.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"AppearanceType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/tgui.component.ts","type":"component","linktype":"component","name":"TguiComponent","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/tgui/src/lib/tgui.service.ts","type":"injectable","linktype":"injectable","name":"TguiService","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/tgui/src/lib/utils/has-node.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"hasNode","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/utils/theme-helper.ts","type":"injectable","linktype":"injectable","name":"SystemThemeService","coveragePercent":9,"coverageCount":"1/11","status":"low"},{"filePath":"projects/tgui/src/lib/utils/theme-helper.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"applyTheme","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/tgui/src/lib/utils/theme-helper.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"setupSystemThemeDetection","coveragePercent":100,"coverageCount":"1/1","status":"very-good"}]}}');var tgui_root_component=__webpack_require__("./projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts"),common_module_CBrzkrmd=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-CBrzkrmd.mjs"),theme_service=__webpack_require__("./projects/tgui/src/lib/services/theme.service.ts"),platform_service=__webpack_require__("./projects/tgui/src/lib/services/platform.service.ts"),portal_service=__webpack_require__("./projects/tgui/src/lib/services/portal.service.ts"),telegram_service=__webpack_require__("./projects/tgui/src/lib/services/telegram.service.ts");(0,angular.$)(documentation_namespaceObject);const _storybook_preview={decorators:[(0,dist.moduleMetadata)({imports:[common_module_CBrzkrmd.MD,tgui_root_component.I],providers:[theme_service.F,platform_service.f,portal_service._,telegram_service.H,{provide:tgui_root_component.r,useValue:{platform:"base",appearance:"light",followSystemTheme:!1}}]}),(0,dist.componentWrapperDecorator)((story=>`<tgui-root [appearance]="appearance" [platform]="platform"><div style="background-color: var(--tgui--bg_color); padding: 3rem;">${story}</div></tgui-root>`),(({globals:{theme,platform}})=>({appearance:theme,platform})))],parameters:{controls:{matchers:{color:/(background|color)$/i,date:/Date$/i}}},globalTypes:{platform:{name:"Platform",description:"Platform for components",defaultValue:"base",toolbar:{icon:"mobile",items:["base","ios"],title:"Platform",dynamicTitle:!0}},theme:{description:"Global theme for components",defaultValue:"light",toolbar:{title:"Theme",icon:"circlehollow",items:["light","dark"],dynamicTitle:!0}}}}},"./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./Getting Started.mdx":["./projects/tgui/src/Getting Started.mdx",8387,959],"./Theme and Variables.mdx":["./projects/tgui/src/Theme and Variables.mdx",8387,2744]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$",module.exports=webpackAsyncContext},"./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(ts%7Cmdx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./lib/components/blocks/accordion/stories/accordion.stories":["./projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts",7180,8600,3076,9568],"./lib/components/blocks/accordion/stories/accordion.stories.ts":["./projects/tgui/src/lib/components/blocks/accordion/stories/accordion.stories.ts",7180,8600,3076,9568],"./lib/components/blocks/avatar-stack/story/avatar-stack.stories":["./projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",5226],"./lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts":["./projects/tgui/src/lib/components/blocks/avatar-stack/story/avatar-stack.stories.ts",5226],"./lib/components/blocks/avatar/story/avatar.stories":["./projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",1264],"./lib/components/blocks/avatar/story/avatar.stories.ts":["./projects/tgui/src/lib/components/blocks/avatar/story/avatar.stories.ts",1264],"./lib/components/blocks/badge/story/badge.stories":["./projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",3284],"./lib/components/blocks/badge/story/badge.stories.ts":["./projects/tgui/src/lib/components/blocks/badge/story/badge.stories.ts",3284],"./lib/components/blocks/banner/stories/banner.stories":["./projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts",6148,7180,8600,3418],"./lib/components/blocks/banner/stories/banner.stories.ts":["./projects/tgui/src/lib/components/blocks/banner/stories/banner.stories.ts",6148,7180,8600,3418],"./lib/components/blocks/blockquote/stories/blockquote.stories":["./projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts",7180,64],"./lib/components/blocks/blockquote/stories/blockquote.stories.ts":["./projects/tgui/src/lib/components/blocks/blockquote/stories/blockquote.stories.ts",7180,64],"./lib/components/blocks/button/story/button.stories":["./projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",6148,4734],"./lib/components/blocks/button/story/button.stories.ts":["./projects/tgui/src/lib/components/blocks/button/story/button.stories.ts",6148,4734],"./lib/components/blocks/card/story/card.stories":["./projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",7182],"./lib/components/blocks/card/story/card.stories.ts":["./projects/tgui/src/lib/components/blocks/card/story/card.stories.ts",7182],"./lib/components/blocks/cell/components/button-cell/stories/button-cell.stories":["./projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts",8600,3076,2526],"./lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts":["./projects/tgui/src/lib/components/blocks/cell/components/button-cell/stories/button-cell.stories.ts",8600,3076,2526],"./lib/components/blocks/cell/stories/cell.stories":["./projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts",8600,3076,1866],"./lib/components/blocks/cell/stories/cell.stories.ts":["./projects/tgui/src/lib/components/blocks/cell/stories/cell.stories.ts",8600,3076,1866],"./lib/components/blocks/icon-button/story/icon-button.stories":["./projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",7224],"./lib/components/blocks/icon-button/story/icon-button.stories.ts":["./projects/tgui/src/lib/components/blocks/icon-button/story/icon-button.stories.ts",7224],"./lib/components/blocks/icon-container/stories/icon-container.stories":["./projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts",1888],"./lib/components/blocks/icon-container/stories/icon-container.stories.ts":["./projects/tgui/src/lib/components/blocks/icon-container/stories/icon-container.stories.ts",1888],"./lib/components/blocks/image/story/image.stories":["./projects/tgui/src/lib/components/blocks/image/story/image.stories.ts",1684],"./lib/components/blocks/image/story/image.stories.ts":["./projects/tgui/src/lib/components/blocks/image/story/image.stories.ts",1684],"./lib/components/blocks/inline-buttons/story/inline-buttons.stories":["./projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",9200],"./lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts":["./projects/tgui/src/lib/components/blocks/inline-buttons/story/inline-buttons.stories.ts",9200],"./lib/components/blocks/list/stories/list.stories":["./projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts",1970],"./lib/components/blocks/list/stories/list.stories.ts":["./projects/tgui/src/lib/components/blocks/list/stories/list.stories.ts",1970],"./lib/components/blocks/placeholder/story/placeholder.stories":["./projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts",6148,1396],"./lib/components/blocks/placeholder/story/placeholder.stories.ts":["./projects/tgui/src/lib/components/blocks/placeholder/story/placeholder.stories.ts",6148,1396],"./lib/components/blocks/section/story/section.stories":["./projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",7964],"./lib/components/blocks/section/story/section.stories.ts":["./projects/tgui/src/lib/components/blocks/section/story/section.stories.ts",7964],"./lib/components/blocks/steps/stories/steps.stories":["./projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts",9060],"./lib/components/blocks/steps/stories/steps.stories.ts":["./projects/tgui/src/lib/components/blocks/steps/stories/steps.stories.ts",9060],"./lib/components/blocks/timeline/components/timeline-item/timeline-item.stories":["./projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts",8217,2905],"./lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts":["./projects/tgui/src/lib/components/blocks/timeline/components/timeline-item/timeline-item.stories.ts",8217,2905],"./lib/components/blocks/timeline/stories/timeline.stories":["./projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts",8217,9728],"./lib/components/blocks/timeline/stories/timeline.stories.ts":["./projects/tgui/src/lib/components/blocks/timeline/stories/timeline.stories.ts",8217,9728],"./lib/components/feedback/snackbar/story/snackbar.stories":["./projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",6148,5591],"./lib/components/feedback/snackbar/story/snackbar.stories.ts":["./projects/tgui/src/lib/components/feedback/snackbar/story/snackbar.stories.ts",6148,5591],"./lib/components/feedback/spinner/story/spinner.stories":["./projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",2891],"./lib/components/feedback/spinner/story/spinner.stories.ts":["./projects/tgui/src/lib/components/feedback/spinner/story/spinner.stories.ts",2891],"./lib/components/feedback/spoiler/story/spoiler.stories":["./projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts",6295],"./lib/components/feedback/spoiler/story/spoiler.stories.ts":["./projects/tgui/src/lib/components/feedback/spoiler/story/spoiler.stories.ts",6295],"./lib/components/layout/fixed-layout/story/fixed-layout.stories":["./projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts",6148,4468],"./lib/components/layout/fixed-layout/story/fixed-layout.stories.ts":["./projects/tgui/src/lib/components/layout/fixed-layout/story/fixed-layout.stories.ts",6148,4468],"./lib/components/layout/tabbar/story/tabbar.stories":["./projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts",5898],"./lib/components/layout/tabbar/story/tabbar.stories.ts":["./projects/tgui/src/lib/components/layout/tabbar/story/tabbar.stories.ts",5898],"./lib/components/misc/divider/divider.stories":["./projects/tgui/src/lib/components/misc/divider/divider.stories.ts",8322],"./lib/components/misc/divider/divider.stories.ts":["./projects/tgui/src/lib/components/misc/divider/divider.stories.ts",8322],"./lib/components/overlays/popper/story/popper.stories":["./projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts",7956,6148,4815],"./lib/components/overlays/popper/story/popper.stories.ts":["./projects/tgui/src/lib/components/overlays/popper/story/popper.stories.ts",7956,6148,4815],"./lib/components/overlays/popper/story/touch.popper.stories":["./projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts",7956,9053],"./lib/components/overlays/popper/story/touch.popper.stories.ts":["./projects/tgui/src/lib/components/overlays/popper/story/touch.popper.stories.ts",7956,9053],"./lib/components/typography/caption/story/caption.stories":["./projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",4533],"./lib/components/typography/caption/story/caption.stories.ts":["./projects/tgui/src/lib/components/typography/caption/story/caption.stories.ts",4533],"./lib/components/typography/headline/story/headline.stories":["./projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",7967],"./lib/components/typography/headline/story/headline.stories.ts":["./projects/tgui/src/lib/components/typography/headline/story/headline.stories.ts",7967],"./lib/components/typography/large-title/story/large-title.stories":["./projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",2869],"./lib/components/typography/large-title/story/large-title.stories.ts":["./projects/tgui/src/lib/components/typography/large-title/story/large-title.stories.ts",2869],"./lib/components/typography/subheadline/story/subheadline.stories":["./projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",1981],"./lib/components/typography/subheadline/story/subheadline.stories.ts":["./projects/tgui/src/lib/components/typography/subheadline/story/subheadline.stories.ts",1981],"./lib/components/typography/text/story/text.stories":["./projects/tgui/src/lib/components/typography/text/story/text.stories.ts",6841],"./lib/components/typography/text/story/text.stories.ts":["./projects/tgui/src/lib/components/typography/text/story/text.stories.ts",6841],"./lib/components/typography/title/story/title.stories":["./projects/tgui/src/lib/components/typography/title/story/title.stories.ts",8053],"./lib/components/typography/title/story/title.stories.ts":["./projects/tgui/src/lib/components/typography/title/story/title.stories.ts",8053],"./lib/components/utils/tappable/components/ripple/story/ripple.stories":["./projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",7534],"./lib/components/utils/tappable/components/ripple/story/ripple.stories.ts":["./projects/tgui/src/lib/components/utils/tappable/components/ripple/story/ripple.stories.ts",7534],"./lib/components/utils/touch/story/touch.stories":["./projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts",3521],"./lib/components/utils/touch/story/touch.stories.ts":["./projects/tgui/src/lib/components/utils/touch/story/touch.stories.ts",3521],"./lib/icons/story/dynamic-icon.stories":["./projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts",7180,1873],"./lib/icons/story/dynamic-icon.stories.ts":["./projects/tgui/src/lib/icons/story/dynamic-icon.stories.ts",7180,1873],"./lib/icons/story/icons.stories":["./projects/tgui/src/lib/icons/story/icons.stories.ts",7180,5648],"./lib/icons/story/icons.stories.ts":["./projects/tgui/src/lib/icons/story/icons.stories.ts",7180,5648]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(ts%7Cmdx))$",module.exports=webpackAsyncContext},"./projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,':host {\n  display: block;\n  font-family: var(--tgui--font-family, system-ui, -apple-system, BlinkMacSystemFont, "Roboto", "Apple Color Emoji", "Helvetica Neue", sans-serif);\n  color: var(--tgui--text_color);\n  -webkit-tap-highlight-color: transparent;\n  -webkit-text-size-adjust: 100%;\n  \n  /* Base font definitions */\n  --tgui--font-family: system-ui, -apple-system, BlinkMacSystemFont, "Roboto", "Apple Color Emoji", "Helvetica Neue", sans-serif;\n\n  --tgui--font_weight--accent1: 700;\n  --tgui--font_weight--accent2: 600;\n  --tgui--font_weight--accent3: 400;\n\n  --tgui--large_title--font_size: 34px;\n  --tgui--large_title--line_height: 42px;\n\n  --tgui--title1--font_size: 28px;\n  --tgui--title1--line_height: 36px;\n  --tgui--title2--font_size: 24px;\n  --tgui--title2--line_height: 32px;\n  --tgui--title3--font_size: 20px;\n  --tgui--title3--line_height: 24px;\n\n  --tgui--headline--font_size: 19px;\n  --tgui--headline--line_height: 28px;\n\n  --tgui--text--font_size: 17px;\n  --tgui--text--line_height: 26px;\n\n  --tgui--subheadline1--font_size: 16px;\n  --tgui--subheadline1--line_height: 24px;\n  --tgui--subheadline2--font_size: 15px;\n  --tgui--subheadline2--line_height: 22px;\n\n  --tgui--caption1--font_size: 13px;\n  --tgui--caption1--line_height: 20px;\n  --tgui--caption2--font_size: 11px;\n  --tgui--caption2--line_height: 16px;\n\n  --tgui--border--width: 1px;\n  --tgui--base--section--box_shadow: 0 1px 2px 0 rgba(0, 0, 0, .10);\n\n  /** Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #FFFFFF);\n  --tgui--text_color: var(--tg-theme-text-color, #000000);\n  --tgui--hint_color: var(--tg-theme-hint-color, #707579);\n  --tgui--link_color: var(--tg-theme-link-color, #007AFF);\n  --tgui--button_color: var(--tg-theme-button-color, #007AFF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #EFEFF4);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #FFFFFF);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #FFFFFF);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #707579);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #707579);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(0, 0, 0, .15);\n  --tgui--outline: rgba(0, 0, 0, .05);\n  --tgui--surface_primary: rgba(255, 255, 255, .95);\n  --tgui--tertiary_bg_color: #F4F4F7;\n  --tgui--quartenary_bg_color: #F6F6FA;\n  --tgui--segmented_control_active_bg: #FFFFFF;\n  --tgui--card_bg_color: #FFFFFF;\n  --tgui--secondary_hint_color: #A2ACB0;\n  --tgui--secondary_fill: rgba(67, 120, 255, .10);\n  --tgui--green: #31D158;\n  --tgui--destructive_background: #E53935;\n  --tgui--primary_code_highlight: #4378FF;\n  --tgui--secondary_code_highlight: #B00FB4;\n  --tgui--tertiary_code_highlight: #3A9F20;\n  --tgui--plain_background: rgba(0, 0, 0, .04);\n  --tgui--plain_foreground: rgba(0, 0, 0, .8);\n  --tgui--toast_accent_color: #55A6FF;\n  /* End of custom lib tokens */\n\n  /** Non-theme tokens */\n  --tgui--surface_dark: rgba(56, 56, 56, .85);\n  --tooltip_background_dark: rgba(0, 0, 0, .85);\n  --tgui--white: #FFFFFF;\n  --tgui--black: #000000;\n\n  --tgui--z-index--simple: 1;\n  --tgui--z-index--skeleton: 2;\n  --tgui--z-index--overlay: 3;\n}\n\n:host-context(.tgui-platform-ios) {\n  --tgui--large_title--line_height: 41px;\n  --tgui--title1--line_height: 34px;\n  --tgui--title2--line_height: 28px;\n  --tgui--title3--line_height: 25px;\n  --tgui--headline--line_height: 24px;\n  --tgui--text--line_height: 22px;\n  --tgui--subheadline1--line_height: 21px;\n  --tgui--subheadline2--line_height: 20px;\n  --tgui--caption1--line_height: 16px;\n  --tgui--caption2--line_height: 13px;\n}\n\n:host-context(.tgui-theme-dark) {\n  /* Native tokens */\n  --tgui--bg_color: var(--tg-theme-bg-color, #212121);\n  --tgui--text_color: var(--tg-theme-text-color, #FFFFFF);\n  --tgui--hint_color: var(--tg-theme-hint-color, #AAAAAA);\n  --tgui--link_color: var(--tg-theme-link-color, #2990FF);\n  --tgui--button_color: var(--tg-theme-button-color, #2990FF);\n  --tgui--button_text_color:var(--tg-theme-button-text-color, #FFFFFF);\n  --tgui--secondary_bg_color: var(--tg-theme-secondary-bg-color, #0F0F0F);\n  --tgui--header_bg_color: var(--tg-theme-header-bg-color, #212121);\n  --tgui--accent_text_color: var(--tg-theme-accent-text-color, #007AFF);\n  --tgui--section_bg_color: var(--tg-theme-section-bg-color, #212121);\n  --tgui--section_header_text_color: var(--tg-theme-section-header-text-color, #AAAAAA);\n  --tgui--subtitle_text_color: var(--tg-theme-subtitle-text-color, #AAAAAA);\n  --tgui--destructive_text_color: var(--tg-theme-destructive-text-color, #E53935);\n  /** End of native tokens */\n\n  /* Custom lib tokens */\n  --tgui--skeleton: rgba(255, 255, 255, .03);\n  --tgui--divider: rgba(255, 255, 255, .05);\n  --tgui--outline: rgba(255, 255, 255, .10);\n  --tgui--surface_primary: rgba(23, 23, 23, .95);\n  --tgui--tertiary_bg_color: #2A2A2A;\n  --tgui--quartenary_bg_color: #2F2F2F;\n  --tgui--segmented_control_active_bg: #2F2F2F;\n  --tgui--card_bg_color: #242424;\n  --tgui--secondary_hint_color: #78797E;\n  --tgui--secondary_fill: rgba(41, 144, 255, .15);\n  --tgui--green: #32E55E;\n  --tgui--destructive_background: rgba(255, 35, 35, .02);\n  --tgui--primary_code_highlight: #2990FF;\n  --tgui--secondary_code_highlight: #E937ED;\n  --tgui--tertiary_code_highlight: #5AE536;\n  --tgui--plain_background: rgba(255, 255, 255, .08);\n  --tgui--plain_foreground: rgba(255, 255, 255, .95);\n  /* End of custom lib tokens */\n}\n\n@media (min-resolution: 2dppx) {\n  :host {\n    --tgui--border--width: .5px;\n  }\n}\n\n@supports (padding-top: constant(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: constant(safe-area-inset-bottom);\n  }\n}\n\n@supports (padding-top: env(safe-area-inset-bottom)) {\n  :host {\n    --tgui--safe_area_inset_bottom: env(safe-area-inset-bottom);\n  }\n}\n\n@supports (color: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent)) {\n  :host {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 10%, transparent);\n  }\n\n  :host-context(.tgui-theme-dark) {\n    --tgui--secondary_fill: color-mix(in srgb, var(--tgui--accent_text_color) 15%, transparent);\n  }\n} ',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{I:()=>RootComponent,r:()=>TGUI_CONFIG});var tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_tgui_root_component_css_ngResource__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./projects/tgui/src/lib/components/utils/tgui-root/tgui-root.component.css?ngResource"),_tgui_root_component_css_ngResource__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_tgui_root_component_css_ngResource__WEBPACK_IMPORTED_MODULE_6__),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/common/fesm2022/dom_tokens-rA0ACyx7.mjs"),_services__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/tgui/src/lib/services/platform.service.ts"),_services__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/tgui/src/lib/services/portal.service.ts"),_services__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./projects/tgui/src/lib/services/theme.service.ts");let RootComponent=class RootComponent{platform;appearance;followSystemTheme=!1;platformService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_1__.f);portalService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_2__._);elementRef=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);themeService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_3__.F);renderer=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2);document=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_4__.q);config=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(TGUI_CONFIG,{optional:!0});portalContainerEl=null;ngOnInit(){const platformToUse=this.platform||this.config?.platform,appearanceToUse=this.appearance||this.config?.appearance,followSystem=this.followSystemTheme??this.config?.followSystemTheme??!0;platformToUse&&this.platformService.setPlatform(platformToUse),this.themeService.loadGlobalStyles(),this.themeService.setupTheme(appearanceToUse,followSystem)}ngAfterViewInit(){setTimeout((()=>{this.setupPortalContainer()}),0)}setupPortalContainer(){try{this.portalContainerEl||(this.portalContainerEl=this.document.createElement("div"),this.portalContainerEl.className="tgui-portal-container",this.renderer.appendChild(this.elementRef.nativeElement,this.portalContainerEl));const portalElementRef=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef(this.portalContainerEl);this.portalService.setPortalContainer(portalElementRef)}catch(e){console.error("Error setting up portal container:",e)}}ngOnChanges(changes){if(changes.appearance||changes.followSystemTheme){const followSystem=this.followSystemTheme??this.config?.followSystemTheme??!0;this.themeService.setupTheme(changes.appearance.currentValue,followSystem)}changes.platform&&!changes.platform.firstChange&&this.platformService.setPlatform(changes.platform.currentValue)}ngOnDestroy(){this.portalService.clearPortalContainer(),this.portalContainerEl&&this.portalContainerEl.parentNode&&this.portalContainerEl.parentNode.removeChild(this.portalContainerEl),console.log("TGUIRootComponent destroyed")}static propDecorators={platform:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],appearance:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],followSystemTheme:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}]}};RootComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"tgui-root",template:"<ng-content></ng-content>",standalone:!0,changeDetection:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,host:{class:"tgui-root-wrapper"},styles:[_tgui_root_component_css_ngResource__WEBPACK_IMPORTED_MODULE_6___default()]})],RootComponent);const TGUI_CONFIG=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("TGUI_CONFIG")},"./projects/tgui/src/lib/services/platform.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{f:()=>PlatformService});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/common/fesm2022/dom_tokens-rA0ACyx7.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let PlatformService=class PlatformService{platform=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.signal)("base");_isIOSPlatform=null;document=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.q);constructor(){this.detectPlatform()}setPlatform(platform){this.platform.set(platform),this.applyPlatformToDOM(platform),this._isIOSPlatform="ios"===platform}isIOS(){return null!==this._isIOSPlatform?this._isIOSPlatform:!(!this.document||!this.document.documentElement)&&(this._isIOSPlatform=this.document.documentElement.classList.contains("tgui-platform-ios"),this._isIOSPlatform)}detectPlatform(){const isIOS=this.detectIOSFromUserAgent(),detectedPlatform=isIOS?"ios":"base";this.platform.set(detectedPlatform),this.applyPlatformToDOM(detectedPlatform),this._isIOSPlatform=isIOS}applyPlatformToDOM(platform){this.document.documentElement.classList.remove("tgui-platform-base","tgui-platform-ios"),this.document.documentElement.classList.add(`tgui-platform-${platform}`)}detectIOSFromUserAgent(){if("undefined"==typeof window||!window.navigator)return!1;const userAgent=window.navigator.userAgent.toLowerCase();return/iphone|ipad|ipod/.test(userAgent)||userAgent.includes("mac")&&"ontouchend"in document}static ctorParameters=()=>[]};PlatformService=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],PlatformService)},"./projects/tgui/src/lib/services/portal.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>PortalService});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let PortalService=class PortalService{portalContainerRef=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.signal)(null);portalContainer=this.portalContainerRef.asReadonly();hasPortalContainer=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.computed)((()=>!!this.portalContainer()));constructor(){console.log("PortalService initialized")}setPortalContainer(elementRef){elementRef&&elementRef.nativeElement?(console.log("Setting portal container:",elementRef.nativeElement),this.portalContainerRef.set(elementRef)):console.error("Invalid portal container provided to PortalService")}clearPortalContainer(){console.log("Clearing portal container reference"),this.portalContainerRef.set(null)}getPortalContainerElement(){const container=this.portalContainer()?.nativeElement||null;return container||console.warn("Portal container not available - make sure tgui-root component is properly set up"),container}isPortalReady(){const isReady=!!this.getPortalContainerElement();return console.log("Portal ready status:",isReady),isReady}static ctorParameters=()=>[]};PortalService=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],PortalService)},"./projects/tgui/src/lib/services/telegram.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{H:()=>TelegramService});var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let TelegramService=class TelegramService{get canUseDOM(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}getTelegramData(){if(this.canUseDOM)return window.Telegram?.WebApp}hexToRGB(hex){hex=hex.replace("#","");return[parseInt(hex.substring(0,2),16),parseInt(hex.substring(2,4),16),parseInt(hex.substring(4,6),16)]}};TelegramService=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({providedIn:"root"})],TelegramService)},"./projects/tgui/src/lib/services/theme.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{F:()=>ThemeService});var tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/common/fesm2022/dom_tokens-rA0ACyx7.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_telegram_service__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/tgui/src/lib/services/telegram.service.ts");let ThemeService=class ThemeService{appearance=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.signal)("light");themeChangeListener=null;mediaQueryList=null;handleThemeChange=null;useSystemTheme=!1;currentTheme="light";renderer;telegramService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_telegram_service__WEBPACK_IMPORTED_MODULE_1__.H);document=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_2__.q);constructor(rendererFactory){console.log("themeService: constructor"),this.renderer=rendererFactory.createRenderer(null,null),this.initializeTheme()}ngOnDestroy(){this.cleanupListeners()}setTheme(theme,followSystem=!1){this.cleanupListeners(),this.appearance.set(theme),this.applyThemeToDOM(theme),followSystem?(this.useSystemTheme=!0,this.setupBrowserThemeDetection()):this.useSystemTheme=!1}setupTheme(appearance,followSystem=!1){console.log(`themeService: setupTheme: appearance=${appearance}, currentTheme=${this.currentTheme}`),this.cleanupListeners(),followSystem?(this.useSystemTheme=!0,this.setupBrowserThemeDetection()):appearance?this.setTheme(appearance,!1):this.detectSystemTheme()}detectSystemTheme(){if("undefined"==typeof window)return void this.setTheme("light",!1);const prefersDarkMode=window.matchMedia("(prefers-color-scheme: dark)").matches;this.setTheme(prefersDarkMode?"dark":"light",!1)}loadGlobalStyles(){if(this.document.getElementById("tgui-variables-css"))return;const head=this.document.head,link=this.document.createElement("link");link.id="tgui-variables-css",link.rel="stylesheet",link.type="text/css",link.onerror=()=>{console.error("Failed to load TGUI variables CSS file. Theme functionality may be limited.")},link.href="assets/tgui/styles/variables.css",head.appendChild(link)}initializeTheme(){const telegramData=this.telegramService.getTelegramData();telegramData?(this.appearance.set(telegramData.colorScheme),this.applyThemeToDOM(telegramData.colorScheme),this.themeChangeListener=()=>{const newTelegramData=this.telegramService.getTelegramData();newTelegramData&&(this.appearance.set(newTelegramData.colorScheme),this.applyThemeToDOM(newTelegramData.colorScheme))},telegramData.onEvent("themeChanged",this.themeChangeListener)):(this.useSystemTheme=!0,this.setupBrowserThemeDetection())}setupBrowserThemeDetection(){if("undefined"==typeof window)return;const isDarkMode=window.matchMedia("(prefers-color-scheme: dark)");if(this.mediaQueryList=isDarkMode,this.useSystemTheme){const theme=isDarkMode.matches?"dark":"light";this.appearance.set(theme),this.applyThemeToDOM(theme)}this.handleThemeChange=event=>{if(this.useSystemTheme){const newTheme=event.matches?"dark":"light";this.appearance.set(newTheme),this.applyThemeToDOM(newTheme)}},isDarkMode.addEventListener("change",this.handleThemeChange),this.mediaQueryList=isDarkMode}applyThemeToDOM(theme){theme!==this.currentTheme?(this.renderer.removeClass(this.document.documentElement,`tgui-theme-${this.currentTheme}`),this.renderer.addClass(this.document.documentElement,`tgui-theme-${theme}`),this.currentTheme=theme):"dark"===theme?this.renderer.removeClass(this.document.documentElement,"tgui-theme-light"):this.renderer.removeClass(this.document.documentElement,"tgui-theme-dark")}cleanupListeners(){const telegramData=this.telegramService.getTelegramData();telegramData&&this.themeChangeListener&&(telegramData.offEvent("themeChanged",this.themeChangeListener),this.themeChangeListener=null),this.mediaQueryList&&this.handleThemeChange&&(this.mediaQueryList.removeEventListener("change",this.handleThemeChange),this.mediaQueryList=null,this.handleThemeChange=null)}static ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.RendererFactory2}]};ThemeService=(0,tslib__WEBPACK_IMPORTED_MODULE_3__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],ThemeService)},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),csf=__webpack_require__("./node_modules/@storybook/core/dist/csf/index.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const importers=[function(){var _ref=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:projects\/tgui\/src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(20);return __webpack_require__("./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:projects\/tgui\/src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(ts|mdx))$/.exec(path))return;const pathRemainder=path.substring(20);return __webpack_require__("./projects/tgui/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/projects\\/tgui\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(ts%7Cmdx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield(x=()=>importers[i](path),x());if(moduleExports)return moduleExports}var x}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb((function importFn(_x3){return _importFn.apply(this,arguments)}),(()=>{const previewAnnotations=[__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/viewport/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/preview.mjs"),__webpack_require__("./projects/tgui/.storybook/preview.ts")],userPreview=previewAnnotations[previewAnnotations.length-1]?.default;return(0,csf.bU)(userPreview)?userPreview.composed:(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)(previewAnnotations)}));window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"storybook/internal/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[3766],(()=>(__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./storybook-config-entry.js"))));__webpack_require__.O()}]);