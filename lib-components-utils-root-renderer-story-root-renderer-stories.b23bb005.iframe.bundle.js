"use strict";(self.webpackChunktguiangular=self.webpackChunktguiangular||[]).push([[1401],{"./projects/tgui/src/lib/components/utils/root-renderer/root-renderer.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>RootRendererComponent});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_services__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/tgui/src/lib/services/portal.service.ts");let RootRendererComponent=class RootRendererComponent{contentTemplate;portalService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_services__WEBPACK_IMPORTED_MODULE_1__._);viewContainerRef=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef);viewRef=null;constructor(){}ngAfterViewInit(){const portalContainer=this.portalService.getPortalContainerElement();portalContainer&&(this.viewRef=this.viewContainerRef.createEmbeddedView(this.contentTemplate),this.viewRef.rootNodes.forEach((node=>{portalContainer.appendChild(node)})))}ngOnDestroy(){if(this.viewRef)try{this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.viewRef))}catch(e){console.error("Error cleaning up root renderer view:",e)}}static ctorParameters=()=>[];static propDecorators={contentTemplate:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,args:["contentTemplate",{static:!0}]}]}};RootRendererComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"tgui-root-renderer",template:"\n    <ng-template #contentTemplate>\n      <ng-content></ng-content>\n    </ng-template>\n  ",standalone:!0,changeDetection:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.Emulated})],RootRendererComponent)},"./projects/tgui/src/lib/components/utils/root-renderer/story/root-renderer.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithMultipleElements:()=>WithMultipleElements,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Service/RootRenderer",component:__webpack_require__("./projects/tgui/src/lib/components/utils/root-renderer/root-renderer.component.ts").D,tags:["autodocs"],parameters:{docs:{description:{component:"\n          RootRenderer component allows rendering content outside the normal DOM hierarchy, in a special portal container.\n          This is useful for creating modal windows, overlays, popup notifications and other UI elements \n          that should be displayed above the main content.\n          \n          The component uses PortalService to get a reference to the portal container created in tgui-root.\n        "}}}},Default={name:"Basic Example",render:args=>({props:args,template:'\n      <div style="position: relative;">\n        <h3>Main Content</h3>\n        <p>This content is in the normal DOM flow</p>\n        \n        <tgui-root-renderer>\n          <div style="background-color: #e0f7fa; padding: 10px; border-radius: 4px; margin-top: 10px;">\n            <h4>Content in Portal</h4>\n            <p>This content is rendered in the portal container</p>\n            <button>Button in Portal</button>\n          </div>\n        </tgui-root-renderer>\n        \n        <p style="margin-top: 10px;">Text after RootRenderer component in normal DOM</p>\n      </div>\n      \n      <div style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border-radius: 4px;">\n        <h4>Portal Container (content renders here ⤵)</h4>\n        <div class="tgui-portal-container" style="min-height: 50px; border: 1px dashed #999; padding: 10px; border-radius: 4px;"></div>\n      </div>\n    '})},WithMultipleElements={name:"Multiple Elements",render:args=>({props:args,template:'\n      <div>\n        <p>Demonstration of multiple elements in portal:</p>\n        \n        <tgui-root-renderer>\n          <div style="background-color: #ffebee; padding: 10px; margin-bottom: 10px; border-radius: 4px;">\n            <h4>First Element in Portal</h4>\n            <p>First element rendered in the portal container</p>\n          </div>\n          <div style="background-color: #e8f5e9; padding: 10px; border-radius: 4px;">\n            <h4>Second Element in Portal</h4>\n            <p>Second element rendered in the portal container</p>\n          </div>\n        </tgui-root-renderer>\n        \n        <p style="margin-top: 10px;">Normal content after RootRenderer</p>\n      </div>\n      \n      <div style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border-radius: 4px;">\n        <h4>Portal Container (content renders here ⤵)</h4>\n        <div class="tgui-portal-container" style="min-height: 100px; border: 1px dashed #999; padding: 10px; border-radius: 4px;"></div>\n      </div>\n    '})},__namedExportsOrder=["Default","WithMultipleElements"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  name: \'Basic Example\',\n  render: args => ({\n    props: args,\n    template: `\n      <div style="position: relative;">\n        <h3>Main Content</h3>\n        <p>This content is in the normal DOM flow</p>\n        \n        <tgui-root-renderer>\n          <div style="background-color: #e0f7fa; padding: 10px; border-radius: 4px; margin-top: 10px;">\n            <h4>Content in Portal</h4>\n            <p>This content is rendered in the portal container</p>\n            <button>Button in Portal</button>\n          </div>\n        </tgui-root-renderer>\n        \n        <p style="margin-top: 10px;">Text after RootRenderer component in normal DOM</p>\n      </div>\n      \n      <div style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border-radius: 4px;">\n        <h4>Portal Container (content renders here ⤵)</h4>\n        <div class="tgui-portal-container" style="min-height: 50px; border: 1px dashed #999; padding: 10px; border-radius: 4px;"></div>\n      </div>\n    `\n  })\n}',...Default.parameters?.docs?.source}}},WithMultipleElements.parameters={...WithMultipleElements.parameters,docs:{...WithMultipleElements.parameters?.docs,source:{originalSource:'{\n  name: \'Multiple Elements\',\n  render: args => ({\n    props: args,\n    template: `\n      <div>\n        <p>Demonstration of multiple elements in portal:</p>\n        \n        <tgui-root-renderer>\n          <div style="background-color: #ffebee; padding: 10px; margin-bottom: 10px; border-radius: 4px;">\n            <h4>First Element in Portal</h4>\n            <p>First element rendered in the portal container</p>\n          </div>\n          <div style="background-color: #e8f5e9; padding: 10px; border-radius: 4px;">\n            <h4>Second Element in Portal</h4>\n            <p>Second element rendered in the portal container</p>\n          </div>\n        </tgui-root-renderer>\n        \n        <p style="margin-top: 10px;">Normal content after RootRenderer</p>\n      </div>\n      \n      <div style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border-radius: 4px;">\n        <h4>Portal Container (content renders here ⤵)</h4>\n        <div class="tgui-portal-container" style="min-height: 100px; border: 1px dashed #999; padding: 10px; border-radius: 4px;"></div>\n      </div>\n    `\n  })\n}',...WithMultipleElements.parameters?.docs?.source}}}}}]);